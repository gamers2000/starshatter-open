; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	d:\programming\starshatter\trunk\stars45\sim.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0M@EIEAPHAO@SimObserver?$AA@		; `string'
PUBLIC	??_C@_0DD@OGGMGBIG@d?3?2programming?2starshatter?2trunk@ ; `string'
PUBLIC	??_C@_0BC@CAMCFAKE@Collateral?5Damage?$AA@	; `string'
PUBLIC	??_C@_0DP@BCONEFGH@Name?5?5?5?5?5?5?5?5?5?5?5?5?5?5Kill1?5?5Kill2?5?5@ ; `string'
PUBLIC	??_C@_0BE@MDJAGKKE@?6?6FINAL?5SCORE?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0CF@KFDPBJH@?$CF?916s?5?5?$CF5d?5?5?$CF5d?5?5?$CF5d?5?5?$CF5d?5?5?$CF6d?5?5@ ; `string'
PUBLIC	??_C@_0DO@BFFMOOLB@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?5?5?9?9?9?9?9?5?5?9?9?9?9?9?5?5@ ; `string'
PUBLIC	??_C@_0CH@GLANDEFM@TOTAL?5?5?5?5?5?5?5?5?5?5?5?5?5?$CF5d?5?5?$CF5d?5?5?$CF5d?5@ ; `string'
PUBLIC	??_C@_0CO@IHAFINE@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `string'
PUBLIC	??_C@_0DE@LJMJJDEL@Sim?3?3ExecMission?$CI?$CFs?$CJ?5mission?5is?5@ ; `string'
PUBLIC	??_C@_0CN@BNNLBOCC@Sim?3?3ExecMission?$CI?$CJ?5?9?5No?5mission?5@ ; `string'
PUBLIC	??_C@_07MHJMBJCP@Sim?4cpp?$AA@			; `string'
PUBLIC	??_C@_0BF@INLOODOL@?6Exec?5Mission?3?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0N@CNEAMPHK@Unidentified?$AA@		; `string'
PUBLIC	??_C@_0CJ@IICEGJCO@WARNING?3?5alert?5ship?5?8?$CFs?8?5region?5@ ; `string'
PUBLIC	??_C@_0CJ@POPAIFMC@Inserting?5Ship?$CI?$CFs?$CJ?5into?5Region?$CI?$CF@ ; `string'
PUBLIC	??_C@_0CJ@BABHFBHK@WARNING?3?5CreateShip?$CI?$CFs?$CJ?3?5invalid@ ; `string'
PUBLIC	??_C@_0BL@GPICPCGA@Ship?5?8?$CFs?8?5farcast?5to?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0EB@OCIFAMJD@WARNING?3?5Sim?3?3ActivateRegion?$CI?$CJ?5N@ ; `string'
PUBLIC	??_C@_0BP@EADKDGGP@Ship?5?8?$CFs?8?5achieved?5orbit?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0BP@KPJAHLOO@Ship?5?8?$CFs?8?5broke?5orbit?5to?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0CN@DDGAJNGP@Warning?3?5Unusual?5jump?5request?5fo@ ; `string'
PUBLIC	??_C@_0BL@BLBMKKEF@Ship?5?8?$CFs?8?5quantum?5to?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0M@PMIPMFJL@?1Mods?1Ships?$AA@		; `string'
PUBLIC	??_C@_0BH@IBFIGKOO@?5?5?5?5?$CFs?5Killed?5?$CFs?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0DN@GOGEGHME@SimRegion?5?$CFs?5could?5not?5set?5playe@ ; `string'
PUBLIC	??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@		; `string'
PUBLIC	??_C@_0CL@IBPHLHIK@?5?5?5ship?5?$CFs?5died?5in?5collision?5wit@ ; `string'
PUBLIC	??_C@_05JPAGBMGJ@?$FLKIA?$FN?$AA@		; `string'
PUBLIC	??_C@_08OJEDLGMF@ASTEROID?$AA@			; `string'
PUBLIC	??_C@_06CAKIJOOM@DEBRIS?$AA@			; `string'
PUBLIC	??_C@_0DA@FMJBEPL@Warning?3?5No?5Element?5found?5for?5?8?$CF@ ; `string'
PUBLIC	??_C@_0CG@GLNEEKDA@?5?5?5?5ship?5destroyed?5by?5crash?3?5?$CFs?5@ ; `string'
PUBLIC	??_C@_0BE@MNIJIMLO@?$CF02d?3?$CF02d?3?$CF02d?4?$CF03d?$AA@ ; `string'
PUBLIC	??_C@_0BH@CIBPJMDL@?5?5?5?5?$CFs?5Docked?5with?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0P@GCEINJHL@?$CF02d?3?$CF02d?4?$CF03d?$AA@ ; `string'
PUBLIC	??_R2SimRegion@@8				; SimRegion::`RTTI Base Class Array'
PUBLIC	??_R3SimRegion@@8				; SimRegion::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVSimRegion@@@8				; SimRegion `RTTI Type Descriptor'
PUBLIC	??_7Universe@@6B@				; Universe::`vftable'
PUBLIC	??_R2Sim@@8					; Sim::`RTTI Base Class Array'
PUBLIC	??_R4Resource@@6B@				; Resource::`RTTI Complete Object Locator'
PUBLIC	??_R3Universe@@8				; Universe::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVResource@@@8				; Resource `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@Resource@@8			; Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7Bitmap@@6B@					; Bitmap::`vftable'
PUBLIC	??_R2Resource@@8				; Resource::`RTTI Base Class Array'
PUBLIC	??_R2Bitmap@@8					; Bitmap::`RTTI Base Class Array'
PUBLIC	??_7Resource@@6B@				; Resource::`vftable'
PUBLIC	??_R1A@?0A@EA@Bitmap@@8				; Bitmap::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSim@@@8					; Sim `RTTI Type Descriptor'
PUBLIC	??_7Sim@@6B@					; Sim::`vftable'
PUBLIC	??_7SimRegion@@6B@				; SimRegion::`vftable'
PUBLIC	??_R1A@?0A@EA@Universe@@8			; Universe::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Sim@@8				; Sim::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Bitmap@@6B@				; Bitmap::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUniverse@@@8				; Universe `RTTI Type Descriptor'
PUBLIC	??_R0?AVBitmap@@@8				; Bitmap `RTTI Type Descriptor'
PUBLIC	??_R4SimRegion@@6B@				; SimRegion::`RTTI Complete Object Locator'
PUBLIC	??_R3Sim@@8					; Sim::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3Bitmap@@8					; Bitmap::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4Sim@@6B@					; Sim::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@SimRegion@@8			; SimRegion::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2Universe@@8				; Universe::`RTTI Base Class Array'
PUBLIC	??_R3Resource@@8				; Resource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4Universe@@6B@				; Universe::`RTTI Complete Object Locator'
PUBLIC	?sim@Sim@@1PAV1@A				; Sim::sim
EXTRN	?SkipGameTime@Game@@SAXN@Z:PROC			; Game::SkipGameTime
EXTRN	?GetVideo@Game@@SAPAVVideo@@XZ:PROC		; Game::GetVideo
EXTRN	?SetListener@Sound@@SAXABVCamera@@ABUVec3@@@Z:PROC ; Sound::SetListener
EXTRN	?PixSize@Bitmap@@UBEHXZ:PROC			; Bitmap::PixSize
EXTRN	?GetSurface@Bitmap@@UAEPAEXZ:PROC		; Bitmap::GetSurface
EXTRN	?Pitch@Bitmap@@UBEHXZ:PROC			; Bitmap::Pitch
EXTRN	?SemiElasticCollision@Physical@@SAXAAV1@0@Z:PROC ; Physical::SemiElasticCollision
EXTRN	??1Resource@@UAE@XZ:PROC			; Resource::~Resource
EXTRN	?max_frame_length@Game@@1NA:QWORD		; Game::max_frame_length
?sim@Sim@@1PAV1@A DD 01H DUP (?)			; Sim::sim
_BSS	ENDS
;	COMDAT ??_R4Universe@@6B@
rdata$r	SEGMENT
??_R4Universe@@6B@ DD 00H				; Universe::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUniverse@@@8
	DD	FLAT:??_R3Universe@@8
rdata$r	ENDS
;	COMDAT ??_R3Resource@@8
rdata$r	SEGMENT
??_R3Resource@@8 DD 00H					; Resource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Resource@@8
rdata$r	ENDS
;	COMDAT ??_R2Universe@@8
rdata$r	SEGMENT
??_R2Universe@@8 DD FLAT:??_R1A@?0A@EA@Universe@@8	; Universe::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SimRegion@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimRegion@@8 DD FLAT:??_R0?AVSimRegion@@@8 ; SimRegion::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimRegion@@8
rdata$r	ENDS
;	COMDAT ??_R4Sim@@6B@
rdata$r	SEGMENT
??_R4Sim@@6B@ DD 00H					; Sim::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSim@@@8
	DD	FLAT:??_R3Sim@@8
rdata$r	ENDS
;	COMDAT ??_R3Bitmap@@8
rdata$r	SEGMENT
??_R3Bitmap@@8 DD 00H					; Bitmap::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Bitmap@@8
rdata$r	ENDS
;	COMDAT ??_R3Sim@@8
rdata$r	SEGMENT
??_R3Sim@@8 DD	00H					; Sim::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Sim@@8
rdata$r	ENDS
;	COMDAT ??_R4SimRegion@@6B@
rdata$r	SEGMENT
??_R4SimRegion@@6B@ DD 00H				; SimRegion::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSimRegion@@@8
	DD	FLAT:??_R3SimRegion@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBitmap@@@8
data$r	SEGMENT
??_R0?AVBitmap@@@8 DD FLAT:??_7type_info@@6B@		; Bitmap `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBitmap@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVUniverse@@@8
data$r	SEGMENT
??_R0?AVUniverse@@@8 DD FLAT:??_7type_info@@6B@		; Universe `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUniverse@@', 00H
data$r	ENDS
;	COMDAT ??_R4Bitmap@@6B@
rdata$r	SEGMENT
??_R4Bitmap@@6B@ DD 00H					; Bitmap::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBitmap@@@8
	DD	FLAT:??_R3Bitmap@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Sim@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Sim@@8 DD FLAT:??_R0?AVSim@@@8		; Sim::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Sim@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Universe@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Universe@@8 DD FLAT:??_R0?AVUniverse@@@8	; Universe::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Universe@@8
rdata$r	ENDS
;	COMDAT ??_7SimRegion@@6B@
CONST	SEGMENT
??_7SimRegion@@6B@ DD FLAT:??_R4SimRegion@@6B@		; SimRegion::`vftable'
	DD	FLAT:??_ESimRegion@@UAEPAXI@Z
	DD	FLAT:?Activate@SimRegion@@UAEXXZ
	DD	FLAT:?Deactivate@SimRegion@@UAEXXZ
	DD	FLAT:?ExecFrame@SimRegion@@UAEXN@Z
	DD	FLAT:?FindShipByObjID@SimRegion@@UAEPAVShip@@K@Z
	DD	FLAT:?FindShotByObjID@SimRegion@@UAEPAVShot@@K@Z
	DD	FLAT:?InsertObject@SimRegion@@UAEXPAVAsteroid@@@Z
	DD	FLAT:?InsertObject@SimRegion@@UAEXPAVDebris@@@Z
	DD	FLAT:?InsertObject@SimRegion@@UAEXPAVExplosion@@@Z
	DD	FLAT:?InsertObject@SimRegion@@UAEXPAVShot@@@Z
	DD	FLAT:?InsertObject@SimRegion@@UAEXPAVShip@@@Z
CONST	ENDS
;	COMDAT ??_7Sim@@6B@
CONST	SEGMENT
??_7Sim@@6B@ DD	FLAT:??_R4Sim@@6B@			; Sim::`vftable'
	DD	FLAT:??_ESim@@UAEPAXI@Z
	DD	FLAT:?ExecFrame@Sim@@UAEXN@Z
	DD	FLAT:?FindShipByObjID@Sim@@UAEPAVShip@@K@Z
	DD	FLAT:?FindShotByObjID@Sim@@UAEPAVShot@@K@Z
CONST	ENDS
;	COMDAT ??_R0?AVSim@@@8
data$r	SEGMENT
??_R0?AVSim@@@8 DD FLAT:??_7type_info@@6B@		; Sim `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSim@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Bitmap@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Bitmap@@8 DD FLAT:??_R0?AVBitmap@@@8	; Bitmap::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Bitmap@@8
rdata$r	ENDS
;	COMDAT ??_7Resource@@6B@
CONST	SEGMENT
??_7Resource@@6B@ DD FLAT:??_R4Resource@@6B@		; Resource::`vftable'
	DD	FLAT:??_EResource@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R2Bitmap@@8
rdata$r	SEGMENT
??_R2Bitmap@@8 DD FLAT:??_R1A@?0A@EA@Bitmap@@8		; Bitmap::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@@8
rdata$r	ENDS
;	COMDAT ??_R2Resource@@8
rdata$r	SEGMENT
??_R2Resource@@8 DD FLAT:??_R1A@?0A@EA@Resource@@8	; Resource::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_7Bitmap@@6B@
CONST	SEGMENT
??_7Bitmap@@6B@ DD FLAT:??_R4Bitmap@@6B@		; Bitmap::`vftable'
	DD	FLAT:??_EBitmap@@UAEPAXI@Z
	DD	FLAT:?GetSurface@Bitmap@@UAEPAEXZ
	DD	FLAT:?Pitch@Bitmap@@UBEHXZ
	DD	FLAT:?PixSize@Bitmap@@UBEHXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@Resource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Resource@@8 DD FLAT:??_R0?AVResource@@@8	; Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Resource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVResource@@@8
data$r	SEGMENT
??_R0?AVResource@@@8 DD FLAT:??_7type_info@@6B@		; Resource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVResource@@', 00H
data$r	ENDS
;	COMDAT ??_R3Universe@@8
rdata$r	SEGMENT
??_R3Universe@@8 DD 00H					; Universe::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Universe@@8
rdata$r	ENDS
;	COMDAT ??_R4Resource@@6B@
rdata$r	SEGMENT
??_R4Resource@@6B@ DD 00H				; Resource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVResource@@@8
	DD	FLAT:??_R3Resource@@8
rdata$r	ENDS
;	COMDAT ??_R2Sim@@8
rdata$r	SEGMENT
??_R2Sim@@8 DD	FLAT:??_R1A@?0A@EA@Sim@@8		; Sim::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Universe@@8
rdata$r	ENDS
;	COMDAT ??_7Universe@@6B@
CONST	SEGMENT
??_7Universe@@6B@ DD FLAT:??_R4Universe@@6B@		; Universe::`vftable'
	DD	FLAT:??_EUniverse@@UAEPAXI@Z
	DD	FLAT:?ExecFrame@Universe@@UAEXN@Z
CONST	ENDS
;	COMDAT ??_R0?AVSimRegion@@@8
data$r	SEGMENT
??_R0?AVSimRegion@@@8 DD FLAT:??_7type_info@@6B@	; SimRegion `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimRegion@@', 00H
data$r	ENDS
;	COMDAT ??_R3SimRegion@@8
rdata$r	SEGMENT
??_R3SimRegion@@8 DD 00H				; SimRegion::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SimRegion@@8
rdata$r	ENDS
;	COMDAT ??_R2SimRegion@@8
rdata$r	SEGMENT
??_R2SimRegion@@8 DD FLAT:??_R1A@?0A@EA@SimRegion@@8	; SimRegion::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_C@_0P@GCEINJHL@?$CF02d?3?$CF02d?4?$CF03d?$AA@
CONST	SEGMENT
??_C@_0P@GCEINJHL@?$CF02d?3?$CF02d?4?$CF03d?$AA@ DB '%02d:%02d.%03d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CIBPJMDL@?5?5?5?5?$CFs?5Docked?5with?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BH@CIBPJMDL@?5?5?5?5?$CFs?5Docked?5with?5?$CFs?6?$AA@ DB '    %s D'
	DB	'ocked with %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MNIJIMLO@?$CF02d?3?$CF02d?3?$CF02d?4?$CF03d?$AA@
CONST	SEGMENT
??_C@_0BE@MNIJIMLO@?$CF02d?3?$CF02d?3?$CF02d?4?$CF03d?$AA@ DB '%02d:%02d:'
	DB	'%02d.%03d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GLNEEKDA@?5?5?5?5ship?5destroyed?5by?5crash?3?5?$CFs?5@
CONST	SEGMENT
??_C@_0CG@GLNEEKDA@?5?5?5?5ship?5destroyed?5by?5crash?3?5?$CFs?5@ DB '   '
	DB	' ship destroyed by crash: %s (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@FMJBEPL@Warning?3?5No?5Element?5found?5for?5?8?$CF@
CONST	SEGMENT
??_C@_0DA@FMJBEPL@Warning?3?5No?5Element?5found?5for?5?8?$CF@ DB 'Warning'
	DB	': No Element found for ''%s'' on respawn.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CAKIJOOM@DEBRIS?$AA@
CONST	SEGMENT
??_C@_06CAKIJOOM@DEBRIS?$AA@ DB 'DEBRIS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OJEDLGMF@ASTEROID?$AA@
CONST	SEGMENT
??_C@_08OJEDLGMF@ASTEROID?$AA@ DB 'ASTEROID', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JPAGBMGJ@?$FLKIA?$FN?$AA@
CONST	SEGMENT
??_C@_05JPAGBMGJ@?$FLKIA?$FN?$AA@ DB '[KIA]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IBPHLHIK@?5?5?5ship?5?$CFs?5died?5in?5collision?5wit@
CONST	SEGMENT
??_C@_0CL@IBPHLHIK@?5?5?5ship?5?$CFs?5died?5in?5collision?5wit@ DB '   sh'
	DB	'ip %s died in collision with %s (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@
CONST	SEGMENT
??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@ DB '(null)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@GOGEGHME@SimRegion?5?$CFs?5could?5not?5set?5playe@
CONST	SEGMENT
??_C@_0DN@GOGEGHME@SimRegion?5?$CFs?5could?5not?5set?5playe@ DB 'SimRegio'
	DB	'n %s could not set player ship ''%s'' - not in region', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IBFIGKOO@?5?5?5?5?$CFs?5Killed?5?$CFs?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BH@IBFIGKOO@?5?5?5?5?$CFs?5Killed?5?$CFs?5?$CI?$CFs?$CJ?6?$AA@ DB ' '
	DB	'   %s Killed %s (%s)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PMIPMFJL@?1Mods?1Ships?$AA@
CONST	SEGMENT
??_C@_0M@PMIPMFJL@?1Mods?1Ships?$AA@ DB '/Mods/Ships', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BLBMKKEF@Ship?5?8?$CFs?8?5quantum?5to?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BL@BLBMKKEF@Ship?5?8?$CFs?8?5quantum?5to?5?8?$CFs?8?6?$AA@ DB 'Shi'
	DB	'p ''%s'' quantum to ''%s''', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DDGAJNGP@Warning?3?5Unusual?5jump?5request?5fo@
CONST	SEGMENT
??_C@_0CN@DDGAJNGP@Warning?3?5Unusual?5jump?5request?5fo@ DB 'Warning: Un'
	DB	'usual jump request for ship ''%s''', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KPJAHLOO@Ship?5?8?$CFs?8?5broke?5orbit?5to?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BP@KPJAHLOO@Ship?5?8?$CFs?8?5broke?5orbit?5to?5?8?$CFs?8?6?$AA@ DB 'S'
	DB	'hip ''%s'' broke orbit to ''%s''', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EADKDGGP@Ship?5?8?$CFs?8?5achieved?5orbit?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BP@EADKDGGP@Ship?5?8?$CFs?8?5achieved?5orbit?5?8?$CFs?8?6?$AA@ DB 'S'
	DB	'hip ''%s'' achieved orbit ''%s''', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@OCIFAMJD@WARNING?3?5Sim?3?3ActivateRegion?$CI?$CJ?5N@
CONST	SEGMENT
??_C@_0EB@OCIFAMJD@WARNING?3?5Sim?3?3ActivateRegion?$CI?$CJ?5N@ DB 'WARNI'
	DB	'NG: Sim::ActivateRegion() No star system found for rgn ''%s'''
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GPICPCGA@Ship?5?8?$CFs?8?5farcast?5to?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BL@GPICPCGA@Ship?5?8?$CFs?8?5farcast?5to?5?8?$CFs?8?6?$AA@ DB 'Shi'
	DB	'p ''%s'' farcast to ''%s''', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BABHFBHK@WARNING?3?5CreateShip?$CI?$CFs?$CJ?3?5invalid@
CONST	SEGMENT
??_C@_0CJ@BABHFBHK@WARNING?3?5CreateShip?$CI?$CFs?$CJ?3?5invalid@ DB 'WAR'
	DB	'NING: CreateShip(%s): invalid design', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@POPAIFMC@Inserting?5Ship?$CI?$CFs?$CJ?5into?5Region?$CI?$CF@
CONST	SEGMENT
??_C@_0CJ@POPAIFMC@Inserting?5Ship?$CI?$CFs?$CJ?5into?5Region?$CI?$CF@ DB 'I'
	DB	'nserting Ship(%s) into Region(%s) (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IICEGJCO@WARNING?3?5alert?5ship?5?8?$CFs?8?5region?5@
CONST	SEGMENT
??_C@_0CJ@IICEGJCO@WARNING?3?5alert?5ship?5?8?$CFs?8?5region?5@ DB 'WARNI'
	DB	'NG: alert ship ''%s'' region is null', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CNEAMPHK@Unidentified?$AA@
CONST	SEGMENT
??_C@_0N@CNEAMPHK@Unidentified?$AA@ DB 'Unidentified', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@INLOODOL@?6Exec?5Mission?3?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BF@INLOODOL@?6Exec?5Mission?3?5?8?$CFs?8?6?$AA@ DB 0aH, 'Exec Miss'
	DB	'ion: ''%s''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
CONST	SEGMENT
??_C@_07MHJMBJCP@Sim?4cpp?$AA@ DB 'Sim.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BNNLBOCC@Sim?3?3ExecMission?$CI?$CJ?5?9?5No?5mission?5@
CONST	SEGMENT
??_C@_0CN@BNNLBOCC@Sim?3?3ExecMission?$CI?$CJ?5?9?5No?5mission?5@ DB 'Sim'
	DB	'::ExecMission() - No mission to execute.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@LJMJJDEL@Sim?3?3ExecMission?$CI?$CFs?$CJ?5mission?5is?5@
CONST	SEGMENT
??_C@_0DE@LJMJJDEL@Sim?3?3ExecMission?$CI?$CFs?$CJ?5mission?5is?5@ DB 'Si'
	DB	'm::ExecMission(%s) mission is already executing.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IHAFINE@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
CONST	SEGMENT
??_C@_0CO@IHAFINE@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ DB '-'
	DB	'-------------------------------------------', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GLANDEFM@TOTAL?5?5?5?5?5?5?5?5?5?5?5?5?5?$CF5d?5?5?$CF5d?5?5?$CF5d?5@
CONST	SEGMENT
??_C@_0CH@GLANDEFM@TOTAL?5?5?5?5?5?5?5?5?5?5?5?5?5?$CF5d?5?5?$CF5d?5?5?$CF5d?5@ DB 'T'
	DB	'OTAL             %5d  %5d  %5d  %5d', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@BFFMOOLB@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?5?5?9?9?9?9?9?5?5?9?9?9?9?9?5?5@
CONST	SEGMENT
??_C@_0DO@BFFMOOLB@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?5?5?9?9?9?9?9?5?5?9?9?9?9?9?5?5@ DB '-'
	DB	'---------------  -----  -----  -----  -----  ------  ------', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KFDPBJH@?$CF?916s?5?5?$CF5d?5?5?$CF5d?5?5?$CF5d?5?5?$CF5d?5?5?$CF6d?5?5@
CONST	SEGMENT
??_C@_0CF@KFDPBJH@?$CF?916s?5?5?$CF5d?5?5?$CF5d?5?5?$CF5d?5?5?$CF5d?5?5?$CF6d?5?5@ DB '%'
	DB	'-16s  %5d  %5d  %5d  %5d  %6d  %6d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MDJAGKKE@?6?6FINAL?5SCORE?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BE@MDJAGKKE@?6?6FINAL?5SCORE?5?8?$CFs?8?6?$AA@ DB 0aH, 0aH, 'FINAL'
	DB	' SCORE ''%s''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@BCONEFGH@Name?5?5?5?5?5?5?5?5?5?5?5?5?5?5Kill1?5?5Kill2?5?5@
CONST	SEGMENT
??_C@_0DP@BCONEFGH@Name?5?5?5?5?5?5?5?5?5?5?5?5?5?5Kill1?5?5Kill2?5?5@ DB 'N'
	DB	'ame              Kill1  Kill2  Died   Colls  Points  Cmd Pts', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CAMCFAKE@Collateral?5Damage?$AA@
CONST	SEGMENT
??_C@_0BC@CAMCFAKE@Collateral?5Damage?$AA@ DB 'Collateral Damage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@OGGMGBIG@d?3?2programming?2starshatter?2trunk@
CONST	SEGMENT
??_C@_0DD@OGGMGBIG@d?3?2programming?2starshatter?2trunk@ DB 'd:\programmi'
	DB	'ng\starshatter\trunk\stars45\Mission.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EIEAPHAO@SimObserver?$AA@
CONST	SEGMENT
??_C@_0M@EIEAPHAO@SimObserver?$AA@ DB 'SimObserver', 00H ; `string'
	ORG $+6784
?first_frame@@3_NA DB 01H				; first_frame
PUBLIC	?check@?$List@VExplosion@@@@ABE_NAAH@Z		; List<Explosion>::check
PUBLIC	?check@?$List@VAsteroid@@@@ABE_NAAH@Z		; List<Asteroid>::check
PUBLIC	?check@?$List@VDebris@@@@ABE_NAAH@Z		; List<Debris>::check
PUBLIC	?check@?$List@VDrone@@@@ABE_NAAH@Z		; List<Drone>::check
PUBLIC	?index@?$List@VModel@@@@QBEHPBVModel@@@Z	; List<Model>::index
PUBLIC	?resize@?$List@VExplosion@@@@AAEXH@Z		; List<Explosion>::resize
PUBLIC	?removeIndex@?$List@VExplosion@@@@QAEPAVExplosion@@H@Z ; List<Explosion>::removeIndex
PUBLIC	?resize@?$List@VAsteroid@@@@AAEXH@Z		; List<Asteroid>::resize
PUBLIC	?removeIndex@?$List@VAsteroid@@@@QAEPAVAsteroid@@H@Z ; List<Asteroid>::removeIndex
PUBLIC	?resize@?$List@VDebris@@@@AAEXH@Z		; List<Debris>::resize
PUBLIC	?removeIndex@?$List@VDebris@@@@QAEPAVDebris@@H@Z ; List<Debris>::removeIndex
PUBLIC	?resize@?$List@VDrone@@@@AAEXH@Z		; List<Drone>::resize
PUBLIC	?removeIndex@?$List@VDrone@@@@QAEPAVDrone@@H@Z	; List<Drone>::removeIndex
PUBLIC	?resize@?$List@VSimSplash@@@@AAEXH@Z		; List<SimSplash>::resize
PUBLIC	?resize@?$List@VSimHyper@@@@AAEXH@Z		; List<SimHyper>::resize
PUBLIC	?check@?$List@VElement@@@@ABE_NAAH@Z		; List<Element>::check
PUBLIC	?removeIndex@?$List@VElement@@@@QAEPAVElement@@H@Z ; List<Element>::removeIndex
PUBLIC	??1SimSplash@@QAE@XZ				; SimSplash::~SimSplash
PUBLIC	??_GSimSplash@@QAEPAXI@Z			; SimSplash::`scalar deleting destructor'
PUBLIC	?value@?$ListIter@VModel@@@@QAEPAVModel@@XZ	; ListIter<Model>::value
PUBLIC	?next@?$ListIter@VModel@@@@QAEPAVModel@@XZ	; ListIter<Model>::next
PUBLIC	?contains@?$List@VModel@@@@QBE_NPBVModel@@@Z	; List<Model>::contains
PUBLIC	?removeItem@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::removeItem
PUBLIC	?removeItem@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::removeItem
PUBLIC	?value@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::value
PUBLIC	?next@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::next
PUBLIC	?removeItem@?$ListIter@VShot@@@@QAEPAVShot@@XZ	; ListIter<Shot>::removeItem
PUBLIC	?destroy@?$List@VExplosion@@@@QAEXXZ		; List<Explosion>::destroy
PUBLIC	?remove@?$List@VExplosion@@@@QAEPAVExplosion@@PBV2@@Z ; List<Explosion>::remove
PUBLIC	?append@?$List@VExplosion@@@@QAEXPBVExplosion@@@Z ; List<Explosion>::append
PUBLIC	?destroy@?$List@VAsteroid@@@@QAEXXZ		; List<Asteroid>::destroy
PUBLIC	?remove@?$List@VAsteroid@@@@QAEPAVAsteroid@@PBV2@@Z ; List<Asteroid>::remove
PUBLIC	?append@?$List@VAsteroid@@@@QAEXPBVAsteroid@@@Z	; List<Asteroid>::append
PUBLIC	?destroy@?$List@VDebris@@@@QAEXXZ		; List<Debris>::destroy
PUBLIC	?remove@?$List@VDebris@@@@QAEPAVDebris@@PBV2@@Z	; List<Debris>::remove
PUBLIC	?append@?$List@VDebris@@@@QAEXPBVDebris@@@Z	; List<Debris>::append
PUBLIC	?remove@?$List@VDrone@@@@QAEPAVDrone@@PBV2@@Z	; List<Drone>::remove
PUBLIC	?append@?$List@VDrone@@@@QAEXPBVDrone@@@Z	; List<Drone>::append
PUBLIC	?destroy@?$List@VShot@@@@QAEXXZ			; List<Shot>::destroy
PUBLIC	?destroy@?$List@VShip@@@@QAEXXZ			; List<Ship>::destroy
PUBLIC	?removeItem@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::removeItem
PUBLIC	?value@?$ListIter@VSimSplash@@@@QAEPAVSimSplash@@XZ ; ListIter<SimSplash>::value
PUBLIC	?next@?$ListIter@VSimSplash@@@@QAEPAVSimSplash@@XZ ; ListIter<SimSplash>::next
PUBLIC	?destroy@?$List@VSimSplash@@@@QAEXXZ		; List<SimSplash>::destroy
PUBLIC	?append@?$List@VSimSplash@@@@QAEXPBVSimSplash@@@Z ; List<SimSplash>::append
PUBLIC	?value@?$ListIter@VSimHyper@@@@QAEPAVSimHyper@@XZ ; ListIter<SimHyper>::value
PUBLIC	?next@?$ListIter@VSimHyper@@@@QAEPAVSimHyper@@XZ ; ListIter<SimHyper>::next
PUBLIC	?destroy@?$List@VSimHyper@@@@QAEXXZ		; List<SimHyper>::destroy
PUBLIC	?append@?$List@VSimHyper@@@@QAEXPBVSimHyper@@@Z	; List<SimHyper>::append
PUBLIC	?destroy@?$List@VElement@@@@QAEXXZ		; List<Element>::destroy
PUBLIC	?remove@?$List@VElement@@@@QAEPAVElement@@PBV2@@Z ; List<Element>::remove
PUBLIC	?at@?$List@VElement@@@@QAEAAPAVElement@@H@Z	; List<Element>::at
PUBLIC	??A?$List@VElement@@@@QAEAAPAVElement@@H@Z	; List<Element>::operator[]
PUBLIC	?removeItem@?$ListIter@VShip@@@@QAEPAVShip@@XZ	; ListIter<Ship>::removeItem
PUBLIC	?destroy@?$List@VSimRegion@@@@QAEXXZ		; List<SimRegion>::destroy
PUBLIC	?clear@?$List@VSimRegion@@@@QAEXXZ		; List<SimRegion>::clear
PUBLIC	?removeIndex@?$List@VSimRegion@@@@QAEPAVSimRegion@@H@Z ; List<SimRegion>::removeIndex
PUBLIC	??A?$List@VSimRegion@@@@QAEAAPAVSimRegion@@H@Z	; List<SimRegion>::operator[]
PUBLIC	?isEmpty@?$List@VSimRegion@@@@QBE_NXZ		; List<SimRegion>::isEmpty
PUBLIC	??C?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ	; ListIter<SimRegion>::operator->
PUBLIC	??0?$List@VSimHyper@@@@QAE@XZ			; List<SimHyper>::List<SimHyper>
PUBLIC	??1?$List@VSimHyper@@@@QAE@XZ			; List<SimHyper>::~List<SimHyper>
PUBLIC	?size@?$List@VSimHyper@@@@QBEHXZ		; List<SimHyper>::size
PUBLIC	??0?$ListIter@VSimHyper@@@@QAE@AAV?$List@VSimHyper@@@@@Z ; ListIter<SimHyper>::ListIter<SimHyper>
PUBLIC	??E?$ListIter@VSimHyper@@@@QAEHXZ		; ListIter<SimHyper>::operator++
PUBLIC	??0?$List@VSimSplash@@@@QAE@XZ			; List<SimSplash>::List<SimSplash>
PUBLIC	??1?$List@VSimSplash@@@@QAE@XZ			; List<SimSplash>::~List<SimSplash>
PUBLIC	?size@?$List@VSimSplash@@@@QBEHXZ		; List<SimSplash>::size
PUBLIC	??0?$ListIter@VSimSplash@@@@QAE@AAV?$List@VSimSplash@@@@@Z ; ListIter<SimSplash>::ListIter<SimSplash>
PUBLIC	??E?$ListIter@VSimSplash@@@@QAEHXZ		; ListIter<SimSplash>::operator++
PUBLIC	??0?$List@VDrone@@@@QAE@XZ			; List<Drone>::List<Drone>
PUBLIC	??1?$List@VDrone@@@@QAE@XZ			; List<Drone>::~List<Drone>
PUBLIC	??0?$List@VDebris@@@@QAE@XZ			; List<Debris>::List<Debris>
PUBLIC	??1?$List@VDebris@@@@QAE@XZ			; List<Debris>::~List<Debris>
PUBLIC	?size@?$List@VDebris@@@@QBEHXZ			; List<Debris>::size
PUBLIC	??0?$List@VAsteroid@@@@QAE@XZ			; List<Asteroid>::List<Asteroid>
PUBLIC	??1?$List@VAsteroid@@@@QAE@XZ			; List<Asteroid>::~List<Asteroid>
PUBLIC	??0?$List@VExplosion@@@@QAE@XZ			; List<Explosion>::List<Explosion>
PUBLIC	??1?$List@VExplosion@@@@QAE@XZ			; List<Explosion>::~List<Explosion>
PUBLIC	??0?$ListIter@VExplosion@@@@QAE@AAV?$List@VExplosion@@@@@Z ; ListIter<Explosion>::ListIter<Explosion>
PUBLIC	??E?$ListIter@VExplosion@@@@QAEHXZ		; ListIter<Explosion>::operator++
PUBLIC	??C?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ	; ListIter<Explosion>::operator->
PUBLIC	??C?$ListIter@VDebris@@@@QAEPAVDebris@@XZ	; ListIter<Debris>::operator->
PUBLIC	??C?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ	; ListIter<Asteroid>::operator->
PUBLIC	??D?$ListIter@VText@@@@QAEAAVText@@XZ		; ListIter<Text>::operator*
PUBLIC	??0?$ListIter@VModel@@@@QAE@AAV?$List@VModel@@@@@Z ; ListIter<Model>::ListIter<Model>
PUBLIC	??E?$ListIter@VModel@@@@QAEHXZ			; ListIter<Model>::operator++
PUBLIC	?CommitMission@SimRegion@@IAEXXZ		; SimRegion::CommitMission
PUBLIC	?ResolveTimeSkip@SimRegion@@QAEXN@Z		; SimRegion::ResolveTimeSkip
PUBLIC	?CanTimeSkip@SimRegion@@QBE_NXZ			; SimRegion::CanTimeSkip
PUBLIC	?UpdateTracks@SimRegion@@IAEXN@Z		; SimRegion::UpdateTracks
PUBLIC	?TranslateObject@SimRegion@@IAEXPAVSimObject@@@Z ; SimRegion::TranslateObject
PUBLIC	?InsertObject@SimRegion@@UAEXPAVAsteroid@@@Z	; SimRegion::InsertObject
PUBLIC	?InsertObject@SimRegion@@UAEXPAVDebris@@@Z	; SimRegion::InsertObject
PUBLIC	?InsertObject@SimRegion@@UAEXPAVExplosion@@@Z	; SimRegion::InsertObject
PUBLIC	?InsertObject@SimRegion@@UAEXPAVShot@@@Z	; SimRegion::InsertObject
PUBLIC	?InsertObject@SimRegion@@UAEXPAVShip@@@Z	; SimRegion::InsertObject
PUBLIC	?DockShips@SimRegion@@IAEXXZ			; SimRegion::DockShips
PUBLIC	?FindShotByObjID@SimRegion@@UAEPAVShot@@K@Z	; SimRegion::FindShotByObjID
PUBLIC	?FindShipByObjID@SimRegion@@UAEPAVShip@@K@Z	; SimRegion::FindShipByObjID
PUBLIC	?FindShip@SimRegion@@QAEPAVShip@@PBD@Z		; SimRegion::FindShip
PUBLIC	?NetDockShip@SimRegion@@IAEXPAVShip@@0PAVFlightDeck@@@Z ; SimRegion::NetDockShip
PUBLIC	?DestroyShip@SimRegion@@IAEXPAVShip@@@Z		; SimRegion::DestroyShip
PUBLIC	?DestroyShips@SimRegion@@IAEXXZ			; SimRegion::DestroyShips
PUBLIC	?CrashShips@SimRegion@@IAEXXZ			; SimRegion::CrashShips
PUBLIC	?CollideShips@SimRegion@@IAEXXZ			; SimRegion::CollideShips
PUBLIC	?DamageShips@SimRegion@@IAEXXZ			; SimRegion::DamageShips
PUBLIC	?UpdateExplosions@SimRegion@@IAEXN@Z		; SimRegion::UpdateExplosions
PUBLIC	?UpdateShots@SimRegion@@IAEXN@Z			; SimRegion::UpdateShots
PUBLIC	?UpdateShips@SimRegion@@IAEXN@Z			; SimRegion::UpdateShips
PUBLIC	?UpdateSky@SimRegion@@IAEXNABUPoint@@@Z		; SimRegion::UpdateSky
PUBLIC	?ShowGrid@SimRegion@@QAEXH@Z			; SimRegion::ShowGrid
PUBLIC	?ExecFrame@SimRegion@@UAEXN@Z			; SimRegion::ExecFrame
PUBLIC	?Deactivate@SimRegion@@UAEXXZ			; SimRegion::Deactivate
PUBLIC	?Activate@SimRegion@@UAEXXZ			; SimRegion::Activate
PUBLIC	?AddSelection@SimRegion@@QAEXPAVShip@@@Z	; SimRegion::AddSelection
PUBLIC	?ClearSelection@SimRegion@@QAEXXZ		; SimRegion::ClearSelection
PUBLIC	?SetSelection@SimRegion@@QAEXPAVShip@@@Z	; SimRegion::SetSelection
PUBLIC	?GetSelection@SimRegion@@QAE?AV?$ListIter@VShip@@@@XZ ; SimRegion::GetSelection
PUBLIC	?IsSelected@SimRegion@@QAE_NPAVShip@@@Z		; SimRegion::IsSelected
PUBLIC	?NextView@SimRegion@@QAEXXZ			; SimRegion::NextView
PUBLIC	?AttachPlayerShip@SimRegion@@IAEXH@Z		; SimRegion::AttachPlayerShip
PUBLIC	?SetPlayerShip@SimRegion@@QAEXPAVShip@@@Z	; SimRegion::SetPlayerShip
PUBLIC	??1SimRegion@@UAE@XZ				; SimRegion::~SimRegion
PUBLIC	??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z	; SimRegion::SimRegion
PUBLIC	??_GSimRegion@@UAEPAXI@Z			; SimRegion::`scalar deleting destructor'
PUBLIC	??0SimRegion@@QAE@PAVSim@@PBDH@Z		; SimRegion::SimRegion
PUBLIC	?FindSquadron@Sim@@IAEPAVHangar@@PBDAAH@Z	; Sim::FindSquadron
PUBLIC	?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z ; Sim::CreateMissionElement
PUBLIC	?SkipCutscene@Sim@@QAEXXZ			; Sim::SkipCutscene
PUBLIC	?ResolveSplashList@Sim@@QAEXXZ			; Sim::ResolveSplashList
PUBLIC	?ResolveHyperList@Sim@@QAEXXZ			; Sim::ResolveHyperList
PUBLIC	?ExecEvents@Sim@@QAEXN@Z			; Sim::ExecEvents
PUBLIC	?ExecFrame@Sim@@UAEXN@Z				; Sim::ExecFrame
PUBLIC	?FindNearestRegion@Sim@@QAEPAVSimRegion@@PAVSimObject@@H@Z ; Sim::FindNearestRegion
PUBLIC	?FindRegion@Sim@@QAEPAVSimRegion@@PAVOrbitalRegion@@@Z ; Sim::FindRegion
PUBLIC	?SetTestMode@Sim@@QAEX_N@Z			; Sim::SetTestMode
PUBLIC	?SetSelection@Sim@@QAEXPAVShip@@@Z		; Sim::SetSelection
PUBLIC	?AddSelection@Sim@@QAEXPAVShip@@@Z		; Sim::AddSelection
PUBLIC	?ClearSelection@Sim@@QAEXXZ			; Sim::ClearSelection
PUBLIC	?GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ	; Sim::GetSelection
PUBLIC	?IsSelected@Sim@@QAE_NPAVShip@@@Z		; Sim::IsSelected
PUBLIC	?NextView@Sim@@QAEXXZ				; Sim::NextView
PUBLIC	?GridShown@Sim@@QBE_NXZ				; Sim::GridShown
PUBLIC	?CreateSplashDamage@Sim@@QAEXPAVShot@@@Z	; Sim::CreateSplashDamage
PUBLIC	?CreateAsteroid@Sim@@QAEPAVAsteroid@@ABUPoint@@HNPAVSimRegion@@@Z ; Sim::CreateAsteroid
PUBLIC	?FindShotByObjID@Sim@@UAEPAVShot@@K@Z		; Sim::FindShotByObjID
PUBLIC	?FindShipByObjID@Sim@@UAEPAVShip@@K@Z		; Sim::FindShipByObjID
PUBLIC	??_GResource@@UAEPAXI@Z				; Resource::`scalar deleting destructor'
PUBLIC	??0Resource@@QAE@ABV0@@Z			; Resource::Resource
PUBLIC	??_GBitmap@@UAEPAXI@Z				; Bitmap::`scalar deleting destructor'
PUBLIC	??0Bitmap@@QAE@ABV0@@Z				; Bitmap::Bitmap
PUBLIC	??0MissionEvent@@QAE@ABV0@@Z			; MissionEvent::MissionEvent
PUBLIC	?CopyEvents@Sim@@IAEXXZ				; Sim::CopyEvents
PUBLIC	?CreateElements@Sim@@IAEXXZ			; Sim::CreateElements
PUBLIC	?BuildLinks@Sim@@IAEXXZ				; Sim::BuildLinks
PUBLIC	?CreateRegions@Sim@@IAEXXZ			; Sim::CreateRegions
PUBLIC	?ExecMission@Sim@@QAEXXZ			; Sim::ExecMission
PUBLIC	?LoadMission@Sim@@QAEXPAVMission@@_N@Z		; Sim::LoadMission
PUBLIC	?IsComplete@Sim@@QBE_NXZ			; Sim::IsComplete
PUBLIC	??1Sim@@UAE@XZ					; Sim::~Sim
PUBLIC	??_GSim@@UAEPAXI@Z				; Sim::`scalar deleting destructor'
PUBLIC	??0Sim@@QAE@PAVMotionController@@@Z		; Sim::Sim
PUBLIC	??0SimSplash@@QAE@PAVSimRegion@@ABUPoint@@NN@Z	; SimSplash::SimSplash
PUBLIC	??0SimHyper@@QAE@PAVShip@@PAVSimRegion@@ABUPoint@@H_N00@Z ; SimHyper::SimHyper
PUBLIC	?SetRegion@CombatGroup@@QAEXVText@@@Z		; CombatGroup::SetRegion
PUBLIC	?IsActive@MissionEvent@@QBE_NXZ			; MissionEvent::IsActive
PUBLIC	?IsPending@MissionEvent@@QBE_NXZ		; MissionEvent::IsPending
PUBLIC	?SetProbes@MissionShip@@QAEXH@Z			; MissionShip::SetProbes
PUBLIC	?SetDecoys@MissionShip@@QAEXH@Z			; MissionShip::SetDecoys
PUBLIC	?GetSkin@MissionShip@@QBEPBVSkin@@XZ		; MissionShip::GetSkin
PUBLIC	?AddInstruction@MissionElement@@QAEXPBD@Z	; MissionElement::AddInstruction
PUBLIC	?SetZoneLock@MissionElement@@QAEXH@Z		; MissionElement::SetZoneLock
PUBLIC	?SetRogue@MissionElement@@QAEX_N@Z		; MissionElement::SetRogue
PUBLIC	?SetPath@MissionElement@@QAEXPBD@Z		; MissionElement::SetPath
PUBLIC	?IsInvulnerable@MissionElement@@QBE_NXZ		; MissionElement::IsInvulnerable
PUBLIC	?IsRogue@MissionElement@@QBE_NXZ		; MissionElement::IsRogue
PUBLIC	?Stardate@Mission@@QBENXZ			; Mission::Stardate
PUBLIC	?TYPENAME@Explosion@@SAPBDXZ			; Explosion::TYPENAME
PUBLIC	?SetLife@Drone@@QAEXH@Z				; Drone::SetLife
PUBLIC	?TYPENAME@Drone@@SAPBDXZ			; Drone::TYPENAME
PUBLIC	?SetHitTarget@Shot@@QAEX_N@Z			; Shot::SetHitTarget
PUBLIC	?SetCount@Element@@QAEXH@Z			; Element::SetCount
PUBLIC	?GetCount@Element@@QBEHXZ			; Element::GetCount
PUBLIC	?GetSquadron@Element@@QBEABVText@@XZ		; Element::GetSquadron
PUBLIC	?SetCommandAILevel@Element@@QAEXH@Z		; Element::SetCommandAILevel
PUBLIC	?GetCommandAILevel@Element@@QBEHXZ		; Element::GetCommandAILevel
PUBLIC	?GetAssignment@Element@@QBEPAV1@XZ		; Element::GetAssignment
PUBLIC	?SetPlayable@Element@@QAEX_N@Z			; Element::SetPlayable
PUBLIC	?SetRogue@Element@@QAEX_N@Z			; Element::SetRogue
PUBLIC	?IsPlayable@Element@@QBE_NXZ			; Element::IsPlayable
PUBLIC	?IsRogue@Element@@QBE_NXZ			; Element::IsRogue
PUBLIC	?SetPlayer@Element@@QAEXH@Z			; Element::SetPlayer
PUBLIC	?Player@Element@@QBEHXZ				; Element::Player
PUBLIC	?RespawnLoc@Ship@@QBEABUPoint@@XZ		; Ship::RespawnLoc
PUBLIC	?UseSkin@Ship@@QAEXPBVSkin@@@Z			; Ship::UseSkin
PUBLIC	?Registry@Ship@@QBEPBDXZ			; Ship::Registry
PUBLIC	?GetCarrier@Ship@@QBEPAV1@XZ			; Ship::GetCarrier
PUBLIC	?SetInvulnerable@Ship@@QAEX_N@Z			; Ship::SetInvulnerable
PUBLIC	?SetAIMode@Ship@@QAEXH@Z			; Ship::SetAIMode
PUBLIC	?Links@OrbitalRegion@@QAEAAV?$List@VText@@@@XZ	; OrbitalRegion::Links
PUBLIC	?Asteroids@OrbitalRegion@@QBEHXZ		; OrbitalRegion::Asteroids
PUBLIC	?System@Orbital@@QBEPAVStarSystem@@XZ		; Orbital::System
PUBLIC	?NumDust@StarSystem@@QBEHXZ			; StarSystem::NumDust
PUBLIC	??8Model@@QBEHABV0@@Z				; Model::operator==
PUBLIC	?Dust@Starshatter@@QAEHXZ			; Starshatter::Dust
PUBLIC	?GetMaxFrameLength@Game@@SANXZ			; Game::GetMaxFrameLength
PUBLIC	?TYPENAME@SimObserver@@SAPBDXZ			; SimObserver::TYPENAME
PUBLIC	?AddCommandPoints@ShipStats@@QAEXH@Z		; ShipStats::AddCommandPoints
PUBLIC	?SetShipClass@ShipStats@@QAEXH@Z		; ShipStats::SetShipClass
PUBLIC	?IsPlayer@ShipStats@@QBE_NXZ			; ShipStats::IsPlayer
PUBLIC	?GetElementIndex@ShipStats@@QBEHXZ		; ShipStats::GetElementIndex
PUBLIC	?GetCombatGroup@ShipStats@@QBEPAVCombatGroup@@XZ ; ShipStats::GetCombatGroup
PUBLIC	?GetPlayerShip@SimRegion@@QAEPAVShip@@XZ	; SimRegion::GetPlayerShip
PUBLIC	?IsTestMode@Sim@@QBE_NXZ			; Sim::IsTestMode
PUBLIC	?Yaw@Physical@@QBENXZ				; Physical::Yaw
PUBLIC	?Pitch@Physical@@QBENXZ				; Physical::Pitch
PUBLIC	?Roll@Physical@@QBENXZ				; Physical::Roll
PUBLIC	??_GUniverse@@UAEPAXI@Z				; Universe::`scalar deleting destructor'
PUBLIC	?ExecFrame@Universe@@UAEXN@Z			; Universe::ExecFrame
PUBLIC	??1Universe@@UAE@XZ				; Universe::~Universe
PUBLIC	??0Universe@@QAE@XZ				; Universe::Universe
PUBLIC	?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z ; Sim::CreateShot
PUBLIC	?CreateSplashDamage@Sim@@QAEXPAVShip@@@Z	; Sim::CreateSplashDamage
PUBLIC	?CreateDebris@Sim@@QAEPAVDebris@@ABUPoint@@0PAVModel@@NPAVSimRegion@@@Z ; Sim::CreateDebris
PUBLIC	?ResolveTimeSkip@Sim@@QAEXN@Z			; Sim::ResolveTimeSkip
PUBLIC	?IsActive@Sim@@QBE_NXZ				; Sim::IsActive
PUBLIC	?FindNearestSpaceRegion@Sim@@QAEPAVSimRegion@@PAVSimObject@@@Z ; Sim::FindNearestSpaceRegion
PUBLIC	??NSimRegion@@QBEHABV0@@Z			; SimRegion::operator<=
PUBLIC	??MSimRegion@@QBEHABV0@@Z			; SimRegion::operator<
PUBLIC	?NetDockShip@Sim@@QAEXPAVShip@@0PAVFlightDeck@@@Z ; Sim::NetDockShip
PUBLIC	?GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ ; Sim::GetSystemList
PUBLIC	?MissionClock@Sim@@QBENXZ			; Sim::MissionClock
PUBLIC	?FindOrbitalBody@Sim@@QAEPAVOrbital@@PBD@Z	; Sim::FindOrbitalBody
PUBLIC	?FormatGameTime@@YAPBDXZ			; FormatGameTime
PUBLIC	?GetMissionElements@Sim@@QAE?AV?$ListIter@VMissionElement@@@@XZ ; Sim::GetMissionElements
PUBLIC	?FindRegion@Sim@@QAEPAVSimRegion@@PBD@Z		; Sim::FindRegion
PUBLIC	?TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z ; SimRegion::TrackList
PUBLIC	?ShowGrid@Sim@@QAEXH@Z				; Sim::ShowGrid
PUBLIC	?DestroyShip@Sim@@QAEXPAVShip@@@Z		; Sim::DestroyShip
PUBLIC	?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z ; Sim::CreateShip
PUBLIC	?DestroyElement@Sim@@QAEXPAVElement@@@Z		; Sim::DestroyElement
PUBLIC	?FindElement@Sim@@QAEPAVElement@@PBD@Z		; Sim::FindElement
PUBLIC	?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z		; Sim::ProcessEventTrigger
PUBLIC	?RequestHyperJump@Sim@@QAEXPAVShip@@PAVSimRegion@@ABUPoint@@H00@Z ; Sim::RequestHyperJump
PUBLIC	?FindShip@Sim@@QAEPAVShip@@PBD0@Z		; Sim::FindShip
PUBLIC	?FindNearestTerrainRegion@Sim@@QAEPAVSimRegion@@PAVSimObject@@@Z ; Sim::FindNearestTerrainRegion
PUBLIC	?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z ; Sim::CreateExplosion
PUBLIC	?GetPlayerElement@Sim@@QAEPAVElement@@XZ	; Sim::GetPlayerElement
PUBLIC	?GetPlayerShip@Sim@@QAEPAVShip@@XZ		; Sim::GetPlayerShip
PUBLIC	?UnloadMission@Sim@@QAEXXZ			; Sim::UnloadMission
PUBLIC	?CommitMission@Sim@@QAEXXZ			; Sim::CommitMission
PUBLIC	?GetAssignedElements@Sim@@QAEHPAVElement@@AAV?$List@VElement@@@@@Z ; Sim::GetAssignedElements
PUBLIC	?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z	; Sim::CreateElement
PUBLIC	?FindAvailCallsign@Sim@@QAEPBDH@Z		; Sim::FindAvailCallsign
PUBLIC	?ActivateRegion@Sim@@QAE_NPAVSimRegion@@@Z	; Sim::ActivateRegion
PUBLIC	?FindNearestSpaceRegion@Sim@@QAEPAVSimRegion@@PAVOrbital@@@Z ; Sim::FindNearestSpaceRegion
EXTRN	??_EResource@@UAEPAXI@Z:PROC			; Resource::`vector deleting destructor'
EXTRN	??_ESim@@UAEPAXI@Z:PROC				; Sim::`vector deleting destructor'
EXTRN	??_EUniverse@@UAEPAXI@Z:PROC			; Universe::`vector deleting destructor'
EXTRN	??_ESimRegion@@UAEPAXI@Z:PROC			; SimRegion::`vector deleting destructor'
;	COMDAT ?empty@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4V3@A
_BSS	SEGMENT
?empty@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4V3@A DB 0cH DUP (?) ; `SimRegion::TrackList'::`2'::empty
_BSS	ENDS
;	COMDAT ?dummy_system_list@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4V3@A
_BSS	SEGMENT
?dummy_system_list@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4V3@A DB 0cH DUP (?) ; `Sim::GetSystemList'::`2'::dummy_system_list
_BSS	ENDS
;	COMDAT ?empty@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4V?$List@VShip@@@@A
_BSS	SEGMENT
?empty@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4V?$List@VShip@@@@A DB 0cH DUP (?) ; `Sim::GetSelection'::`2'::empty
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',Sim::tSelection,unsigned char * const,ListIter<Ship>,void,int, ?? &>
_BSS	ENDS
;	COMDAT ?$TSS0@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',SimRegion::rackList,unsigned char * const,List<Contact> &,int>
_BSS	ENDS
;	COMDAT ?txt@?1??FormatGameTime@@YAPBDXZ@4PADA
_BSS	SEGMENT
?txt@?1??FormatGameTime@@YAPBDXZ@4PADA DB 040H DUP (?)	; `FormatGameTime'::`2'::txt
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',Sim::tSystemList,unsigned char * const,List<StarSystem> &,void,int, ?? &>
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddInstruction@MissionElement@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddInstruction@MissionElement@@QAEXPBD@Z$0
__ehfuncinfo$?AddInstruction@MissionElement@@QAEXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddInstruction@MissionElement@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetRegion@CombatGroup@@QAEXVText@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetRegion@CombatGroup@@QAEXVText@@@Z$0
__ehfuncinfo$?SetRegion@CombatGroup@@QAEXVText@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetRegion@CombatGroup@@QAEXVText@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0MissionEvent@@QAE@ABV0@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0MissionEvent@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0MissionEvent@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MissionEvent@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0MissionEvent@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0MissionEvent@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0MissionEvent@@QAE@ABV0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0MissionEvent@@QAE@ABV0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0MissionEvent@@QAE@ABV0@@Z$5
	ORG $+256
__unwindtable$?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z$0
__unwindtable$?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z$0
__unwindtable$?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z$0
__unwindtable$?CreateDebris@Sim@@QAEPAVDebris@@ABUPoint@@0PAVModel@@NPAVSimRegion@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDebris@Sim@@QAEPAVDebris@@ABUPoint@@0PAVModel@@NPAVSimRegion@@@Z$0
__unwindtable$?CreateSplashDamage@Sim@@QAEXPAVShip@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateSplashDamage@Sim@@QAEXPAVShip@@@Z$0
__unwindtable$?LoadMission@Sim@@QAEXPAVMission@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadMission@Sim@@QAEXPAVMission@@_N@Z$0
__unwindtable$?ExecMission@Sim@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ExecMission@Sim@@QAEXXZ$0
__unwindtable$?CreateAsteroid@Sim@@QAEPAVAsteroid@@ABUPoint@@HNPAVSimRegion@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateAsteroid@Sim@@QAEPAVAsteroid@@ABUPoint@@HNPAVSimRegion@@@Z$0
__unwindtable$?CreateSplashDamage@Sim@@QAEXPAVShot@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateSplashDamage@Sim@@QAEXPAVShot@@@Z$0
__unwindtable$?ResolveHyperList@Sim@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveHyperList@Sim@@QAEXXZ$0
__unwindtable$?DestroyShip@SimRegion@@IAEXPAVShip@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DestroyShip@SimRegion@@IAEXPAVShip@@@Z$0
	ORG $+328
__unwindtable$?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z$1
	ORG $+2156
__unwindtable$?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z$2
__unwindtable$?CreateRegions@Sim@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateRegions@Sim@@IAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateRegions@Sim@@IAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateRegions@Sim@@IAEXXZ$2
__unwindtable$?CollideShips@SimRegion@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CollideShips@SimRegion@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CollideShips@SimRegion@@IAEXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?CollideShips@SimRegion@@IAEXXZ$2
__unwindtable$?CommitMission@SimRegion@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CommitMission@SimRegion@@IAEXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CommitMission@SimRegion@@IAEXXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CommitMission@SimRegion@@IAEXXZ$5
	ORG $+7492
__ehfuncinfo$?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateDebris@Sim@@QAEPAVDebris@@ABUPoint@@0PAVModel@@NPAVSimRegion@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateDebris@Sim@@QAEPAVDebris@@ABUPoint@@0PAVModel@@NPAVSimRegion@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateSplashDamage@Sim@@QAEXPAVShip@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateSplashDamage@Sim@@QAEXPAVShip@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0Sim@@QAE@PAVMotionController@@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??0Sim@@QAE@PAVMotionController@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1Sim@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__ehfuncinfo$?LoadMission@Sim@@QAEXPAVMission@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadMission@Sim@@QAEXPAVMission@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ExecMission@Sim@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ExecMission@Sim@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateRegions@Sim@@IAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CreateRegions@Sim@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateElements@Sim@@IAEXXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?CreateElements@Sim@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CopyEvents@Sim@@IAEXXZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?CopyEvents@Sim@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateAsteroid@Sim@@QAEPAVAsteroid@@ABUPoint@@HNPAVSimRegion@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateAsteroid@Sim@@QAEPAVAsteroid@@ABUPoint@@HNPAVSimRegion@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateSplashDamage@Sim@@QAEXPAVShot@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateSplashDamage@Sim@@QAEXPAVShot@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ResolveHyperList@Sim@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ResolveHyperList@Sim@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0SimRegion@@QAE@PAVSim@@PBDH@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??0SimRegion@@QAE@PAVSim@@PBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z DD 019930522H
	DD	0fH
	DD	FLAT:__unwindtable$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1SimRegion@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__ehfuncinfo$?CollideShips@SimRegion@@IAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CollideShips@SimRegion@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DestroyShip@SimRegion@@IAEXPAVShip@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DestroyShip@SimRegion@@IAEXPAVShip@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CommitMission@SimRegion@@IAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CommitMission@SimRegion@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
	ORG $+484
__unwindtable$?CreateElements@Sim@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateElements@Sim@@IAEXXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateElements@Sim@@IAEXXZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateElements@Sim@@IAEXXZ$8
	DD	02H
	DD	FLAT:__unwindfunclet$?CreateElements@Sim@@IAEXXZ$9
	DD	03H
	DD	FLAT:__unwindfunclet$?CreateElements@Sim@@IAEXXZ$10
	ORG $+2896
__unwindtable$?CopyEvents@Sim@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$6
	ORG $+3192
__unwindtable$??0Sim@@QAE@PAVMotionController@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$9
__unwindtable$??0SimRegion@@QAE@PAVSim@@PBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$9
	ORG $+728
__unwindtable$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$9
	ORG $+2376
__unwindtable$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$12
	DD	0bH
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$13
	DD	0bH
	DD	FLAT:__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$14
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_iter$1 = -16						; size = 8
_rgn$ = -8						; size = 8
_body$ = 8						; size = 4
?FindNearestSpaceRegion@Sim@@QAEPAVSimRegion@@PAVOrbital@@@Z PROC ; Sim::FindNearestSpaceRegion
; _this$ = ecx

; 1443 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1444 :     SimRegion*  result   = 0;

  0000b	33 f6		 xor	 esi, esi
  0000d	57		 push	 edi

; 1445 : 
; 1446 :     if (!body)

  0000e	39 75 08	 cmp	 DWORD PTR _body$[ebp], esi
  00011	75 0b		 jne	 SHORT $LN6@FindNeares

; 1447 :     return result;

  00013	33 c0		 xor	 eax, eax

; 1457 :                     result = rgn.value();
; 1458 :                 }
; 1459 :             }
; 1460 :         }
; 1461 :     }
; 1462 :     
; 1463 :     return result;
; 1464 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
$LN6@FindNeares:

; 1448 : 
; 1449 :     ListIter<SimRegion> rgn = regions;

  0001e	8d 41 58	 lea	 eax, DWORD PTR [ecx+88]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00021	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR _rgn$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  00029	8d 4c 24 18	 lea	 ecx, DWORD PTR _rgn$[esp+32]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0002d	89 44 24 18	 mov	 DWORD PTR _rgn$[esp+32], eax

; 108  :    int operator++() { return next() != 0; }

  00031	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00036	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1450 :     while (++rgn && !result) {

  00038	74 6e		 je	 SHORT $LN3@FindNeares
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL2@FindNeares:
  00040	85 f6		 test	 esi, esi
  00042	75 64		 jne	 SHORT $LN3@FindNeares
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00044	8d 4c 24 18	 lea	 ecx, DWORD PTR _rgn$[esp+32]
  00048	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
  0004d	8b f8		 mov	 edi, eax
; File d:\programming\starshatter\trunk\stars45\sim.h

; 268  :     bool                 IsOrbital()  const { return type == REAL_SPACE; }

  0004f	39 77 14	 cmp	 DWORD PTR [edi+20], esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1451 :         if (rgn->IsOrbital()) {

  00052	75 47		 jne	 SHORT $LN5@FindNeares
; File d:\programming\starshatter\trunk\stars45\sim.h

; 264  :     OrbitalRegion*       GetOrbitalRegion() { return orbital_region; }

  00054	8b 5f 1c	 mov	 ebx, DWORD PTR [edi+28]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1453 :             if (orgn) {

  00057	85 db		 test	 ebx, ebx
  00059	74 40		 je	 SHORT $LN5@FindNeares
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 244  :     ListIter<OrbitalRegion> Regions()      { return regions;    }

  0005b	8b 45 08	 mov	 eax, DWORD PTR _body$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0005e	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$1[esp+32]
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 244  :     ListIter<OrbitalRegion> Regions()      { return regions;    }

  00062	05 f0 00 00 00	 add	 eax, 240		; 000000f0H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00067	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$1[esp+36], -1
  0006f	89 44 24 10	 mov	 DWORD PTR _iter$1[esp+32], eax

; 108  :    int operator++() { return next() != 0; }

  00073	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalRegion@@@@QAEPAVOrbitalRegion@@XZ ; ListIter<OrbitalRegion>::next
  00078	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1455 :                 while (++iter) {

  0007a	74 1f		 je	 SHORT $LN5@FindNeares
  0007c	0f 1f 40 00	 npad	 4
$LL4@FindNeares:

; 1456 :                     if (iter.value() == orgn)

  00080	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$1[esp+32]
  00084	e8 00 00 00 00	 call	 ?value@?$ListIter@VOrbitalRegion@@@@QAEPAVOrbitalRegion@@XZ ; ListIter<OrbitalRegion>::value
  00089	3b c3		 cmp	 eax, ebx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0008b	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$1[esp+32]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1456 :                     if (iter.value() == orgn)

  0008f	0f 44 f7	 cmove	 esi, edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00092	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalRegion@@@@QAEPAVOrbitalRegion@@XZ ; ListIter<OrbitalRegion>::next
  00097	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1455 :                 while (++iter) {

  00099	75 e5		 jne	 SHORT $LL4@FindNeares
$LN5@FindNeares:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0009b	8d 4c 24 18	 lea	 ecx, DWORD PTR _rgn$[esp+32]
  0009f	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  000a4	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1450 :     while (++rgn && !result) {

  000a6	75 98		 jne	 SHORT $LL2@FindNeares
$LN3@FindNeares:

; 1457 :                     result = rgn.value();
; 1458 :                 }
; 1459 :             }
; 1460 :         }
; 1461 :     }
; 1462 :     
; 1463 :     return result;
; 1464 : }

  000a8	5f		 pop	 edi
  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 04 00	 ret	 4
?FindNearestSpaceRegion@Sim@@QAEPAVSimRegion@@PAVOrbital@@@Z ENDP ; Sim::FindNearestSpaceRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_rgn$ = 8						; size = 4
?ActivateRegion@Sim@@QAE_NPAVSimRegion@@@Z PROC		; Sim::ActivateRegion
; _this$ = ecx

; 1470 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1471 :     if (rgn && active_region != rgn && regions.contains(rgn)) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _rgn$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	0f 84 8d 00 00
	00		 je	 $LN2@ActivateRe
  00012	39 77 04	 cmp	 DWORD PTR [edi+4], esi
  00015	0f 84 84 00 00
	00		 je	 $LN2@ActivateRe
  0001b	56		 push	 esi
  0001c	8d 4f 58	 lea	 ecx, DWORD PTR [edi+88]
  0001f	e8 00 00 00 00	 call	 ?contains@?$List@VSimRegion@@@@QBE_NPBVSimRegion@@@Z ; List<SimRegion>::contains
  00024	84 c0		 test	 al, al
  00026	74 77		 je	 SHORT $LN2@ActivateRe

; 1472 :         if (active_region)

  00028	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 05		 je	 SHORT $LN10@ActivateRe

; 1473 :         active_region->Deactivate();

  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00031	ff 50 08	 call	 DWORD PTR [eax+8]
$LN10@ActivateRe:

; 1474 : 
; 1475 :         if (!active_region || active_region->System() != rgn->System()) {

  00034	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00037	85 c9		 test	 ecx, ecx
  00039	74 13		 je	 SHORT $LN12@ActivateRe
  0003b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0003e	3b 46 18	 cmp	 eax, DWORD PTR [esi+24]
  00041	74 17		 je	 SHORT $LN14@ActivateRe

; 1476 :             if (active_region)

  00043	85 c9		 test	 ecx, ecx
  00045	74 07		 je	 SHORT $LN12@ActivateRe
; File d:\programming\starshatter\trunk\stars45\sim.h

; 291  :     StarSystem*          System()     { return star_system;     }

  00047	8b c8		 mov	 ecx, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1477 :             active_region->System()->Deactivate();

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	ff 50 14	 call	 DWORD PTR [eax+20]
$LN12@ActivateRe:
; File d:\programming\starshatter\trunk\stars45\sim.h

; 291  :     StarSystem*          System()     { return star_system;     }

  0004e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1478 :             rgn->System()->Activate(scene);

  00051	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00054	50		 push	 eax
  00055	8b 11		 mov	 edx, DWORD PTR [ecx]
  00057	ff 52 10	 call	 DWORD PTR [edx+16]
$LN14@ActivateRe:

; 1479 :         }
; 1480 : 
; 1481 :         active_region = rgn;

  0005a	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 1482 :         star_system   = active_region->System();

  0005d	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00060	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 1483 : 
; 1484 :         if (star_system) {

  00063	85 c9		 test	 ecx, ecx
  00065	74 18		 je	 SHORT $LN7@ActivateRe

; 1485 :             star_system->SetActiveRegion(active_region->orbital_region);

  00067	ff 76 1c	 push	 DWORD PTR [esi+28]
  0006a	e8 00 00 00 00	 call	 ?SetActiveRegion@StarSystem@@QAEXPAVOrbitalRegion@@@Z ; StarSystem::SetActiveRegion

; 1489 :         }
; 1490 : 
; 1491 :         active_region->Activate();

  0006f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00072	8b 01		 mov	 eax, DWORD PTR [ecx]
  00074	ff 50 04	 call	 DWORD PTR [eax+4]

; 1492 :         return true;

  00077	b0 01		 mov	 al, 1

; 1493 :     }
; 1494 : 
; 1495 :     return false;
; 1496 : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
$LN7@ActivateRe:

; 1486 :         }
; 1487 :         else {
; 1488 :             ::Print("WARNING: Sim::ActivateRegion() No star system found for rgn '%s'", rgn->Name());

  0007f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@OCIFAMJD@WARNING?3?5Sim?3?3ActivateRegion?$CI?$CJ?5N@
  00087	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 1489 :         }
; 1490 : 
; 1491 :         active_region->Activate();

  0008c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0008f	83 c4 08	 add	 esp, 8
  00092	8b 01		 mov	 eax, DWORD PTR [ecx]
  00094	ff 50 04	 call	 DWORD PTR [eax+4]

; 1492 :         return true;

  00097	b0 01		 mov	 al, 1

; 1493 :     }
; 1494 : 
; 1495 :     return false;
; 1496 : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
$LN2@ActivateRe:
  0009f	5f		 pop	 edi
  000a0	32 c0		 xor	 al, al
  000a2	5e		 pop	 esi
  000a3	5d		 pop	 ebp
  000a4	c2 04 00	 ret	 4
?ActivateRegion@Sim@@QAE_NPAVSimRegion@@@Z ENDP		; Sim::ActivateRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_IFF$ = 8						; size = 4
?FindAvailCallsign@Sim@@QAEPBDH@Z PROC			; Sim::FindAvailCallsign
; _this$ = ecx

; 945  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b d9		 mov	 ebx, ecx

; 946  :     const char* call = "Unidentified";
; 947  : 
; 948  :     for (int i = 0; i < 32; i++) {

  0000c	33 f6		 xor	 esi, esi
  0000e	66 90		 npad	 2
$LL4@FindAvailC:

; 949  :         call = Callsign::GetCallsign(IFF);

  00010	8b 4d 08	 mov	 ecx, DWORD PTR _IFF$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetCallsign@Callsign@@SAPBDH@Z ; Callsign::GetCallsign
  00018	8b f8		 mov	 edi, eax

; 950  : 
; 951  :         if (!FindElement(call))

  0001a	8b cb		 mov	 ecx, ebx
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 ?FindElement@Sim@@QAEPAVElement@@PBD@Z ; Sim::FindElement
  00022	85 c0		 test	 eax, eax
  00024	74 06		 je	 SHORT $LN12@FindAvailC

; 946  :     const char* call = "Unidentified";
; 947  : 
; 948  :     for (int i = 0; i < 32; i++) {

  00026	46		 inc	 esi
  00027	83 fe 20	 cmp	 esi, 32			; 00000020H
  0002a	7c e4		 jl	 SHORT $LL4@FindAvailC
$LN12@FindAvailC:

; 952  :         break;
; 953  :     }
; 954  : 
; 955  :     return call;

  0002c	8b c7		 mov	 eax, edi

; 956  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?FindAvailCallsign@Sim@@QAEPBDH@Z ENDP			; Sim::FindAvailCallsign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_callsign$ = 8						; size = 4
_IFF$ = 12						; size = 4
_type$ = 16						; size = 4
?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z PROC		; Sim::CreateElement
; _this$ = ecx

; 960  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00027	68 e8 00 00 00	 push	 232			; 000000e8H
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 961  :     Element* elem = new(__FILE__,__LINE__) Element(callsign, IFF, type);

  00034	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	85 c0		 test	 eax, eax
  00040	74 14		 je	 SHORT $LN3@CreateElem
  00042	ff 75 10	 push	 DWORD PTR _type$[ebp]
  00045	8b c8		 mov	 ecx, eax
  00047	ff 75 0c	 push	 DWORD PTR _IFF$[ebp]
  0004a	ff 75 08	 push	 DWORD PTR _callsign$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0Element@@QAE@PBDHH@Z	; Element::Element
  00052	8b f0		 mov	 esi, eax
  00054	eb 02		 jmp	 SHORT $LN4@CreateElem
$LN3@CreateElem:
  00056	33 f6		 xor	 esi, esi
$LN4@CreateElem:

; 962  :     elements.append(elem);

  00058	56		 push	 esi
  00059	8d 8f 88 00 00
	00		 lea	 ecx, DWORD PTR [edi+136]
  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	e8 00 00 00 00	 call	 ?append@?$List@VElement@@@@QAEXPBVElement@@@Z ; List<Element>::append

; 963  :     return elem;

  0006b	8b c6		 mov	 eax, esi

; 964  : }

  0006d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z$0:
  00000	68 c1 03 00 00	 push	 961			; 000003c1H
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__ehhandler$?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z ENDP		; Sim::CreateElement
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_elem$ = 8						; size = 4
_assigned$ = 12						; size = 4
?GetAssignedElements@Sim@@QAEHPAVElement@@AAV?$List@VElement@@@@@Z PROC ; Sim::GetAssignedElements
; _this$ = ecx

; 995  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 996  :     assigned.clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _assigned$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	8b cf		 mov	 ecx, edi
  0000c	e8 00 00 00 00	 call	 ?clear@?$List@VElement@@@@QAEXXZ ; List<Element>::clear

; 997  : 
; 998  :     if (elem) {

  00011	83 7d 08 00	 cmp	 DWORD PTR _elem$[ebp], 0
  00015	74 44		 je	 SHORT $LN19@GetAssigne

; 999  :         for (int i = 0; i < elements.size(); i++) {

  00017	56		 push	 esi
  00018	33 f6		 xor	 esi, esi
  0001a	39 b3 88 00 00
	00		 cmp	 DWORD PTR [ebx+136], esi
  00020	7e 30		 jle	 SHORT $LN18@GetAssigne
$LL4@GetAssigne:

; 1000 :             Element* e = elements.at(i);

  00022	56		 push	 esi
  00023	8d 8b 88 00 00
	00		 lea	 ecx, DWORD PTR [ebx+136]
  00029	e8 00 00 00 00	 call	 ?at@?$List@VElement@@@@QAEAAPAVElement@@H@Z ; List<Element>::at
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1001 :             if (!e->IsSquadron() && e->GetAssignment() == elem)

  00030	e8 00 00 00 00	 call	 ?IsSquadron@Element@@QBE_NXZ ; Element::IsSquadron
  00035	84 c0		 test	 al, al
  00037	75 10		 jne	 SHORT $LN2@GetAssigne
  00039	8b 45 08	 mov	 eax, DWORD PTR _elem$[ebp]
  0003c	39 41 78	 cmp	 DWORD PTR [ecx+120], eax
  0003f	75 08		 jne	 SHORT $LN2@GetAssigne

; 1002 :             assigned.append(e);

  00041	51		 push	 ecx
  00042	8b cf		 mov	 ecx, edi
  00044	e8 00 00 00 00	 call	 ?append@?$List@VElement@@@@QAEXPBVElement@@@Z ; List<Element>::append
$LN2@GetAssigne:

; 999  :         for (int i = 0; i < elements.size(); i++) {

  00049	46		 inc	 esi
  0004a	3b b3 88 00 00
	00		 cmp	 esi, DWORD PTR [ebx+136]
  00050	7c d0		 jl	 SHORT $LL4@GetAssigne
$LN18@GetAssigne:

; 1003 :         }
; 1004 :     }
; 1005 : 
; 1006 :     return assigned.size();

  00052	8b 07		 mov	 eax, DWORD PTR [edi]
  00054	5e		 pop	 esi
  00055	5f		 pop	 edi
  00056	5b		 pop	 ebx

; 1007 : }

  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
$LN19@GetAssigne:

; 1003 :         }
; 1004 :     }
; 1005 : 
; 1006 :     return assigned.size();

  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
  0005d	5f		 pop	 edi
  0005e	5b		 pop	 ebx

; 1007 : }

  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
?GetAssignedElements@Sim@@QAEHPAVElement@@AAV?$List@VElement@@@@@Z ENDP ; Sim::GetAssignedElements
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\combatgroup.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\combatant.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\combatgroup.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\combatgroup.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_tk1$1$ = -20						; size = 4
_td$1$ = -16						; size = 4
_tc$1$ = -12						; size = 4
_tk2$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
?CommitMission@Sim@@QAEXXZ PROC				; Sim::CommitMission
; _this$ = ecx

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 185  :     for (int i = 0; i < regions.size(); i++)

  00009	33 f6		 xor	 esi, esi
  0000b	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000e	39 71 58	 cmp	 DWORD PTR [ecx+88], esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  00011	8d 79 58	 lea	 edi, DWORD PTR [ecx+88]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 185  :     for (int i = 0; i < regions.size(); i++)

  00014	7e 17		 jle	 SHORT $LN3@CommitMiss
$LL4@CommitMiss:

; 186  :     regions[i]->CommitMission();

  00016	56		 push	 esi
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ??A?$List@VSimRegion@@@@QAEAAPAVSimRegion@@H@Z ; List<SimRegion>::operator[]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	e8 00 00 00 00	 call	 ?CommitMission@SimRegion@@IAEXXZ ; SimRegion::CommitMission
  00025	46		 inc	 esi
  00026	3b 37		 cmp	 esi, DWORD PTR [edi]
  00028	7c ec		 jl	 SHORT $LL4@CommitMiss
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN3@CommitMiss:

; 187  : 
; 188  :     if (ShipStats::NumStats() > 0) {

  0002d	e8 00 00 00 00	 call	 ?NumStats@ShipStats@@SAHXZ ; ShipStats::NumStats
  00032	85 c0		 test	 eax, eax
  00034	0f 8e 57 01 00
	00		 jle	 $LN8@CommitMiss

; 189  :         Print("\n\nFINAL SCORE '%s'\n", (const char*) mission->Name());

  0003a	8b 81 c0 00 00
	00		 mov	 eax, DWORD PTR [ecx+192]
  00040	ff b0 94 00 00
	00		 push	 DWORD PTR [eax+148]
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MDJAGKKE@?6?6FINAL?5SCORE?5?8?$CFs?8?6?$AA@
  0004b	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 190  :         Print("Name              Kill1  Kill2  Died   Colls  Points  Cmd Pts\n");

  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@BCONEFGH@Name?5?5?5?5?5?5?5?5?5?5?5?5?5?5Kill1?5?5Kill2?5?5@
  00055	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 191  :         Print("----------------  -----  -----  -----  -----  ------  ------\n");

  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@BFFMOOLB@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?5?5?9?9?9?9?9?5?5?9?9?9?9?9?5?5@
  00062	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00067	83 c4 04	 add	 esp, 4

; 192  : 
; 193  :         int tk1 = 0;

  0006a	33 db		 xor	 ebx, ebx

; 194  :         int tk2 = 0;

  0006c	33 f6		 xor	 esi, esi

; 195  :         int td  = 0;

  0006e	89 5d f0	 mov	 DWORD PTR _td$1$[ebp], ebx
  00071	89 75 f8	 mov	 DWORD PTR _tk2$1$[ebp], esi

; 196  :         int tc  = 0;
; 197  : 
; 198  :         for (int i = 0; i < ShipStats::NumStats(); i++) {

  00074	33 ff		 xor	 edi, edi
  00076	89 5d f4	 mov	 DWORD PTR _tc$1$[ebp], ebx
  00079	e8 00 00 00 00	 call	 ?NumStats@ShipStats@@SAHXZ ; ShipStats::NumStats
  0007e	85 c0		 test	 eax, eax
  00080	0f 8e e4 00 00
	00		 jle	 $LN6@CommitMiss
$LL7@CommitMiss:

; 199  :             ShipStats* s = ShipStats::GetStats(i);

  00086	8b cf		 mov	 ecx, edi
  00088	e8 00 00 00 00	 call	 ?GetStats@ShipStats@@SAPAV1@H@Z ; ShipStats::GetStats
  0008d	8b f0		 mov	 esi, eax

; 200  :             s->Summarize();

  0008f	8b ce		 mov	 ecx, esi
  00091	e8 00 00 00 00	 call	 ?Summarize@ShipStats@@QAEXXZ ; ShipStats::Summarize

; 201  : 
; 202  :             Print("%-16s  %5d  %5d  %5d  %5d  %6d  %6d\n",

  00096	ff 76 5c	 push	 DWORD PTR [esi+92]
  00099	ff 76 58	 push	 DWORD PTR [esi+88]
  0009c	ff 76 44	 push	 DWORD PTR [esi+68]
  0009f	ff 76 40	 push	 DWORD PTR [esi+64]
  000a2	ff 76 3c	 push	 DWORD PTR [esi+60]
  000a5	ff 76 38	 push	 DWORD PTR [esi+56]
  000a8	ff 36		 push	 DWORD PTR [esi]
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KFDPBJH@?$CF?916s?5?5?$CF5d?5?5?$CF5d?5?5?$CF5d?5?5?$CF5d?5?5?$CF6d?5?5@
  000af	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 212  :             tk2 += s->GetMissileKills();

  000b4	8b 45 f8	 mov	 eax, DWORD PTR _tk2$1$[ebp]
  000b7	83 c4 20	 add	 esp, 32			; 00000020H
  000ba	03 46 3c	 add	 eax, DWORD PTR [esi+60]
  000bd	03 5e 38	 add	 ebx, DWORD PTR [esi+56]
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 116  :     CombatGroup*   GetCombatGroup()  const { return combat_group;  }

  000c0	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 212  :             tk2 += s->GetMissileKills();

  000c3	89 45 f8	 mov	 DWORD PTR _tk2$1$[ebp], eax

; 213  :             td  += s->GetDeaths();

  000c6	8b 45 f0	 mov	 eax, DWORD PTR _td$1$[ebp]
  000c9	03 46 40	 add	 eax, DWORD PTR [esi+64]
  000cc	89 45 f0	 mov	 DWORD PTR _td$1$[ebp], eax

; 214  :             tc  += s->GetColls();

  000cf	8b 45 f4	 mov	 eax, DWORD PTR _tc$1$[ebp]
  000d2	03 46 44	 add	 eax, DWORD PTR [esi+68]
  000d5	89 5d ec	 mov	 DWORD PTR _tk1$1$[ebp], ebx
  000d8	89 45 f4	 mov	 DWORD PTR _tc$1$[ebp], eax

; 215  : 
; 216  :             CombatGroup* group = s->GetCombatGroup();
; 217  : 
; 218  :             if (group) {

  000db	85 c9		 test	 ecx, ecx
  000dd	74 28		 je	 SHORT $LN9@CommitMiss
; File d:\programming\starshatter\trunk\stars45\combatgroup.h

; 140  :     Combatant*           GetCombatant()          { return combatant;  }

  000df	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 221  :                 if (c)

  000e2	85 d2		 test	 edx, edx
  000e4	74 06		 je	 SHORT $LN10@CommitMiss
; File d:\programming\starshatter\trunk\stars45\combatant.h

; 78   :     void                    AddScore(int points)   { score += points; }

  000e6	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  000e9	01 42 0c	 add	 DWORD PTR [edx+12], eax
$LN10@CommitMiss:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 224  :                 if (s->GetElementIndex() == 1)

  000ec	83 7e 2c 01	 cmp	 DWORD PTR [esi+44], 1
  000f0	75 03		 jne	 SHORT $LN11@CommitMiss
; File d:\programming\starshatter\trunk\stars45\combatgroup.h

; 164  :     void           SetSorties(int n)                   { sorties = n;       }

  000f2	ff 41 78	 inc	 DWORD PTR [ecx+120]
$LN11@CommitMiss:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 227  :                 group->SetKills(group->Kills() + s->GetGunKills() + s->GetMissileKills());

  000f5	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  000f8	03 46 38	 add	 eax, DWORD PTR [esi+56]
; File d:\programming\starshatter\trunk\stars45\combatgroup.h

; 166  :     void           SetKills(int n)                     { kills = n;         }

  000fb	01 41 7c	 add	 DWORD PTR [ecx+124], eax

; 167  :     int            Points()                      const { return points;     }
; 168  :     void           SetPoints(int n)                    { points = n;        }

  000fe	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00101	01 81 80 00 00
	00		 add	 DWORD PTR [ecx+128], eax
$LN9@CommitMiss:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 231  :             if (s->IsPlayer()) {

  00107	80 7e 28 00	 cmp	 BYTE PTR [esi+40], 0
  0010b	74 4c		 je	 SHORT $LN5@CommitMiss

; 232  :                 Player* p = Player::GetCurrentPlayer();

  0010d	e8 00 00 00 00	 call	 ?GetCurrentPlayer@Player@@SAPAV1@XZ ; Player::GetCurrentPlayer
  00112	8b d8		 mov	 ebx, eax

; 233  :                 p->ProcessStats(s, start_time);

  00114	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00117	8b cb		 mov	 ecx, ebx
  00119	ff b0 c8 00 00
	00		 push	 DWORD PTR [eax+200]
  0011f	56		 push	 esi
  00120	e8 00 00 00 00	 call	 ?ProcessStats@Player@@QAEXPAVShipStats@@K@Z ; Player::ProcessStats

; 234  : 
; 235  :                 if (mission && mission->Type() == Mission::TRAINING && 
; 236  :                         s->GetDeaths() == 0 && s->GetColls() == 0)

  00125	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00128	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  0012e	85 c9		 test	 ecx, ecx
  00130	74 1f		 je	 SHORT $LN13@CommitMiss
  00132	83 b9 a4 00 00
	00 16		 cmp	 DWORD PTR [ecx+164], 22	; 00000016H
  00139	75 16		 jne	 SHORT $LN13@CommitMiss
  0013b	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  0013f	75 10		 jne	 SHORT $LN13@CommitMiss
  00141	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  00145	75 0a		 jne	 SHORT $LN13@CommitMiss

; 237  :                 p->SetTrained(mission->Identity());

  00147	ff 71 08	 push	 DWORD PTR [ecx+8]
  0014a	8b cb		 mov	 ecx, ebx
  0014c	e8 00 00 00 00	 call	 ?SetTrained@Player@@QAEXH@Z ; Player::SetTrained
$LN13@CommitMiss:

; 238  : 
; 239  :                 Player::Save(); // save training state right now before we forget!

  00151	e8 00 00 00 00	 call	 ?Save@Player@@SAXXZ	; Player::Save
  00156	8b 5d ec	 mov	 ebx, DWORD PTR _tk1$1$[ebp]
$LN5@CommitMiss:

; 196  :         int tc  = 0;
; 197  : 
; 198  :         for (int i = 0; i < ShipStats::NumStats(); i++) {

  00159	47		 inc	 edi
  0015a	e8 00 00 00 00	 call	 ?NumStats@ShipStats@@SAHXZ ; ShipStats::NumStats
  0015f	3b f8		 cmp	 edi, eax
  00161	0f 8c 1f ff ff
	ff		 jl	 $LL7@CommitMiss
  00167	8b 75 f8	 mov	 esi, DWORD PTR _tk2$1$[ebp]
$LN6@CommitMiss:

; 240  :             }
; 241  :         }
; 242  : 
; 243  :         Print("--------------------------------------------\n");

  0016a	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@IHAFINE@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
  0016f	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00174	83 c4 04	 add	 esp, 4

; 244  :         Print("TOTAL             %5d  %5d  %5d  %5d\n\n", tk1, tk2, td, tc);

  00177	ff 75 f4	 push	 DWORD PTR _tc$1$[ebp]
  0017a	ff 75 f0	 push	 DWORD PTR _td$1$[ebp]
  0017d	56		 push	 esi
  0017e	53		 push	 ebx
  0017f	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GLANDEFM@TOTAL?5?5?5?5?5?5?5?5?5?5?5?5?5?$CF5d?5?5?$CF5d?5?5?$CF5d?5@
  00184	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00189	83 c4 14	 add	 esp, 20			; 00000014H

; 245  : 
; 246  :         ShipStats::Initialize();

  0018c	e8 00 00 00 00	 call	 ?Initialize@ShipStats@@SAXXZ ; ShipStats::Initialize
$LN8@CommitMiss:

; 247  :     }
; 248  : }

  00191	5f		 pop	 edi
  00192	5e		 pop	 esi
  00193	5b		 pop	 ebx
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c3		 ret	 0
?CommitMission@Sim@@QAEXXZ ENDP				; Sim::CommitMission
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
?UnloadMission@Sim@@QAEXXZ PROC				; Sim::UnloadMission
; _this$ = ecx

; 254  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 255  :     if (netgame) {

  00003	8b 8e c4 00 00
	00		 mov	 ecx, DWORD PTR [esi+196]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 10		 je	 SHORT $LN2@UnloadMiss

; 256  :         delete netgame;

  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	6a 01		 push	 1
  00011	ff 10		 call	 DWORD PTR [eax]

; 257  :         netgame = 0;

  00013	c7 86 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+196], 0
$LN2@UnloadMiss:

; 258  :     }
; 259  : 
; 260  :     HUDView* hud = HUDView::GetInstance();

  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hud_view@HUDView@@1PAV1@A ; HUDView::hud_view

; 261  :     if (hud)

  00023	85 c9		 test	 ecx, ecx
  00025	74 05		 je	 SHORT $LN13@UnloadMiss

; 262  :     hud->HideAll();

  00027	8b 01		 mov	 eax, DWORD PTR [ecx]
  00029	ff 50 38	 call	 DWORD PTR [eax+56]
$LN13@UnloadMiss:

; 263  : 
; 264  :     ShipStats::Initialize();

  0002c	e8 00 00 00 00	 call	 ?Initialize@ShipStats@@SAXXZ ; ShipStats::Initialize

; 265  : 
; 266  :     events.destroy();

  00031	8d 8e a0 00 00
	00		 lea	 ecx, DWORD PTR [esi+160]
  00037	e8 00 00 00 00	 call	 ?destroy@?$List@VMissionEvent@@@@QAEXXZ ; List<MissionEvent>::destroy

; 267  :     mission_elements.destroy();

  0003c	8d 8e ac 00 00
	00		 lea	 ecx, DWORD PTR [esi+172]
  00042	e8 00 00 00 00	 call	 ?destroy@?$List@VMissionElement@@@@QAEXXZ ; List<MissionElement>::destroy

; 268  :     elements.destroy();

  00047	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  0004d	e8 00 00 00 00	 call	 ?destroy@?$List@VElement@@@@QAEXXZ ; List<Element>::destroy

; 269  :     finished.destroy();

  00052	8d 8e 94 00 00
	00		 lea	 ecx, DWORD PTR [esi+148]
  00058	e8 00 00 00 00	 call	 ?destroy@?$List@VElement@@@@QAEXXZ ; List<Element>::destroy

; 270  : 
; 271  :     if (active_region)

  0005d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00060	85 c9		 test	 ecx, ecx
  00062	74 05		 je	 SHORT $LN15@UnloadMiss

; 272  :     active_region->Deactivate();

  00064	8b 01		 mov	 eax, DWORD PTR [ecx]
  00066	ff 50 08	 call	 DWORD PTR [eax+8]
$LN15@UnloadMiss:

; 273  : 
; 274  :     if (star_system)

  00069	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0006c	85 c9		 test	 ecx, ecx
  0006e	74 05		 je	 SHORT $LN17@UnloadMiss

; 275  :     star_system->Deactivate();

  00070	8b 01		 mov	 eax, DWORD PTR [ecx]
  00072	ff 50 14	 call	 DWORD PTR [eax+20]
$LN17@UnloadMiss:

; 276  : 
; 277  :     if (mission) {

  00075	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
  0007b	85 c0		 test	 eax, eax
  0007d	74 14		 je	 SHORT $LN6@UnloadMiss
; File d:\programming\starshatter\trunk\stars45\mission.h

; 165  :     void                 SetActive(bool a)             { active = a;        }

  0007f	c6 80 b9 00 00
	00 00		 mov	 BYTE PTR [eax+185], 0

; 166  :     void                 SetComplete(bool c)           { complete = c;      }

  00086	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
  0008c	c6 80 ba 00 00
	00 01		 mov	 BYTE PTR [eax+186], 1
$LN6@UnloadMiss:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 282  :     regions.destroy();

  00093	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00096	e8 00 00 00 00	 call	 ?destroy@?$List@VSimRegion@@@@QAEXXZ ; List<SimRegion>::destroy

; 283  :     scene.Collect();

  0009b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0009e	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000a1	ff 50 04	 call	 DWORD PTR [eax+4]

; 284  : 
; 285  :     GRAPHIC_DESTROY(dust);

  000a4	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  000a7	85 c9		 test	 ecx, ecx
  000a9	74 0c		 je	 SHORT $LN7@UnloadMiss
  000ab	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ad	ff 50 44	 call	 DWORD PTR [eax+68]
  000b0	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
$LN7@UnloadMiss:

; 286  : 
; 287  :     star_system   = 0;

  000b7	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 288  :     active_region = 0;

  000be	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 289  :     mission       = 0;

  000c5	c7 86 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+192], 0

; 290  : 
; 291  :     // reclaim memory used by radio traffic:
; 292  :     RadioTraffic::DiscardMessages();

  000cf	e8 00 00 00 00	 call	 ?DiscardMessages@RadioTraffic@@SAXXZ ; RadioTraffic::DiscardMessages

; 293  : 
; 294  :     // release texture memory for 2D screens:
; 295  :     Starshatter* stars = Starshatter::GetInstance();

  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?instance@Starshatter@@1PAV1@A ; Starshatter::instance

; 296  :     if (stars)

  000da	85 c9		 test	 ecx, ecx
  000dc	74 05		 je	 SHORT $LN8@UnloadMiss

; 297  :     stars->InvalidateTextureCache();

  000de	e8 00 00 00 00	 call	 ?InvalidateTextureCache@Starshatter@@QAEXXZ ; Starshatter::InvalidateTextureCache
$LN8@UnloadMiss:

; 298  : 
; 299  :     cam_dir = CameraDirector::GetInstance();

  000e3	e8 00 00 00 00	 call	 ?GetInstance@CameraDirector@@SAPAV1@XZ ; CameraDirector::GetInstance
  000e8	89 46 54	 mov	 DWORD PTR [esi+84], eax

; 300  :     if (cam_dir)

  000eb	85 c0		 test	 eax, eax
  000ed	74 09		 je	 SHORT $LN19@UnloadMiss

; 301  :     cam_dir->SetShip(0);

  000ef	8b 10		 mov	 edx, DWORD PTR [eax]
  000f1	8b c8		 mov	 ecx, eax
  000f3	6a 00		 push	 0
  000f5	ff 52 28	 call	 DWORD PTR [edx+40]
$LN19@UnloadMiss:

; 302  : 
; 303  :     AudioConfig::SetTraining(false);

  000f8	32 c9		 xor	 cl, cl

; 304  : }

  000fa	5e		 pop	 esi

; 302  : 
; 303  :     AudioConfig::SetTraining(false);

  000fb	e9 00 00 00 00	 jmp	 ?SetTraining@AudioConfig@@SAX_N@Z ; AudioConfig::SetTraining
?UnloadMission@Sim@@QAEXXZ ENDP				; Sim::UnloadMission
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\starshatter.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_rgn$1 = -8						; size = 8
?GetPlayerShip@Sim@@QAEPAVShip@@XZ PROC			; Sim::GetPlayerShip
; _this$ = ecx

; 1283 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1284 :     if (active_region)

  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000c	56		 push	 esi
  0000d	85 c0		 test	 eax, eax
  0000f	74 08		 je	 SHORT $LN4@GetPlayerS

; 1285 :     return active_region->GetPlayerShip();

  00011	8b 40 44	 mov	 eax, DWORD PTR [eax+68]

; 1300 : }

  00014	5e		 pop	 esi
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN4@GetPlayerS:

; 1286 : 
; 1287 :     Starshatter* stars = Starshatter::GetInstance();

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?instance@Starshatter@@1PAV1@A ; Starshatter::instance

; 1288 :     if (stars && stars->InCutscene()) {

  0001e	85 c0		 test	 eax, eax
  00020	74 52		 je	 SHORT $LN5@GetPlayerS
; File d:\programming\starshatter\trunk\stars45\starshatter.h

; 152  :     bool              InCutscene()         const { return cutscene > 0; }

  00022	83 b8 0c a6 00
	00 00		 cmp	 DWORD PTR [eax+42508], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1288 :     if (stars && stars->InCutscene()) {

  00029	7e 49		 jle	 SHORT $LN5@GetPlayerS

; 1290 : 
; 1291 :         ListIter<SimRegion> rgn = regions;

  0002b	8d 41 58	 lea	 eax, DWORD PTR [ecx+88]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0002e	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _rgn$1[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  00036	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$1[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0003a	89 44 24 08	 mov	 DWORD PTR _rgn$1[esp+16], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1289 :         Ship* player = 0;

  0003e	33 f6		 xor	 esi, esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00040	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00045	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1292 :         while (++rgn && !player) {

  00047	74 24		 je	 SHORT $LN3@GetPlayerS
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@GetPlayerS:
  00050	85 f6		 test	 esi, esi
  00052	75 19		 jne	 SHORT $LN3@GetPlayerS
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00054	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$1[esp+16]
  00058	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value

; 108  :    int operator++() { return next() != 0; }

  0005d	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$1[esp+16]
; File d:\programming\starshatter\trunk\stars45\sim.h

; 262  :     Ship*                GetPlayerShip() { return player_ship; }

  00061	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00064	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00069	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1292 :         while (++rgn && !player) {

  0006b	75 e3		 jne	 SHORT $LL2@GetPlayerS
$LN3@GetPlayerS:

; 1293 :             player = rgn->GetPlayerShip();
; 1294 :         }
; 1295 : 
; 1296 :         return player;

  0006d	8b c6		 mov	 eax, esi

; 1300 : }

  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN5@GetPlayerS:

; 1297 :     }
; 1298 : 
; 1299 :     return 0;

  00074	33 c0		 xor	 eax, eax

; 1300 : }

  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?GetPlayerShip@Sim@@QAEPAVShip@@XZ ENDP			; Sim::GetPlayerShip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
?GetPlayerElement@Sim@@QAEPAVElement@@XZ PROC		; Sim::GetPlayerElement
; _this$ = ecx

; 1304 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1305 :     Element* elem = 0;

  00003	33 f6		 xor	 esi, esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  00005	8d 99 88 00 00
	00		 lea	 ebx, DWORD PTR [ecx+136]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1307 :     for (int i = 0; i < elements.size(); i++) {

  0000b	33 ff		 xor	 edi, edi
  0000d	39 33		 cmp	 DWORD PTR [ebx], esi
  0000f	7e 16		 jle	 SHORT $LN15@GetPlayerE
$LL4@GetPlayerE:

; 1308 :         Element* e = elements[i];

  00011	57		 push	 edi
  00012	8b cb		 mov	 ecx, ebx
  00014	e8 00 00 00 00	 call	 ??A?$List@VElement@@@@QAEAAPAVElement@@H@Z ; List<Element>::operator[]
  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 1309 : 
; 1310 :         if (e->Player() > 0)

  0001b	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0001f	0f 4f f0	 cmovg	 esi, eax
  00022	47		 inc	 edi
  00023	3b 3b		 cmp	 edi, DWORD PTR [ebx]
  00025	7c ea		 jl	 SHORT $LL4@GetPlayerE
$LN15@GetPlayerE:
  00027	5f		 pop	 edi

; 1311 :         elem = e;
; 1312 :     }
; 1313 : 
; 1314 :     return elem;

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx

; 1315 : }

  0002c	c3		 ret	 0
?GetPlayerElement@Sim@@QAEPAVElement@@XZ ENDP		; Sim::GetPlayerElement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -36						; size = 12
$T3 = -24						; size = 12
__$EHRec$ = -12						; size = 12
_pos$ = 8						; size = 4
_vel$ = 12						; size = 4
_type$ = 16						; size = 4
_exp_scale$ = 20					; size = 4
_part_scale$ = 24					; size = 4
$T4 = 28						; size = 4
_rgn$ = 28						; size = 4
_source$ = 32						; size = 4
_sys$dead$ = 36						; size = 4
?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z PROC ; Sim::CreateExplosion
; _this$ = ecx

; 1143 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1144 :     // don't bother creating explosions that can't be seen:
; 1145 :     if (!rgn || !active_region || rgn != active_region)

  00027	8b 75 1c	 mov	 esi, DWORD PTR _rgn$[ebp]
  0002a	85 f6		 test	 esi, esi
  0002c	0f 84 e4 00 00
	00		 je	 $LN3@CreateExpl
  00032	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00035	85 c0		 test	 eax, eax
  00037	0f 84 d9 00 00
	00		 je	 $LN3@CreateExpl
  0003d	3b f0		 cmp	 esi, eax
  0003f	0f 85 d1 00 00
	00		 jne	 $LN3@CreateExpl
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00045	68 20 02 00 00	 push	 544			; 00000220H
  0004a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1148 :     Explosion* exp = new(__FILE__,__LINE__) Explosion(type, pos, vel, exp_scale, part_scale, rgn, source);

  0004f	8b d0		 mov	 edx, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00051	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1148 :     Explosion* exp = new(__FILE__,__LINE__) Explosion(type, pos, vel, exp_scale, part_scale, rgn, source);

  00054	89 55 1c	 mov	 DWORD PTR $T4[ebp], edx
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005e	85 d2		 test	 edx, edx
  00060	0f 84 8a 00 00
	00		 je	 $LN8@CreateExpl
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _vel$[ebp]
  00069	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1148 :     Explosion* exp = new(__FILE__,__LINE__) Explosion(type, pos, vel, exp_scale, part_scale, rgn, source);

  0006c	ff 75 20	 push	 DWORD PTR _source$[ebp]
  0006f	f2 0f 10 41 10	 movsd	 xmm0, QWORD PTR [ecx+16]
  00074	f2 0f 10 11	 movsd	 xmm2, QWORD PTR [ecx]
  00078	f2 0f 10 49 08	 movsd	 xmm1, QWORD PTR [ecx+8]
  0007d	8b ca		 mov	 ecx, edx
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  0007f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1148 :     Explosion* exp = new(__FILE__,__LINE__) Explosion(type, pos, vel, exp_scale, part_scale, rgn, source);

  00083	56		 push	 esi
  00084	83 ec 08	 sub	 esp, 8
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00087	66 0f 5a d2	 cvtpd2ps xmm2, xmm2

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0008b	f3 0f 11 45 f0	 movss	 DWORD PTR $T3[ebp+8], xmm0
  00090	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00095	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00099	66 0f 5a c9	 cvtpd2ps xmm1, xmm1

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0009d	f3 0f 11 45 e4	 movss	 DWORD PTR $T2[ebp+8], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1148 :     Explosion* exp = new(__FILE__,__LINE__) Explosion(type, pos, vel, exp_scale, part_scale, rgn, source);

  000a2	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _part_scale$[ebp]
  000a7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000ad	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _exp_scale$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  000b2	f3 0f 11 55 e8	 movss	 DWORD PTR $T3[ebp], xmm2
  000b7	f2 0f 10 10	 movsd	 xmm2, QWORD PTR [eax]
  000bb	f3 0f 11 4d ec	 movss	 DWORD PTR $T3[ebp+4], xmm1
  000c0	f2 0f 10 48 08	 movsd	 xmm1, QWORD PTR [eax+8]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1148 :     Explosion* exp = new(__FILE__,__LINE__) Explosion(type, pos, vel, exp_scale, part_scale, rgn, source);

  000c5	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  000c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cd	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  000ce	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1148 :     Explosion* exp = new(__FILE__,__LINE__) Explosion(type, pos, vel, exp_scale, part_scale, rgn, source);

  000d2	8d 45 dc	 lea	 eax, DWORD PTR $T2[ebp]
  000d5	50		 push	 eax
  000d6	ff 75 10	 push	 DWORD PTR _type$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  000d9	66 0f 5a c9	 cvtpd2ps xmm1, xmm1

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  000dd	f3 0f 11 55 dc	 movss	 DWORD PTR $T2[ebp], xmm2
  000e2	f3 0f 11 4d e0	 movss	 DWORD PTR $T2[ebp+4], xmm1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1148 :     Explosion* exp = new(__FILE__,__LINE__) Explosion(type, pos, vel, exp_scale, part_scale, rgn, source);

  000e7	e8 00 00 00 00	 call	 ??0Explosion@@QAE@HABUVec3@@0MMPAVSimRegion@@PAVSimObject@@@Z ; Explosion::Explosion
  000ec	8b f8		 mov	 edi, eax
  000ee	eb 02		 jmp	 SHORT $LN9@CreateExpl
$LN8@CreateExpl:
  000f0	33 ff		 xor	 edi, edi
$LN9@CreateExpl:
  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8b ce		 mov	 ecx, esi

; 1149 : 
; 1150 :     if (rgn)
; 1151 :     rgn->InsertObject(exp);

  000fb	8b 06		 mov	 eax, DWORD PTR [esi]
  000fd	57		 push	 edi
  000fe	ff 50 20	 call	 DWORD PTR [eax+32]

; 1152 : 
; 1153 :     else if (active_region)
; 1154 :     active_region->InsertObject(exp);
; 1155 : 
; 1156 :     return exp;

  00101	8b c7		 mov	 eax, edi

; 1157 : }

  00103	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00106	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010d	59		 pop	 ecx
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c2 20 00	 ret	 32			; 00000020H
$LN3@CreateExpl:

; 1146 :     return 0;

  00116	33 c0		 xor	 eax, eax

; 1157 : }

  00118	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00122	59		 pop	 ecx
  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z$0:
  00000	68 7c 04 00 00	 push	 1148			; 0000047cH
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 45 1c	 mov	 eax, DWORD PTR $T4[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__ehhandler$?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z ENDP ; Sim::CreateExplosion
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_object$ = 8						; size = 4
?FindNearestTerrainRegion@Sim@@QAEPAVSimRegion@@PAVSimObject@@@Z PROC ; Sim::FindNearestTerrainRegion
; _this$ = ecx

; 1406 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1407 :     return FindNearestRegion(object, AIR_SPACE);

  00004	6a 01		 push	 1
  00006	ff 75 08	 push	 DWORD PTR _object$[ebp]
  00009	e8 00 00 00 00	 call	 ?FindNearestRegion@Sim@@QAEPAVSimRegion@@PAVSimObject@@H@Z ; Sim::FindNearestRegion
  0000e	59		 pop	 ecx

; 1408 : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?FindNearestTerrainRegion@Sim@@QAEPAVSimRegion@@PAVSimObject@@@Z ENDP ; Sim::FindNearestTerrainRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_rgn$1 = -8						; size = 8
_name$ = 8						; size = 4
_rgn_name$ = 12						; size = 4
?FindShip@Sim@@QAEPAVShip@@PBD0@Z PROC			; Sim::FindShip
; _this$ = ecx

; 1041 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1042 :     Ship* ship = 0;
; 1043 : 
; 1044 :     if (rgn_name) {

  00006	8b 45 0c	 mov	 eax, DWORD PTR _rgn_name$[ebp]
  00009	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	33 f6		 xor	 esi, esi
  00010	8b d9		 mov	 ebx, ecx
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _name$[ebp]
  00016	85 c0		 test	 eax, eax
  00018	74 18		 je	 SHORT $LN18@FindShip

; 1045 :         SimRegion* rgn = FindRegion(rgn_name);

  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?FindRegion@Sim@@QAEPAVSimRegion@@PBD@Z ; Sim::FindRegion

; 1046 :         if (rgn)

  00020	85 c0		 test	 eax, eax
  00022	74 0e		 je	 SHORT $LN18@FindShip

; 1047 :         ship = rgn->FindShip(name);

  00024	57		 push	 edi
  00025	8b c8		 mov	 ecx, eax
  00027	e8 00 00 00 00	 call	 ?FindShip@SimRegion@@QAEPAVShip@@PBD@Z ; SimRegion::FindShip
  0002c	8b f0		 mov	 esi, eax

; 1048 :     }
; 1049 : 
; 1050 :     if (!ship) {

  0002e	85 f6		 test	 esi, esi
  00030	75 44		 jne	 SHORT $LN3@FindShip
$LN18@FindShip:

; 1051 :         ListIter<SimRegion> rgn = regions;

  00032	8d 43 58	 lea	 eax, DWORD PTR [ebx+88]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00035	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _rgn$1[esp+28], -1

; 108  :    int operator++() { return next() != 0; }

  0003d	8d 4c 24 10	 lea	 ecx, DWORD PTR _rgn$1[esp+24]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00041	89 44 24 10	 mov	 DWORD PTR _rgn$1[esp+24], eax

; 108  :    int operator++() { return next() != 0; }

  00045	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  0004a	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1052 :         while (++rgn && !ship)

  0004c	74 26		 je	 SHORT $LN19@FindShip
  0004e	66 90		 npad	 2
$LL2@FindShip:
  00050	85 f6		 test	 esi, esi
  00052	75 20		 jne	 SHORT $LN19@FindShip
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00054	8d 4c 24 10	 lea	 ecx, DWORD PTR _rgn$1[esp+24]
  00058	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1053 :         ship = rgn->FindShip(name);

  0005d	57		 push	 edi
  0005e	8b c8		 mov	 ecx, eax
  00060	e8 00 00 00 00	 call	 ?FindShip@SimRegion@@QAEPAVShip@@PBD@Z ; SimRegion::FindShip
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00065	8d 4c 24 10	 lea	 ecx, DWORD PTR _rgn$1[esp+24]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1053 :         ship = rgn->FindShip(name);

  00069	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0006b	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00070	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1052 :         while (++rgn && !ship)

  00072	75 dc		 jne	 SHORT $LL2@FindShip
$LN19@FindShip:

; 1054 :     }
; 1055 : 
; 1056 :     return ship;

  00074	8b c6		 mov	 eax, esi
$LN3@FindShip:

; 1057 : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
?FindShip@Sim@@QAEPAVShip@@PBD0@Z ENDP			; Sim::FindShip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T1 = 8							; size = 4
_obj$ = 8						; size = 4
_rgn$ = 12						; size = 4
_loc$ = 16						; size = 4
_type$ = 20						; size = 4
_fc1$ = 24						; size = 4
_fc2$ = 28						; size = 4
?RequestHyperJump@Sim@@QAEXPAVShip@@PAVSimRegion@@ABUPoint@@H00@Z PROC ; Sim::RequestHyperJump
; _this$ = ecx

; 1503 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 1504 :     bool hyperdrive = false;
; 1505 : 
; 1506 :     if (obj->GetQuantumDrive() && obj->GetQuantumDrive()->Subtype() == QuantumDrive::HYPER)

  00005	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  00008	32 db		 xor	 bl, bl
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 86 38 03 00
	00		 mov	 eax, DWORD PTR [esi+824]
  00013	85 c0		 test	 eax, eax
  00015	74 0e		 je	 SHORT $LN2@RequestHyp
  00017	b9 01 00 00 00	 mov	 ecx, 1
  0001c	0f b6 db	 movzx	 ebx, bl
  0001f	39 48 14	 cmp	 DWORD PTR [eax+20], ecx
  00022	0f 44 d9	 cmove	 ebx, ecx
$LN2@RequestHyp:
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00025	6a 30		 push	 48			; 00000030H
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1509 :     jumplist.append(new(__FILE__,__LINE__) SimHyper(obj, rgn, loc, type, hyperdrive, fc1, fc2));

  0002c	8b d0		 mov	 edx, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  0002e	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1509 :     jumplist.append(new(__FILE__,__LINE__) SimHyper(obj, rgn, loc, type, hyperdrive, fc1, fc2));

  00031	89 55 08	 mov	 DWORD PTR $T1[ebp], edx
  00034	85 d2		 test	 edx, edx
  00036	74 4d		 je	 SHORT $LN4@RequestHyp
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00038	8b 45 10	 mov	 eax, DWORD PTR _loc$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 114  :     : ship(o), rgn(r), loc(l), type(t), hyperdrive(h), fc_src(fc1), fc_dst(fc2)  { }

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _rgn$[ebp]
  0003e	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 1509 :     jumplist.append(new(__FILE__,__LINE__) SimHyper(obj, rgn, loc, type, hyperdrive, fc1, fc2));

  00041	8d 4f 70	 lea	 ecx, DWORD PTR [edi+112]

; 114  :     : ship(o), rgn(r), loc(l), type(t), hyperdrive(h), fc_src(fc1), fc_dst(fc2)  { }

  00044	89 32		 mov	 DWORD PTR [edx], esi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00046	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0004a	f2 0f 11 42 08	 movsd	 QWORD PTR [edx+8], xmm0
  0004f	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00054	f2 0f 11 42 10	 movsd	 QWORD PTR [edx+16], xmm0
  00059	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 114  :     : ship(o), rgn(r), loc(l), type(t), hyperdrive(h), fc_src(fc1), fc_dst(fc2)  { }

  0005e	8b 45 14	 mov	 eax, DWORD PTR _type$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00061	f2 0f 11 42 18	 movsd	 QWORD PTR [edx+24], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 114  :     : ship(o), rgn(r), loc(l), type(t), hyperdrive(h), fc_src(fc1), fc_dst(fc2)  { }

  00066	89 42 20	 mov	 DWORD PTR [edx+32], eax
  00069	8b 45 18	 mov	 eax, DWORD PTR _fc1$[ebp]
  0006c	89 42 28	 mov	 DWORD PTR [edx+40], eax
  0006f	8b 45 1c	 mov	 eax, DWORD PTR _fc2$[ebp]

; 1509 :     jumplist.append(new(__FILE__,__LINE__) SimHyper(obj, rgn, loc, type, hyperdrive, fc1, fc2));

  00072	52		 push	 edx

; 114  :     : ship(o), rgn(r), loc(l), type(t), hyperdrive(h), fc_src(fc1), fc_dst(fc2)  { }

  00073	88 5a 24	 mov	 BYTE PTR [edx+36], bl
  00076	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 1509 :     jumplist.append(new(__FILE__,__LINE__) SimHyper(obj, rgn, loc, type, hyperdrive, fc1, fc2));

  00079	e8 00 00 00 00	 call	 ?append@?$List@VSimHyper@@@@QAEXPBVSimHyper@@@Z ; List<SimHyper>::append
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx

; 1510 : }

  00081	5d		 pop	 ebp
  00082	c2 18 00	 ret	 24			; 00000018H
$LN4@RequestHyp:

; 1509 :     jumplist.append(new(__FILE__,__LINE__) SimHyper(obj, rgn, loc, type, hyperdrive, fc1, fc2));

  00085	33 d2		 xor	 edx, edx
  00087	8d 4f 70	 lea	 ecx, DWORD PTR [edi+112]
  0008a	52		 push	 edx
  0008b	e8 00 00 00 00	 call	 ?append@?$List@VSimHyper@@@@QAEXPBVSimHyper@@@Z ; List<SimHyper>::append
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx

; 1510 : }

  00093	5d		 pop	 ebp
  00094	c2 18 00	 ret	 24			; 00000018H
?RequestHyperJump@Sim@@QAEXPAVShip@@PAVSimRegion@@ABUPoint@@H00@Z ENDP ; Sim::RequestHyperJump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\missionevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 8
$T3 = -36						; size = 8
_ship_name$ = -28					; size = 8
_iter$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
_event_id$ = 12						; size = 4
_ship$ = 16						; size = 4
_param$ = 20						; size = 4
?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z PROC		; Sim::ProcessEventTrigger
; _this$ = ecx

; 1882 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 1883 :     Text ship_name = ship;

  0002a	ff 75 10	 push	 DWORD PTR _ship$[ebp]
  0002d	8d 4d e4	 lea	 ecx, DWORD PTR _ship_name$[ebp]
  00030	e8 00 00 00 00	 call	 ??0Text@@QAE@PBD@Z	; Text::Text
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1884 : 
; 1885 :     ListIter<MissionEvent> iter = events;

  0003c	8d 86 a0 00 00
	00		 lea	 eax, DWORD PTR [esi+160]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00042	8d 4d ec	 lea	 ecx, DWORD PTR _iter$[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00045	89 45 ec	 mov	 DWORD PTR _iter$[ebp], eax
  00048	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _iter$[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  0004f	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionEvent@@@@QAEPAVMissionEvent@@XZ ; ListIter<MissionEvent>::next
  00054	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1886 :     while (++iter) {

  00056	0f 84 83 00 00
	00		 je	 $LN3@ProcessEve
  0005c	8b 5d 14	 mov	 ebx, DWORD PTR _param$[ebp]
  0005f	8b 7d 08	 mov	 edi, DWORD PTR _type$[ebp]
$LL2@ProcessEve:

; 1887 :         MissionEvent* event = iter.value();

  00062	8d 4d ec	 lea	 ecx, DWORD PTR _iter$[ebp]
  00065	e8 00 00 00 00	 call	 ?value@?$ListIter@VMissionEvent@@@@QAEPAVMissionEvent@@XZ ; ListIter<MissionEvent>::value
  0006a	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\stars45\missionevent.h

; 124  :     bool                 IsPending()       const { return status == PENDING;  }

  0006c	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1889 :         if (event->IsPending() && event->Trigger() == type) {

  00070	75 61		 jne	 SHORT $LN14@ProcessEve
  00072	39 be 98 00 00
	00		 cmp	 DWORD PTR [esi+152], edi
  00078	75 59		 jne	 SHORT $LN14@ProcessEve

; 1890 :             switch (type) {

  0007a	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0007d	83 f8 08	 cmp	 eax, 8
  00080	77 51		 ja	 SHORT $LN14@ProcessEve
  00082	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@ProcessEve[eax]
  00089	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN39@ProcessEve[eax*4]
$LN7@ProcessEve:

; 1891 :             case MissionEvent::TRIGGER_DAMAGE:
; 1892 :             case MissionEvent::TRIGGER_DESTROYED:
; 1893 :             case MissionEvent::TRIGGER_JUMP:
; 1894 :             case MissionEvent::TRIGGER_LAUNCH:
; 1895 :             case MissionEvent::TRIGGER_DOCK:
; 1896 :             case MissionEvent::TRIGGER_TARGET:
; 1897 :                 if (event->TriggerParam() <= param) {

  00090	6a 00		 push	 0
  00092	8b ce		 mov	 ecx, esi
  00094	e8 00 00 00 00	 call	 ?TriggerParam@MissionEvent@@QBEHH@Z ; MissionEvent::TriggerParam
  00099	3b c3		 cmp	 eax, ebx
  0009b	7f 36		 jg	 SHORT $LN14@ProcessEve

; 1898 :                     if (ship_name.indexOf(event->TriggerShip()) == 0)

  0009d	8d 45 dc	 lea	 eax, DWORD PTR $T3[ebp]
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ?TriggerShip@MissionEvent@@QBE?AVText@@XZ ; MissionEvent::TriggerShip
  000a6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000aa	8d 4d e4	 lea	 ecx, DWORD PTR _ship_name$[ebp]
  000ad	ff 30		 push	 DWORD PTR [eax]
  000af	e8 00 00 00 00	 call	 ?indexOf@Text@@QBEHPBD@Z ; Text::indexOf
  000b4	85 c0		 test	 eax, eax
  000b6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ba	8d 4d dc	 lea	 ecx, DWORD PTR $T3[ebp]
  000bd	0f 94 c3	 sete	 bl
$LN38@ProcessEve:

; 1905 :                     if (ship_name.indexOf(event->TriggerShip()) == 0)

  000c0	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  000c5	84 db		 test	 bl, bl
  000c7	74 07		 je	 SHORT $LN36@ProcessEve

; 1906 :                     event->Activate();

  000c9	8b ce		 mov	 ecx, esi
  000cb	e8 00 00 00 00	 call	 ?Activate@MissionEvent@@QAEXXZ ; MissionEvent::Activate
$LN36@ProcessEve:
  000d0	8b 5d 14	 mov	 ebx, DWORD PTR _param$[ebp]
$LN14@ProcessEve:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000d3	8d 4d ec	 lea	 ecx, DWORD PTR _iter$[ebp]
  000d6	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionEvent@@@@QAEPAVMissionEvent@@XZ ; ListIter<MissionEvent>::next
  000db	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1886 :     while (++iter) {

  000dd	75 83		 jne	 SHORT $LL2@ProcessEve
$LN3@ProcessEve:

; 1914 :                 break;
; 1915 :             }
; 1916 :         }
; 1917 :     }
; 1918 : }

  000df	8d 4d e4	 lea	 ecx, DWORD PTR _ship_name$[ebp]
  000e2	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  000e7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ea	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f1	59		 pop	 ecx
  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 10 00	 ret	 16			; 00000010H
$LN10@ProcessEve:

; 1899 :                     event->Activate();
; 1900 :                 }
; 1901 :                 break;
; 1902 : 
; 1903 :             case MissionEvent::TRIGGER_NAVPT:
; 1904 :                 if (event->TriggerParam() == param) {

  000fb	6a 00		 push	 0
  000fd	8b ce		 mov	 ecx, esi
  000ff	e8 00 00 00 00	 call	 ?TriggerParam@MissionEvent@@QBEHH@Z ; MissionEvent::TriggerParam
  00104	3b c3		 cmp	 eax, ebx
  00106	75 cb		 jne	 SHORT $LN14@ProcessEve

; 1905 :                     if (ship_name.indexOf(event->TriggerShip()) == 0)

  00108	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?TriggerShip@MissionEvent@@QBE?AVText@@XZ ; MissionEvent::TriggerShip
  00111	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00115	8d 4d e4	 lea	 ecx, DWORD PTR _ship_name$[ebp]
  00118	ff 30		 push	 DWORD PTR [eax]
  0011a	e8 00 00 00 00	 call	 ?indexOf@Text@@QBEHPBD@Z ; Text::indexOf
  0011f	85 c0		 test	 eax, eax
  00121	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00125	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  00128	0f 94 c3	 sete	 bl

; 1907 :                 }
; 1908 :                 break;

  0012b	eb 93		 jmp	 SHORT $LN38@ProcessEve
$LN13@ProcessEve:

; 1909 : 
; 1910 :             case MissionEvent::TRIGGER_EVENT:
; 1911 :             case MissionEvent::TRIGGER_SKIPPED:
; 1912 :                 if (event->TriggerParam() == event_id)

  0012d	6a 00		 push	 0
  0012f	8b ce		 mov	 ecx, esi
  00131	e8 00 00 00 00	 call	 ?TriggerParam@MissionEvent@@QBEHH@Z ; MissionEvent::TriggerParam
  00136	3b 45 0c	 cmp	 eax, DWORD PTR _event_id$[ebp]
  00139	75 98		 jne	 SHORT $LN14@ProcessEve

; 1913 :                 event->Activate();

  0013b	e8 00 00 00 00	 call	 ?Activate@MissionEvent@@QAEXXZ ; MissionEvent::Activate
  00140	eb 91		 jmp	 SHORT $LN14@ProcessEve
  00142	66 90		 npad	 2
$LN39@ProcessEve:

; 1914 :                 break;
; 1915 :             }
; 1916 :         }
; 1917 :     }
; 1918 : }

  00144	00 00 00 00	 DD	 $LN7@ProcessEve
  00148	00 00 00 00	 DD	 $LN10@ProcessEve
  0014c	00 00 00 00	 DD	 $LN13@ProcessEve
$LN34@ProcessEve:
  00150	00		 DB	 0
  00151	00		 DB	 0
  00152	00		 DB	 0
  00153	00		 DB	 0
  00154	00		 DB	 0
  00155	01		 DB	 1
  00156	02		 DB	 2
  00157	02		 DB	 2
  00158	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _ship_name$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z$1:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z$2:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__ehhandler$?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z ENDP		; Sim::ProcessEventTrigger
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_ename$1 = -16						; size = 8
_iter$ = -8						; size = 8
_name$ = 8						; size = 4
?FindElement@Sim@@QAEPAVElement@@PBD@Z PROC		; Sim::FindElement
; _this$ = ecx

; 977  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	56		 push	 esi

; 978  :     ListIter<Element> iter = elements;

  0000a	8d 81 88 00 00
	00		 lea	 eax, DWORD PTR [ecx+136]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00010	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+24], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 977  : {

  00018	57		 push	 edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00019	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+24]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0001d	89 44 24 10	 mov	 DWORD PTR _iter$[esp+24], eax

; 108  :    int operator++() { return next() != 0; }

  00021	e8 00 00 00 00	 call	 ?next@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::next
  00026	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 980  :     while (++iter) {

  00028	74 7c		 je	 SHORT $LN3@FindElemen
  0002a	8b 75 08	 mov	 esi, DWORD PTR _name$[ebp]
  0002d	0f 1f 00	 npad	 3
$LL2@FindElemen:

; 981  :         Element* elem  = iter.value();

  00030	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+24]
  00034	e8 00 00 00 00	 call	 ?value@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::value
  00039	8b f8		 mov	 edi, eax
; File d:\programming\starshatter\trunk\stars45\element.h

; 71   :     const Text&       Name()            const { return name;             }

  0003b	8d 4f 2c	 lea	 ecx, DWORD PTR [edi+44]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 982  :         Text     ename = elem->Name();

  0003e	51		 push	 ecx
  0003f	8d 4c 24 0c	 lea	 ecx, DWORD PTR _ename$1[esp+28]
  00043	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
; File d:\programming\starshatter\trunk\foundationex\text.h

; 160  :    if (rep->sensitive)

  00048	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ename$1[esp+28]
  0004c	80 79 10 00	 cmp	 BYTE PTR [ecx+16], 0
  00050	74 2d		 je	 SHORT $LN16@FindElemen

; 161  :       return strcmp(sym, s);

  00052	8b 44 24 08	 mov	 eax, DWORD PTR _ename$1[esp+24]
  00056	8b ce		 mov	 ecx, esi
$LL24@FindElemen:
  00058	8a 10		 mov	 dl, BYTE PTR [eax]
  0005a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0005c	75 1a		 jne	 SHORT $LN25@FindElemen
  0005e	84 d2		 test	 dl, dl
  00060	74 12		 je	 SHORT $LN26@FindElemen
  00062	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00065	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00068	75 0e		 jne	 SHORT $LN25@FindElemen
  0006a	83 c0 02	 add	 eax, 2
  0006d	83 c1 02	 add	 ecx, 2
  00070	84 d2		 test	 dl, dl
  00072	75 e4		 jne	 SHORT $LL24@FindElemen
$LN26@FindElemen:
  00074	33 c0		 xor	 eax, eax
  00076	eb 14		 jmp	 SHORT $LN17@FindElemen
$LN25@FindElemen:
  00078	1b c0		 sbb	 eax, eax
  0007a	83 c8 01	 or	 eax, 1
  0007d	eb 0d		 jmp	 SHORT $LN17@FindElemen
$LN16@FindElemen:

; 162  :    else
; 163  :       return _stricmp(sym, s);

  0007f	56		 push	 esi
  00080	ff 74 24 0c	 push	 DWORD PTR _ename$1[esp+28]
  00084	e8 00 00 00 00	 call	 __stricmp
  00089	83 c4 08	 add	 esp, 8
$LN17@FindElemen:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 986  :     }

  0008c	8d 4c 24 08	 lea	 ecx, DWORD PTR _ename$1[esp+24]
; File d:\programming\starshatter\trunk\foundationex\text.h

; 198  : inline int operator==(const Text& l, const char* r) { return l.compare(r) == 0; }

  00090	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 984  :         if (ename == name)

  00092	74 1c		 je	 SHORT $LN20@FindElemen

; 986  :     }

  00094	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00099	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+24]
  0009d	e8 00 00 00 00	 call	 ?next@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::next
  000a2	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 980  :     while (++iter) {

  000a4	75 8a		 jne	 SHORT $LL2@FindElemen
$LN3@FindElemen:

; 987  : 
; 988  :     return 0;

  000a6	33 c0		 xor	 eax, eax

; 989  : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
$LN20@FindElemen:

; 985  :         return elem;

  000b0	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  000b5	8b c7		 mov	 eax, edi

; 989  : }

  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 04 00	 ret	 4
?FindElement@Sim@@QAEPAVElement@@PBD@Z ENDP		; Sim::FindElement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_elem$ = 8						; size = 4
?DestroyElement@Sim@@QAEXPAVElement@@@Z PROC		; Sim::DestroyElement
; _this$ = ecx

; 968  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 969  :     if (elements.contains(elem))

  00004	8b 75 08	 mov	 esi, DWORD PTR _elem$[ebp]
  00007	57		 push	 edi
  00008	8d b9 88 00 00
	00		 lea	 edi, DWORD PTR [ecx+136]
  0000e	56		 push	 esi
  0000f	8b cf		 mov	 ecx, edi
  00011	e8 00 00 00 00	 call	 ?contains@?$List@VElement@@@@QBE_NPBVElement@@@Z ; List<Element>::contains
  00016	84 c0		 test	 al, al
  00018	74 08		 je	 SHORT $LN2@DestroyEle

; 970  :     elements.remove(elem);

  0001a	56		 push	 esi
  0001b	8b cf		 mov	 ecx, edi
  0001d	e8 00 00 00 00	 call	 ?remove@?$List@VElement@@@@QAEPAVElement@@PBV2@@Z ; List<Element>::remove
$LN2@DestroyEle:

; 971  : 
; 972  :     delete elem;

  00022	85 f6		 test	 esi, esi
  00024	74 08		 je	 SHORT $LN4@DestroyEle
  00026	8b 06		 mov	 eax, DWORD PTR [esi]
  00028	8b ce		 mov	 ecx, esi
  0002a	6a 01		 push	 1
  0002c	ff 10		 call	 DWORD PTR [eax]
$LN4@DestroyEle:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 973  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?DestroyElement@Sim@@QAEXPAVElement@@@Z ENDP		; Sim::DestroyElement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -64						; size = 24
$T3 = -40						; size = 24
$T4 = -40						; size = 24
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_reg_num$ = 12						; size = 4
$T5 = 16						; size = 4
_design$ = 16						; size = 4
_rgn_name$ = 20						; size = 4
_loc$ = 24						; size = 4
_IFF$ = 28						; size = 4
_cmd_ai$ = 32						; size = 4
_loadout$ = 36						; size = 4
?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z PROC ; Sim::CreateShip
; _this$ = ecx

; 1013 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1014 :     if (!design) {

  00028	8b 75 10	 mov	 esi, DWORD PTR _design$[ebp]
  0002b	85 f6		 test	 esi, esi
  0002d	75 26		 jne	 SHORT $LN2@CreateShip

; 1015 :         Print("WARNING: CreateShip(%s): invalid design\n", name);

  0002f	ff 75 08	 push	 DWORD PTR _name$[ebp]
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@BABHFBHK@WARNING?3?5CreateShip?$CI?$CFs?$CJ?3?5invalid@
  00037	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  0003c	83 c4 08	 add	 esp, 8
$LN47@CreateShip:

; 1016 :         return 0;

  0003f	33 c0		 xor	 eax, eax

; 1037 : }

  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 20 00	 ret	 32			; 00000020H
$LN2@CreateShip:

; 1017 :     }
; 1018 : 
; 1019 :     SimRegion* rgn = FindRegion(rgn_name);

  00055	ff 75 14	 push	 DWORD PTR _rgn_name$[ebp]
  00058	e8 00 00 00 00	 call	 ?FindRegion@Sim@@QAEPAVSimRegion@@PBD@Z ; Sim::FindRegion
  0005d	8b d8		 mov	 ebx, eax

; 1020 : 
; 1021 :     if (!rgn) {

  0005f	85 db		 test	 ebx, ebx
  00061	74 dc		 je	 SHORT $LN47@CreateShip
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00063	68 d0 04 00 00	 push	 1232			; 000004d0H
  00068	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006d	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1025 :     Ship* ship = new(__FILE__,__LINE__) Ship(name, reg_num, design, IFF, cmd_ai, loadout);

  00070	89 45 10	 mov	 DWORD PTR $T5[ebp], eax
  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007a	85 c0		 test	 eax, eax
  0007c	74 1b		 je	 SHORT $LN7@CreateShip
  0007e	ff 75 24	 push	 DWORD PTR _loadout$[ebp]
  00081	8b c8		 mov	 ecx, eax
  00083	ff 75 20	 push	 DWORD PTR _cmd_ai$[ebp]
  00086	ff 75 1c	 push	 DWORD PTR _IFF$[ebp]
  00089	56		 push	 esi
  0008a	ff 75 0c	 push	 DWORD PTR _reg_num$[ebp]
  0008d	ff 75 08	 push	 DWORD PTR _name$[ebp]
  00090	e8 00 00 00 00	 call	 ??0Ship@@QAE@PBD0PAVShipDesign@@HHPBH@Z ; Ship::Ship
  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN8@CreateShip
$LN7@CreateShip:
  00099	33 ff		 xor	 edi, edi
$LN8@CreateShip:

; 1026 :     ship->MoveTo(loc.OtherHand());

  0009b	8b 4d 18	 mov	 ecx, DWORD PTR _loc$[ebp]
  0009e	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  000a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a8	8b 17		 mov	 edx, DWORD PTR [edi]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?OtherHand@Point@@QBE?AU1@XZ ; Point::OtherHand
  000b0	50		 push	 eax
  000b1	8b cf		 mov	 ecx, edi
  000b3	ff 52 1c	 call	 DWORD PTR [edx+28]
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  000b6	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1029 :         Print("Inserting Ship(%s) into Region(%s) (%s)\n", ship->Name(), rgn->Name(), FormatGameTime());

  000b9	e8 00 00 00 00	 call	 ?FormatGameTime@@YAPBDXZ ; FormatGameTime
  000be	50		 push	 eax
  000bf	56		 push	 esi
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  000c0	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1029 :         Print("Inserting Ship(%s) into Region(%s) (%s)\n", ship->Name(), rgn->Name(), FormatGameTime());

  000c3	50		 push	 eax
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@POPAIFMC@Inserting?5Ship?$CI?$CFs?$CJ?5into?5Region?$CI?$CF@
  000c9	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 1030 :         rgn->InsertObject(ship);

  000ce	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d0	83 c4 10	 add	 esp, 16			; 00000010H
  000d3	8b cb		 mov	 ecx, ebx
  000d5	57		 push	 edi
  000d6	ff 50 28	 call	 DWORD PTR [eax+40]

; 1031 : 
; 1032 :         if (ship->IsAirborne() && ship->AltitudeAGL() > 25)

  000d9	8b cf		 mov	 ecx, edi
  000db	e8 00 00 00 00	 call	 ?IsAirborne@Ship@@QBE_NXZ ; Ship::IsAirborne
  000e0	84 c0		 test	 al, al
  000e2	74 69		 je	 SHORT $LN11@CreateShip
  000e4	8b cf		 mov	 ecx, edi
  000e6	e8 00 00 00 00	 call	 ?AltitudeAGL@Ship@@QBENXZ ; Ship::AltitudeAGL
  000eb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4039000000000000
  000f3	76 58		 jbe	 SHORT $LN11@CreateShip
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 105  :     Point             Heading()   const { return cam.vpn();  }

  000f5	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  000f8	50		 push	 eax
  000f9	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  000fc	e8 00 00 00 00	 call	 ?vpn@Camera@@QBE?AUPoint@@XZ ; Camera::vpn
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1033 :         ship->SetVelocity(ship->Heading() * 250);

  00101	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@406f400000000000
  00109	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  0010c	50		 push	 eax
  0010d	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00110	e8 00 00 00 00	 call	 ??DPoint@@QBE?AU0@N@Z	; Point::operator*
  00115	8b 17		 mov	 edx, DWORD PTR [edi]
  00117	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ??_7Ship@@6BSimObject@@@
  0011d	75 28		 jne	 SHORT $LN12@CreateShip
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  0011f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00123	f2 0f 11 87 a8
	00 00 00	 movsd	 QWORD PTR [edi+168], xmm0
  0012b	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00130	f2 0f 11 87 b0
	00 00 00	 movsd	 QWORD PTR [edi+176], xmm0
  00138	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  0013d	f2 0f 11 87 b8
	00 00 00	 movsd	 QWORD PTR [edi+184], xmm0
  00145	eb 06		 jmp	 SHORT $LN11@CreateShip
$LN12@CreateShip:
  00147	50		 push	 eax
  00148	8b cf		 mov	 ecx, edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1033 :         ship->SetVelocity(ship->Heading() * 250);

  0014a	ff 52 6c	 call	 DWORD PTR [edx+108]
$LN11@CreateShip:

; 1034 :     }
; 1035 : 
; 1036 :     return ship;

  0014d	8b c7		 mov	 eax, edi

; 1037 : }

  0014f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00152	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00159	59		 pop	 ecx
  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
  0015c	5b		 pop	 ebx
  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z$0:
  00000	68 01 04 00 00	 push	 1025			; 00000401H
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 45 10	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__ehhandler$?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z ENDP ; Sim::CreateShip
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_ship$ = 8						; size = 4
?DestroyShip@Sim@@QAEXPAVShip@@@Z PROC			; Sim::DestroyShip
; _this$dead$ = ecx

; 1061 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR _ship$[ebp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  0000f	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  00014	75 17		 jne	 SHORT $LN8@DestroyShi
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00016	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
$LN4@DestroyShi:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1063 :     if (rgn)

  0001c	85 c0		 test	 eax, eax
  0001e	74 08		 je	 SHORT $LN2@DestroyShi

; 1064 :     rgn->DestroyShip(ship);

  00020	56		 push	 esi
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ?DestroyShip@SimRegion@@IAEXPAVShip@@@Z ; SimRegion::DestroyShip
$LN2@DestroyShi:
  00028	5e		 pop	 esi

; 1065 : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN8@DestroyShi:
  0002d	8b ce		 mov	 ecx, esi

; 1062 :     SimRegion* rgn = ship->GetRegion();

  0002f	ff d0		 call	 eax
  00031	eb e9		 jmp	 SHORT $LN4@DestroyShi
?DestroyShip@Sim@@QAEXPAVShip@@@Z ENDP			; Sim::DestroyShip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_rgn$ = -8						; size = 8
_show$ = 8						; size = 4
?ShowGrid@Sim@@QAEXH@Z PROC				; Sim::ShowGrid
; _this$ = ecx

; 1238 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 1239 :     Player* player = Player::GetCurrentPlayer();

  0000d	e8 00 00 00 00	 call	 ?GetCurrentPlayer@Player@@SAPAV1@XZ ; Player::GetCurrentPlayer

; 1240 : 
; 1241 :     if (player && player->GridMode() == 0) {

  00012	85 c0		 test	 eax, eax
  00014	74 14		 je	 SHORT $LN18@ShowGrid
  00016	83 b8 c8 00 00
	00 00		 cmp	 DWORD PTR [eax+200], 0
  0001d	75 0b		 jne	 SHORT $LN18@ShowGrid

; 1242 :         show       = 0;

  0001f	33 f6		 xor	 esi, esi

; 1243 :         grid_shown = false;

  00021	c6 87 bd 00 00
	00 00		 mov	 BYTE PTR [edi+189], 0
  00028	eb 03		 jmp	 SHORT $LN4@ShowGrid
$LN18@ShowGrid:
  0002a	8b 75 08	 mov	 esi, DWORD PTR _show$[ebp]
$LN4@ShowGrid:

; 1244 :     }
; 1245 : 
; 1246 :     ListIter<SimRegion> rgn = regions;

  0002d	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00030	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _rgn$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  00038	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0003c	89 44 24 08	 mov	 DWORD PTR _rgn$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  00040	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00045	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1247 :     while (++rgn) {

  00047	74 25		 je	 SHORT $LN3@ShowGrid
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@ShowGrid:

; 1248 :         rgn->ShowGrid(show);

  00050	56		 push	 esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00051	8d 4c 24 0c	 lea	 ecx, DWORD PTR _rgn$[esp+20]
  00055	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1248 :         rgn->ShowGrid(show);

  0005a	8b c8		 mov	 ecx, eax
  0005c	e8 00 00 00 00	 call	 ?ShowGrid@SimRegion@@QAEXH@Z ; SimRegion::ShowGrid
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00061	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$[esp+16]
  00065	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  0006a	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1247 :     while (++rgn) {

  0006c	75 e2		 jne	 SHORT $LL2@ShowGrid
$LN3@ShowGrid:

; 1249 :     }
; 1250 : 
; 1251 :     grid_shown = show?true:false;

  0006e	85 f6		 test	 esi, esi
  00070	0f 95 c0	 setne	 al
  00073	88 87 bd 00 00
	00		 mov	 BYTE PTR [edi+189], al

; 1252 : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
?ShowGrid@Sim@@QAEXH@Z ENDP				; Sim::ShowGrid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_iff$ = 8						; size = 4
?TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z PROC	; SimRegion::TrackList
; _this$ = ecx

; 3559 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3560 :     if (iff >= 0 && iff < 5)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iff$[ebp]
  00006	83 f8 04	 cmp	 eax, 4
  00009	77 0d		 ja	 SHORT $LN3@TrackList

; 3561 :     return track_database[iff];

  0000b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0000e	8d 40 2e	 lea	 eax, DWORD PTR [eax+46]
  00011	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 3565 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@TrackList:

; 3563 :     static List<Contact> empty;

  00018	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4HA
  00025	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0002b	7e 4b		 jle	 SHORT $LN2@TrackList
  0002d	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4HA
  00032	e8 00 00 00 00	 call	 __Init_thread_header
  00037	83 c4 04	 add	 esp, 4
  0003a	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4HA, -1
  00041	75 35		 jne	 SHORT $LN2@TrackList
  00043	68 00 00 00 00	 push	 OFFSET ??__Fempty@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@YAXXZ ; `SimRegion::TrackList'::`2'::`dynamic atexit destructor for 'empty''
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  00048	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?empty@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4V3@A, 0
  00052	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?empty@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4V3@A+4, 0
  0005c	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?empty@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4V3@A+8, 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3563 :     static List<Contact> empty;

  00066	e8 00 00 00 00	 call	 _atexit
  0006b	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4HA
  00070	e8 00 00 00 00	 call	 __Init_thread_footer
  00075	83 c4 08	 add	 esp, 8
$LN2@TrackList:

; 3564 :     return empty;

  00078	b8 00 00 00 00	 mov	 eax, OFFSET ?empty@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4V3@A

; 3565 : }

  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
?TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z ENDP	; SimRegion::TrackList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_rgn$ = -8						; size = 8
_name$ = 8						; size = 4
?FindRegion@Sim@@QAEPAVSimRegion@@PBD@Z PROC		; Sim::FindRegion
; _this$ = ecx

; 1376 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1377 :     ListIter<SimRegion> rgn = regions;

  00009	8d 41 58	 lea	 eax, DWORD PTR [ecx+88]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0000c	c7 44 24 08 ff
	ff ff ff	 mov	 DWORD PTR _rgn$[esp+16], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1376 : {

  00014	56		 push	 esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00015	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00019	89 44 24 08	 mov	 DWORD PTR _rgn$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  0001d	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00022	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1378 :     while (++rgn)

  00024	74 65		 je	 SHORT $LN3@FindRegion
  00026	8b 75 08	 mov	 esi, DWORD PTR _name$[ebp]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@FindRegion:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00030	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$[esp+16]
  00034	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
; File d:\programming\starshatter\trunk\foundationex\text.h

; 160  :    if (rep->sensitive)

  00039	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003c	80 79 10 00	 cmp	 BYTE PTR [ecx+16], 0
  00040	74 2c		 je	 SHORT $LN15@FindRegion

; 161  :       return strcmp(sym, s);

  00042	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00045	8b ce		 mov	 ecx, esi
$LL22@FindRegion:
  00047	8a 10		 mov	 dl, BYTE PTR [eax]
  00049	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0004b	75 1a		 jne	 SHORT $LN23@FindRegion
  0004d	84 d2		 test	 dl, dl
  0004f	74 12		 je	 SHORT $LN24@FindRegion
  00051	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00054	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00057	75 0e		 jne	 SHORT $LN23@FindRegion
  00059	83 c0 02	 add	 eax, 2
  0005c	83 c1 02	 add	 ecx, 2
  0005f	84 d2		 test	 dl, dl
  00061	75 e4		 jne	 SHORT $LL22@FindRegion
$LN24@FindRegion:
  00063	33 c0		 xor	 eax, eax
  00065	eb 13		 jmp	 SHORT $LN16@FindRegion
$LN23@FindRegion:
  00067	1b c0		 sbb	 eax, eax
  00069	83 c8 01	 or	 eax, 1
  0006c	eb 0c		 jmp	 SHORT $LN16@FindRegion
$LN15@FindRegion:

; 162  :    else
; 163  :       return _stricmp(sym, s);

  0006e	56		 push	 esi
  0006f	ff 70 0c	 push	 DWORD PTR [eax+12]
  00072	e8 00 00 00 00	 call	 __stricmp
  00077	83 c4 08	 add	 esp, 8
$LN16@FindRegion:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0007a	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$[esp+16]
; File d:\programming\starshatter\trunk\foundationex\text.h

; 198  : inline int operator==(const Text& l, const char* r) { return l.compare(r) == 0; }

  0007e	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1379 :     if (rgn->name == name)

  00080	74 12		 je	 SHORT $LN19@FindRegion
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00082	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00087	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1378 :     while (++rgn)

  00089	75 a5		 jne	 SHORT $LL2@FindRegion
$LN3@FindRegion:

; 1381 : 
; 1382 :     return 0;

  0008b	33 c0		 xor	 eax, eax

; 1383 : }

  0008d	5e		 pop	 esi
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
$LN19@FindRegion:

; 1380 :     return rgn.value();

  00094	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value

; 1383 : }

  00099	5e		 pop	 esi
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
?FindRegion@Sim@@QAEPAVSimRegion@@PBD@Z ENDP		; Sim::FindRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
_iter$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
?GetMissionElements@Sim@@QAE?AV?$ListIter@VMissionElement@@@@XZ PROC ; Sim::GetMissionElements
; _this$ = ecx

; 2022 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 5c 24 0c	 mov	 DWORD PTR _this$1$[esp+24], ebx

; 2023 :     mission_elements.destroy();

  00012	8d 8b ac 00 00
	00		 lea	 ecx, DWORD PTR [ebx+172]
  00018	e8 00 00 00 00	 call	 ?destroy@?$List@VMissionElement@@@@QAEXXZ ; List<MissionElement>::destroy

; 2024 : 
; 2025 :     ListIter<Element> iter = elements;

  0001d	8d 83 88 00 00
	00		 lea	 eax, DWORD PTR [ebx+136]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00023	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+28], -1

; 108  :    int operator++() { return next() != 0; }

  0002b	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+24]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0002f	89 44 24 10	 mov	 DWORD PTR _iter$[esp+24], eax

; 108  :    int operator++() { return next() != 0; }

  00033	e8 00 00 00 00	 call	 ?next@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::next
  00038	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2026 :     while (++iter) {

  0003a	74 79		 je	 SHORT $LN3@GetMission
  0003c	0f 1f 40 00	 npad	 4
$LL2@GetMission:

; 2027 :         Element* elem = iter.value();

  00040	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+24]
  00044	e8 00 00 00 00	 call	 ?value@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::value
  00049	8b d8		 mov	 ebx, eax

; 2028 : 
; 2029 :         int num_live_ships = 0;
; 2030 : 
; 2031 :         for (int i = 0; i < elem->NumShips(); i++) {

  0004b	33 f6		 xor	 esi, esi
  0004d	33 ff		 xor	 edi, edi
  0004f	39 73 38	 cmp	 DWORD PTR [ebx+56], esi
  00052	7e 23		 jle	 SHORT $LN5@GetMission
$LL6@GetMission:

; 2032 :             Ship* s = elem->GetShip(i+1);

  00054	46		 inc	 esi
  00055	8b cb		 mov	 ecx, ebx
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 ?GetShip@Element@@QAEPAVShip@@H@Z ; Element::GetShip

; 2034 :             if (s && !s->IsDying() && !s->IsDead())

  0005d	85 c0		 test	 eax, eax
  0005f	74 11		 je	 SHORT $LN4@GetMission
; File d:\programming\starshatter\trunk\stars45\ship.h

; 234  :     bool              IsDying()            const { return transition_type == TRANSITION_DEATH_SPIRAL; }

  00061	8b 80 60 04 00
	00		 mov	 eax, DWORD PTR [eax+1120]
  00067	83 f8 05	 cmp	 eax, 5
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2034 :             if (s && !s->IsDying() && !s->IsDead())

  0006a	74 06		 je	 SHORT $LN4@GetMission
; File d:\programming\starshatter\trunk\stars45\ship.h

; 235  :     bool              IsDead()             const { return transition_type == TRANSITION_DEAD;         }

  0006c	83 f8 06	 cmp	 eax, 6
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2034 :             if (s && !s->IsDying() && !s->IsDead())

  0006f	74 01		 je	 SHORT $LN4@GetMission

; 2035 :             num_live_ships++;

  00071	47		 inc	 edi
$LN4@GetMission:

; 2028 : 
; 2029 :         int num_live_ships = 0;
; 2030 : 
; 2031 :         for (int i = 0; i < elem->NumShips(); i++) {

  00072	3b 73 38	 cmp	 esi, DWORD PTR [ebx+56]
  00075	7c dd		 jl	 SHORT $LL6@GetMission
$LN5@GetMission:

; 2036 :         }
; 2037 : 
; 2038 :         if (elem->IsSquadron() || num_live_ships > 0) {

  00077	8b cb		 mov	 ecx, ebx
  00079	e8 00 00 00 00	 call	 ?IsSquadron@Element@@QBE_NXZ ; Element::IsSquadron
  0007e	84 c0		 test	 al, al
  00080	75 04		 jne	 SHORT $LN9@GetMission
  00082	85 ff		 test	 edi, edi
  00084	7e 1e		 jle	 SHORT $LN33@GetMission
$LN9@GetMission:

; 2039 :             MissionElement* msn_elem = CreateMissionElement(elem);

  00086	53		 push	 ebx
  00087	8b 5c 24 10	 mov	 ebx, DWORD PTR _this$1$[esp+28]
  0008b	8b cb		 mov	 ecx, ebx
  0008d	e8 00 00 00 00	 call	 ?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z ; Sim::CreateMissionElement

; 2040 : 
; 2041 :             if (msn_elem)

  00092	85 c0		 test	 eax, eax
  00094	74 12		 je	 SHORT $LN10@GetMission

; 2042 :             mission_elements.append(msn_elem);

  00096	50		 push	 eax
  00097	8d 8b ac 00 00
	00		 lea	 ecx, DWORD PTR [ebx+172]
  0009d	e8 00 00 00 00	 call	 ?append@?$List@VMissionElement@@@@QAEXPBVMissionElement@@@Z ; List<MissionElement>::append
  000a2	eb 04		 jmp	 SHORT $LN10@GetMission
$LN33@GetMission:
  000a4	8b 5c 24 0c	 mov	 ebx, DWORD PTR _this$1$[esp+24]
$LN10@GetMission:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000a8	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+24]
  000ac	e8 00 00 00 00	 call	 ?next@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::next
  000b1	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2026 :     while (++iter) {

  000b3	75 8b		 jne	 SHORT $LL2@GetMission
$LN3@GetMission:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000b5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000b8	8d 8b ac 00 00
	00		 lea	 ecx, DWORD PTR [ebx+172]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2047 : }

  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000c1	89 08		 mov	 DWORD PTR [eax], ecx
  000c3	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2047 : }

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 04 00	 ret	 4
?GetMissionElements@Sim@@QAE?AV?$ListIter@VMissionElement@@@@XZ ENDP ; Sim::GetMissionElements
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_h$1$ = -4						; size = 4
?FormatGameTime@@YAPBDXZ PROC				; FormatGameTime

; 3822 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 3823 :     static char txt[64];
; 3824 : 
; 3825 :     int t = Game::GameTime();

  00007	e8 00 00 00 00	 call	 ?GameTime@Game@@SAKXZ	; Game::GameTime
  0000c	8b d8		 mov	 ebx, eax

; 3826 : 
; 3827 :     int h = ( t                        / 3600000);

  0000e	b8 59 be 90 4a	 mov	 eax, 1250999897		; 4a90be59H
  00013	f7 eb		 imul	 ebx

; 3828 :     int m = ((t - h*3600000)           /   60000);

  00015	8b cb		 mov	 ecx, ebx
  00017	c1 fa 14	 sar	 edx, 20			; 00000014H
  0001a	8b f2		 mov	 esi, edx
  0001c	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001f	03 f2		 add	 esi, edx
  00021	69 c6 80 ee 36
	00		 imul	 eax, esi, 3600000
  00027	89 75 fc	 mov	 DWORD PTR _h$1$[ebp], esi
  0002a	2b c8		 sub	 ecx, eax
  0002c	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  00031	f7 e9		 imul	 ecx

; 3829 :     int s = ((t - h*3600000 - m*60000) /    1000);

  00033	8b c6		 mov	 eax, esi
  00035	8b cb		 mov	 ecx, ebx
  00037	c1 e0 04	 shl	 eax, 4
  0003a	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  0003d	2b c6		 sub	 eax, esi
  0003f	8b fa		 mov	 edi, edx
  00041	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00044	03 fa		 add	 edi, edx
  00046	8d 34 87	 lea	 esi, DWORD PTR [edi+eax*4]
  00049	69 c6 60 ea 00
	00		 imul	 eax, esi, 60000
  0004f	2b c8		 sub	 ecx, eax
  00051	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00056	f7 e9		 imul	 ecx

; 3830 :     int e = ( t - h*3600000 - m*60000 - s*1000);

  00058	8b c6		 mov	 eax, esi
  0005a	c1 fa 06	 sar	 edx, 6
  0005d	c1 e0 04	 shl	 eax, 4
  00060	8b ca		 mov	 ecx, edx
  00062	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00065	2b c6		 sub	 eax, esi
  00067	03 ca		 add	 ecx, edx
  00069	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0006c	69 c0 e8 03 00
	00		 imul	 eax, eax, 1000
  00072	2b d8		 sub	 ebx, eax

; 3831 : 
; 3832 :     if (h > 0)

  00074	8b 45 fc	 mov	 eax, DWORD PTR _h$1$[ebp]

; 3833 :     sprintf_s(txt, "%02d:%02d:%02d.%03d", h,m,s,e);

  00077	53		 push	 ebx
  00078	51		 push	 ecx
  00079	57		 push	 edi
  0007a	85 c0		 test	 eax, eax
  0007c	7e 1f		 jle	 SHORT $LN2@FormatGame
  0007e	50		 push	 eax
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MNIJIMLO@?$CF02d?3?$CF02d?3?$CF02d?4?$CF03d?$AA@
  00084	68 00 00 00 00	 push	 OFFSET ?txt@?1??FormatGameTime@@YAPBDXZ@4PADA
  00089	e8 00 00 00 00	 call	 ??$sprintf_s@$0EA@@@YAHAAY0EA@DPBDZZ ; sprintf_s<64>
  0008e	83 c4 18	 add	 esp, 24			; 00000018H

; 3836 : 
; 3837 :     return txt;

  00091	b8 00 00 00 00	 mov	 eax, OFFSET ?txt@?1??FormatGameTime@@YAPBDXZ@4PADA

; 3838 : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
$LN2@FormatGame:

; 3834 :     else
; 3835 :     sprintf_s(txt, "%02d:%02d.%03d", m,s,e);

  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GCEINJHL@?$CF02d?3?$CF02d?4?$CF03d?$AA@
  000a2	68 00 00 00 00	 push	 OFFSET ?txt@?1??FormatGameTime@@YAPBDXZ@4PADA
  000a7	e8 00 00 00 00	 call	 ??$sprintf_s@$0EA@@@YAHAAY0EA@DPBDZZ ; sprintf_s<64>
  000ac	83 c4 14	 add	 esp, 20			; 00000014H

; 3836 : 
; 3837 :     return txt;

  000af	b8 00 00 00 00	 mov	 eax, OFFSET ?txt@?1??FormatGameTime@@YAPBDXZ@4PADA

; 3838 : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
?FormatGameTime@@YAPBDXZ ENDP				; FormatGameTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_iter$1 = -8						; size = 8
_name$ = 8						; size = 4
?FindOrbitalBody@Sim@@QAEPAVOrbital@@PBD@Z PROC		; Sim::FindOrbitalBody
; _this$ = ecx

; 1103 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1104 :     Orbital* body = 0;
; 1105 : 
; 1106 :     if (mission) {

  00006	8b 81 c0 00 00
	00		 mov	 eax, DWORD PTR [ecx+192]
  0000c	83 ec 08	 sub	 esp, 8
  0000f	56		 push	 esi
  00010	33 f6		 xor	 esi, esi
  00012	57		 push	 edi
  00013	85 c0		 test	 eax, eax
  00015	74 45		 je	 SHORT $LN18@FindOrbita
; File d:\programming\starshatter\trunk\stars45\mission.h

; 141  :     List<StarSystem>&    GetSystemList()       { return system_list;  }

  00017	05 e0 00 00 00	 add	 eax, 224		; 000000e0H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0001c	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _iter$1[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  00024	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$1[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00028	89 44 24 08	 mov	 DWORD PTR _iter$1[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  0002c	e8 00 00 00 00	 call	 ?next@?$ListIter@VStarSystem@@@@QAEPAVStarSystem@@XZ ; ListIter<StarSystem>::next
  00031	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1108 :         while (++iter && !body) {

  00033	74 27		 je	 SHORT $LN18@FindOrbita
  00035	8b 7d 08	 mov	 edi, DWORD PTR _name$[ebp]
$LL2@FindOrbita:
  00038	85 f6		 test	 esi, esi
  0003a	75 20		 jne	 SHORT $LN18@FindOrbita

; 1109 :             StarSystem* sys = iter.value();

  0003c	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$1[esp+16]
  00040	e8 00 00 00 00	 call	 ?value@?$ListIter@VStarSystem@@@@QAEPAVStarSystem@@XZ ; ListIter<StarSystem>::value

; 1110 :             body = sys->FindOrbital(name);

  00045	57		 push	 edi
  00046	8b c8		 mov	 ecx, eax
  00048	e8 00 00 00 00	 call	 ?FindOrbital@StarSystem@@QAEPAVOrbital@@PBD@Z ; StarSystem::FindOrbital
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0004d	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$1[esp+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1110 :             body = sys->FindOrbital(name);

  00051	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00053	e8 00 00 00 00	 call	 ?next@?$ListIter@VStarSystem@@@@QAEPAVStarSystem@@XZ ; ListIter<StarSystem>::next
  00058	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1108 :         while (++iter && !body) {

  0005a	75 dc		 jne	 SHORT $LL2@FindOrbita
$LN18@FindOrbita:

; 1111 :         }
; 1112 :     }
; 1113 : 
; 1114 :     return body;
; 1115 : }

  0005c	5f		 pop	 edi
  0005d	8b c6		 mov	 eax, esi
  0005f	5e		 pop	 esi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?FindOrbitalBody@Sim@@QAEPAVOrbital@@PBD@Z ENDP		; Sim::FindOrbitalBody
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
?MissionClock@Sim@@QBENXZ PROC				; Sim::MissionClock
; _this$ = ecx

; 1922 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1923 :     return (Game::GameTime() - start_time) / 1000.0;

  00003	e8 00 00 00 00	 call	 ?GameTime@Game@@SAKXZ	; Game::GameTime
  00008	2b 86 c8 00 00
	00		 sub	 eax, DWORD PTR [esi+200]
  0000e	5e		 pop	 esi
  0000f	66 0f 6e c0	 movd	 xmm0, eax
  00013	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00017	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001a	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00023	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000

; 1924 : }

  0002b	c3		 ret	 0
?MissionClock@Sim@@QBENXZ ENDP				; Sim::MissionClock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
?GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ PROC	; Sim::GetSystemList
; _this$ = ecx

; 1265 :     if (mission)

  00000	8b 81 c0 00 00
	00		 mov	 eax, DWORD PTR [ecx+192]
  00006	85 c0		 test	 eax, eax
  00008	74 06		 je	 SHORT $LN3@GetSystemL
; File d:\programming\starshatter\trunk\stars45\mission.h

; 141  :     List<StarSystem>&    GetSystemList()       { return system_list;  }

  0000a	05 e0 00 00 00	 add	 eax, 224		; 000000e0H
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1270 : }

  0000f	c3		 ret	 0
$LN3@GetSystemL:

; 1268 :     static List<StarSystem> dummy_system_list;

  00010	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4HA
  0001d	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00023	7e 4b		 jle	 SHORT $LN2@GetSystemL
  00025	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4HA
  0002a	e8 00 00 00 00	 call	 __Init_thread_header
  0002f	83 c4 04	 add	 esp, 4
  00032	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4HA, -1
  00039	75 35		 jne	 SHORT $LN2@GetSystemL
  0003b	68 00 00 00 00	 push	 OFFSET ??__Fdummy_system_list@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@YAXXZ ; `Sim::GetSystemList'::`2'::`dynamic atexit destructor for 'dummy_system_list''
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  00040	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dummy_system_list@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4V3@A, 0
  0004a	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dummy_system_list@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4V3@A+4, 0
  00054	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dummy_system_list@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4V3@A+8, 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1268 :     static List<StarSystem> dummy_system_list;

  0005e	e8 00 00 00 00	 call	 _atexit
  00063	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4HA
  00068	e8 00 00 00 00	 call	 __Init_thread_footer
  0006d	83 c4 08	 add	 esp, 8
$LN2@GetSystemL:

; 1269 :     return dummy_system_list;

  00070	b8 00 00 00 00	 mov	 eax, OFFSET ?dummy_system_list@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4V3@A

; 1270 : }

  00075	c3		 ret	 0
?GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ ENDP	; Sim::GetSystemList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_ship$ = 8						; size = 4
_carrier$ = 12						; size = 4
_deck$ = 16						; size = 4
?NetDockShip@Sim@@QAEXPAVShip@@0PAVFlightDeck@@@Z PROC	; Sim::NetDockShip
; _this$dead$ = ecx

; 1069 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR _ship$[ebp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  0000f	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  00014	75 1b		 jne	 SHORT $LN8@NetDockShi
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00016	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
$LN4@NetDockShi:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1071 :     if (rgn)

  0001c	85 c0		 test	 eax, eax
  0001e	74 0c		 je	 SHORT $LN2@NetDockShi

; 1072 :     rgn->NetDockShip(ship, carrier, deck);

  00020	ff 75 10	 push	 DWORD PTR _deck$[ebp]
  00023	ff 75 0c	 push	 DWORD PTR _carrier$[ebp]
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 ?NetDockShip@SimRegion@@IAEXPAVShip@@0PAVFlightDeck@@@Z ; SimRegion::NetDockShip
$LN2@NetDockShi:
  0002c	5e		 pop	 esi

; 1073 : }

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN8@NetDockShi:
  00031	8b ce		 mov	 ecx, esi

; 1070 :     SimRegion* rgn = ship->GetRegion();

  00033	ff d0		 call	 eax
  00035	eb e5		 jmp	 SHORT $LN4@NetDockShi
?NetDockShip@Sim@@QAEXPAVShip@@0PAVFlightDeck@@@Z ENDP	; Sim::NetDockShip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
tv167 = -8						; size = 8
_r$ = 8							; size = 4
??MSimRegion@@QBEHABV0@@Z PROC				; SimRegion::operator<
; _this$ = ecx

; 2317 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 2318 :     return (orbital_region && r.orbital_region && *orbital_region <  *r.orbital_region);

  00006	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00009	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000c	56		 push	 esi
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 7b		 je	 SHORT $LN3@operator
  00011	8b 45 08	 mov	 eax, DWORD PTR _r$[ebp]
  00014	8b 70 1c	 mov	 esi, DWORD PTR [eax+28]
  00017	85 f6		 test	 esi, esi
  00019	74 71		 je	 SHORT $LN3@operator
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  0001b	f2 0f 10 51 68	 movsd	 xmm2, QWORD PTR [ecx+104]
  00020	f2 0f 10 41 60	 movsd	 xmm0, QWORD PTR [ecx+96]
  00025	f2 0f 10 49 70	 movsd	 xmm1, QWORD PTR [ecx+112]
  0002a	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  0002e	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  00032	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  00036	f2 0f 58 c2	 addsd	 xmm0, xmm2
  0003a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0003e	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00043	f2 0f 10 4e 60	 movsd	 xmm1, QWORD PTR [esi+96]
  00048	f2 0f 11 44 24
	08		 movsd	 QWORD PTR tv167[esp+16], xmm0
  0004e	f2 0f 10 46 68	 movsd	 xmm0, QWORD PTR [esi+104]
  00053	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  00057	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  0005b	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0005f	f2 0f 10 46 70	 movsd	 xmm0, QWORD PTR [esi+112]
  00064	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  00068	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0006c	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 215  :     int operator <  (const Orbital& o) const { return loc.length() <  o.loc.length(); }

  00071	33 c0		 xor	 eax, eax
  00073	66 0f 2f 44 24
	08		 comisd	 xmm0, QWORD PTR tv167[esp+16]
  00079	0f 97 c0	 seta	 al
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2318 :     return (orbital_region && r.orbital_region && *orbital_region <  *r.orbital_region);

  0007c	85 c0		 test	 eax, eax
  0007e	74 0c		 je	 SHORT $LN3@operator
  00080	b8 01 00 00 00	 mov	 eax, 1

; 2319 : }

  00085	5e		 pop	 esi
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
$LN3@operator:

; 2318 :     return (orbital_region && r.orbital_region && *orbital_region <  *r.orbital_region);

  0008c	33 c0		 xor	 eax, eax

; 2319 : }

  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??MSimRegion@@QBEHABV0@@Z ENDP				; SimRegion::operator<
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
tv167 = -8						; size = 8
_r$ = 8							; size = 4
??NSimRegion@@QBEHABV0@@Z PROC				; SimRegion::operator<=
; _this$ = ecx

; 2323 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 2324 :     return (orbital_region && r.orbital_region && *orbital_region <= *r.orbital_region);

  00006	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00009	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000c	56		 push	 esi
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 7b		 je	 SHORT $LN3@operator
  00011	8b 45 08	 mov	 eax, DWORD PTR _r$[ebp]
  00014	8b 70 1c	 mov	 esi, DWORD PTR [eax+28]
  00017	85 f6		 test	 esi, esi
  00019	74 71		 je	 SHORT $LN3@operator
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  0001b	f2 0f 10 51 68	 movsd	 xmm2, QWORD PTR [ecx+104]
  00020	f2 0f 10 41 60	 movsd	 xmm0, QWORD PTR [ecx+96]
  00025	f2 0f 10 49 70	 movsd	 xmm1, QWORD PTR [ecx+112]
  0002a	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  0002e	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  00032	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  00036	f2 0f 58 c2	 addsd	 xmm0, xmm2
  0003a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0003e	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00043	f2 0f 10 4e 60	 movsd	 xmm1, QWORD PTR [esi+96]
  00048	f2 0f 11 44 24
	08		 movsd	 QWORD PTR tv167[esp+16], xmm0
  0004e	f2 0f 10 46 68	 movsd	 xmm0, QWORD PTR [esi+104]
  00053	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  00057	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  0005b	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0005f	f2 0f 10 46 70	 movsd	 xmm0, QWORD PTR [esi+112]
  00064	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  00068	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0006c	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 216  :     int operator <= (const Orbital& o) const { return loc.length() <= o.loc.length(); }

  00071	33 c0		 xor	 eax, eax
  00073	66 0f 2f 44 24
	08		 comisd	 xmm0, QWORD PTR tv167[esp+16]
  00079	0f 93 c0	 setae	 al
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2324 :     return (orbital_region && r.orbital_region && *orbital_region <= *r.orbital_region);

  0007c	85 c0		 test	 eax, eax
  0007e	74 0c		 je	 SHORT $LN3@operator
  00080	b8 01 00 00 00	 mov	 eax, 1

; 2325 : }

  00085	5e		 pop	 esi
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
$LN3@operator:

; 2324 :     return (orbital_region && r.orbital_region && *orbital_region <= *r.orbital_region);

  0008c	33 c0		 xor	 eax, eax

; 2325 : }

  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??NSimRegion@@QBEHABV0@@Z ENDP				; SimRegion::operator<=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_object$ = 8						; size = 4
?FindNearestSpaceRegion@Sim@@QAEPAVSimRegion@@PAVSimObject@@@Z PROC ; Sim::FindNearestSpaceRegion
; _this$ = ecx

; 1400 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1401 :     return FindNearestRegion(object, REAL_SPACE);

  00004	6a 00		 push	 0
  00006	ff 75 08	 push	 DWORD PTR _object$[ebp]
  00009	e8 00 00 00 00	 call	 ?FindNearestRegion@Sim@@QAEPAVSimRegion@@PAVSimObject@@H@Z ; Sim::FindNearestRegion
  0000e	59		 pop	 ecx

; 1402 : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?FindNearestSpaceRegion@Sim@@QAEPAVSimRegion@@PAVSimObject@@@Z ENDP ; Sim::FindNearestSpaceRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
?IsActive@Sim@@QBE_NXZ PROC				; Sim::IsActive
; _this$ = ecx

; 309  :     return mission && mission->IsActive();

  00000	8b 81 c0 00 00
	00		 mov	 eax, DWORD PTR [ecx+192]
  00006	85 c0		 test	 eax, eax
  00008	74 0c		 je	 SHORT $LN3@IsActive
  0000a	80 b8 b9 00 00
	00 00		 cmp	 BYTE PTR [eax+185], 0
  00011	74 03		 je	 SHORT $LN3@IsActive
  00013	b0 01		 mov	 al, 1

; 310  : }

  00015	c3		 ret	 0
$LN3@IsActive:

; 309  :     return mission && mission->IsActive();

  00016	32 c0		 xor	 al, al

; 310  : }

  00018	c3		 ret	 0
?IsActive@Sim@@QBE_NXZ ENDP				; Sim::IsActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_elem$ = -24						; size = 8
_total_skip$1$ = -16					; size = 8
_skipped$1$ = -8					; size = 8
?ResolveTimeSkip@Sim@@QAEXN@Z PROC			; Sim::ResolveTimeSkip
; _this$ = ecx
; _seconds$ = xmm1l

; 1969 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00009	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _elem$[ebp+4], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1969 : {

  00010	0f 28 c1	 movaps	 xmm0, xmm1
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00013	8d 4d e8	 lea	 ecx, DWORD PTR _elem$[ebp]
  00016	0f 57 c9	 xorps	 xmm1, xmm1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1969 : {

  00019	f2 0f 11 45 f0	 movsd	 QWORD PTR _total_skip$1$[ebp], xmm0
  0001e	57		 push	 edi

; 1970 :     double skipped   = 0;
; 1971 : 
; 1972 :     // allow elements to process hold time, and release as needed:
; 1973 :     ListIter<Element> elem = elements;

  0001f	8d 86 88 00 00
	00		 lea	 eax, DWORD PTR [esi+136]
  00025	f2 0f 11 4d f8	 movsd	 QWORD PTR _skipped$1$[ebp], xmm1
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0002a	89 45 e8	 mov	 DWORD PTR _elem$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  0002d	e8 00 00 00 00	 call	 ?next@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::next
  00032	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1974 :     while (++elem)

  00034	74 2d		 je	 SHORT $LN3@ResolveTim
$LL2@ResolveTim:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00036	8d 4d e8	 lea	 ecx, DWORD PTR _elem$[ebp]
  00039	e8 00 00 00 00	 call	 ?value@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1975 :     elem->ExecFrame(seconds);

  0003e	83 ec 08	 sub	 esp, 8
  00041	8b c8		 mov	 ecx, eax
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0004a	ff 52 1c	 call	 DWORD PTR [edx+28]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0004d	8d 4d e8	 lea	 ecx, DWORD PTR _elem$[ebp]
  00050	e8 00 00 00 00	 call	 ?next@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::next
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1974 :     while (++elem)

  00055	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _total_skip$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0005a	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1974 :     while (++elem)

  0005c	75 d8		 jne	 SHORT $LL2@ResolveTim
  0005e	f2 0f 10 4d f8	 movsd	 xmm1, QWORD PTR _skipped$1$[ebp]
$LN3@ResolveTim:

; 1976 : 
; 1977 :     // step through the skip, ten seconds at a time:
; 1978 :     if (active_region) {

  00063	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00067	0f 84 84 00 00
	00		 je	 $LN6@ResolveTim

; 1979 :         double total_skip = seconds;
; 1980 :         double frame_skip = 10;
; 1981 :         Ship*  player     = GetPlayerShip();

  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?GetPlayerShip@Sim@@QAEPAVShip@@XZ ; Sim::GetPlayerShip

; 1982 : 
; 1983 :         while (total_skip > frame_skip) {

  00074	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4024000000000000
  0007c	76 4c		 jbe	 SHORT $LN36@ResolveTim
  0007e	66 90		 npad	 2
$LL4@ResolveTim:

; 1984 :             if (active_region->CanTimeSkip()) {

  00080	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00083	e8 00 00 00 00	 call	 ?CanTimeSkip@SimRegion@@QBE_NXZ ; SimRegion::CanTimeSkip
  00088	84 c0		 test	 al, al
  0008a	0f 84 d7 00 00
	00		 je	 $LN7@ResolveTim

; 1985 :                 active_region->ResolveTimeSkip(frame_skip);

  00090	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4024000000000000
  00098	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0009b	e8 00 00 00 00	 call	 ?ResolveTimeSkip@SimRegion@@QAEXN@Z ; SimRegion::ResolveTimeSkip

; 1986 :                 total_skip -= frame_skip;

  000a0	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@4024000000000000
  000a8	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _total_skip$1$[ebp]

; 1987 :                 skipped    += frame_skip;

  000ad	f2 0f 10 4d f8	 movsd	 xmm1, QWORD PTR _skipped$1$[ebp]
  000b2	f2 0f 5c c2	 subsd	 xmm0, xmm2
  000b6	f2 0f 58 ca	 addsd	 xmm1, xmm2
  000ba	66 0f 2f c2	 comisd	 xmm0, xmm2
  000be	f2 0f 11 45 f0	 movsd	 QWORD PTR _total_skip$1$[ebp], xmm0
  000c3	f2 0f 11 4d f8	 movsd	 QWORD PTR _skipped$1$[ebp], xmm1
  000c8	77 b6		 ja	 SHORT $LL4@ResolveTim
$LN36@ResolveTim:
  000ca	0f 57 d2	 xorps	 xmm2, xmm2

; 1992 :             }
; 1993 :         }
; 1994 : 
; 1995 :         if (total_skip > 0)

  000cd	66 0f 2f c2	 comisd	 xmm0, xmm2
  000d1	76 15		 jbe	 SHORT $LN9@ResolveTim

; 1996 :         active_region->ResolveTimeSkip(total_skip);

  000d3	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d6	0f 28 c8	 movaps	 xmm1, xmm0
  000d9	e8 00 00 00 00	 call	 ?ResolveTimeSkip@SimRegion@@QAEXN@Z ; SimRegion::ResolveTimeSkip
  000de	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _total_skip$1$[ebp]
$LN38@ResolveTim:
  000e3	f2 0f 10 4d f8	 movsd	 xmm1, QWORD PTR _skipped$1$[ebp]
$LN9@ResolveTim:

; 1997 :         skipped += total_skip;

  000e8	f2 0f 58 c8	 addsd	 xmm1, xmm0
  000ec	f2 0f 11 4d f8	 movsd	 QWORD PTR _skipped$1$[ebp], xmm1
$LN6@ResolveTim:

; 1998 :     }
; 1999 : 
; 2000 :     // give player control after time skip:
; 2001 :     Ship* player_ship = GetPlayerShip();

  000f1	8b ce		 mov	 ecx, esi
  000f3	e8 00 00 00 00	 call	 ?GetPlayerShip@Sim@@QAEPAVShip@@XZ ; Sim::GetPlayerShip
  000f8	8b f8		 mov	 edi, eax

; 2002 :     if (player_ship) {

  000fa	85 ff		 test	 edi, edi
  000fc	74 46		 je	 SHORT $LN18@ResolveTim

; 2003 :         player_ship->SetAutoNav(false);

  000fe	6a 00		 push	 0
  00100	8b cf		 mov	 ecx, edi
  00102	e8 00 00 00 00	 call	 ?SetAutoNav@Ship@@QAEX_N@Z ; Ship::SetAutoNav

; 2004 :         player_ship->SetThrottle(75);

  00107	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4052c00000000000
  0010f	8b cf		 mov	 ecx, edi
  00111	e8 00 00 00 00	 call	 ?SetThrottle@Ship@@QAEXN@Z ; Ship::SetThrottle

; 2005 : 
; 2006 :         HUDView* hud = HUDView::GetInstance();

  00116	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hud_view@HUDView@@1PAV1@A ; HUDView::hud_view

; 2007 :         if (hud)

  0011c	85 c9		 test	 ecx, ecx
  0011e	74 0a		 je	 SHORT $LN16@ResolveTim

; 2008 :         hud->SetHUDMode(HUDView::HUD_MODE_TAC);

  00120	8b 01		 mov	 eax, DWORD PTR [ecx]
  00122	6a 01		 push	 1
  00124	ff 90 b8 00 00
	00		 call	 DWORD PTR [eax+184]
$LN16@ResolveTim:

; 2009 : 
; 2010 :         if (IsTestMode())

  0012a	80 be bc 00 00
	00 00		 cmp	 BYTE PTR [esi+188], 0
  00131	74 0c		 je	 SHORT $LN37@ResolveTim

; 2011 :         player_ship->SetControls(0);

  00133	8b 07		 mov	 eax, DWORD PTR [edi]
  00135	8b cf		 mov	 ecx, edi
  00137	6a 00		 push	 0
  00139	ff 90 cc 00 00
	00		 call	 DWORD PTR [eax+204]
$LN37@ResolveTim:
  0013f	f2 0f 10 4d f8	 movsd	 xmm1, QWORD PTR _skipped$1$[ebp]
$LN18@ResolveTim:

; 2012 :     }
; 2013 : 
; 2014 :     Game::SkipGameTime(skipped);

  00144	83 ec 08	 sub	 esp, 8
  00147	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  0014c	e8 00 00 00 00	 call	 ?SkipGameTime@Game@@SAXN@Z ; Game::SkipGameTime

; 2015 :     CameraDirector::SetCameraMode(CameraDirector::MODE_COCKPIT);

  00151	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00159	83 c4 08	 add	 esp, 8
  0015c	e8 00 00 00 00	 call	 ?SetCameraMode@CameraDirector@@SAXHN@Z ; CameraDirector::SetCameraMode

; 2016 : }

  00161	5f		 pop	 edi
  00162	5e		 pop	 esi
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c3		 ret	 0
$LN7@ResolveTim:
  00167	0f 57 d2	 xorps	 xmm2, xmm2

; 1988 :             }
; 1989 :             // break out early if player runs into bad guys...
; 1990 :             else {
; 1991 :                 total_skip = 0;

  0016a	0f 28 c2	 movaps	 xmm0, xmm2
  0016d	e9 71 ff ff ff	 jmp	 $LN38@ResolveTim
?ResolveTimeSkip@Sim@@QAEXN@Z ENDP			; Sim::ResolveTimeSkip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -40						; size = 12
$T3 = -28						; size = 12
$T4 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pos$ = 8						; size = 4
_vel$ = 12						; size = 4
_model$ = 16						; size = 4
_rgn$ = 20						; size = 4
_mass$ = 24						; size = 8
?CreateDebris@Sim@@QAEPAVDebris@@ABUPoint@@0PAVModel@@NPAVSimRegion@@@Z PROC ; Sim::CreateDebris
; _this$ = ecx

; 1163 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateDebris@Sim@@QAEPAVDebris@@ABUPoint@@0PAVModel@@NPAVSimRegion@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00029	68 e0 01 00 00	 push	 480			; 000001e0H
  0002e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1164 :     Debris* debris = new(__FILE__,__LINE__) Debris(model, pos, vel, mass);

  00033	8b d0		 mov	 edx, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00035	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1164 :     Debris* debris = new(__FILE__,__LINE__) Debris(model, pos, vel, mass);

  00038	89 55 f0	 mov	 DWORD PTR $T4[ebp], edx
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	85 d2		 test	 edx, edx
  00044	74 7b		 je	 SHORT $LN6@CreateDebr
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _vel$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1164 :     Debris* debris = new(__FILE__,__LINE__) Debris(model, pos, vel, mass);

  00049	83 ec 08	 sub	 esp, 8
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  0004c	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  0004f	f2 0f 10 41 10	 movsd	 xmm0, QWORD PTR [ecx+16]
  00054	f2 0f 10 11	 movsd	 xmm2, QWORD PTR [ecx]
  00058	f2 0f 10 49 08	 movsd	 xmm1, QWORD PTR [ecx+8]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1164 :     Debris* debris = new(__FILE__,__LINE__) Debris(model, pos, vel, mass);

  0005d	8b ca		 mov	 ecx, edx
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  0005f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00063	66 0f 5a d2	 cvtpd2ps xmm2, xmm2

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  00067	f3 0f 11 45 ec	 movss	 DWORD PTR $T3[ebp+8], xmm0
  0006c	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00071	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00075	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  00079	f3 0f 11 55 e4	 movss	 DWORD PTR $T3[ebp], xmm2
  0007e	f2 0f 10 10	 movsd	 xmm2, QWORD PTR [eax]
  00082	f3 0f 11 4d e8	 movss	 DWORD PTR $T3[ebp+4], xmm1
  00087	f2 0f 10 48 08	 movsd	 xmm1, QWORD PTR [eax+8]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1164 :     Debris* debris = new(__FILE__,__LINE__) Debris(model, pos, vel, mass);

  0008c	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0008f	f3 0f 11 45 e0	 movss	 DWORD PTR $T2[ebp+8], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1164 :     Debris* debris = new(__FILE__,__LINE__) Debris(model, pos, vel, mass);

  00094	f2 0f 10 45 18	 movsd	 xmm0, QWORD PTR _mass$[ebp]
  00099	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0009e	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  0009f	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1164 :     Debris* debris = new(__FILE__,__LINE__) Debris(model, pos, vel, mass);

  000a3	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  000a6	50		 push	 eax
  000a7	ff 75 10	 push	 DWORD PTR _model$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  000aa	66 0f 5a c9	 cvtpd2ps xmm1, xmm1

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  000ae	f3 0f 11 55 d8	 movss	 DWORD PTR $T2[ebp], xmm2
  000b3	f3 0f 11 4d dc	 movss	 DWORD PTR $T2[ebp+4], xmm1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1164 :     Debris* debris = new(__FILE__,__LINE__) Debris(model, pos, vel, mass);

  000b8	e8 00 00 00 00	 call	 ??0Debris@@QAE@PAVModel@@ABUVec3@@1N@Z ; Debris::Debris
  000bd	8b f0		 mov	 esi, eax
  000bf	eb 02		 jmp	 SHORT $LN7@CreateDebr
$LN6@CreateDebr:
  000c1	33 f6		 xor	 esi, esi
$LN7@CreateDebr:

; 1165 : 
; 1166 :     if (rgn)

  000c3	8b 4d 14	 mov	 ecx, DWORD PTR _rgn$[ebp]
  000c6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cd	85 c9		 test	 ecx, ecx
  000cf	75 07		 jne	 SHORT $LN25@CreateDebr

; 1167 :     rgn->InsertObject(debris);
; 1168 : 
; 1169 :     else if (active_region)

  000d1	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d4	85 c9		 test	 ecx, ecx
  000d6	74 06		 je	 SHORT $LN23@CreateDebr
$LN25@CreateDebr:

; 1170 :     active_region->InsertObject(debris);

  000d8	8b 01		 mov	 eax, DWORD PTR [ecx]
  000da	56		 push	 esi
  000db	ff 50 1c	 call	 DWORD PTR [eax+28]
$LN23@CreateDebr:

; 1171 : 
; 1172 :     return debris;

  000de	8b c6		 mov	 eax, esi

; 1173 : }

  000e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ea	59		 pop	 ecx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateDebris@Sim@@QAEPAVDebris@@ABUPoint@@0PAVModel@@NPAVSimRegion@@@Z$0:
  00000	68 8c 04 00 00	 push	 1164			; 0000048cH
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__ehhandler$?CreateDebris@Sim@@QAEPAVDebris@@ABUPoint@@0PAVModel@@NPAVSimRegion@@@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateDebris@Sim@@QAEPAVDebris@@ABUPoint@@0PAVModel@@NPAVSimRegion@@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateDebris@Sim@@QAEPAVDebris@@ABUPoint@@0PAVModel@@NPAVSimRegion@@@Z ENDP ; Sim::CreateDebris
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_n$1$ = -60						; size = 8
_d$1$ = -52						; size = 8
$T2 = -44						; size = 8
$T3 = -36						; size = 8
$T4 = -28						; size = 8
_this$1$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
$T5 = 8							; size = 4
_ship$ = 8						; size = 4
?CreateSplashDamage@Sim@@QAEXPAVShip@@@Z PROC		; Sim::CreateSplashDamage
; _this$ = ecx

; 1195 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateSplashDamage@Sim@@QAEXPAVShip@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d ec	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1196 :     if (ship && ship->GetRegion() && ship->Design()->splash_radius > 1) {

  0002b	8b 75 08	 mov	 esi, DWORD PTR _ship$[ebp]
  0002e	85 f6		 test	 esi, esi
  00030	0f 84 2c 01 00
	00		 je	 $LN2@CreateSpla
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  0003e	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  00043	75 08		 jne	 SHORT $LN7@CreateSpla
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00045	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  0004b	eb 04		 jmp	 SHORT $LN6@CreateSpla
$LN7@CreateSpla:
  0004d	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1196 :     if (ship && ship->GetRegion() && ship->Design()->splash_radius > 1) {

  0004f	ff d0		 call	 eax
$LN6@CreateSpla:
  00051	85 c0		 test	 eax, eax
  00053	0f 84 09 01 00
	00		 je	 $LN2@CreateSpla
; File d:\programming\starshatter\trunk\stars45\ship.h

; 364  :     const ShipDesign* Design()          const    { return design;        }

  00059	8b 86 00 02 00
	00		 mov	 eax, DWORD PTR [esi+512]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1196 :     if (ship && ship->GetRegion() && ship->Design()->splash_radius > 1) {

  0005f	f3 0f 10 80 cc
	07 00 00	 movss	 xmm0, DWORD PTR [eax+1996]
  00067	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0006e	0f 86 ee 00 00
	00		 jbe	 $LN2@CreateSpla
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00074	6a 38		 push	 56			; 00000038H
  00076	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1198 :         SimSplash(ship->GetRegion(),

  0007b	8b f8		 mov	 edi, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  0007d	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1198 :         SimSplash(ship->GetRegion(),

  00080	89 7d 08	 mov	 DWORD PTR $T5[ebp], edi
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008a	85 ff		 test	 edi, edi
  0008c	0f 84 b0 00 00
	00		 je	 $LN4@CreateSpla
  00092	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00094	8b 81 90 00 00
	00		 mov	 eax, DWORD PTR [ecx+144]
  0009a	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  0009f	75 08		 jne	 SHORT $LN9@CreateSpla
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  000a1	8b 9e c8 01 00
	00		 mov	 ebx, DWORD PTR [esi+456]
  000a7	eb 06		 jmp	 SHORT $LN8@CreateSpla
$LN9@CreateSpla:
  000a9	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1198 :         SimSplash(ship->GetRegion(),

  000ab	ff d0		 call	 eax
  000ad	8b d8		 mov	 ebx, eax
$LN8@CreateSpla:
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  000af	f2 0f 10 46 48	 movsd	 xmm0, QWORD PTR [esi+72]
; File d:\programming\starshatter\trunk\stars45\ship.h

; 364  :     const ShipDesign* Design()          const    { return design;        }

  000b4	8b 8e 00 02 00
	00		 mov	 ecx, DWORD PTR [esi+512]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  000ba	f2 0f 11 45 e4	 movsd	 QWORD PTR $T4[ebp], xmm0
  000bf	f2 0f 10 46 50	 movsd	 xmm0, QWORD PTR [esi+80]
  000c4	f2 0f 11 45 dc	 movsd	 QWORD PTR $T3[ebp], xmm0
  000c9	f2 0f 10 46 58	 movsd	 xmm0, QWORD PTR [esi+88]
  000ce	f2 0f 11 45 d4	 movsd	 QWORD PTR $T2[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1198 :         SimSplash(ship->GetRegion(),

  000d3	f3 0f 10 81 24
	02 00 00	 movss	 xmm0, DWORD PTR [ecx+548]
  000db	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000

; 132  :     owner_name("Collateral Damage"), missile(false) { }

  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CAMCFAKE@Collateral?5Damage?$AA@

; 1198 :         SimSplash(ship->GetRegion(),

  000e8	0f 5a c0	 cvtps2pd xmm0, xmm0
  000eb	f2 0f 11 45 cc	 movsd	 QWORD PTR _d$1$[ebp], xmm0
  000f0	f3 0f 10 81 cc
	07 00 00	 movss	 xmm0, DWORD PTR [ecx+1996]

; 132  :     owner_name("Collateral Damage"), missile(false) { }

  000f8	8b cf		 mov	 ecx, edi

; 1198 :         SimSplash(ship->GetRegion(),

  000fa	0f 5a c0	 cvtps2pd xmm0, xmm0
  000fd	f2 0f 11 45 c4	 movsd	 QWORD PTR _n$1$[ebp], xmm0

; 132  :     owner_name("Collateral Damage"), missile(false) { }

  00102	e8 00 00 00 00	 call	 ??0Text@@QAE@PBD@Z	; Text::Text
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00107	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR $T4[ebp]
  0010c	f2 0f 11 47 08	 movsd	 QWORD PTR [edi+8], xmm0
  00111	f2 0f 10 45 dc	 movsd	 xmm0, QWORD PTR $T3[ebp]
  00116	f2 0f 11 47 10	 movsd	 QWORD PTR [edi+16], xmm0
  0011b	f2 0f 10 45 d4	 movsd	 xmm0, QWORD PTR $T2[ebp]
  00120	f2 0f 11 47 18	 movsd	 QWORD PTR [edi+24], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 131  :     : rgn(r), loc(l), damage(d), range(n),

  00125	f2 0f 10 45 cc	 movsd	 xmm0, QWORD PTR _d$1$[ebp]
  0012a	f2 0f 11 47 20	 movsd	 QWORD PTR [edi+32], xmm0
  0012f	f2 0f 10 45 c4	 movsd	 xmm0, QWORD PTR _n$1$[ebp]
  00134	f2 0f 11 47 28	 movsd	 QWORD PTR [edi+40], xmm0
  00139	89 5f 30	 mov	 DWORD PTR [edi+48], ebx

; 132  :     owner_name("Collateral Damage"), missile(false) { }

  0013c	c6 47 34 00	 mov	 BYTE PTR [edi+52], 0

; 1198 :         SimSplash(ship->GetRegion(),

  00140	eb 02		 jmp	 SHORT $LN5@CreateSpla
$LN4@CreateSpla:
  00142	33 ff		 xor	 edi, edi
$LN5@CreateSpla:
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  00144	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1198 :         SimSplash(ship->GetRegion(),

  00147	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 1199 :         ship->Location(),
; 1200 :         ship->Design()->integrity / 4,
; 1201 :         ship->Design()->splash_radius);
; 1202 : 
; 1203 :         splash->owner_name = ship->Name();

  0014e	50		 push	 eax
  0014f	8b cf		 mov	 ecx, edi
  00151	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=

; 1204 :         splashlist.append(splash);

  00156	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00159	57		 push	 edi
  0015a	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0015d	e8 00 00 00 00	 call	 ?append@?$List@VSimSplash@@@@QAEXPBVSimSplash@@@Z ; List<SimSplash>::append
$LN2@CreateSpla:

; 1205 :     }
; 1206 : }

  00162	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00165	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016c	59		 pop	 ecx
  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateSplashDamage@Sim@@QAEXPAVShip@@@Z$0:
  00000	68 ad 04 00 00	 push	 1197			; 000004adH
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 45 08	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__ehhandler$?CreateSplashDamage@Sim@@QAEXPAVShip@@@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateSplashDamage@Sim@@QAEXPAVShip@@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateSplashDamage@Sim@@QAEXPAVShip@@@Z ENDP		; Sim::CreateSplashDamage
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_pos$ = 8						; size = 4
_shot_cam$ = 12						; size = 4
$T2 = 16						; size = 4
$T3 = 16						; size = 4
_design$ = 16						; size = 4
_ship$ = 20						; size = 4
_rgn$ = 24						; size = 4
?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z PROC ; Sim::CreateShot
; _this$ = ecx

; 1122 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 1123 :     Shot* shot = 0;
; 1124 : 
; 1125 :     if (design->drone)

  00027	8b 75 10	 mov	 esi, DWORD PTR _design$[ebp]
  0002a	80 7e 1d 00	 cmp	 BYTE PTR [esi+29], 0
  0002e	74 30		 je	 SHORT $LN2@CreateShot
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00030	68 50 02 00 00	 push	 592			; 00000250H
  00035	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003a	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1126 :     shot = new(__FILE__,__LINE__) Drone(pos, shot_cam, design, ship);

  0003d	89 45 10	 mov	 DWORD PTR $T3[ebp], eax
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	85 c0		 test	 eax, eax
  00049	74 45		 je	 SHORT $LN10@CreateShot
  0004b	ff 75 14	 push	 DWORD PTR _ship$[ebp]
  0004e	8b c8		 mov	 ecx, eax
  00050	56		 push	 esi
  00051	ff 75 0c	 push	 DWORD PTR _shot_cam$[ebp]
  00054	ff 75 08	 push	 DWORD PTR _pos$[ebp]
  00057	e8 00 00 00 00	 call	 ??0Drone@@QAE@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@@Z ; Drone::Drone
  0005c	8b f0		 mov	 esi, eax
  0005e	eb 32		 jmp	 SHORT $LN11@CreateShot
$LN2@CreateShot:
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00060	68 40 02 00 00	 push	 576			; 00000240H
  00065	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006a	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1128 :     shot = new(__FILE__,__LINE__) Shot( pos, shot_cam, design, ship);

  0006d	89 45 10	 mov	 DWORD PTR $T2[ebp], eax
  00070	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00077	85 c0		 test	 eax, eax
  00079	74 15		 je	 SHORT $LN10@CreateShot
  0007b	ff 75 14	 push	 DWORD PTR _ship$[ebp]
  0007e	8b c8		 mov	 ecx, eax
  00080	56		 push	 esi
  00081	ff 75 0c	 push	 DWORD PTR _shot_cam$[ebp]
  00084	ff 75 08	 push	 DWORD PTR _pos$[ebp]
  00087	e8 00 00 00 00	 call	 ??0Shot@@QAE@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@@Z ; Shot::Shot
  0008c	8b f0		 mov	 esi, eax
  0008e	eb 02		 jmp	 SHORT $LN11@CreateShot
$LN10@CreateShot:
  00090	33 f6		 xor	 esi, esi
$LN11@CreateShot:

; 1129 : 
; 1130 :     if (rgn)

  00092	8b 4d 18	 mov	 ecx, DWORD PTR _rgn$[ebp]
  00095	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009c	85 c9		 test	 ecx, ecx
  0009e	74 08		 je	 SHORT $LN4@CreateShot

; 1131 :     rgn->InsertObject(shot);

  000a0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a2	56		 push	 esi
  000a3	ff 52 24	 call	 DWORD PTR [edx+36]

; 1132 : 
; 1133 :     else if (active_region)

  000a6	eb 0d		 jmp	 SHORT $LN22@CreateShot
$LN4@CreateShot:
  000a8	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000ab	85 c9		 test	 ecx, ecx
  000ad	74 06		 je	 SHORT $LN22@CreateShot

; 1134 :     active_region->InsertObject(shot);

  000af	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b1	56		 push	 esi
  000b2	ff 50 24	 call	 DWORD PTR [eax+36]
$LN22@CreateShot:

; 1135 : 
; 1136 :     return shot;

  000b5	8b c6		 mov	 eax, esi

; 1137 : }

  000b7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ba	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c1	59		 pop	 ecx
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z$0:
  00000	68 66 04 00 00	 push	 1126			; 00000466H
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 45 10	 mov	 eax, DWORD PTR $T3[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__unwindfunclet$?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z$1:
  00017	68 68 04 00 00	 push	 1128			; 00000468H
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  00021	8b 45 10	 mov	 eax, DWORD PTR $T2[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002d	c3		 ret	 0
__ehhandler$?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z:
  0002e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00032	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00035	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateShot@Sim@@QAEPAVShot@@ABUPoint@@ABVCamera@@PAVWeaponDesign@@PBVShip@@PAVSimRegion@@@Z ENDP ; Sim::CreateShot
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\universe.h
;	COMDAT ??0Universe@@QAE@XZ
_TEXT	SEGMENT
??0Universe@@QAE@XZ PROC				; Universe::Universe, COMDAT
; _this$ = ecx

; 49   :     Universe()           { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Universe@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0Universe@@QAE@XZ ENDP				; Universe::Universe
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\universe.h
;	COMDAT ??1Universe@@UAE@XZ
_TEXT	SEGMENT
??1Universe@@UAE@XZ PROC				; Universe::~Universe, COMDAT
; _this$ = ecx

; 50   :     virtual ~Universe()  { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Universe@@6B@
  00006	c3		 ret	 0
??1Universe@@UAE@XZ ENDP				; Universe::~Universe
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\universe.h
;	COMDAT ?ExecFrame@Universe@@UAEXN@Z
_TEXT	SEGMENT
_seconds$ = 8						; size = 8
?ExecFrame@Universe@@UAEXN@Z PROC			; Universe::ExecFrame, COMDAT
; _this$ = ecx

; 52   :     virtual void   ExecFrame(double seconds) { }

  00000	c2 08 00	 ret	 8
?ExecFrame@Universe@@UAEXN@Z ENDP			; Universe::ExecFrame
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\universe.h
;	COMDAT ??_GUniverse@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GUniverse@@UAEPAXI@Z PROC				; Universe::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 50   :     virtual ~Universe()  { }

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Universe@@6B@
  00010	74 0b		 je	 SHORT $LN7@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GUniverse@@UAEPAXI@Z ENDP				; Universe::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\physical.h
;	COMDAT ?Roll@Physical@@QBENXZ
_TEXT	SEGMENT
?Roll@Physical@@QBENXZ PROC				; Physical::Roll, COMDAT
; _this$ = ecx

; 117  :     double            Roll()      const { return roll;       }

  00000	f3 0f 10 81 04
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+260]
  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	c3		 ret	 0
?Roll@Physical@@QBENXZ ENDP				; Physical::Roll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\physical.h
;	COMDAT ?Pitch@Physical@@QBENXZ
_TEXT	SEGMENT
?Pitch@Physical@@QBENXZ PROC				; Physical::Pitch, COMDAT
; _this$ = ecx

; 118  :     double            Pitch()     const { return pitch;      }

  00000	f3 0f 10 81 08
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+264]
  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	c3		 ret	 0
?Pitch@Physical@@QBENXZ ENDP				; Physical::Pitch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\physical.h
;	COMDAT ?Yaw@Physical@@QBENXZ
_TEXT	SEGMENT
?Yaw@Physical@@QBENXZ PROC				; Physical::Yaw, COMDAT
; _this$ = ecx

; 119  :     double            Yaw()       const { return yaw;        }

  00000	f3 0f 10 81 0c
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+268]
  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	c3		 ret	 0
?Yaw@Physical@@QBENXZ ENDP				; Physical::Yaw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.h
;	COMDAT ?IsTestMode@Sim@@QBE_NXZ
_TEXT	SEGMENT
?IsTestMode@Sim@@QBE_NXZ PROC				; Sim::IsTestMode, COMDAT
; _this$ = ecx

; 174  :     bool                 IsTestMode()   const { return test_mode;        }

  00000	8a 81 bc 00 00
	00		 mov	 al, BYTE PTR [ecx+188]
  00006	c3		 ret	 0
?IsTestMode@Sim@@QBE_NXZ ENDP				; Sim::IsTestMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.h
;	COMDAT ?GetPlayerShip@SimRegion@@QAEPAVShip@@XZ
_TEXT	SEGMENT
?GetPlayerShip@SimRegion@@QAEPAVShip@@XZ PROC		; SimRegion::GetPlayerShip, COMDAT
; _this$ = ecx

; 262  :     Ship*                GetPlayerShip() { return player_ship; }

  00000	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  00003	c3		 ret	 0
?GetPlayerShip@SimRegion@@QAEPAVShip@@XZ ENDP		; SimRegion::GetPlayerShip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\simevent.h
;	COMDAT ?GetCombatGroup@ShipStats@@QBEPAVCombatGroup@@XZ
_TEXT	SEGMENT
?GetCombatGroup@ShipStats@@QBEPAVCombatGroup@@XZ PROC	; ShipStats::GetCombatGroup, COMDAT
; _this$ = ecx

; 116  :     CombatGroup*   GetCombatGroup()  const { return combat_group;  }

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	c3		 ret	 0
?GetCombatGroup@ShipStats@@QBEPAVCombatGroup@@XZ ENDP	; ShipStats::GetCombatGroup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\simevent.h
;	COMDAT ?GetElementIndex@ShipStats@@QBEHXZ
_TEXT	SEGMENT
?GetElementIndex@ShipStats@@QBEHXZ PROC			; ShipStats::GetElementIndex, COMDAT
; _this$ = ecx

; 118  :     int            GetElementIndex() const { return elem_index;    }

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	c3		 ret	 0
?GetElementIndex@ShipStats@@QBEHXZ ENDP			; ShipStats::GetElementIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\simevent.h
;	COMDAT ?IsPlayer@ShipStats@@QBE_NXZ
_TEXT	SEGMENT
?IsPlayer@ShipStats@@QBE_NXZ PROC			; ShipStats::IsPlayer, COMDAT
; _this$ = ecx

; 133  :     bool           IsPlayer()        const { return player;        }

  00000	8a 41 28	 mov	 al, BYTE PTR [ecx+40]
  00003	c3		 ret	 0
?IsPlayer@ShipStats@@QBE_NXZ ENDP			; ShipStats::IsPlayer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\simevent.h
;	COMDAT ?SetShipClass@ShipStats@@QAEXH@Z
_TEXT	SEGMENT
_c$ = 8							; size = 4
?SetShipClass@ShipStats@@QAEXH@Z PROC			; ShipStats::SetShipClass, COMDAT
; _this$ = ecx

; 141  :     void           SetShipClass(int c)     { ship_class = c;       }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  00006	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetShipClass@ShipStats@@QAEXH@Z ENDP			; ShipStats::SetShipClass
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\simevent.h
;	COMDAT ?AddCommandPoints@ShipStats@@QAEXH@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?AddCommandPoints@ShipStats@@QAEXH@Z PROC		; ShipStats::AddCommandPoints, COMDAT
; _this$ = ecx

; 156  :     void           AddCommandPoints(int p) { cmd_points += p;      }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	01 41 5c	 add	 DWORD PTR [ecx+92], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?AddCommandPoints@ShipStats@@QAEXH@Z ENDP		; ShipStats::AddCommandPoints
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\simobject.h
;	COMDAT ?TYPENAME@SimObserver@@SAPBDXZ
_TEXT	SEGMENT
?TYPENAME@SimObserver@@SAPBDXZ PROC			; SimObserver::TYPENAME, COMDAT

; 105  :     static const char* TYPENAME() { return "SimObserver"; }

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@EIEAPHAO@SimObserver?$AA@
  00005	c3		 ret	 0
?TYPENAME@SimObserver@@SAPBDXZ ENDP			; SimObserver::TYPENAME
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\game.h
;	COMDAT ?GetMaxFrameLength@Game@@SANXZ
_TEXT	SEGMENT
?GetMaxFrameLength@Game@@SANXZ PROC			; Game::GetMaxFrameLength, COMDAT

; 124  :     static double     GetMaxFrameLength()               { return max_frame_length;    }

  00000	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?max_frame_length@Game@@1NA
  00008	c3		 ret	 0
?GetMaxFrameLength@Game@@SANXZ ENDP			; Game::GetMaxFrameLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\starshatter.h
;	COMDAT ?Dust@Starshatter@@QAEHXZ
_TEXT	SEGMENT
?Dust@Starshatter@@QAEHXZ PROC				; Starshatter::Dust, COMDAT
; _this$ = ecx

; 129  :     int               Dust()               { return dust;          }

  00000	8b 81 e8 a5 00
	00		 mov	 eax, DWORD PTR [ecx+42472]
  00006	c3		 ret	 0
?Dust@Starshatter@@QAEHXZ ENDP				; Starshatter::Dust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\solid.h
;	COMDAT ??8Model@@QBEHABV0@@Z
_TEXT	SEGMENT
_that$ = 8						; size = 4
??8Model@@QBEHABV0@@Z PROC				; Model::operator==, COMDAT
; _this$ = ecx

; 145  :     int operator == (const Model& that) const { return this == &that; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	33 c0		 xor	 eax, eax
  00005	3b 4d 08	 cmp	 ecx, DWORD PTR _that$[ebp]
  00008	0f 94 c0	 sete	 al
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??8Model@@QBEHABV0@@Z ENDP				; Model::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\starsystem.h
;	COMDAT ?NumDust@StarSystem@@QBEHXZ
_TEXT	SEGMENT
?NumDust@StarSystem@@QBEHXZ PROC			; StarSystem::NumDust, COMDAT
; _this$ = ecx

; 92   :     int               NumDust()      const { return sky_dust;  }

  00000	8b 81 98 00 00
	00		 mov	 eax, DWORD PTR [ecx+152]
  00006	c3		 ret	 0
?NumDust@StarSystem@@QBEHXZ ENDP			; StarSystem::NumDust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\starsystem.h
;	COMDAT ?System@Orbital@@QBEPAVStarSystem@@XZ
_TEXT	SEGMENT
?System@Orbital@@QBEPAVStarSystem@@XZ PROC		; Orbital::System, COMDAT
; _this$ = ecx

; 242  :     StarSystem*       System()       const { return system;     }

  00000	8b 81 e8 00 00
	00		 mov	 eax, DWORD PTR [ecx+232]
  00006	c3		 ret	 0
?System@Orbital@@QBEPAVStarSystem@@XZ ENDP		; Orbital::System
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\starsystem.h
;	COMDAT ?Asteroids@OrbitalRegion@@QBEHXZ
_TEXT	SEGMENT
?Asteroids@OrbitalRegion@@QBEHXZ PROC			; OrbitalRegion::Asteroids, COMDAT
; _this$ = ecx

; 335  :     int               Asteroids()       const { return asteroids;     }

  00000	8b 81 10 01 00
	00		 mov	 eax, DWORD PTR [ecx+272]
  00006	c3		 ret	 0
?Asteroids@OrbitalRegion@@QBEHXZ ENDP			; OrbitalRegion::Asteroids
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\starsystem.h
;	COMDAT ?Links@OrbitalRegion@@QAEAAV?$List@VText@@@@XZ
_TEXT	SEGMENT
?Links@OrbitalRegion@@QAEAAV?$List@VText@@@@XZ PROC	; OrbitalRegion::Links, COMDAT
; _this$ = ecx

; 336  :     List<Text>&       Links()                 { return links;         }

  00000	8d 81 14 01 00
	00		 lea	 eax, DWORD PTR [ecx+276]
  00006	c3		 ret	 0
?Links@OrbitalRegion@@QAEAAV?$List@VText@@@@XZ ENDP	; OrbitalRegion::Links
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\ship.h
;	COMDAT ?SetAIMode@Ship@@QAEXH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?SetAIMode@Ship@@QAEXH@Z PROC				; Ship::SetAIMode, COMDAT
; _this$ = ecx

; 178  :     void              SetAIMode(int n)                 { ai_mode = (BYTE) n; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _n$[ebp]
  00006	88 81 14 04 00
	00		 mov	 BYTE PTR [ecx+1044], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetAIMode@Ship@@QAEXH@Z ENDP				; Ship::SetAIMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\ship.h
;	COMDAT ?SetInvulnerable@Ship@@QAEX_N@Z
_TEXT	SEGMENT
_n$ = 8							; size = 1
?SetInvulnerable@Ship@@QAEX_N@Z PROC			; Ship::SetInvulnerable, COMDAT
; _this$ = ecx

; 188  :     void              SetInvulnerable(bool n)          { invulnerable = n;         }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _n$[ebp]
  00006	88 81 22 04 00
	00		 mov	 BYTE PTR [ecx+1058], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetInvulnerable@Ship@@QAEX_N@Z ENDP			; Ship::SetInvulnerable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\ship.h
;	COMDAT ?GetCarrier@Ship@@QBEPAV1@XZ
_TEXT	SEGMENT
?GetCarrier@Ship@@QBEPAV1@XZ PROC			; Ship::GetCarrier, COMDAT
; _this$ = ecx

; 210  :     Ship*             GetCarrier()       const { return carrier;       }

  00000	8b 81 2c 04 00
	00		 mov	 eax, DWORD PTR [ecx+1068]
  00006	c3		 ret	 0
?GetCarrier@Ship@@QBEPAV1@XZ ENDP			; Ship::GetCarrier
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\ship.h
;	COMDAT ?Registry@Ship@@QBEPBDXZ
_TEXT	SEGMENT
?Registry@Ship@@QBEPBDXZ PROC				; Ship::Registry, COMDAT
; _this$ = ecx

; 362  :     const char*       Registry()        const    { return regnum;        }

  00000	8d 81 f0 01 00
	00		 lea	 eax, DWORD PTR [ecx+496]
  00006	c3		 ret	 0
?Registry@Ship@@QBEPBDXZ ENDP				; Ship::Registry
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\ship.h
;	COMDAT ?UseSkin@Ship@@QAEXPBVSkin@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?UseSkin@Ship@@QAEXPBVSkin@@@Z PROC			; Ship::UseSkin, COMDAT
; _this$ = ecx

; 391  :     void              UseSkin(const Skin* s)     { skin = s;             }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00006	89 81 2c 03 00
	00		 mov	 DWORD PTR [ecx+812], eax
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?UseSkin@Ship@@QAEXPBVSkin@@@Z ENDP			; Ship::UseSkin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\ship.h
;	COMDAT ?RespawnLoc@Ship@@QBEABUPoint@@XZ
_TEXT	SEGMENT
?RespawnLoc@Ship@@QBEABUPoint@@XZ PROC			; Ship::RespawnLoc, COMDAT
; _this$ = ecx

; 398  :     const Point&      RespawnLoc()      const    { return respawn_loc;   }

  00000	8d 81 80 04 00
	00		 lea	 eax, DWORD PTR [ecx+1152]
  00006	c3		 ret	 0
?RespawnLoc@Ship@@QBEABUPoint@@XZ ENDP			; Ship::RespawnLoc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\element.h
;	COMDAT ?Player@Element@@QBEHXZ
_TEXT	SEGMENT
?Player@Element@@QBEHXZ PROC				; Element::Player, COMDAT
; _this$ = ecx

; 74   :     int               Player()          const { return player;           }

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?Player@Element@@QBEHXZ ENDP				; Element::Player
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\element.h
;	COMDAT ?SetPlayer@Element@@QAEXH@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?SetPlayer@Element@@QAEXH@Z PROC			; Element::SetPlayer, COMDAT
; _this$ = ecx

; 75   :     void              SetPlayer(int p)        { player = p;              }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetPlayer@Element@@QAEXH@Z ENDP			; Element::SetPlayer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\element.h
;	COMDAT ?IsRogue@Element@@QBE_NXZ
_TEXT	SEGMENT
?IsRogue@Element@@QBE_NXZ PROC				; Element::IsRogue, COMDAT
; _this$ = ecx

; 97   :     bool              IsRogue()         const { return rogue;            }

  00000	8a 81 a0 00 00
	00		 mov	 al, BYTE PTR [ecx+160]
  00006	c3		 ret	 0
?IsRogue@Element@@QBE_NXZ ENDP				; Element::IsRogue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\element.h
;	COMDAT ?IsPlayable@Element@@QBE_NXZ
_TEXT	SEGMENT
?IsPlayable@Element@@QBE_NXZ PROC			; Element::IsPlayable, COMDAT
; _this$ = ecx

; 98   :     bool              IsPlayable()      const { return playable;         }

  00000	8a 81 a1 00 00
	00		 mov	 al, BYTE PTR [ecx+161]
  00006	c3		 ret	 0
?IsPlayable@Element@@QBE_NXZ ENDP			; Element::IsPlayable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\element.h
;	COMDAT ?SetRogue@Element@@QAEX_N@Z
_TEXT	SEGMENT
_r$ = 8							; size = 1
?SetRogue@Element@@QAEX_N@Z PROC			; Element::SetRogue, COMDAT
; _this$ = ecx

; 101  :     void              SetRogue(bool r)        { rogue = r;               }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _r$[ebp]
  00006	88 81 a0 00 00
	00		 mov	 BYTE PTR [ecx+160], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetRogue@Element@@QAEX_N@Z ENDP			; Element::SetRogue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\element.h
;	COMDAT ?SetPlayable@Element@@QAEX_N@Z
_TEXT	SEGMENT
_p$ = 8							; size = 1
?SetPlayable@Element@@QAEX_N@Z PROC			; Element::SetPlayable, COMDAT
; _this$ = ecx

; 102  :     void              SetPlayable(bool p)     { playable = p;            }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _p$[ebp]
  00006	88 81 a1 00 00
	00		 mov	 BYTE PTR [ecx+161], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetPlayable@Element@@QAEX_N@Z ENDP			; Element::SetPlayable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\element.h
;	COMDAT ?GetAssignment@Element@@QBEPAV1@XZ
_TEXT	SEGMENT
?GetAssignment@Element@@QBEPAV1@XZ PROC			; Element::GetAssignment, COMDAT
; _this$ = ecx

; 139  :     Element*          GetAssignment()            const { return assignment; }

  00000	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  00003	c3		 ret	 0
?GetAssignment@Element@@QBEPAV1@XZ ENDP			; Element::GetAssignment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\element.h
;	COMDAT ?GetCommandAILevel@Element@@QBEHXZ
_TEXT	SEGMENT
?GetCommandAILevel@Element@@QBEHXZ PROC			; Element::GetCommandAILevel, COMDAT
; _this$ = ecx

; 145  :     int               GetCommandAILevel()        const { return command_ai; }

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	c3		 ret	 0
?GetCommandAILevel@Element@@QBEHXZ ENDP			; Element::GetCommandAILevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\element.h
;	COMDAT ?SetCommandAILevel@Element@@QAEXH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?SetCommandAILevel@Element@@QAEXH@Z PROC		; Element::SetCommandAILevel, COMDAT
; _this$ = ecx

; 146  :     void              SetCommandAILevel(int n)         { command_ai = n;    }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00006	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetCommandAILevel@Element@@QAEXH@Z ENDP		; Element::SetCommandAILevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\element.h
;	COMDAT ?GetSquadron@Element@@QBEABVText@@XZ
_TEXT	SEGMENT
?GetSquadron@Element@@QBEABVText@@XZ PROC		; Element::GetSquadron, COMDAT
; _this$ = ecx

; 147  :     const Text&       GetSquadron()              const { return squadron;   }

  00000	8d 81 80 00 00
	00		 lea	 eax, DWORD PTR [ecx+128]
  00006	c3		 ret	 0
?GetSquadron@Element@@QBEABVText@@XZ ENDP		; Element::GetSquadron
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\element.h
;	COMDAT ?GetCount@Element@@QBEHXZ
_TEXT	SEGMENT
?GetCount@Element@@QBEHXZ PROC				; Element::GetCount, COMDAT
; _this$ = ecx

; 157  :     int               GetCount()                 const { return count;      }

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	c3		 ret	 0
?GetCount@Element@@QBEHXZ ENDP				; Element::GetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\element.h
;	COMDAT ?SetCount@Element@@QAEXH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?SetCount@Element@@QAEXH@Z PROC				; Element::SetCount, COMDAT
; _this$ = ecx

; 158  :     void              SetCount(int n)                  { count = n;         }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00006	89 41 34	 mov	 DWORD PTR [ecx+52], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetCount@Element@@QAEXH@Z ENDP				; Element::SetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\shot.h
;	COMDAT ?SetHitTarget@Shot@@QAEX_N@Z
_TEXT	SEGMENT
_h$dead$ = 8						; size = 1
?SetHitTarget@Shot@@QAEX_N@Z PROC			; Shot::SetHitTarget, COMDAT
; _this$ = ecx

; 92   :     void              SetHitTarget(bool h) { hit_target = h;    }

  00000	c6 81 0f 02 00
	00 01		 mov	 BYTE PTR [ecx+527], 1
  00007	c2 04 00	 ret	 4
?SetHitTarget@Shot@@QAEX_N@Z ENDP			; Shot::SetHitTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\drone.h
;	COMDAT ?TYPENAME@Drone@@SAPBDXZ
_TEXT	SEGMENT
?TYPENAME@Drone@@SAPBDXZ PROC				; Drone::TYPENAME, COMDAT

; 61   :     static const char* TYPENAME() { return "Drone"; }

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05GAGADLBE@Drone?$AA@
  00005	c3		 ret	 0
?TYPENAME@Drone@@SAPBDXZ ENDP				; Drone::TYPENAME
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\drone.h
;	COMDAT ?SetLife@Drone@@QAEXH@Z
_TEXT	SEGMENT
_seconds$dead$ = 8					; size = 4
?SetLife@Drone@@QAEXH@Z PROC				; Drone::SetLife, COMDAT
; _this$ = ecx

; 83   :     void        SetLife(int seconds) { life = seconds; }

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	f2 0f 11 81 a8
	01 00 00	 movsd	 QWORD PTR [ecx+424], xmm0
  0000b	c2 04 00	 ret	 4
?SetLife@Drone@@QAEXH@Z ENDP				; Drone::SetLife
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\explosion.h
;	COMDAT ?TYPENAME@Explosion@@SAPBDXZ
_TEXT	SEGMENT
?TYPENAME@Explosion@@SAPBDXZ PROC			; Explosion::TYPENAME, COMDAT

; 59   :     static const char* TYPENAME() { return "Explosion"; }

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09HGNANIIM@Explosion?$AA@
  00005	c3		 ret	 0
?TYPENAME@Explosion@@SAPBDXZ ENDP			; Explosion::TYPENAME
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\mission.h
;	COMDAT ?Stardate@Mission@@QBENXZ
_TEXT	SEGMENT
?Stardate@Mission@@QBENXZ PROC				; Mission::Stardate, COMDAT
; _this$ = ecx

; 132  :     double               Stardate()      const { return stardate;     }

  00000	f2 0f 10 81 b0
	00 00 00	 movsd	 xmm0, QWORD PTR [ecx+176]
  00008	c3		 ret	 0
?Stardate@Mission@@QBENXZ ENDP				; Mission::Stardate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\mission.h
;	COMDAT ?IsRogue@MissionElement@@QBE_NXZ
_TEXT	SEGMENT
?IsRogue@MissionElement@@QBE_NXZ PROC			; MissionElement::IsRogue, COMDAT
; _this$ = ecx

; 263  :     bool              IsRogue()      const { return rogue;         }

  00000	8a 41 66	 mov	 al, BYTE PTR [ecx+102]
  00003	c3		 ret	 0
?IsRogue@MissionElement@@QBE_NXZ ENDP			; MissionElement::IsRogue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\mission.h
;	COMDAT ?IsInvulnerable@MissionElement@@QBE_NXZ
_TEXT	SEGMENT
?IsInvulnerable@MissionElement@@QBE_NXZ PROC		; MissionElement::IsInvulnerable, COMDAT
; _this$ = ecx

; 264  :     bool              IsInvulnerable() const { return invulnerable; }

  00000	8a 41 67	 mov	 al, BYTE PTR [ecx+103]
  00003	c3		 ret	 0
?IsInvulnerable@MissionElement@@QBE_NXZ ENDP		; MissionElement::IsInvulnerable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\mission.h
;	COMDAT ?SetPath@MissionElement@@QAEXPBD@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?SetPath@MissionElement@@QAEXPBD@Z PROC			; MissionElement::SetPath, COMDAT
; _this$ = ecx

; 288  :     void              SetPath(const char* p)        { path = p;          }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 c1 24	 add	 ecx, 36			; 00000024H
  00006	5d		 pop	 ebp
  00007	e9 00 00 00 00	 jmp	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
?SetPath@MissionElement@@QAEXPBD@Z ENDP			; MissionElement::SetPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\mission.h
;	COMDAT ?SetRogue@MissionElement@@QAEX_N@Z
_TEXT	SEGMENT
_r$ = 8							; size = 1
?SetRogue@MissionElement@@QAEX_N@Z PROC			; MissionElement::SetRogue, COMDAT
; _this$ = ecx

; 300  :     void              SetRogue(bool r)              { rogue = r;         }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _r$[ebp]
  00006	88 41 66	 mov	 BYTE PTR [ecx+102], al
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetRogue@MissionElement@@QAEX_N@Z ENDP			; MissionElement::SetRogue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\mission.h
;	COMDAT ?SetZoneLock@MissionElement@@QAEXH@Z
_TEXT	SEGMENT
_z$ = 8							; size = 4
?SetZoneLock@MissionElement@@QAEXH@Z PROC		; MissionElement::SetZoneLock, COMDAT
; _this$ = ecx

; 310  :     void              SetZoneLock(int z)            { zone_lock = z;     }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _z$[ebp]
  00006	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetZoneLock@MissionElement@@QAEXH@Z ENDP		; MissionElement::SetZoneLock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\mission.h
;	COMDAT ?AddInstruction@MissionElement@@QAEXPBD@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_i$ = 8							; size = 4
?AddInstruction@MissionElement@@QAEXPBD@Z PROC		; MissionElement::AddInstruction, COMDAT
; _this$ = ecx

; 318  :     void              AddInstruction(const char* i)  { instructions.append(new(__FILE__,__LINE__) Text(i)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddInstruction@MissionElement@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00026	6a 08		 push	 8
  00028	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002d	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\mission.h

; 318  :     void              AddInstruction(const char* i)  { instructions.append(new(__FILE__,__LINE__) Text(i)); }

  00030	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	85 c0		 test	 eax, eax
  0003c	74 0c		 je	 SHORT $LN3@AddInstruc
  0003e	ff 75 08	 push	 DWORD PTR _i$[ebp]
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ??0Text@@QAE@PBD@Z	; Text::Text
  00048	eb 02		 jmp	 SHORT $LN4@AddInstruc
$LN3@AddInstruc:
  0004a	33 c0		 xor	 eax, eax
$LN4@AddInstruc:
  0004c	50		 push	 eax
  0004d	8d 8e dc 00 00
	00		 lea	 ecx, DWORD PTR [esi+220]
  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	e8 00 00 00 00	 call	 ?append@?$List@VText@@@@QAEXPBVText@@@Z ; List<Text>::append
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5e		 pop	 esi
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddInstruction@MissionElement@@QAEXPBD@Z$0:
  00000	68 3e 01 00 00	 push	 318			; 0000013eH
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@OGGMGBIG@d?3?2programming?2starshatter?2trunk@
  0000a	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__ehhandler$?AddInstruction@MissionElement@@QAEXPBD@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddInstruction@MissionElement@@QAEXPBD@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddInstruction@MissionElement@@QAEXPBD@Z ENDP		; MissionElement::AddInstruction
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\mission.h
;	COMDAT ?GetSkin@MissionShip@@QBEPBVSkin@@XZ
_TEXT	SEGMENT
?GetSkin@MissionShip@@QBEPBVSkin@@XZ PROC		; MissionShip::GetSkin, COMDAT
; _this$ = ecx

; 408  :     const Skin*       GetSkin()               const { return skin;       }

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	c3		 ret	 0
?GetSkin@MissionShip@@QBEPBVSkin@@XZ ENDP		; MissionShip::GetSkin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\mission.h
;	COMDAT ?SetDecoys@MissionShip@@QAEXH@Z
_TEXT	SEGMENT
_d$ = 8							; size = 4
?SetDecoys@MissionShip@@QAEXH@Z PROC			; MissionShip::SetDecoys, COMDAT
; _this$ = ecx

; 428  :     void              SetDecoys(int d)              { decoys = d;        }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00006	89 41 68	 mov	 DWORD PTR [ecx+104], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetDecoys@MissionShip@@QAEXH@Z ENDP			; MissionShip::SetDecoys
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\mission.h
;	COMDAT ?SetProbes@MissionShip@@QAEXH@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?SetProbes@MissionShip@@QAEXH@Z PROC			; MissionShip::SetProbes, COMDAT
; _this$ = ecx

; 429  :     void              SetProbes(int p)              { probes = p;        }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	89 41 6c	 mov	 DWORD PTR [ecx+108], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetProbes@MissionShip@@QAEXH@Z ENDP			; MissionShip::SetProbes
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\missionevent.h
;	COMDAT ?IsPending@MissionEvent@@QBE_NXZ
_TEXT	SEGMENT
?IsPending@MissionEvent@@QBE_NXZ PROC			; MissionEvent::IsPending, COMDAT
; _this$ = ecx

; 124  :     bool                 IsPending()       const { return status == PENDING;  }

  00000	33 c0		 xor	 eax, eax
  00002	39 41 0c	 cmp	 DWORD PTR [ecx+12], eax
  00005	0f 94 c0	 sete	 al
  00008	c3		 ret	 0
?IsPending@MissionEvent@@QBE_NXZ ENDP			; MissionEvent::IsPending
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\missionevent.h
;	COMDAT ?IsActive@MissionEvent@@QBE_NXZ
_TEXT	SEGMENT
?IsActive@MissionEvent@@QBE_NXZ PROC			; MissionEvent::IsActive, COMDAT
; _this$ = ecx

; 125  :     bool                 IsActive()        const { return status == ACTIVE;   }

  00000	33 c0		 xor	 eax, eax
  00002	83 79 0c 01	 cmp	 DWORD PTR [ecx+12], 1
  00006	0f 94 c0	 sete	 al
  00009	c3		 ret	 0
?IsActive@MissionEvent@@QBE_NXZ ENDP			; MissionEvent::IsActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\combatgroup.h
;	COMDAT ?SetRegion@CombatGroup@@QAEXVText@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_rgn$ = 8						; size = 8
?SetRegion@CombatGroup@@QAEXVText@@@Z PROC		; CombatGroup::SetRegion, COMDAT
; _this$ = ecx

; 160  :     void           SetRegion(Text rgn)                 { region = rgn;      }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetRegion@CombatGroup@@QAEXVText@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8d 45 08	 lea	 eax, DWORD PTR _rgn$[ebp]
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	50		 push	 eax
  0002d	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00030	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@ABV0@@Z ; Text::operator=
  00035	8d 4d 08	 lea	 ecx, DWORD PTR _rgn$[ebp]
  00038	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetRegion@CombatGroup@@QAEXVText@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _rgn$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__ehhandler$?SetRegion@CombatGroup@@QAEXVText@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetRegion@CombatGroup@@QAEXVText@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetRegion@CombatGroup@@QAEXVText@@@Z ENDP		; CombatGroup::SetRegion
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
;	COMDAT ??0SimHyper@@QAE@PAVShip@@PAVSimRegion@@ABUPoint@@H_N00@Z
_TEXT	SEGMENT
_o$ = 8							; size = 4
_r$ = 12						; size = 4
_l$ = 16						; size = 4
_t$ = 20						; size = 4
_h$ = 24						; size = 1
_fc1$ = 28						; size = 4
_fc2$ = 32						; size = 4
??0SimHyper@@QAE@PAVShip@@PAVSimRegion@@ABUPoint@@H_N00@Z PROC ; SimHyper::SimHyper, COMDAT
; _this$ = ecx

; 113  :     SimHyper(Ship* o, SimRegion* r, const Point& l, int t, bool h, Ship* fc1, Ship* fc2)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     : ship(o), rgn(r), loc(l), type(t), hyperdrive(h), fc_src(fc1), fc_dst(fc2)  { }

  00003	8b 45 08	 mov	 eax, DWORD PTR _o$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR _r$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0000e	8b 45 10	 mov	 eax, DWORD PTR _l$[ebp]
  00011	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00015	f2 0f 11 41 08	 movsd	 QWORD PTR [ecx+8], xmm0
  0001a	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  0001f	f2 0f 11 41 10	 movsd	 QWORD PTR [ecx+16], xmm0
  00024	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 114  :     : ship(o), rgn(r), loc(l), type(t), hyperdrive(h), fc_src(fc1), fc_dst(fc2)  { }

  00029	8b 45 14	 mov	 eax, DWORD PTR _t$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0002c	f2 0f 11 41 18	 movsd	 QWORD PTR [ecx+24], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 114  :     : ship(o), rgn(r), loc(l), type(t), hyperdrive(h), fc_src(fc1), fc_dst(fc2)  { }

  00031	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00034	8a 45 18	 mov	 al, BYTE PTR _h$[ebp]
  00037	88 41 24	 mov	 BYTE PTR [ecx+36], al
  0003a	8b 45 1c	 mov	 eax, DWORD PTR _fc1$[ebp]
  0003d	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  00040	8b 45 20	 mov	 eax, DWORD PTR _fc2$[ebp]
  00043	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  00046	8b c1		 mov	 eax, ecx
  00048	5d		 pop	 ebp
  00049	c2 1c 00	 ret	 28			; 0000001cH
??0SimHyper@@QAE@PAVShip@@PAVSimRegion@@ABUPoint@@H_N00@Z ENDP ; SimHyper::SimHyper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
;	COMDAT ??0SimSplash@@QAE@PAVSimRegion@@ABUPoint@@NN@Z
_TEXT	SEGMENT
_d$1$ = -12						; size = 8
_this$ = -4						; size = 4
_r$ = 8							; size = 4
_l$ = 12						; size = 4
_n$ = 16						; size = 8
??0SimSplash@@QAE@PAVSimRegion@@ABUPoint@@NN@Z PROC	; SimSplash::SimSplash, COMDAT
; _this$ = ecx
; _d$ = xmm3l

; 132  :     owner_name("Collateral Damage"), missile(false) { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	f2 0f 11 5d f4	 movsd	 QWORD PTR _d$1$[ebp], xmm3
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CAMCFAKE@Collateral?5Damage?$AA@
  00013	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00016	e8 00 00 00 00	 call	 ??0Text@@QAE@PBD@Z	; Text::Text
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _l$[ebp]
  0001e	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00022	f2 0f 11 46 08	 movsd	 QWORD PTR [esi+8], xmm0
  00027	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  0002c	f2 0f 11 46 10	 movsd	 QWORD PTR [esi+16], xmm0
  00031	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 131  :     : rgn(r), loc(l), damage(d), range(n),

  00036	8b 45 08	 mov	 eax, DWORD PTR _r$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00039	f2 0f 11 46 18	 movsd	 QWORD PTR [esi+24], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 131  :     : rgn(r), loc(l), damage(d), range(n),

  0003e	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _d$1$[ebp]
  00043	f2 0f 11 46 20	 movsd	 QWORD PTR [esi+32], xmm0
  00048	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _n$[ebp]
  0004d	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 132  :     owner_name("Collateral Damage"), missile(false) { }

  00050	8b c6		 mov	 eax, esi
  00052	f2 0f 11 46 28	 movsd	 QWORD PTR [esi+40], xmm0
  00057	c6 46 34 00	 mov	 BYTE PTR [esi+52], 0
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 10 00	 ret	 16			; 00000010H
??0SimSplash@@QAE@PAVSimRegion@@ABUPoint@@NN@Z ENDP	; SimSplash::SimSplash
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c$ = 8							; size = 4
??0Sim@@QAE@PAVMotionController@@@Z PROC		; Sim::Sim
; _this$ = ecx

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Sim@@QAE@PAVMotionController@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Sim@@6B@
  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00049	e8 00 00 00 00	 call	 ??0Scene@@QAE@XZ	; Scene::Scene

; 148  :     : ctrl(c), test_mode(false), grid_shown(false), dust(0),

  0004e	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  00055	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0005c	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  00063	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0006a	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
  00071	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00078	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
  0007f	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
  00086	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  0008d	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  00094	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  0009b	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
  000a5	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  000af	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  000b9	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
  000c3	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  000cd	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
  000d7	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  000e1	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  000eb	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
  000f5	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  000ff	c7 86 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+168], 0
  00109	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0
  00113	c7 86 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+176], 0
  0011d	c7 86 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+180], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 148  :     : ctrl(c), test_mode(false), grid_shown(false), dust(0),

  00127	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  0012a	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0012e	89 86 b8 00 00
	00		 mov	 DWORD PTR [esi+184], eax
  00134	66 c7 86 bc 00
	00 00 00 00	 mov	 WORD PTR [esi+188], 0

; 149  :       star_system(0), active_region(0), mission(0), netgame(0),

  0013d	c7 86 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+192], 0
  00147	c7 86 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+196], 0

; 150  :       start_time(0)

  00151	c7 86 c8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+200], 0

; 152  :     Drive::Initialize();

  0015b	e8 00 00 00 00	 call	 ?Initialize@Drive@@SAXXZ ; Drive::Initialize

; 153  :     Explosion::Initialize();

  00160	e8 00 00 00 00	 call	 ?Initialize@Explosion@@SAXXZ ; Explosion::Initialize

; 154  :     FlightDeck::Initialize();

  00165	e8 00 00 00 00	 call	 ?Initialize@FlightDeck@@SAXXZ ; FlightDeck::Initialize

; 155  :     NavLight::Initialize();

  0016a	e8 00 00 00 00	 call	 ?Initialize@NavLight@@SAXXZ ; NavLight::Initialize

; 156  :     Shot::Initialize();
; 157  :     MFD::Initialize();

  0016f	e8 00 00 00 00	 call	 ?Initialize@MFD@@SAXXZ	; MFD::Initialize

; 158  :     Asteroid::Initialize();

  00174	e8 00 00 00 00	 call	 ?Initialize@Asteroid@@SAXXZ ; Asteroid::Initialize

; 159  : 
; 160  :     if (!sim)

  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sim@Sim@@1PAV1@A ; Sim::sim
  0017e	85 c0		 test	 eax, eax
  00180	0f 44 c6	 cmove	 eax, esi
  00183	a3 00 00 00 00	 mov	 DWORD PTR ?sim@Sim@@1PAV1@A, eax ; Sim::sim

; 161  :     sim = this;
; 162  : 
; 163  :     cam_dir = CameraDirector::GetInstance();

  00188	e8 00 00 00 00	 call	 ?GetInstance@CameraDirector@@SAPAV1@XZ ; CameraDirector::GetInstance
  0018d	89 46 54	 mov	 DWORD PTR [esi+84], eax

; 164  : }

  00190	8b c6		 mov	 eax, esi
  00192	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00195	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019c	59		 pop	 ecx
  0019d	5e		 pop	 esi
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Universe@@UAE@XZ	; Universe::~Universe
__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000e	e9 00 00 00 00	 jmp	 ??1Scene@@UAE@XZ	; Scene::~Scene
__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 58	 add	 ecx, 88			; 00000058H
  00019	e9 00 00 00 00	 jmp	 ??1?$List@VSimRegion@@@@QAE@XZ ; List<SimRegion>::~List<SimRegion>
__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 64	 add	 ecx, 100		; 00000064H
  00024	e9 00 00 00 00	 jmp	 ??1?$List@VSimRegion@@@@QAE@XZ ; List<SimRegion>::~List<SimRegion>
__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 70	 add	 ecx, 112		; 00000070H
  0002f	e9 00 00 00 00	 jmp	 ??1?$List@VSimHyper@@@@QAE@XZ ; List<SimHyper>::~List<SimHyper>
__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0003a	e9 00 00 00 00	 jmp	 ??1?$List@VSimSplash@@@@QAE@XZ ; List<SimSplash>::~List<SimSplash>
__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00048	e9 00 00 00 00	 jmp	 ??1?$List@VElement@@@@QAE@XZ ; List<Element>::~List<Element>
__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$7:
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00056	e9 00 00 00 00	 jmp	 ??1?$List@VElement@@@@QAE@XZ ; List<Element>::~List<Element>
__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$8:
  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00064	e9 00 00 00 00	 jmp	 ??1?$List@VMissionEvent@@@@QAE@XZ ; List<MissionEvent>::~List<MissionEvent>
__unwindfunclet$??0Sim@@QAE@PAVMotionController@@@Z$9:
  00069	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	81 c1 ac 00 00
	00		 add	 ecx, 172		; 000000acH
  00072	e9 00 00 00 00	 jmp	 ??1?$List@VMissionElement@@@@QAE@XZ ; List<MissionElement>::~List<MissionElement>
__ehhandler$??0Sim@@QAE@PAVMotionController@@@Z:
  00077	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0007b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0007e	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00081	33 c8		 xor	 ecx, eax
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Sim@@QAE@PAVMotionController@@@Z
  0008d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Sim@@QAE@PAVMotionController@@@Z ENDP		; Sim::Sim
; Function compile flags: /Ogtp
;	COMDAT ??_GSim@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSim@@UAEPAXI@Z PROC					; Sim::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1Sim@@UAE@XZ		; Sim::~Sim
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 cc 00 00 00	 push	 204			; 000000ccH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GSim@@UAEPAXI@Z ENDP					; Sim::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\universe.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1Sim@@UAE@XZ PROC					; Sim::~Sim
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Sim@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Sim@@6B@

; 168  :     UnloadMission();

  0002b	e8 00 00 00 00	 call	 ?UnloadMission@Sim@@QAEXXZ ; Sim::UnloadMission

; 169  : 
; 170  :     Shot::Close();
; 171  :     FlightDeck::Close();

  00030	e8 00 00 00 00	 call	 ?Close@FlightDeck@@SAXXZ ; FlightDeck::Close

; 172  :     NavLight::Close();
; 173  :     Token::close();

  00035	e8 00 00 00 00	 call	 ?close@Token@@SAXXZ	; Token::close

; 174  :     Asteroid::Close();

  0003a	e8 00 00 00 00	 call	 ?Close@Asteroid@@SAXXZ	; Asteroid::Close

; 176  :     if (sim == this)

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sim@Sim@@1PAV1@A ; Sim::sim
  00044	33 c9		 xor	 ecx, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 54   :    ~List()  { delete [] array; }

  00046	ff b6 b4 00 00
	00		 push	 DWORD PTR [esi+180]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 176  :     if (sim == this)

  0004c	3b c6		 cmp	 eax, esi
  0004e	0f 44 c1	 cmove	 eax, ecx
  00051	a3 00 00 00 00	 mov	 DWORD PTR ?sim@Sim@@1PAV1@A, eax ; Sim::sim
; File d:\programming\starshatter\trunk\foundationex\list.h

; 54   :    ~List()  { delete [] array; }

  00056	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0005b	ff b6 a8 00 00
	00		 push	 DWORD PTR [esi+168]
  00061	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00066	ff b6 9c 00 00
	00		 push	 DWORD PTR [esi+156]
  0006c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00071	ff b6 90 00 00
	00		 push	 DWORD PTR [esi+144]
  00077	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0007c	ff b6 84 00 00
	00		 push	 DWORD PTR [esi+132]
  00082	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00087	ff 76 78	 push	 DWORD PTR [esi+120]
  0008a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0008f	ff 76 6c	 push	 DWORD PTR [esi+108]
  00092	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00097	ff 76 60	 push	 DWORD PTR [esi+96]
  0009a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0009f	83 c4 20	 add	 esp, 32			; 00000020H
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 178  : }

  000a2	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000a5	e8 00 00 00 00	 call	 ??1Scene@@UAE@XZ	; Scene::~Scene
; File d:\programming\starshatter\trunk\ngenex\universe.h

; 50   :     virtual ~Universe()  { }

  000aa	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Universe@@6B@
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 178  : }

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5e		 pop	 esi
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1Sim@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Sim@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Sim@@UAE@XZ ENDP					; Sim::~Sim
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
?IsComplete@Sim@@QBE_NXZ PROC				; Sim::IsComplete
; _this$ = ecx

; 315  :     return mission && mission->IsComplete();

  00000	8b 81 c0 00 00
	00		 mov	 eax, DWORD PTR [ecx+192]
  00006	85 c0		 test	 eax, eax
  00008	74 0c		 je	 SHORT $LN3@IsComplete
  0000a	80 b8 ba 00 00
	00 00		 cmp	 BYTE PTR [eax+186], 0
  00011	74 03		 je	 SHORT $LN3@IsComplete
  00013	b0 01		 mov	 al, 1

; 316  : }

  00015	c3		 ret	 0
$LN3@IsComplete:

; 315  :     return mission && mission->IsComplete();

  00016	32 c0		 xor	 al, al

; 316  : }

  00018	c3		 ret	 0
?IsComplete@Sim@@QBE_NXZ ENDP				; Sim::IsComplete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\solid.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_all_models$2 = -48					; size = 12
_elem_iter$3 = -36					; size = 8
_model_iter$4 = -28					; size = 8
_surf_iter$5 = -20					; size = 8
__$EHRec$ = -12						; size = 12
_m$ = 8							; size = 4
tv275 = 12						; size = 4
_preload_textures$ = 12					; size = 1
?LoadMission@Sim@@QAEXPAVMission@@_N@Z PROC		; Sim::LoadMission
; _this$ = ecx

; 322  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadMission@Sim@@QAEXPAVMission@@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 323  :     cam_dir = CameraDirector::GetInstance();

  0002a	e8 00 00 00 00	 call	 ?GetInstance@CameraDirector@@SAPAV1@XZ ; CameraDirector::GetInstance

; 324  : 
; 325  :     if (!mission) {

  0002f	83 bf c0 00 00
	00 00		 cmp	 DWORD PTR [edi+192], 0
  00036	89 47 54	 mov	 DWORD PTR [edi+84], eax
  00039	0f 85 2a 01 00
	00		 jne	 $LN40@LoadMissio

; 329  :         if (preload_textures) {

  0003f	80 7d 0c 00	 cmp	 BYTE PTR _preload_textures$[ebp], 0
  00043	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00046	89 87 c0 00 00
	00		 mov	 DWORD PTR [edi+192], eax
; File d:\programming\starshatter\trunk\stars45\mission.h

; 165  :     void                 SetActive(bool a)             { active = a;        }

  0004c	c6 80 b9 00 00
	00 01		 mov	 BYTE PTR [eax+185], 1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 329  :         if (preload_textures) {

  00053	0f 84 10 01 00
	00		 je	 $LN40@LoadMissio

; 330  :             Video*         video = Game::GetVideo();

  00059	e8 00 00 00 00	 call	 ?GetVideo@Game@@SAPAVVideo@@XZ ; Game::GetVideo
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  0005e	33 db		 xor	 ebx, ebx
  00060	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _all_models$2[ebp], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 330  :             Video*         video = Game::GetVideo();

  00067	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  00069	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _all_models$2[ebp+4], 0
  00070	89 5d d8	 mov	 DWORD PTR _all_models$2[ebp+8], ebx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 331  :             List<Model>    all_models;

  00073	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00076	8d 4d dc	 lea	 ecx, DWORD PTR _elem_iter$3[ebp]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 144  :     List<MissionElement>& GetElements()        { return elements;     }

  00079	8b 87 c0 00 00
	00		 mov	 eax, DWORD PTR [edi+192]
  0007f	05 ec 00 00 00	 add	 eax, 236		; 000000ecH
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00084	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _elem_iter$3[ebp+4], -1
  0008b	89 45 dc	 mov	 DWORD PTR _elem_iter$3[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  0008e	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionElement@@@@QAEPAVMissionElement@@XZ ; ListIter<MissionElement>::next
  00093	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 335  :             while (++elem_iter) {

  00095	0f 84 c5 00 00
	00		 je	 $LN3@LoadMissio
  0009b	0f 1f 44 00 00	 npad	 5
$LL2@LoadMissio:

; 336  :                 MissionElement*   elem   = elem_iter.value();

  000a0	8d 4d dc	 lea	 ecx, DWORD PTR _elem_iter$3[ebp]
  000a3	e8 00 00 00 00	 call	 ?value@?$ListIter@VMissionElement@@@@QAEPAVMissionElement@@XZ ; ListIter<MissionElement>::value
; File d:\programming\starshatter\trunk\stars45\mission.h

; 244  :     const ShipDesign* GetDesign()    const { return design;        }

  000a8	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 339  :                 if (design) {

  000ab	85 c0		 test	 eax, eax
  000ad	0f 84 9a 00 00
	00		 je	 $LN5@LoadMissio

; 340  :                     for (int i = 0; i < 4; i++) {

  000b3	bf 04 00 00 00	 mov	 edi, 4
  000b8	8d 98 2c 01 00
	00		 lea	 ebx, DWORD PTR [eax+300]
  000be	89 7d 0c	 mov	 DWORD PTR tv275[ebp], edi
$LL6@LoadMissio:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000c1	8d 4d e4	 lea	 ecx, DWORD PTR _model_iter$4[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000c4	89 5d e4	 mov	 DWORD PTR _model_iter$4[ebp], ebx
  000c7	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _model_iter$4[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  000ce	e8 00 00 00 00	 call	 ?next@?$ListIter@VModel@@@@QAEPAVModel@@XZ ; ListIter<Model>::next
  000d3	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 344  :                         while (++model_iter) {

  000d5	74 67		 je	 SHORT $LN4@LoadMissio
$LL7@LoadMissio:

; 345  :                             Model* model = model_iter.value();

  000d7	8d 4d e4	 lea	 ecx, DWORD PTR _model_iter$4[ebp]
  000da	e8 00 00 00 00	 call	 ?value@?$ListIter@VModel@@@@QAEPAVModel@@XZ ; ListIter<Model>::value
  000df	8b f8		 mov	 edi, eax

; 346  :                             if (!all_models.contains(model)) {

  000e1	8d 4d d0	 lea	 ecx, DWORD PTR _all_models$2[ebp]
  000e4	57		 push	 edi
  000e5	e8 00 00 00 00	 call	 ?contains@?$List@VModel@@@@QBE_NPBVModel@@@Z ; List<Model>::contains
  000ea	84 c0		 test	 al, al
  000ec	75 41		 jne	 SHORT $LN10@LoadMissio

; 347  :                                 all_models.append(model);

  000ee	57		 push	 edi
  000ef	8d 4d d0	 lea	 ecx, DWORD PTR _all_models$2[ebp]
  000f2	e8 00 00 00 00	 call	 ?append@?$List@VModel@@@@QAEXPBVModel@@@Z ; List<Model>::append
; File d:\programming\starshatter\trunk\ngenex\solid.h

; 162  :     List<Surface>&    GetSurfaces()     { return surfaces;         }

  000f7	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000fa	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _surf_iter$5[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00101	8d 4d ec	 lea	 ecx, DWORD PTR _surf_iter$5[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00104	89 45 ec	 mov	 DWORD PTR _surf_iter$5[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00107	e8 00 00 00 00	 call	 ?next@?$ListIter@VSurface@@@@QAEPAVSurface@@XZ ; ListIter<Surface>::next
  0010c	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 351  :                                 while (++surf_iter) {

  0010e	74 1f		 je	 SHORT $LN10@LoadMissio
$LL9@LoadMissio:

; 352  :                                     Surface* surface = surf_iter.value();
; 353  :                                     video->PreloadSurface(surface);

  00110	8b 3e		 mov	 edi, DWORD PTR [esi]
  00112	8d 4d ec	 lea	 ecx, DWORD PTR _surf_iter$5[ebp]
  00115	e8 00 00 00 00	 call	 ?value@?$ListIter@VSurface@@@@QAEPAVSurface@@XZ ; ListIter<Surface>::value
  0011a	50		 push	 eax
  0011b	8b ce		 mov	 ecx, esi
  0011d	ff 97 e8 00 00
	00		 call	 DWORD PTR [edi+232]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00123	8d 4d ec	 lea	 ecx, DWORD PTR _surf_iter$5[ebp]
  00126	e8 00 00 00 00	 call	 ?next@?$ListIter@VSurface@@@@QAEPAVSurface@@XZ ; ListIter<Surface>::next
  0012b	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 351  :                                 while (++surf_iter) {

  0012d	75 e1		 jne	 SHORT $LL9@LoadMissio
$LN10@LoadMissio:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0012f	8d 4d e4	 lea	 ecx, DWORD PTR _model_iter$4[ebp]
  00132	e8 00 00 00 00	 call	 ?next@?$ListIter@VModel@@@@QAEPAVModel@@XZ ; ListIter<Model>::next
  00137	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 344  :                         while (++model_iter) {

  00139	75 9c		 jne	 SHORT $LL7@LoadMissio
  0013b	8b 7d 0c	 mov	 edi, DWORD PTR tv275[ebp]
$LN4@LoadMissio:

; 340  :                     for (int i = 0; i < 4; i++) {

  0013e	83 c3 0c	 add	 ebx, 12			; 0000000cH
  00141	83 ef 01	 sub	 edi, 1
  00144	89 7d 0c	 mov	 DWORD PTR tv275[ebp], edi
  00147	0f 85 74 ff ff
	ff		 jne	 $LL6@LoadMissio
$LN5@LoadMissio:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0014d	8d 4d dc	 lea	 ecx, DWORD PTR _elem_iter$3[ebp]
  00150	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionElement@@@@QAEPAVMissionElement@@XZ ; ListIter<MissionElement>::next
  00155	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 335  :             while (++elem_iter) {

  00157	0f 85 43 ff ff
	ff		 jne	 $LL2@LoadMissio
  0015d	8b 5d d8	 mov	 ebx, DWORD PTR _all_models$2[ebp+8]
$LN3@LoadMissio:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 54   :    ~List()  { delete [] array; }

  00160	53		 push	 ebx
  00161	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00166	83 c4 04	 add	 esp, 4
$LN40@LoadMissio:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 373  : }

  00169	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00173	59		 pop	 ecx
  00174	5f		 pop	 edi
  00175	5e		 pop	 esi
  00176	5b		 pop	 ebx
  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadMission@Sim@@QAEXPAVMission@@_N@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _all_models$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$List@VModel@@@@QAE@XZ ; List<Model>::~List<Model>
__ehhandler$?LoadMission@Sim@@QAEXPAVMission@@_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadMission@Sim@@QAEXPAVMission@@_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadMission@Sim@@QAEXPAVMission@@_N@Z ENDP		; Sim::LoadMission
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\starshatter.h
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ExecMission@Sim@@QAEXXZ PROC				; Sim::ExecMission
; _this$ = ecx

; 377  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ExecMission@Sim@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx

; 378  :     cam_dir = CameraDirector::GetInstance();

  00028	e8 00 00 00 00	 call	 ?GetInstance@CameraDirector@@SAPAV1@XZ ; CameraDirector::GetInstance
  0002d	89 46 54	 mov	 DWORD PTR [esi+84], eax

; 379  : 
; 380  :     if (!mission) {

  00030	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
  00036	85 c0		 test	 eax, eax
  00038	75 1f		 jne	 SHORT $LN2@ExecMissio

; 381  :         Print("Sim::ExecMission() - No mission to execute.\n");

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@BNNLBOCC@Sim?3?3ExecMission?$CI?$CJ?5?9?5No?5mission?5@
  0003f	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00044	83 c4 04	 add	 esp, 4

; 425  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN2@ExecMissio:

; 382  :         return;
; 383  :     }
; 384  : 
; 385  :     if (elements.size() || finished.size()) {

  00059	83 be 88 00 00
	00 00		 cmp	 DWORD PTR [esi+136], 0
  00060	0f 85 44 01 00
	00		 jne	 $LN4@ExecMissio
  00066	83 be 94 00 00
	00 00		 cmp	 DWORD PTR [esi+148], 0
  0006d	0f 85 37 01 00
	00		 jne	 $LN4@ExecMissio

; 387  :         return;
; 388  :     }
; 389  : 
; 390  :     Print("\nExec Mission: '%s'\n", (const char*) mission->Name());

  00073	ff b0 94 00 00
	00		 push	 DWORD PTR [eax+148]
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@INLOODOL@?6Exec?5Mission?3?5?8?$CFs?8?6?$AA@
  0007e	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 391  : 
; 392  :     if (cam_dir)

  00083	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00086	83 c4 08	 add	 esp, 8
  00089	85 c9		 test	 ecx, ecx
  0008b	74 05		 je	 SHORT $LN15@ExecMissio

; 393  :     cam_dir->Reset();

  0008d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008f	ff 50 14	 call	 DWORD PTR [eax+20]
$LN15@ExecMissio:
; File d:\programming\starshatter\trunk\stars45\mission.h

; 132  :     double               Stardate()      const { return stardate;     }

  00092	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
  00098	f2 0f 10 80 b0
	00 00 00	 movsd	 xmm0, QWORD PTR [eax+176]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 395  :     if (mission->Stardate() > 0)

  000a0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  000a8	76 07		 jbe	 SHORT $LN6@ExecMissio

; 396  :     StarSystem::SetBaseTime(mission->Stardate(), true);

  000aa	b1 01		 mov	 cl, 1
  000ac	e8 00 00 00 00	 call	 ?SetBaseTime@StarSystem@@SAXN_N@Z ; StarSystem::SetBaseTime
$LN6@ExecMissio:
; File d:\programming\starshatter\trunk\stars45\mission.h

; 140  :     StarSystem*          GetStarSystem() const { return star_system;  }

  000b1	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 399  :     star_system->Activate(scene);

  000b7	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  000ba	53		 push	 ebx
; File d:\programming\starshatter\trunk\stars45\mission.h

; 140  :     StarSystem*          GetStarSystem() const { return star_system;  }

  000bb	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 398  :     star_system = mission->GetStarSystem();

  000c1	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  000c4	8b 01		 mov	 eax, DWORD PTR [ecx]

; 399  :     star_system->Activate(scene);

  000c6	ff 50 10	 call	 DWORD PTR [eax+16]

; 400  : 
; 401  :     int dust_factor = 0;
; 402  : 
; 403  :     if (Starshatter::GetInstance())

  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?instance@Starshatter@@1PAV1@A ; Starshatter::instance
  000ce	33 ff		 xor	 edi, edi
  000d0	85 c0		 test	 eax, eax
  000d2	74 06		 je	 SHORT $LN7@ExecMissio
; File d:\programming\starshatter\trunk\stars45\starshatter.h

; 129  :     int               Dust()               { return dust;          }

  000d4	8b b8 e8 a5 00
	00		 mov	 edi, DWORD PTR [eax+42472]
$LN7@ExecMissio:
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 92   :     int               NumDust()      const { return sky_dust;  }

  000da	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000dd	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [eax+152]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 406  :     if (star_system->NumDust() * dust_factor) {

  000e3	0f af c7	 imul	 eax, edi
  000e6	85 c0		 test	 eax, eax
  000e8	74 51		 je	 SHORT $LN8@ExecMissio
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  000ea	6a 78		 push	 120			; 00000078H
  000ec	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 407  :         dust = new(__FILE__,__LINE__) Dust(star_system->NumDust() * 2*(dust_factor+1), dust_factor > 1);

  000f1	8b d0		 mov	 edx, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  000f3	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 407  :         dust = new(__FILE__,__LINE__) Dust(star_system->NumDust() * 2*(dust_factor+1), dust_factor > 1);

  000f6	89 55 f0	 mov	 DWORD PTR $T2[ebp], edx
  000f9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00100	85 d2		 test	 edx, edx
  00102	74 23		 je	 SHORT $LN11@ExecMissio
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 92   :     int               NumDust()      const { return sky_dust;  }

  00104	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 407  :         dust = new(__FILE__,__LINE__) Dust(star_system->NumDust() * 2*(dust_factor+1), dust_factor > 1);

  00107	83 ff 01	 cmp	 edi, 1
  0010a	0f 9f c0	 setg	 al
  0010d	0f b6 c0	 movzx	 eax, al
  00110	50		 push	 eax
  00111	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00114	0f af 81 98 00
	00 00		 imul	 eax, DWORD PTR [ecx+152]
  0011b	8b ca		 mov	 ecx, edx
  0011d	03 c0		 add	 eax, eax
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ??0Dust@@QAE@H_N@Z	; Dust::Dust
  00125	eb 02		 jmp	 SHORT $LN12@ExecMissio
$LN11@ExecMissio:
  00127	33 c0		 xor	 eax, eax
$LN12@ExecMissio:
  00129	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 408  :         scene.AddGraphic(dust);

  00130	8b cb		 mov	 ecx, ebx
  00132	50		 push	 eax
  00133	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00136	e8 00 00 00 00	 call	 ?AddGraphic@Scene@@QAEXPAVGraphic@@@Z ; Scene::AddGraphic
$LN8@ExecMissio:

; 409  :     }
; 410  : 
; 411  :     CreateRegions();

  0013b	8b ce		 mov	 ecx, esi
  0013d	e8 00 00 00 00	 call	 ?CreateRegions@Sim@@IAEXXZ ; Sim::CreateRegions

; 412  :     BuildLinks();

  00142	8b ce		 mov	 ecx, esi
  00144	e8 00 00 00 00	 call	 ?BuildLinks@Sim@@IAEXXZ	; Sim::BuildLinks

; 413  :     CreateElements();

  00149	8b ce		 mov	 ecx, esi
  0014b	e8 00 00 00 00	 call	 ?CreateElements@Sim@@IAEXXZ ; Sim::CreateElements

; 414  :     CopyEvents();

  00150	8b ce		 mov	 ecx, esi
  00152	e8 00 00 00 00	 call	 ?CopyEvents@Sim@@IAEXXZ	; Sim::CopyEvents

; 415  : 
; 416  :     if (netgame) {

  00157	8b 8e c4 00 00
	00		 mov	 ecx, DWORD PTR [esi+196]
  0015d	85 c9		 test	 ecx, ecx
  0015f	74 10		 je	 SHORT $LN9@ExecMissio

; 417  :         delete netgame;

  00161	8b 01		 mov	 eax, DWORD PTR [ecx]
  00163	6a 01		 push	 1
  00165	ff 10		 call	 DWORD PTR [eax]

; 418  :         netgame = 0;

  00167	c7 86 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+196], 0
$LN9@ExecMissio:

; 419  :     }
; 420  : 
; 421  :     first_frame = true;

  00171	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?first_frame@@3_NA, 1

; 422  :     start_time  = Game::GameTime();

  00178	e8 00 00 00 00	 call	 ?GameTime@Game@@SAKXZ	; Game::GameTime
  0017d	89 86 c8 00 00
	00		 mov	 DWORD PTR [esi+200], eax

; 423  : 
; 424  :     AudioConfig::SetTraining(mission->Type() == Mission::TRAINING);

  00183	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
  00189	83 b8 a4 00 00
	00 16		 cmp	 DWORD PTR [eax+164], 22	; 00000016H
  00190	0f 94 c1	 sete	 cl
  00193	e8 00 00 00 00	 call	 ?SetTraining@AudioConfig@@SAX_N@Z ; AudioConfig::SetTraining

; 425  : }

  00198	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0019b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a2	59		 pop	 ecx
  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	5b		 pop	 ebx
  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c3		 ret	 0
$LN4@ExecMissio:

; 386  :         Print("Sim::ExecMission(%s) mission is already executing.\n", mission->Name());

  001aa	ff b0 94 00 00
	00		 push	 DWORD PTR [eax+148]
  001b0	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@LJMJJDEL@Sim?3?3ExecMission?$CI?$CFs?$CJ?5mission?5is?5@
  001b5	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  001ba	83 c4 08	 add	 esp, 8

; 425  : }

  001bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c7	59		 pop	 ecx
  001c8	5f		 pop	 edi
  001c9	5e		 pop	 esi
  001ca	5b		 pop	 ebx
  001cb	8b e5		 mov	 esp, ebp
  001cd	5d		 pop	 ebp
  001ce	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ExecMission@Sim@@QAEXXZ$0:
  00000	68 97 01 00 00	 push	 407			; 00000197H
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__ehhandler$?ExecMission@Sim@@QAEXXZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ExecMission@Sim@@QAEXXZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ExecMission@Sim@@QAEXXZ ENDP				; Sim::ExecMission
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_iter$ = -84						; size = 8
_rgn$2 = -76						; size = 8
_rgn$3 = -68						; size = 8
_moon$4 = -60						; size = 8
_rgn$5 = -52						; size = 8
_star$6 = -44						; size = 8
_planet$7 = -36						; size = 8
$T8 = -28						; size = 4
$T9 = -24						; size = 4
$T10 = -20						; size = 4
_active_region_name$1$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
?CreateRegions@Sim@@IAEXXZ PROC				; Sim::CreateRegions
; _this$ = ecx

; 431  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateRegions@Sim@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 432  :     const char* active_region_name = 0;
; 433  : 
; 434  :     if (mission)

  0002a	8b 87 c0 00 00
	00		 mov	 eax, DWORD PTR [edi+192]
  00030	85 c0		 test	 eax, eax
  00032	0f 84 19 03 00
	00		 je	 $LN16@CreateRegi

; 435  :         active_region_name = mission->GetRegion();

  00038	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 141  :     List<StarSystem>&    GetSystemList()       { return system_list;  }

  0003e	05 e0 00 00 00	 add	 eax, 224		; 000000e0H
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 435  :         active_region_name = mission->GetRegion();

  00043	89 4d f0	 mov	 DWORD PTR _active_region_name$1$[ebp], ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00046	8d 4d ac	 lea	 ecx, DWORD PTR _iter$[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00049	89 45 ac	 mov	 DWORD PTR _iter$[ebp], eax
  0004c	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _iter$[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00053	e8 00 00 00 00	 call	 ?next@?$ListIter@VStarSystem@@@@QAEPAVStarSystem@@XZ ; ListIter<StarSystem>::next
  00058	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 439  :     while (++iter) {

  0005a	0f 84 f1 02 00
	00		 je	 $LN16@CreateRegi
$LL2@CreateRegi:

; 440  :         StarSystem* sys = iter.value();

  00060	8d 4d ac	 lea	 ecx, DWORD PTR _iter$[ebp]
  00063	e8 00 00 00 00	 call	 ?value@?$ListIter@VStarSystem@@@@QAEPAVStarSystem@@XZ ; ListIter<StarSystem>::value
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 95   :     List<OrbitalBody>&   Bodies()       { return bodies;  }

  00068	05 08 01 00 00	 add	 eax, 264		; 00000108H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0006d	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _star$6[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00074	8d 4d d4	 lea	 ecx, DWORD PTR _star$6[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00077	89 45 d4	 mov	 DWORD PTR _star$6[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  0007a	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalBody@@@@QAEPAVOrbitalBody@@XZ ; ListIter<OrbitalBody>::next
  0007f	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 444  :         while (++star) {

  00081	0f 84 ba 02 00
	00		 je	 $LN5@CreateRegi
$LL4@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00087	8d 4d d4	 lea	 ecx, DWORD PTR _star$6[ebp]
  0008a	e8 00 00 00 00	 call	 ?value@?$ListIter@VOrbitalBody@@@@QAEPAVOrbitalBody@@XZ ; ListIter<OrbitalBody>::value
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 287  :     ListIter<OrbitalBody>   Satellites()     { return satellites; }

  0008f	05 78 01 00 00	 add	 eax, 376		; 00000178H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00094	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _planet$7[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  0009b	8d 4d dc	 lea	 ecx, DWORD PTR _planet$7[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0009e	89 45 dc	 mov	 DWORD PTR _planet$7[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  000a1	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalBody@@@@QAEPAVOrbitalBody@@XZ ; ListIter<OrbitalBody>::next
  000a6	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 446  :             while (++planet) {

  000a8	0f 84 c3 01 00
	00		 je	 $LN7@CreateRegi
  000ae	66 90		 npad	 2
$LL6@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  000b0	8d 4d dc	 lea	 ecx, DWORD PTR _planet$7[ebp]
  000b3	e8 00 00 00 00	 call	 ?value@?$ListIter@VOrbitalBody@@@@QAEPAVOrbitalBody@@XZ ; ListIter<OrbitalBody>::value
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 287  :     ListIter<OrbitalBody>   Satellites()     { return satellites; }

  000b8	05 78 01 00 00	 add	 eax, 376		; 00000178H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000bd	c7 45 c8 ff ff
	ff ff		 mov	 DWORD PTR _moon$4[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  000c4	8d 4d c4	 lea	 ecx, DWORD PTR _moon$4[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000c7	89 45 c4	 mov	 DWORD PTR _moon$4[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  000ca	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalBody@@@@QAEPAVOrbitalBody@@XZ ; ListIter<OrbitalBody>::next
  000cf	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 448  :                 while (++moon) {

  000d1	0f 84 ca 00 00
	00		 je	 $LN9@CreateRegi
$LL8@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  000d7	8d 4d c4	 lea	 ecx, DWORD PTR _moon$4[ebp]
  000da	e8 00 00 00 00	 call	 ?value@?$ListIter@VOrbitalBody@@@@QAEPAVOrbitalBody@@XZ ; ListIter<OrbitalBody>::value
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 244  :     ListIter<OrbitalRegion> Regions()      { return regions;    }

  000df	05 f0 00 00 00	 add	 eax, 240		; 000000f0H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000e4	c7 45 d0 ff ff
	ff ff		 mov	 DWORD PTR _rgn$5[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  000eb	8d 4d cc	 lea	 ecx, DWORD PTR _rgn$5[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000ee	89 45 cc	 mov	 DWORD PTR _rgn$5[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  000f1	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalRegion@@@@QAEPAVOrbitalRegion@@XZ ; ListIter<OrbitalRegion>::next
  000f6	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 450  :                     while (++rgn) {

  000f8	0f 84 93 00 00
	00		 je	 $LN11@CreateRegi
  000fe	66 90		 npad	 2
$LL10@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00100	68 08 01 00 00	 push	 264			; 00000108H
  00105	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 451  :                         SimRegion* sim_region = new(__FILE__,__LINE__) SimRegion(this, rgn.value());

  0010a	8b d0		 mov	 edx, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  0010c	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 451  :                         SimRegion* sim_region = new(__FILE__,__LINE__) SimRegion(this, rgn.value());

  0010f	89 55 ec	 mov	 DWORD PTR $T10[ebp], edx
  00112	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00119	85 d2		 test	 edx, edx
  0011b	74 15		 je	 SHORT $LN22@CreateRegi
  0011d	8d 4d cc	 lea	 ecx, DWORD PTR _rgn$5[ebp]
  00120	e8 00 00 00 00	 call	 ?value@?$ListIter@VOrbitalRegion@@@@QAEPAVOrbitalRegion@@XZ ; ListIter<OrbitalRegion>::value
  00125	50		 push	 eax
  00126	57		 push	 edi
  00127	8b ca		 mov	 ecx, edx
  00129	e8 00 00 00 00	 call	 ??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z ; SimRegion::SimRegion
  0012e	8b f0		 mov	 esi, eax
  00130	eb 02		 jmp	 SHORT $LN23@CreateRegi
$LN22@CreateRegi:
  00132	33 f6		 xor	 esi, esi
$LN23@CreateRegi:

; 452  :                         regions.append(sim_region);

  00134	56		 push	 esi
  00135	8d 4f 58	 lea	 ecx, DWORD PTR [edi+88]
  00138	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0013f	e8 00 00 00 00	 call	 ?append@?$List@VSimRegion@@@@QAEXPBVSimRegion@@@Z ; List<SimRegion>::append
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  00144	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 453  :                         if (!strcmp(active_region_name, sim_region->Name())) {

  00147	8b 4d f0	 mov	 ecx, DWORD PTR _active_region_name$1$[ebp]
  0014a	66 0f 1f 44 00
	00		 npad	 6
$LL126@CreateRegi:
  00150	8a 11		 mov	 dl, BYTE PTR [ecx]
  00152	3a 10		 cmp	 dl, BYTE PTR [eax]
  00154	75 1a		 jne	 SHORT $LN127@CreateRegi
  00156	84 d2		 test	 dl, dl
  00158	74 12		 je	 SHORT $LN128@CreateRegi
  0015a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0015d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00160	75 0e		 jne	 SHORT $LN127@CreateRegi
  00162	83 c1 02	 add	 ecx, 2
  00165	83 c0 02	 add	 eax, 2
  00168	84 d2		 test	 dl, dl
  0016a	75 e4		 jne	 SHORT $LL126@CreateRegi
$LN128@CreateRegi:
  0016c	33 c0		 xor	 eax, eax
  0016e	eb 05		 jmp	 SHORT $LN129@CreateRegi
$LN127@CreateRegi:
  00170	1b c0		 sbb	 eax, eax
  00172	83 c8 01	 or	 eax, 1
$LN129@CreateRegi:
  00175	85 c0		 test	 eax, eax
  00177	75 08		 jne	 SHORT $LN18@CreateRegi

; 454  :                             ActivateRegion(sim_region);

  00179	56		 push	 esi
  0017a	8b cf		 mov	 ecx, edi
  0017c	e8 00 00 00 00	 call	 ?ActivateRegion@Sim@@QAE_NPAVSimRegion@@@Z ; Sim::ActivateRegion
$LN18@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00181	8d 4d cc	 lea	 ecx, DWORD PTR _rgn$5[ebp]
  00184	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalRegion@@@@QAEPAVOrbitalRegion@@XZ ; ListIter<OrbitalRegion>::next
  00189	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 450  :                     while (++rgn) {

  0018b	0f 85 6f ff ff
	ff		 jne	 $LL10@CreateRegi
$LN11@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00191	8d 4d c4	 lea	 ecx, DWORD PTR _moon$4[ebp]
  00194	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalBody@@@@QAEPAVOrbitalBody@@XZ ; ListIter<OrbitalBody>::next
  00199	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 448  :                 while (++moon) {

  0019b	0f 85 36 ff ff
	ff		 jne	 $LL8@CreateRegi
$LN9@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  001a1	8d 4d dc	 lea	 ecx, DWORD PTR _planet$7[ebp]
  001a4	e8 00 00 00 00	 call	 ?value@?$ListIter@VOrbitalBody@@@@QAEPAVOrbitalBody@@XZ ; ListIter<OrbitalBody>::value
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 244  :     ListIter<OrbitalRegion> Regions()      { return regions;    }

  001a9	05 f0 00 00 00	 add	 eax, 240		; 000000f0H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  001ae	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _rgn$3[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  001b5	8d 4d bc	 lea	 ecx, DWORD PTR _rgn$3[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  001b8	89 45 bc	 mov	 DWORD PTR _rgn$3[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  001bb	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalRegion@@@@QAEPAVOrbitalRegion@@XZ ; ListIter<OrbitalRegion>::next
  001c0	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 460  :                 while (++rgn) {

  001c2	0f 84 99 00 00
	00		 je	 $LN13@CreateRegi
  001c8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL12@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  001d0	68 08 01 00 00	 push	 264			; 00000108H
  001d5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 461  :                     SimRegion* sim_region = new(__FILE__,__LINE__) SimRegion(this, rgn.value());

  001da	8b d0		 mov	 edx, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  001dc	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 461  :                     SimRegion* sim_region = new(__FILE__,__LINE__) SimRegion(this, rgn.value());

  001df	89 55 e8	 mov	 DWORD PTR $T9[ebp], edx
  001e2	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  001e9	85 d2		 test	 edx, edx
  001eb	74 15		 je	 SHORT $LN24@CreateRegi
  001ed	8d 4d bc	 lea	 ecx, DWORD PTR _rgn$3[ebp]
  001f0	e8 00 00 00 00	 call	 ?value@?$ListIter@VOrbitalRegion@@@@QAEPAVOrbitalRegion@@XZ ; ListIter<OrbitalRegion>::value
  001f5	50		 push	 eax
  001f6	57		 push	 edi
  001f7	8b ca		 mov	 ecx, edx
  001f9	e8 00 00 00 00	 call	 ??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z ; SimRegion::SimRegion
  001fe	8b f0		 mov	 esi, eax
  00200	eb 02		 jmp	 SHORT $LN25@CreateRegi
$LN24@CreateRegi:
  00202	33 f6		 xor	 esi, esi
$LN25@CreateRegi:

; 462  :                     regions.append(sim_region);

  00204	56		 push	 esi
  00205	8d 4f 58	 lea	 ecx, DWORD PTR [edi+88]
  00208	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0020f	e8 00 00 00 00	 call	 ?append@?$List@VSimRegion@@@@QAEXPBVSimRegion@@@Z ; List<SimRegion>::append
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  00214	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 463  :                     if (!strcmp(active_region_name, sim_region->Name())) {

  00217	8b 4d f0	 mov	 ecx, DWORD PTR _active_region_name$1$[ebp]
  0021a	66 0f 1f 44 00
	00		 npad	 6
$LL130@CreateRegi:
  00220	8a 11		 mov	 dl, BYTE PTR [ecx]
  00222	3a 10		 cmp	 dl, BYTE PTR [eax]
  00224	75 1a		 jne	 SHORT $LN131@CreateRegi
  00226	84 d2		 test	 dl, dl
  00228	74 12		 je	 SHORT $LN132@CreateRegi
  0022a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0022d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00230	75 0e		 jne	 SHORT $LN131@CreateRegi
  00232	83 c1 02	 add	 ecx, 2
  00235	83 c0 02	 add	 eax, 2
  00238	84 d2		 test	 dl, dl
  0023a	75 e4		 jne	 SHORT $LL130@CreateRegi
$LN132@CreateRegi:
  0023c	33 c0		 xor	 eax, eax
  0023e	eb 05		 jmp	 SHORT $LN133@CreateRegi
$LN131@CreateRegi:
  00240	1b c0		 sbb	 eax, eax
  00242	83 c8 01	 or	 eax, 1
$LN133@CreateRegi:
  00245	85 c0		 test	 eax, eax
  00247	75 08		 jne	 SHORT $LN19@CreateRegi

; 464  :                         ActivateRegion(sim_region);

  00249	56		 push	 esi
  0024a	8b cf		 mov	 ecx, edi
  0024c	e8 00 00 00 00	 call	 ?ActivateRegion@Sim@@QAE_NPAVSimRegion@@@Z ; Sim::ActivateRegion
$LN19@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00251	8d 4d bc	 lea	 ecx, DWORD PTR _rgn$3[ebp]
  00254	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalRegion@@@@QAEPAVOrbitalRegion@@XZ ; ListIter<OrbitalRegion>::next
  00259	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 460  :                 while (++rgn) {

  0025b	0f 85 6f ff ff
	ff		 jne	 $LL12@CreateRegi
$LN13@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00261	8d 4d dc	 lea	 ecx, DWORD PTR _planet$7[ebp]
  00264	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalBody@@@@QAEPAVOrbitalBody@@XZ ; ListIter<OrbitalBody>::next
  00269	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 446  :             while (++planet) {

  0026b	0f 85 3f fe ff
	ff		 jne	 $LL6@CreateRegi
$LN7@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00271	8d 4d d4	 lea	 ecx, DWORD PTR _star$6[ebp]
  00274	e8 00 00 00 00	 call	 ?value@?$ListIter@VOrbitalBody@@@@QAEPAVOrbitalBody@@XZ ; ListIter<OrbitalBody>::value
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 244  :     ListIter<OrbitalRegion> Regions()      { return regions;    }

  00279	05 f0 00 00 00	 add	 eax, 240		; 000000f0H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0027e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR _rgn$2[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00285	8d 4d b4	 lea	 ecx, DWORD PTR _rgn$2[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00288	89 45 b4	 mov	 DWORD PTR _rgn$2[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  0028b	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalRegion@@@@QAEPAVOrbitalRegion@@XZ ; ListIter<OrbitalRegion>::next
  00290	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 470  :             while (++rgn) {

  00292	0f 84 99 00 00
	00		 je	 $LN15@CreateRegi
  00298	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL14@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  002a0	68 08 01 00 00	 push	 264			; 00000108H
  002a5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 471  :                 SimRegion* sim_region = new(__FILE__,__LINE__) SimRegion(this, rgn.value());

  002aa	8b d0		 mov	 edx, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  002ac	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 471  :                 SimRegion* sim_region = new(__FILE__,__LINE__) SimRegion(this, rgn.value());

  002af	89 55 e4	 mov	 DWORD PTR $T8[ebp], edx
  002b2	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  002b9	85 d2		 test	 edx, edx
  002bb	74 15		 je	 SHORT $LN26@CreateRegi
  002bd	8d 4d b4	 lea	 ecx, DWORD PTR _rgn$2[ebp]
  002c0	e8 00 00 00 00	 call	 ?value@?$ListIter@VOrbitalRegion@@@@QAEPAVOrbitalRegion@@XZ ; ListIter<OrbitalRegion>::value
  002c5	50		 push	 eax
  002c6	57		 push	 edi
  002c7	8b ca		 mov	 ecx, edx
  002c9	e8 00 00 00 00	 call	 ??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z ; SimRegion::SimRegion
  002ce	8b f0		 mov	 esi, eax
  002d0	eb 02		 jmp	 SHORT $LN27@CreateRegi
$LN26@CreateRegi:
  002d2	33 f6		 xor	 esi, esi
$LN27@CreateRegi:

; 472  :                 regions.append(sim_region);

  002d4	56		 push	 esi
  002d5	8d 4f 58	 lea	 ecx, DWORD PTR [edi+88]
  002d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002df	e8 00 00 00 00	 call	 ?append@?$List@VSimRegion@@@@QAEXPBVSimRegion@@@Z ; List<SimRegion>::append

; 473  :                 if (!strcmp(active_region_name, sim_region->Name())) {

  002e4	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  002e7	8b 45 f0	 mov	 eax, DWORD PTR _active_region_name$1$[ebp]
  002ea	66 0f 1f 44 00
	00		 npad	 6
$LL134@CreateRegi:
  002f0	8a 10		 mov	 dl, BYTE PTR [eax]
  002f2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  002f4	75 1a		 jne	 SHORT $LN135@CreateRegi
  002f6	84 d2		 test	 dl, dl
  002f8	74 12		 je	 SHORT $LN136@CreateRegi
  002fa	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  002fd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00300	75 0e		 jne	 SHORT $LN135@CreateRegi
  00302	83 c0 02	 add	 eax, 2
  00305	83 c1 02	 add	 ecx, 2
  00308	84 d2		 test	 dl, dl
  0030a	75 e4		 jne	 SHORT $LL134@CreateRegi
$LN136@CreateRegi:
  0030c	33 c0		 xor	 eax, eax
  0030e	eb 05		 jmp	 SHORT $LN137@CreateRegi
$LN135@CreateRegi:
  00310	1b c0		 sbb	 eax, eax
  00312	83 c8 01	 or	 eax, 1
$LN137@CreateRegi:
  00315	85 c0		 test	 eax, eax
  00317	75 08		 jne	 SHORT $LN20@CreateRegi

; 474  :                     ActivateRegion(sim_region);

  00319	56		 push	 esi
  0031a	8b cf		 mov	 ecx, edi
  0031c	e8 00 00 00 00	 call	 ?ActivateRegion@Sim@@QAE_NPAVSimRegion@@@Z ; Sim::ActivateRegion
$LN20@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00321	8d 4d b4	 lea	 ecx, DWORD PTR _rgn$2[ebp]
  00324	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalRegion@@@@QAEPAVOrbitalRegion@@XZ ; ListIter<OrbitalRegion>::next
  00329	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 470  :             while (++rgn) {

  0032b	0f 85 6f ff ff
	ff		 jne	 $LL14@CreateRegi
$LN15@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00331	8d 4d d4	 lea	 ecx, DWORD PTR _star$6[ebp]
  00334	e8 00 00 00 00	 call	 ?next@?$ListIter@VOrbitalBody@@@@QAEPAVOrbitalBody@@XZ ; ListIter<OrbitalBody>::next
  00339	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 444  :         while (++star) {

  0033b	0f 85 46 fd ff
	ff		 jne	 $LL4@CreateRegi
$LN5@CreateRegi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00341	8d 4d ac	 lea	 ecx, DWORD PTR _iter$[ebp]
  00344	e8 00 00 00 00	 call	 ?next@?$ListIter@VStarSystem@@@@QAEPAVStarSystem@@XZ ; ListIter<StarSystem>::next
  00349	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 439  :     while (++iter) {

  0034b	0f 85 0f fd ff
	ff		 jne	 $LL2@CreateRegi
$LN16@CreateRegi:

; 475  :                 }
; 476  :             }
; 477  :         }
; 478  :     }
; 479  : }

  00351	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00354	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0035b	59		 pop	 ecx
  0035c	5f		 pop	 edi
  0035d	5e		 pop	 esi
  0035e	5b		 pop	 ebx
  0035f	8b e5		 mov	 esp, ebp
  00361	5d		 pop	 ebp
  00362	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateRegions@Sim@@IAEXXZ$0:
  00000	68 c3 01 00 00	 push	 451			; 000001c3H
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 45 ec	 mov	 eax, DWORD PTR $T10[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__unwindfunclet$?CreateRegions@Sim@@IAEXXZ$1:
  00017	68 cd 01 00 00	 push	 461			; 000001cdH
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  00021	8b 45 e8	 mov	 eax, DWORD PTR $T9[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002d	c3		 ret	 0
__unwindfunclet$?CreateRegions@Sim@@IAEXXZ$2:
  0002e	68 d7 01 00 00	 push	 471			; 000001d7H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  00038	8b 45 e4	 mov	 eax, DWORD PTR $T8[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	c3		 ret	 0
__ehhandler$?CreateRegions@Sim@@IAEXXZ:
  00045	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00049	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004c	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateRegions@Sim@@IAEXXZ
  0005b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateRegions@Sim@@IAEXXZ ENDP				; Sim::CreateRegions
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_this$1$ = -20						; size = 4
_lnk_iter$1 = -16					; size = 8
_iter$ = -8						; size = 8
?BuildLinks@Sim@@IAEXXZ PROC				; Sim::BuildLinks
; _this$ = ecx

; 485  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0000d	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+32], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 485  : {

  00015	57		 push	 edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00016	8d 4c 24 18	 lea	 ecx, DWORD PTR _iter$[esp+32]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 485  : {

  0001a	89 74 24 0c	 mov	 DWORD PTR _this$1$[esp+32], esi

; 486  :     ListIter<SimRegion> iter = regions;

  0001e	8d 46 58	 lea	 eax, DWORD PTR [esi+88]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00021	89 44 24 18	 mov	 DWORD PTR _iter$[esp+32], eax

; 108  :    int operator++() { return next() != 0; }

  00025	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  0002a	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 487  :     while (++iter) {

  0002c	0f 84 88 00 00
	00		 je	 $LN3@BuildLinks
$LL2@BuildLinks:

; 488  :         SimRegion*     rgn = iter.value();

  00032	8d 4c 24 18	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00036	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
  0003b	8b d8		 mov	 ebx, eax
; File d:\programming\starshatter\trunk\stars45\sim.h

; 264  :     OrbitalRegion*       GetOrbitalRegion() { return orbital_region; }

  0003d	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 491  :         if (orb) {

  00040	85 c9		 test	 ecx, ecx
  00042	74 65		 je	 SHORT $LN5@BuildLinks
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 336  :     List<Text>&       Links()                 { return links;         }

  00044	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0004a	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _lnk_iter$1[esp+36], -1
  00052	89 4c 24 10	 mov	 DWORD PTR _lnk_iter$1[esp+32], ecx

; 108  :    int operator++() { return next() != 0; }

  00056	8d 4c 24 10	 lea	 ecx, DWORD PTR _lnk_iter$1[esp+32]
  0005a	e8 00 00 00 00	 call	 ?next@?$ListIter@VText@@@@QAEPAVText@@XZ ; ListIter<Text>::next
  0005f	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 493  :             while (++lnk_iter) {

  00061	74 46		 je	 SHORT $LN5@BuildLinks
$LL4@BuildLinks:

; 494  :                 Text* t = lnk_iter.value();

  00063	8d 4c 24 10	 lea	 ecx, DWORD PTR _lnk_iter$1[esp+32]
  00067	e8 00 00 00 00	 call	 ?value@?$ListIter@VText@@@@QAEPAVText@@XZ ; ListIter<Text>::value

; 496  :                 SimRegion* tgt = FindRegion(*t);

  0006c	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 496  :                 SimRegion* tgt = FindRegion(*t);

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?FindRegion@Sim@@QAEPAVSimRegion@@PBD@Z ; Sim::FindRegion
  00076	8b f0		 mov	 esi, eax

; 497  : 
; 498  :                 if (tgt && !rgn->Links().contains(tgt))

  00078	85 f6		 test	 esi, esi
  0007a	74 1c		 je	 SHORT $LN7@BuildLinks
  0007c	56		 push	 esi
  0007d	8d 8b f4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+244]
  00083	e8 00 00 00 00	 call	 ?contains@?$List@VSimRegion@@@@QBE_NPBVSimRegion@@@Z ; List<SimRegion>::contains
  00088	84 c0		 test	 al, al
  0008a	75 0c		 jne	 SHORT $LN7@BuildLinks

; 499  :                 rgn->Links().append(tgt);

  0008c	56		 push	 esi
  0008d	8d 8b f4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+244]
  00093	e8 00 00 00 00	 call	 ?append@?$List@VSimRegion@@@@QAEXPBVSimRegion@@@Z ; List<SimRegion>::append
$LN7@BuildLinks:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00098	8d 4c 24 10	 lea	 ecx, DWORD PTR _lnk_iter$1[esp+32]
  0009c	e8 00 00 00 00	 call	 ?next@?$ListIter@VText@@@@QAEPAVText@@XZ ; ListIter<Text>::next
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 493  :             while (++lnk_iter) {

  000a1	8b 74 24 0c	 mov	 esi, DWORD PTR _this$1$[esp+32]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000a5	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 493  :             while (++lnk_iter) {

  000a7	75 ba		 jne	 SHORT $LL4@BuildLinks
$LN5@BuildLinks:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000a9	8d 4c 24 18	 lea	 ecx, DWORD PTR _iter$[esp+32]
  000ad	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  000b2	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 487  :     while (++iter) {

  000b4	0f 85 78 ff ff
	ff		 jne	 $LL2@BuildLinks
$LN3@BuildLinks:

; 500  :             }
; 501  :         }
; 502  :     }
; 503  : }

  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
?BuildLinks@Sim@@IAEXXZ ENDP				; Sim::BuildLinks
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\instruction.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\instruction.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\instruction.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\instruction.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\instruction.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\instruction.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\instruction.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\flightdeck.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\system.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -380						; size = 8
$T3 = -372						; size = 8
$T4 = -364						; size = 8
$T5 = -356						; size = 8
$T6 = -348						; size = 8
$T7 = -340						; size = 8
$T8 = -332						; size = 8
$T9 = -324						; size = 4
$T10 = -320						; size = 24
$T11 = -320						; size = 24
$T12 = -320						; size = 24
_offset$13 = -320					; size = 24
_rnum$14 = -292						; size = 8
$T15 = -284						; size = 4
_rgn_name$16 = -280					; size = 8
_slot$17 = -272						; size = 4
$T18 = -268						; size = 1
$T19 = -264						; size = 24
$T20 = -264						; size = 24
_l2$21 = -264						; size = 24
_e_iter$ = -240						; size = 8
_sname$22 = -232					; size = 8
_iter$23 = -224						; size = 8
_obj$24 = -216						; size = 8
_sl_iter$25 = -208					; size = 8
_instr$26 = -200					; size = 8
_sl$27 = -192						; size = 8
_heading$1$ = -184					; size = 8
_i$1$ = -180						; size = 4
_sl$28 = -172						; size = 8
_squadron$29 = -164					; size = 4
_ship$1$ = -160						; size = 4
_l$30 = -156						; size = 8
_dq$1$ = -148						; size = 4
tv2892 = -148						; size = 4
_nav$31 = -144						; size = 8
_r$1$ = -136						; size = 4
_respawns$1$ = -136					; size = 4
$T32 = -136						; size = 4
_loadout$1$ = -132					; size = 4
_hangar$1$ = -128					; size = 4
_dsn$1$ = -124						; size = 4
tv2902 = -124						; size = 4
_hangar$1$ = -124					; size = 4
_squadron$33 = -124					; size = 4
_element$1$ = -120					; size = 4
$T34 = -113						; size = 1
$T35 = -113						; size = 1
_this$GSCopy$1$ = -112					; size = 4
_i$1$ = -108						; size = 4
_carrier$1$ = -108					; size = 4
_carrier$1$ = -108					; size = 4
_slot$36 = -108						; size = 4
_alertPrep$1$ = -101					; size = 1
_stats$1$ = -100					; size = 4
_msn_ship$1$ = -100					; size = 4
_deck$1$ = -100						; size = 4
_weapon$1$ = -96					; size = 4
_i$1$ = -96						; size = 4
_skin$1$ = -96						; size = 4
_i$1$ = -96						; size = 4
_l$1$ = -96						; size = 4
_queue$1$ = -96						; size = 4
tv2862 = -96						; size = 4
tv2841 = -96						; size = 4
_m$1$ = -96						; size = 4
_msn_elem$1$ = -92					; size = 4
_design$37 = -88					; size = 64
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
?CreateElements@Sim@@IAEXXZ PROC			; Sim::CreateElements
; _this$ = ecx

; 507  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?CreateElements@Sim@@IAEXXZ
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	56		 push	 esi
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	8b f9		 mov	 edi, ecx
  00043	89 7d 90	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
; File d:\programming\starshatter\trunk\stars45\mission.h

; 144  :     List<MissionElement>& GetElements()        { return elements;     }

  00046	8b 87 c0 00 00
	00		 mov	 eax, DWORD PTR [edi+192]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0004c	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _e_iter$[ebp]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 144  :     List<MissionElement>& GetElements()        { return elements;     }

  00052	05 ec 00 00 00	 add	 eax, 236		; 000000ecH
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00057	c7 85 14 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _e_iter$[ebp+4], -1
  00061	89 85 10 ff ff
	ff		 mov	 DWORD PTR _e_iter$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00067	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionElement@@@@QAEPAVMissionElement@@XZ ; ListIter<MissionElement>::next
  0006c	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 509  :     while (++e_iter) {

  0006e	0f 84 9f 11 00
	00		 je	 $LN3@CreateElem
$LL2@CreateElem:

; 510  :         MissionElement* msn_elem = e_iter.value();

  00074	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _e_iter$[ebp]
  0007a	e8 00 00 00 00	 call	 ?value@?$ListIter@VMissionElement@@@@QAEPAVMissionElement@@XZ ; ListIter<MissionElement>::value
  0007f	8b f0		 mov	 esi, eax

; 511  : 
; 512  :         // add element to a carrier?
; 513  :         if (msn_elem->IsSquadron()) {

  00081	8b ce		 mov	 ecx, esi
  00083	89 75 a4	 mov	 DWORD PTR _msn_elem$1$[ebp], esi
  00086	e8 00 00 00 00	 call	 ?IsSquadron@MissionElement@@QBE_NXZ ; MissionElement::IsSquadron

; 514  :             Ship* carrier = FindShip(msn_elem->Carrier());

  0008b	8b cf		 mov	 ecx, edi
  0008d	84 c0		 test	 al, al
  0008f	0f 84 c3 01 00
	00		 je	 $LN41@CreateElem
  00095	6a 00		 push	 0
  00097	ff 76 0c	 push	 DWORD PTR [esi+12]
  0009a	e8 00 00 00 00	 call	 ?FindShip@Sim@@QAEPAVShip@@PBD0@Z ; Sim::FindShip
  0009f	89 45 94	 mov	 DWORD PTR _carrier$1$[ebp], eax

; 515  :             if (carrier) {

  000a2	85 c0		 test	 eax, eax
  000a4	0f 84 56 11 00
	00		 je	 $LN24@CreateElem
; File d:\programming\starshatter\trunk\stars45\ship.h

; 465  :     Hangar*                 GetHangar()          { return hangar;        }

  000aa	8b 80 68 03 00
	00		 mov	 eax, DWORD PTR [eax+872]
  000b0	89 45 84	 mov	 DWORD PTR _hangar$1$[ebp], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 518  :                 if (hangar) {

  000b3	85 c0		 test	 eax, eax
  000b5	0f 84 45 11 00
	00		 je	 $LN24@CreateElem

; 519  :                     int* def_load = 0;

  000bb	33 ff		 xor	 edi, edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  000bd	8d 8e f4 00 00
	00		 lea	 ecx, DWORD PTR [esi+244]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 521  :                     if (msn_elem->Loadouts().size()) {

  000c3	39 39		 cmp	 DWORD PTR [ecx], edi
  000c5	0f 84 11 01 00
	00		 je	 $LN48@CreateElem

; 522  :                         MissionLoad* m = msn_elem->Loadouts().at(0);

  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 ?at@?$List@VMissionLoad@@@@QAEAAPAVMissionLoad@@H@Z ; List<MissionLoad>::at

; 524  :                         if (m->GetName().length()) {

  000d1	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  000d7	51		 push	 ecx
  000d8	8b 00		 mov	 eax, DWORD PTR [eax]
  000da	8b c8		 mov	 ecx, eax
  000dc	89 45 a0	 mov	 DWORD PTR _m$1$[ebp], eax
  000df	e8 00 00 00 00	 call	 ?GetName@MissionLoad@@QBE?AVText@@XZ ; MissionLoad::GetName
  000e4	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
; File d:\programming\starshatter\trunk\foundationex\text.h

; 126  :    int         length() const    { return rep->length; }

  000ea	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ed	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 524  :                         if (m->GetName().length()) {

  000f0	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  000f5	85 f6		 test	 esi, esi
; File d:\programming\starshatter\trunk\stars45\mission.h

; 244  :     const ShipDesign* GetDesign()    const { return design;        }

  000f7	8b 75 a4	 mov	 esi, DWORD PTR _msn_elem$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 524  :                         if (m->GetName().length()) {

  000fa	0f 84 d2 00 00
	00		 je	 $LN719@CreateElem
; File d:\programming\starshatter\trunk\stars45\mission.h

; 244  :     const ShipDesign* GetDesign()    const { return design;        }

  00100	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00103	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _sl_iter$25[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 526  :                             ListIter<ShipLoad> sl_iter = dsn->loadouts;

  00109	05 f8 07 00 00	 add	 eax, 2040		; 000007f8H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0010e	c7 85 34 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _sl_iter$25[ebp+4], -1
  00118	89 85 30 ff ff
	ff		 mov	 DWORD PTR _sl_iter$25[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  0011e	e8 00 00 00 00	 call	 ?next@?$ListIter@VShipLoad@@@@QAEPAVShipLoad@@XZ ; ListIter<ShipLoad>::next
  00123	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 527  :                             while (++sl_iter) {

  00125	0f 84 a7 00 00
	00		 je	 $LN719@CreateElem
  0012b	0f 1f 44 00 00	 npad	 5
$LL4@CreateElem:

; 528  :                                 ShipLoad* sl = sl_iter.value();

  00130	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _sl_iter$25[ebp]
  00136	e8 00 00 00 00	 call	 ?value@?$ListIter@VShipLoad@@@@QAEPAVShipLoad@@XZ ; ListIter<ShipLoad>::value

; 530  :                                 if (m->GetName() == sl->name)

  0013b	8b 4d a0	 mov	 ecx, DWORD PTR _m$1$[ebp]
  0013e	8b f0		 mov	 esi, eax
  00140	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?GetName@MissionLoad@@QBE?AVText@@XZ ; MissionLoad::GetName
; File d:\programming\starshatter\trunk\foundationex\text.h

; 160  :    if (rep->sensitive)

  0014c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014f	80 79 10 00	 cmp	 BYTE PTR [ecx+16], 0
  00153	74 32		 je	 SHORT $LN199@CreateElem

; 161  :       return strcmp(sym, s);

  00155	8b 00		 mov	 eax, DWORD PTR [eax]
  00157	8b ce		 mov	 ecx, esi
  00159	0f 1f 80 00 00
	00 00		 npad	 7
$LL721@CreateElem:
  00160	8a 10		 mov	 dl, BYTE PTR [eax]
  00162	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00164	75 1a		 jne	 SHORT $LN722@CreateElem
  00166	84 d2		 test	 dl, dl
  00168	74 12		 je	 SHORT $LN723@CreateElem
  0016a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0016d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00170	75 0e		 jne	 SHORT $LN722@CreateElem
  00172	83 c0 02	 add	 eax, 2
  00175	83 c1 02	 add	 ecx, 2
  00178	84 d2		 test	 dl, dl
  0017a	75 e4		 jne	 SHORT $LL721@CreateElem
$LN723@CreateElem:
  0017c	33 c9		 xor	 ecx, ecx
  0017e	eb 14		 jmp	 SHORT $LN200@CreateElem
$LN722@CreateElem:
  00180	1b c9		 sbb	 ecx, ecx
  00182	83 c9 01	 or	 ecx, 1
  00185	eb 0d		 jmp	 SHORT $LN200@CreateElem
$LN199@CreateElem:

; 162  :    else
; 163  :       return _stricmp(sym, s);

  00187	56		 push	 esi
  00188	ff 30		 push	 DWORD PTR [eax]
  0018a	e8 00 00 00 00	 call	 __stricmp
  0018f	83 c4 08	 add	 esp, 8
  00192	8b c8		 mov	 ecx, eax
$LN200@CreateElem:

; 205  : inline int operator==(const Text& l,       char* r) { return l.compare(r) == 0; }

  00194	33 c0		 xor	 eax, eax
  00196	85 c9		 test	 ecx, ecx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 530  :                                 if (m->GetName() == sl->name)

  00198	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
; File d:\programming\starshatter\trunk\foundationex\text.h

; 205  : inline int operator==(const Text& l,       char* r) { return l.compare(r) == 0; }

  0019e	0f 94 c0	 sete	 al
  001a1	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T32[ebp], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 530  :                                 if (m->GetName() == sl->name)

  001a7	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  001ac	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR $T32[ebp], 0
  001b3	74 03		 je	 SHORT $LN47@CreateElem

; 531  :                                 def_load = sl->load;

  001b5	8d 7e 40	 lea	 edi, DWORD PTR [esi+64]
$LN47@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  001b8	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _sl_iter$25[ebp]
  001be	e8 00 00 00 00	 call	 ?next@?$ListIter@VShipLoad@@@@QAEPAVShipLoad@@XZ ; ListIter<ShipLoad>::next
  001c3	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 527  :                             while (++sl_iter) {

  001c5	0f 85 65 ff ff
	ff		 jne	 $LL4@CreateElem

; 532  :                             }
; 533  :                         }
; 534  : 
; 535  :                         if (!def_load) {

  001cb	8b 75 a4	 mov	 esi, DWORD PTR _msn_elem$1$[ebp]
  001ce	85 ff		 test	 edi, edi
  001d0	75 0a		 jne	 SHORT $LN48@CreateElem
$LN719@CreateElem:

; 536  :                             def_load = m->GetStations();

  001d2	8b 4d a0	 mov	 ecx, DWORD PTR _m$1$[ebp]
  001d5	e8 00 00 00 00	 call	 ?GetStations@MissionLoad@@QAEPAHXZ ; MissionLoad::GetStations
  001da	8b f8		 mov	 edi, eax
$LN48@CreateElem:

; 540  :                     hangar->CreateSquadron(msn_elem->Name(), msn_elem->GetCombatGroup(),

  001dc	ff 76 40	 push	 DWORD PTR [esi+64]
  001df	ff 76 3c	 push	 DWORD PTR [esi+60]
  001e2	57		 push	 edi
  001e3	ff 76 44	 push	 DWORD PTR [esi+68]
  001e6	ff 76 38	 push	 DWORD PTR [esi+56]
  001e9	ff 76 30	 push	 DWORD PTR [esi+48]
  001ec	ff b6 c8 00 00
	00		 push	 DWORD PTR [esi+200]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 237  :     const Text&       Name()         const { return name;          }

  001f2	83 c6 04	 add	 esi, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 540  :                     hangar->CreateSquadron(msn_elem->Name(), msn_elem->GetCombatGroup(),

  001f5	83 ec 08	 sub	 esp, 8
  001f8	8b cc		 mov	 ecx, esp
  001fa	56		 push	 esi
  001fb	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  00200	8b 4d 84	 mov	 ecx, DWORD PTR _hangar$1$[ebp]
  00203	8b 01		 mov	 eax, DWORD PTR [ecx]
  00205	ff 50 18	 call	 DWORD PTR [eax+24]

; 541  :                     msn_elem->GetDesign(), msn_elem->Count(),
; 542  :                     msn_elem->GetIFF(),
; 543  :                     def_load, msn_elem->MaintCount(), msn_elem->DeadCount());
; 544  : 
; 545  :                     Element* element = CreateElement(msn_elem->Name(),

  00208	8b 45 a4	 mov	 eax, DWORD PTR _msn_elem$1$[ebp]
  0020b	8b 4d 90	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0020e	ff 70 48	 push	 DWORD PTR [eax+72]
  00211	ff 70 44	 push	 DWORD PTR [eax+68]
  00214	ff 36		 push	 DWORD PTR [esi]
  00216	e8 00 00 00 00	 call	 ?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z ; Sim::CreateElement
; File d:\programming\starshatter\trunk\stars45\element.h

; 152  :     void              SetCombatGroup(CombatGroup* g) { combat_group = g;    }

  0021b	8b 55 a4	 mov	 edx, DWORD PTR _msn_elem$1$[ebp]

; 144  :     void              SetCarrier(Ship* c)              { carrier = c;       }

  0021e	8b 4d 94	 mov	 ecx, DWORD PTR _carrier$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 555  :                     element->SetLoadout(def_load);

  00221	57		 push	 edi
; File d:\programming\starshatter\trunk\stars45\element.h

; 144  :     void              SetCarrier(Ship* c)              { carrier = c;       }

  00222	89 48 7c	 mov	 DWORD PTR [eax+124], ecx

; 152  :     void              SetCombatGroup(CombatGroup* g) { combat_group = g;    }

  00225	8b 8a c8 00 00
	00		 mov	 ecx, DWORD PTR [edx+200]
  0022b	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 154  :     void              SetCombatUnit(CombatUnit* u)   { combat_unit = u;     }

  00231	8b 8a cc 00 00
	00		 mov	 ecx, DWORD PTR [edx+204]
  00237	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx

; 155  : 
; 156  :     // SQUADRON STUFF:
; 157  :     int               GetCount()                 const { return count;      }
; 158  :     void              SetCount(int n)                  { count = n;         }

  0023d	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  00240	89 48 34	 mov	 DWORD PTR [eax+52], ecx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 555  :                     element->SetLoadout(def_load);

  00243	8b c8		 mov	 ecx, eax
; File d:\programming\starshatter\trunk\stars45\element.h

; 101  :     void              SetRogue(bool r)        { rogue = r;               }

  00245	66 c7 80 a0 00
	00 00 00 00	 mov	 WORD PTR [eax+160], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 555  :                     element->SetLoadout(def_load);

  0024e	e8 00 00 00 00	 call	 ?SetLoadout@Element@@QAEXPAH@Z ; Element::SetLoadout

; 556  :                 }
; 557  :             }
; 558  :         }
; 559  : 
; 560  :         // create the element in space:
; 561  :         else {

  00253	e9 a5 0f 00 00	 jmp	 $LN744@CreateElem
$LN41@CreateElem:

; 568  :             Element* element = CreateElement(msn_elem->Name(),

  00258	ff 76 48	 push	 DWORD PTR [esi+72]
  0025b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _carrier$1$[ebp], 0
  00262	ff 76 44	 push	 DWORD PTR [esi+68]
  00265	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _hangar$1$[ebp], 0
  0026c	ff 76 04	 push	 DWORD PTR [esi+4]
  0026f	c7 85 5c ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _squadron$29[ebp], -1
  00279	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _slot$17[ebp], 0
  00283	e8 00 00 00 00	 call	 ?CreateElement@Sim@@QAEPAVElement@@PBDHH@Z ; Sim::CreateElement
; File d:\programming\starshatter\trunk\stars45\mission.h

; 252  :     int               Player()       const { return player;        }

  00288	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 568  :             Element* element = CreateElement(msn_elem->Name(),

  0028b	8b f8		 mov	 edi, eax
  0028d	89 7d 88	 mov	 DWORD PTR _element$1$[ebp], edi
; File d:\programming\starshatter\trunk\stars45\element.h

; 75   :     void              SetPlayer(int p)        { player = p;              }

  00290	89 4f 1c	 mov	 DWORD PTR [edi+28], ecx
; File d:\programming\starshatter\trunk\stars45\mission.h

; 320  :     CombatGroup*      GetCombatGroup()               { return combat_group; }

  00293	8b 8e c8 00 00
	00		 mov	 ecx, DWORD PTR [esi+200]
; File d:\programming\starshatter\trunk\stars45\element.h

; 152  :     void              SetCombatGroup(CombatGroup* g) { combat_group = g;    }

  00299	89 8f 88 00 00
	00		 mov	 DWORD PTR [edi+136], ecx
; File d:\programming\starshatter\trunk\stars45\mission.h

; 322  :     CombatUnit*       GetCombatUnit()                { return combat_unit;  }

  0029f	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
; File d:\programming\starshatter\trunk\stars45\element.h

; 154  :     void              SetCombatUnit(CombatUnit* u)   { combat_unit = u;     }

  002a5	89 8f 8c 00 00
	00		 mov	 DWORD PTR [edi+140], ecx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 576  :             element->SetHoldTime(msn_elem->HoldTime());

  002ab	8b cf		 mov	 ecx, edi
; File d:\programming\starshatter\trunk\stars45\mission.h

; 267  :     int               CommandAI()    const { return command_ai;    }

  002ad	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
; File d:\programming\starshatter\trunk\stars45\element.h

; 146  :     void              SetCommandAILevel(int n)         { command_ai = n;    }

  002b0	89 47 20	 mov	 DWORD PTR [edi+32], eax
  002b3	66 0f 6e 4e 54	 movd	 xmm1, DWORD PTR [esi+84]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 576  :             element->SetHoldTime(msn_elem->HoldTime());

  002b8	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  002bc	e8 00 00 00 00	 call	 ?SetHoldTime@Element@@QAEXN@Z ; Element::SetHoldTime

; 577  :             element->SetZoneLock(msn_elem->ZoneLock() ? true : false);

  002c1	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  002c5	0f 95 c0	 setne	 al
  002c8	0f b6 c0	 movzx	 eax, al
  002cb	50		 push	 eax
  002cc	e8 00 00 00 00	 call	 ?SetZoneLock@Element@@QAEX_N@Z ; Element::SetZoneLock
; File d:\programming\starshatter\trunk\stars45\mission.h

; 263  :     bool              IsRogue()      const { return rogue;         }

  002d1	8a 46 66	 mov	 al, BYTE PTR [esi+102]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 584  :                 SimRegion* rgn = FindRegion(msn_elem->Region());

  002d4	8b 4d 90	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\element.h

; 101  :     void              SetRogue(bool r)        { rogue = r;               }

  002d7	88 87 a0 00 00
	00		 mov	 BYTE PTR [edi+160], al
; File d:\programming\starshatter\trunk\stars45\mission.h

; 262  :     bool              IsPlayable()   const { return playable;      }

  002dd	8a 46 65	 mov	 al, BYTE PTR [esi+101]
; File d:\programming\starshatter\trunk\stars45\element.h

; 102  :     void              SetPlayable(bool p)     { playable = p;            }

  002e0	88 87 a1 00 00
	00		 mov	 BYTE PTR [edi+161], al
; File d:\programming\starshatter\trunk\stars45\mission.h

; 250  :     int               IntelLevel()   const { return intel;         }

  002e6	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
; File d:\programming\starshatter\trunk\stars45\element.h

; 79   :     void              SetIntelLevel(int i)    { intel = i;               }

  002e9	89 47 28	 mov	 DWORD PTR [edi+40], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 583  :             if (msn_elem->Player()) {

  002ec	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  002f0	74 1d		 je	 SHORT $LN50@CreateElem

; 584  :                 SimRegion* rgn = FindRegion(msn_elem->Region());

  002f2	ff 76 68	 push	 DWORD PTR [esi+104]
  002f5	e8 00 00 00 00	 call	 ?FindRegion@Sim@@QAEPAVSimRegion@@PBD@Z ; Sim::FindRegion

; 585  : 
; 586  :                 if (rgn && rgn != active_region)

  002fa	8b 4d 90	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  002fd	85 c0		 test	 eax, eax
  002ff	74 0e		 je	 SHORT $LN50@CreateElem
  00301	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00304	74 09		 je	 SHORT $LN50@CreateElem

; 587  :                 ActivateRegion(rgn);

  00306	50		 push	 eax
  00307	e8 00 00 00 00	 call	 ?ActivateRegion@Sim@@QAE_NPAVSimRegion@@@Z ; Sim::ActivateRegion
  0030c	8b 4d 90	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN50@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\text.h

; 126  :    int         length() const    { return rep->length; }

  0030f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 592  :             if (msn_elem->Squadron().length() > 0) {

  00312	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00316	0f 8e 31 01 00
	00		 jle	 $LN51@CreateElem

; 593  :                 MissionElement* squadron_elem = mission->FindElement(msn_elem->Squadron());

  0031c	8b 89 c0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+192]
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  00322	8d 7e 1c	 lea	 edi, DWORD PTR [esi+28]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 593  :                 MissionElement* squadron_elem = mission->FindElement(msn_elem->Squadron());

  00325	ff 37		 push	 DWORD PTR [edi]
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  00327	89 bd 78 ff ff
	ff		 mov	 DWORD PTR _r$1$[ebp], edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 593  :                 MissionElement* squadron_elem = mission->FindElement(msn_elem->Squadron());

  0032d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0032f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00332	ff d0		 call	 eax
  00334	8b f0		 mov	 esi, eax

; 594  : 
; 595  :                 if (squadron_elem) {

  00336	85 f6		 test	 esi, esi
  00338	0f 84 a0 00 00
	00		 je	 $LN738@CreateElem
; File d:\programming\starshatter\trunk\stars45\element.h

; 148  :     void              SetSquadron(const char* s)       { squadron = s;      }

  0033e	8b 4d 88	 mov	 ecx, DWORD PTR _element$1$[ebp]
  00341	ff 37		 push	 DWORD PTR [edi]
  00343	8d 89 80 00 00
	00		 lea	 ecx, DWORD PTR [ecx+128]
  00349	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 598  :                     Element* cmdr  = FindElement(squadron_elem->Carrier());

  0034e	ff 76 0c	 push	 DWORD PTR [esi+12]
  00351	8b 4d 90	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00354	e8 00 00 00 00	 call	 ?FindElement@Sim@@QAEPAVElement@@PBD@Z ; Sim::FindElement

; 599  : 
; 600  :                     if (cmdr) {

  00359	85 c0		 test	 eax, eax
  0035b	0f 84 7d 00 00
	00		 je	 $LN738@CreateElem
; File d:\programming\starshatter\trunk\stars45\element.h

; 138  :     void              SetCommander(Element* e)         { commander = e;     }

  00361	8b 4d 88	 mov	 ecx, DWORD PTR _element$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 602  :                         carrier = cmdr->GetShip(1);

  00364	6a 01		 push	 1
; File d:\programming\starshatter\trunk\stars45\element.h

; 138  :     void              SetCommander(Element* e)         { commander = e;     }

  00366	89 41 74	 mov	 DWORD PTR [ecx+116], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 602  :                         carrier = cmdr->GetShip(1);

  00369	8b c8		 mov	 ecx, eax
  0036b	e8 00 00 00 00	 call	 ?GetShip@Element@@QAEPAVShip@@H@Z ; Element::GetShip
  00370	8b f0		 mov	 esi, eax
  00372	89 75 94	 mov	 DWORD PTR _carrier$1$[ebp], esi

; 603  : 
; 604  :                         if (carrier) {

  00375	85 f6		 test	 esi, esi
  00377	74 65		 je	 SHORT $LN738@CreateElem
; File d:\programming\starshatter\trunk\stars45\element.h

; 144  :     void              SetCarrier(Ship* c)              { carrier = c;       }

  00379	8b 45 88	 mov	 eax, DWORD PTR _element$1$[ebp]
  0037c	89 70 7c	 mov	 DWORD PTR [eax+124], esi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 465  :     Hangar*                 GetHangar()          { return hangar;        }

  0037f	8b 86 68 03 00
	00		 mov	 eax, DWORD PTR [esi+872]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 608  :                             for (int s = 0; s < hangar->NumSquadrons(); s++) {

  00385	33 f6		 xor	 esi, esi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 465  :     Hangar*                 GetHangar()          { return hangar;        }

  00387	89 45 80	 mov	 DWORD PTR _hangar$1$[ebp], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 608  :                             for (int s = 0; s < hangar->NumSquadrons(); s++) {

  0038a	39 70 14	 cmp	 DWORD PTR [eax+20], esi
  0038d	7e 4f		 jle	 SHORT $LN738@CreateElem
  0038f	90		 npad	 1
$LL8@CreateElem:

; 609  :                                 if (hangar->SquadronName(s) == msn_elem->Squadron()) {

  00390	56		 push	 esi
  00391	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00397	51		 push	 ecx
  00398	8b c8		 mov	 ecx, eax
  0039a	e8 00 00 00 00	 call	 ?SquadronName@Hangar@@QBE?AVText@@H@Z ; Hangar::SquadronName
; File d:\programming\starshatter\trunk\foundationex\text.h

; 126  :    int         length() const    { return rep->length; }

  0039f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003a2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  003a5	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 164  : }
; 165  : 
; 166  : inline int Text::compare(const Text& s) const
; 167  : {
; 168  :    if (rep->sensitive && s.rep->sensitive)
; 169  :       return strcmp(sym, s.sym);
; 170  :    else
; 171  :       return _stricmp(sym, s.sym);
; 172  : }
; 173  : 
; 174  : // +-------------------------------------------------------------------+
; 175  : 
; 176  : inline int operator==(const Text& l, const Text& r) {
; 177  :    return (l.length() == r.length()) && (l.compare(r) == 0); }

  003a8	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  003ab	75 11		 jne	 SHORT $LN318@CreateElem
  003ad	57		 push	 edi
  003ae	8b c8		 mov	 ecx, eax
  003b0	e8 00 00 00 00	 call	 ?compare@Text@@QBEHABV1@@Z ; Text::compare
  003b5	85 c0		 test	 eax, eax
  003b7	75 05		 jne	 SHORT $LN318@CreateElem
  003b9	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  003bc	eb 02		 jmp	 SHORT $LN319@CreateElem
$LN318@CreateElem:
  003be	33 ff		 xor	 edi, edi
$LN319@CreateElem:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 609  :                                 if (hangar->SquadronName(s) == msn_elem->Squadron()) {

  003c0	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  003c6	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  003cb	85 ff		 test	 edi, edi
  003cd	75 76		 jne	 SHORT $LN676@CreateElem

; 608  :                             for (int s = 0; s < hangar->NumSquadrons(); s++) {

  003cf	8b 45 80	 mov	 eax, DWORD PTR _hangar$1$[ebp]
  003d2	46		 inc	 esi
  003d3	8b bd 78 ff ff
	ff		 mov	 edi, DWORD PTR _r$1$[ebp]
  003d9	3b 70 14	 cmp	 esi, DWORD PTR [eax+20]
  003dc	7c b2		 jl	 SHORT $LL8@CreateElem
$LN738@CreateElem:
  003de	8b 7d 88	 mov	 edi, DWORD PTR _element$1$[ebp]
  003e1	8b 75 a4	 mov	 esi, DWORD PTR _msn_elem$1$[ebp]
$LN58@CreateElem:
; File d:\programming\starshatter\trunk\stars45\mission.h

; 278  :     List<Instruction>&   Objectives()      { return objectives;    }

  003e4	8d 86 d0 00 00
	00		 lea	 eax, DWORD PTR [esi+208]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  003ea	c7 85 2c ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _obj$24[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  003f4	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _obj$24[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  003fa	89 85 28 ff ff
	ff		 mov	 DWORD PTR _obj$24[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00400	e8 00 00 00 00	 call	 ?next@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::next
  00405	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 628  :             while (++obj) {

  00407	0f 84 80 00 00
	00		 je	 $LN10@CreateElem
  0040d	0f 1f 00	 npad	 3
$LL9@CreateElem:

; 629  :                 Instruction* o     = obj.value();

  00410	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _obj$24[ebp]
  00416	e8 00 00 00 00	 call	 ?value@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::value
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  0041b	68 b0 00 00 00	 push	 176			; 000000b0H
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 629  :                 Instruction* o     = obj.value();

  00420	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00422	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00427	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 632  :                 instr = new(__FILE__,__LINE__) Instruction(*o);

  0042a	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
  00430	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00437	85 c0		 test	 eax, eax
  00439	74 2f		 je	 SHORT $LN115@CreateElem
  0043b	56		 push	 esi
  0043c	8b c8		 mov	 ecx, eax
  0043e	e8 00 00 00 00	 call	 ??0Instruction@@QAE@ABV0@@Z ; Instruction::Instruction
  00443	eb 27		 jmp	 SHORT $LN116@CreateElem
$LN676@CreateElem:

; 610  :                                     squadron = s;

  00445	89 b5 5c ff ff
	ff		 mov	 DWORD PTR _squadron$29[ebp], esi

; 619  :             else if (msn_elem->Commander().length() > 0) {

  0044b	eb 91		 jmp	 SHORT $LN738@CreateElem
$LN51@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\text.h

; 126  :    int         length() const    { return rep->length; }

  0044d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 619  :             else if (msn_elem->Commander().length() > 0) {

  00450	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00454	7e 8e		 jle	 SHORT $LN58@CreateElem

; 620  :                 Element* cmdr = FindElement(msn_elem->Commander());

  00456	ff 76 14	 push	 DWORD PTR [esi+20]
  00459	e8 00 00 00 00	 call	 ?FindElement@Sim@@QAEPAVElement@@PBD@Z ; Sim::FindElement

; 621  : 
; 622  :                 if (cmdr) {

  0045e	85 c0		 test	 eax, eax
  00460	74 82		 je	 SHORT $LN58@CreateElem
; File d:\programming\starshatter\trunk\stars45\element.h

; 138  :     void              SetCommander(Element* e)         { commander = e;     }

  00462	89 47 74	 mov	 DWORD PTR [edi+116], eax
  00465	e9 7a ff ff ff	 jmp	 $LN58@CreateElem
$LN115@CreateElem:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 632  :                 instr = new(__FILE__,__LINE__) Instruction(*o);

  0046a	33 c0		 xor	 eax, eax
$LN116@CreateElem:

; 633  : 
; 634  :                 element->AddObjective(instr);

  0046c	50		 push	 eax
  0046d	8b cf		 mov	 ecx, edi
  0046f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00476	e8 00 00 00 00	 call	 ?AddObjective@Element@@QAEXPAVInstruction@@@Z ; Element::AddObjective
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0047b	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _obj$24[ebp]
  00481	e8 00 00 00 00	 call	 ?next@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::next
  00486	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 628  :             while (++obj) {

  00488	75 86		 jne	 SHORT $LL9@CreateElem
  0048a	8b 75 a4	 mov	 esi, DWORD PTR _msn_elem$1$[ebp]
$LN10@CreateElem:

; 637  :             if (msn_elem->Instructions().size() > 0) {

  0048d	83 be dc 00 00
	00 00		 cmp	 DWORD PTR [esi+220], 0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  00494	8d 86 dc 00 00
	00		 lea	 eax, DWORD PTR [esi+220]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 637  :             if (msn_elem->Instructions().size() > 0) {

  0049a	7e 47		 jle	 SHORT $LN12@CreateElem
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0049c	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _instr$26[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  004a2	89 85 38 ff ff
	ff		 mov	 DWORD PTR _instr$26[ebp], eax
  004a8	c7 85 3c ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _instr$26[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  004b2	e8 00 00 00 00	 call	 ?next@?$ListIter@VText@@@@QAEPAVText@@XZ ; ListIter<Text>::next
  004b7	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 639  :                 while (++instr) {

  004b9	74 28		 je	 SHORT $LN12@CreateElem
  004bb	0f 1f 44 00 00	 npad	 5
$LL11@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 111  :    T&  operator* () { return *value();    }

  004c0	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _instr$26[ebp]
  004c6	e8 00 00 00 00	 call	 ?value@?$ListIter@VText@@@@QAEPAVText@@XZ ; ListIter<Text>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 640  :                     element->AddInstruction(*instr);

  004cb	8b cf		 mov	 ecx, edi
  004cd	ff 30		 push	 DWORD PTR [eax]
  004cf	e8 00 00 00 00	 call	 ?AddInstruction@Element@@QAEXPBD@Z ; Element::AddInstruction
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  004d4	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _instr$26[ebp]
  004da	e8 00 00 00 00	 call	 ?next@?$ListIter@VText@@@@QAEPAVText@@XZ ; ListIter<Text>::next
  004df	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 639  :                 while (++instr) {

  004e1	75 dd		 jne	 SHORT $LL11@CreateElem
$LN12@CreateElem:
; File d:\programming\starshatter\trunk\stars45\mission.h

; 280  :     List<Instruction>&   NavList()         { return navlist;       }

  004e3	8d 86 e8 00 00
	00		 lea	 eax, DWORD PTR [esi+232]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  004e9	c7 85 74 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _nav$31[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  004f3	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _nav$31[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  004f9	89 85 70 ff ff
	ff		 mov	 DWORD PTR _nav$31[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  004ff	e8 00 00 00 00	 call	 ?next@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::next
  00504	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 645  :             while (++nav) {

  00506	0f 84 41 01 00
	00		 je	 $LN14@CreateElem
  0050c	0f 1f 40 00	 npad	 4
$LL13@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00510	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _nav$31[ebp]
  00516	e8 00 00 00 00	 call	 ?value@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 646  :                 SimRegion* rgn = FindRegion(nav->RegionName());

  0051b	8b 4d 90	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0051e	ff 70 10	 push	 DWORD PTR [eax+16]
  00521	e8 00 00 00 00	 call	 ?FindRegion@Sim@@QAEPAVSimRegion@@PBD@Z ; Sim::FindRegion
  00526	8b f8		 mov	 edi, eax

; 647  : 
; 648  :                 if (!rgn)

  00528	85 ff		 test	 edi, edi
  0052a	75 15		 jne	 SHORT $LN718@CreateElem

; 649  :                 rgn = FindRegion(msn_elem->Region());

  0052c	ff 76 68	 push	 DWORD PTR [esi+104]
  0052f	8b 4d 90	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00532	e8 00 00 00 00	 call	 ?FindRegion@Sim@@QAEPAVSimRegion@@PBD@Z ; Sim::FindRegion
  00537	8b f8		 mov	 edi, eax

; 650  : 
; 651  :                 if (rgn) {

  00539	85 ff		 test	 edi, edi
  0053b	0f 84 f9 00 00
	00		 je	 $LN61@CreateElem
$LN718@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00541	68 b0 00 00 00	 push	 176			; 000000b0H
  00546	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0054b	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 653  :                     Instruction(rgn, nav->Location(), nav->Action());

  0054e	89 85 e4 fe ff
	ff		 mov	 DWORD PTR $T15[ebp], eax
  00554	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0055b	85 c0		 test	 eax, eax
  0055d	74 2a		 je	 SHORT $LN117@CreateElem
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  0055f	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _nav$31[ebp]
  00565	e8 00 00 00 00	 call	 ?value@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 653  :                     Instruction(rgn, nav->Location(), nav->Action());

  0056a	83 ec 18	 sub	 esp, 24			; 00000018H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  0056d	8b c8		 mov	 ecx, eax
; File d:\programming\starshatter\trunk\stars45\instruction.h

; 128  :     int               Action()          const { return action;     }

  0056f	8b 71 70	 mov	 esi, DWORD PTR [ecx+112]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 653  :                     Instruction(rgn, nav->Location(), nav->Action());

  00572	54		 push	 esp
  00573	e8 00 00 00 00	 call	 ?Location@Instruction@@QBE?AUPoint@@XZ ; Instruction::Location
  00578	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR $T15[ebp]
  0057e	56		 push	 esi
  0057f	57		 push	 edi
  00580	e8 00 00 00 00	 call	 ??0Instruction@@QAE@PAVSimRegion@@UPoint@@H@Z ; Instruction::Instruction
  00585	8b f0		 mov	 esi, eax
  00587	eb 02		 jmp	 SHORT $LN118@CreateElem
$LN117@CreateElem:
  00589	33 f6		 xor	 esi, esi
$LN118@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  0058b	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _nav$31[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 653  :                     Instruction(rgn, nav->Location(), nav->Action());

  00591	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00598	e8 00 00 00 00	 call	 ?value@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 655  :                     npt->SetStatus(nav->Status());

  0059d	8b ce		 mov	 ecx, esi
  0059f	ff 70 78	 push	 DWORD PTR [eax+120]
  005a2	e8 00 00 00 00	 call	 ?SetStatus@Instruction@@QAEXH@Z ; Instruction::SetStatus
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  005a7	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _nav$31[ebp]
  005ad	e8 00 00 00 00	 call	 ?value@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::value
  005b2	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _nav$31[ebp]
; File d:\programming\starshatter\trunk\stars45\instruction.h

; 132  :     int               EMCON()           const { return emcon;      }

  005b8	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [eax+148]

; 153  :     void              SetEMCON(int e)               { emcon     = e;  }

  005be	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  005c4	e8 00 00 00 00	 call	 ?value@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::value
  005c9	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _nav$31[ebp]
; File d:\programming\starshatter\trunk\stars45\instruction.h

; 130  :     int               Formation()       const { return formation;  }

  005cf	8b 40 74	 mov	 eax, DWORD PTR [eax+116]

; 137  : 
; 138  :     const char*       TargetName()      const { return tgt_name;   }
; 139  :     const char*       TargetDesc()      const { return tgt_desc;   }
; 140  :     SimObject*        GetTarget();
; 141  : 
; 142  :     void              Evaluate(Ship* s);
; 143  :     const char*       GetShortDescription() const;
; 144  :     const char*       GetDescription()  const;
; 145  : 
; 146  :     // mutators:
; 147  :     void              SetRegion(SimRegion* r)       { region    = r;  }
; 148  :     void              SetLocation(const Point& l);
; 149  :     void              SetAction(int s)              { action    = s;  }
; 150  :     void              SetStatus(int s);
; 151  :     void              SetFormation(int s)           { formation = s;  }

  005d2	89 46 74	 mov	 DWORD PTR [esi+116], eax
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  005d5	e8 00 00 00 00	 call	 ?value@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::value
  005da	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _nav$31[ebp]
; File d:\programming\starshatter\trunk\stars45\instruction.h

; 131  :     int               Speed()           const { return speed;      }

  005e0	8b 40 7c	 mov	 eax, DWORD PTR [eax+124]

; 152  :     void              SetSpeed(int s)               { speed     = s;  }

  005e3	89 46 7c	 mov	 DWORD PTR [esi+124], eax
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  005e6	e8 00 00 00 00	 call	 ?value@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 659  :                     npt->SetTarget(nav->TargetName());

  005eb	8b ce		 mov	 ecx, esi
  005ed	ff b0 80 00 00
	00		 push	 DWORD PTR [eax+128]
  005f3	e8 00 00 00 00	 call	 ?SetTarget@Instruction@@QAEXPBD@Z ; Instruction::SetTarget
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  005f8	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _nav$31[ebp]
  005fe	e8 00 00 00 00	 call	 ?value@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::value
  00603	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _nav$31[ebp]
; File d:\programming\starshatter\trunk\stars45\instruction.h

; 136  :     double            HoldTime()        const { return hold_time;  }

  00609	f2 0f 10 80 a8
	00 00 00	 movsd	 xmm0, QWORD PTR [eax+168]

; 157  :     void              SetHoldTime(double t)         { hold_time = t;  }

  00611	f2 0f 11 86 a8
	00 00 00	 movsd	 QWORD PTR [esi+168], xmm0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00619	e8 00 00 00 00	 call	 ?value@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 663  :                     element->AddNavPoint(npt);

  0061e	8b 4d 88	 mov	 ecx, DWORD PTR _element$1$[ebp]
  00621	6a 01		 push	 1
  00623	6a 00		 push	 0
; File d:\programming\starshatter\trunk\stars45\instruction.h

; 135  :     int               Farcast()         const { return farcast;    }

  00625	8b 80 a0 00 00
	00		 mov	 eax, DWORD PTR [eax+160]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 663  :                     element->AddNavPoint(npt);

  0062b	56		 push	 esi
; File d:\programming\starshatter\trunk\stars45\instruction.h

; 156  :     void              SetFarcast(int f)             { farcast   = f;  }

  0062c	89 86 a0 00 00
	00		 mov	 DWORD PTR [esi+160], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 663  :                     element->AddNavPoint(npt);

  00632	e8 00 00 00 00	 call	 ?AddNavPoint@Element@@QAEXPAVInstruction@@0_N@Z ; Element::AddNavPoint
  00637	8b 75 a4	 mov	 esi, DWORD PTR _msn_elem$1$[ebp]
$LN61@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0063a	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _nav$31[ebp]
  00640	e8 00 00 00 00	 call	 ?next@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::next
  00645	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 645  :             while (++nav) {

  00647	0f 85 c3 fe ff
	ff		 jne	 $LL13@CreateElem
$LN14@CreateElem:
; File d:\programming\starshatter\trunk\stars45\mission.h

; 265  :     int               RespawnCount() const { return respawns;      }

  0064d	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 668  :             int*  loadout   = 0;

  00650	33 ff		 xor	 edi, edi
  00652	89 bd 7c ff ff
	ff		 mov	 DWORD PTR _loadout$1$[ebp], edi
; File d:\programming\starshatter\trunk\stars45\mission.h

; 265  :     int               RespawnCount() const { return respawns;      }

  00658	89 85 78 ff ff
	ff		 mov	 DWORD PTR _respawns$1$[ebp], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 673  :             if (hangar && element && msn_elem->Count() > 0 && msn_elem->IsAlert()) {

  0065e	39 7d 80	 cmp	 DWORD PTR _hangar$1$[ebp], edi
  00661	0f 84 cf 02 00
	00		 je	 $LN720@CreateElem
  00667	39 7e 38	 cmp	 DWORD PTR [esi+56], edi
  0066a	0f 8e c6 02 00
	00		 jle	 $LN720@CreateElem
; File d:\programming\starshatter\trunk\stars45\mission.h

; 261  :     bool              IsAlert()      const { return alert;         }

  00670	8a 46 64	 mov	 al, BYTE PTR [esi+100]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 673  :             if (hangar && element && msn_elem->Count() > 0 && msn_elem->IsAlert()) {

  00673	84 c0		 test	 al, al
  00675	0f 84 bb 02 00
	00		 je	 $LN720@CreateElem
; File d:\programming\starshatter\trunk\stars45\mission.h

; 244  :     const ShipDesign* GetDesign()    const { return design;        }

  0067b	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 674  :                 FlightDeck*       deck  = 0;

  0067e	89 7d 9c	 mov	 DWORD PTR _deck$1$[ebp], edi

; 675  :                 int               queue = 1000;

  00681	c7 45 a0 e8 03
	00 00		 mov	 DWORD PTR _queue$1$[ebp], 1000 ; 000003e8H
; File d:\programming\starshatter\trunk\stars45\mission.h

; 244  :     const ShipDesign* GetDesign()    const { return design;        }

  00688	89 45 84	 mov	 DWORD PTR _dsn$1$[ebp], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 678  :                 if (dsn) {

  0068b	85 c0		 test	 eax, eax
  0068d	0f 84 a3 02 00
	00		 je	 $LN720@CreateElem

; 679  :                     for (int i = 0; i < carrier->NumFlightDecks(); i++) {

  00693	8b 4d 94	 mov	 ecx, DWORD PTR _carrier$1$[ebp]
  00696	e8 00 00 00 00	 call	 ?NumFlightDecks@Ship@@QBEHXZ ; Ship::NumFlightDecks
  0069b	85 c0		 test	 eax, eax
  0069d	0f 8e 93 02 00
	00		 jle	 $LN720@CreateElem
$LL17@CreateElem:

; 680  :                         FlightDeck* d  = carrier->GetFlightDeck(i);

  006a3	57		 push	 edi
  006a4	e8 00 00 00 00	 call	 ?GetFlightDeck@Ship@@QBEPAVFlightDeck@@H@Z ; Ship::GetFlightDeck

; 681  :                         int         dq = hangar->PreflightQueue(d);

  006a9	8b 4d 80	 mov	 ecx, DWORD PTR _hangar$1$[ebp]
  006ac	8b f0		 mov	 esi, eax
  006ae	56		 push	 esi
  006af	e8 00 00 00 00	 call	 ?PreflightQueue@Hangar@@QBEHPAVFlightDeck@@@Z ; Hangar::PreflightQueue
  006b4	89 85 6c ff ff
	ff		 mov	 DWORD PTR _dq$1$[ebp], eax

; 683  :                         if (d && d->IsLaunchDeck() && d->SpaceLeft(dsn->type) && dq < queue) {

  006ba	85 f6		 test	 esi, esi
  006bc	74 47		 je	 SHORT $LN731@CreateElem
  006be	8b 0e		 mov	 ecx, DWORD PTR [esi]
  006c0	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  006c3	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET ??_7FlightDeck@@6BSystem@@@
  006c9	75 09		 jne	 SHORT $LN122@CreateElem
; File d:\programming\starshatter\trunk\stars45\flightdeck.h

; 139  :     virtual bool   IsLaunchDeck()       const { return subtype == FLIGHT_DECK_LAUNCH;   }

  006cb	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  006cf	0f 94 c0	 sete	 al
  006d2	eb 04		 jmp	 SHORT $LN121@CreateElem
$LN122@CreateElem:
  006d4	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 683  :                         if (d && d->IsLaunchDeck() && d->SpaceLeft(dsn->type) && dq < queue) {

  006d6	ff d0		 call	 eax
$LN121@CreateElem:
  006d8	84 c0		 test	 al, al
  006da	74 29		 je	 SHORT $LN731@CreateElem
  006dc	8b 45 84	 mov	 eax, DWORD PTR _dsn$1$[ebp]
  006df	8b ce		 mov	 ecx, esi
  006e1	ff b0 10 01 00
	00		 push	 DWORD PTR [eax+272]
  006e7	8b 06		 mov	 eax, DWORD PTR [esi]
  006e9	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  006ec	ff d0		 call	 eax
  006ee	85 c0		 test	 eax, eax
  006f0	74 13		 je	 SHORT $LN731@CreateElem
  006f2	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _dq$1$[ebp]
  006f8	3b 45 a0	 cmp	 eax, DWORD PTR _queue$1$[ebp]
  006fb	7d 08		 jge	 SHORT $LN731@CreateElem

; 684  :                             queue = dq;

  006fd	89 45 a0	 mov	 DWORD PTR _queue$1$[ebp], eax

; 685  :                             deck  = d;

  00700	89 75 9c	 mov	 DWORD PTR _deck$1$[ebp], esi
  00703	eb 03		 jmp	 SHORT $LN15@CreateElem
$LN731@CreateElem:
  00705	8b 75 9c	 mov	 esi, DWORD PTR _deck$1$[ebp]
$LN15@CreateElem:

; 679  :                     for (int i = 0; i < carrier->NumFlightDecks(); i++) {

  00708	8b 4d 94	 mov	 ecx, DWORD PTR _carrier$1$[ebp]
  0070b	47		 inc	 edi
  0070c	e8 00 00 00 00	 call	 ?NumFlightDecks@Ship@@QBEHXZ ; Ship::NumFlightDecks
  00711	3b f8		 cmp	 edi, eax
  00713	7c 8e		 jl	 SHORT $LL17@CreateElem

; 686  :                         }
; 687  :                     }
; 688  :                 }
; 689  : 
; 690  :                 if (deck) {

  00715	8b bd 7c ff ff
	ff		 mov	 edi, DWORD PTR _loadout$1$[ebp]
  0071b	85 f6		 test	 esi, esi
  0071d	0f 84 10 02 00
	00		 je	 $LN734@CreateElem
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  00723	8b 4d a4	 mov	 ecx, DWORD PTR _msn_elem$1$[ebp]
  00726	81 c1 f4 00 00
	00		 add	 ecx, 244		; 000000f4H
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 691  :                     alertPrep = true;

  0072c	c6 45 9b 01	 mov	 BYTE PTR _alertPrep$1$[ebp], 1

; 692  : 
; 693  :                     // choose best loadout:
; 694  :                     if (msn_elem->Loadouts().size()) {

  00730	39 39		 cmp	 DWORD PTR [ecx], edi
  00732	0f 84 d0 00 00
	00		 je	 $LN68@CreateElem

; 695  :                         MissionLoad* l = msn_elem->Loadouts().at(0);

  00738	51		 push	 ecx
  00739	e8 00 00 00 00	 call	 ?at@?$List@VMissionLoad@@@@QAEAAPAVMissionLoad@@H@Z ; List<MissionLoad>::at

; 696  :                         if (l->GetName().length()) {

  0073e	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00744	51		 push	 ecx
  00745	8b 00		 mov	 eax, DWORD PTR [eax]
  00747	8b c8		 mov	 ecx, eax
  00749	89 45 a0	 mov	 DWORD PTR _l$1$[ebp], eax
  0074c	e8 00 00 00 00	 call	 ?GetName@MissionLoad@@QBE?AVText@@XZ ; MissionLoad::GetName
  00751	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
; File d:\programming\starshatter\trunk\foundationex\text.h

; 126  :    int         length() const    { return rep->length; }

  00757	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0075a	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 696  :                         if (l->GetName().length()) {

  0075d	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  00762	85 f6		 test	 esi, esi
  00764	0f 84 8b 00 00
	00		 je	 $LN67@CreateElem

; 697  :                             ListIter<ShipLoad> sl = ((ShipDesign*) dsn)->loadouts;

  0076a	8b 45 84	 mov	 eax, DWORD PTR _dsn$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0076d	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR _sl$27[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 697  :                             ListIter<ShipLoad> sl = ((ShipDesign*) dsn)->loadouts;

  00773	05 f8 07 00 00	 add	 eax, 2040		; 000007f8H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00778	c7 85 44 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _sl$27[ebp+4], -1
  00782	89 85 40 ff ff
	ff		 mov	 DWORD PTR _sl$27[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00788	e8 00 00 00 00	 call	 ?next@?$ListIter@VShipLoad@@@@QAEPAVShipLoad@@XZ ; ListIter<ShipLoad>::next
  0078d	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 698  :                             while (++sl) {

  0078f	74 74		 je	 SHORT $LN727@CreateElem
  00791	8b 75 a0	 mov	 esi, DWORD PTR _l$1$[ebp]
$LL18@CreateElem:

; 699  :                                 if (!_stricmp(sl->name, l->GetName()))

  00794	8d 85 84 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0079a	8b ce		 mov	 ecx, esi
  0079c	50		 push	 eax
  0079d	e8 00 00 00 00	 call	 ?GetName@MissionLoad@@QBE?AVText@@XZ ; MissionLoad::GetName
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  007a2	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR _sl$27[ebp]
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  007a8	8b 10		 mov	 edx, DWORD PTR [eax]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  007aa	e8 00 00 00 00	 call	 ?value@?$ListIter@VShipLoad@@@@QAEPAVShipLoad@@XZ ; ListIter<ShipLoad>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 699  :                                 if (!_stricmp(sl->name, l->GetName()))

  007af	52		 push	 edx
  007b0	50		 push	 eax
  007b1	e8 00 00 00 00	 call	 __stricmp
  007b6	83 c4 08	 add	 esp, 8
  007b9	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  007bf	85 c0		 test	 eax, eax
  007c1	0f 94 45 8f	 sete	 BYTE PTR $T35[ebp]
  007c5	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  007ca	80 7d 8f 00	 cmp	 BYTE PTR $T35[ebp], 0
  007ce	74 0e		 je	 SHORT $LN69@CreateElem
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  007d0	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR _sl$27[ebp]
  007d6	e8 00 00 00 00	 call	 ?value@?$ListIter@VShipLoad@@@@QAEPAVShipLoad@@XZ ; ListIter<ShipLoad>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 700  :                                 loadout = sl->load;

  007db	8d 78 40	 lea	 edi, DWORD PTR [eax+64]
$LN69@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  007de	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR _sl$27[ebp]
  007e4	e8 00 00 00 00	 call	 ?next@?$ListIter@VShipLoad@@@@QAEPAVShipLoad@@XZ ; ListIter<ShipLoad>::next
  007e9	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 698  :                             while (++sl) {

  007eb	75 a7		 jne	 SHORT $LL18@CreateElem
  007ed	89 bd 7c ff ff
	ff		 mov	 DWORD PTR _loadout$1$[ebp], edi

; 701  :                             }
; 702  :                         }
; 703  : 
; 704  :                         else {

  007f3	eb 10		 jmp	 SHORT $LN727@CreateElem
$LN67@CreateElem:

; 705  :                             loadout = l->GetStations();

  007f5	8b 4d a0	 mov	 ecx, DWORD PTR _l$1$[ebp]
  007f8	e8 00 00 00 00	 call	 ?GetStations@MissionLoad@@QAEPAHXZ ; MissionLoad::GetStations
  007fd	8b f8		 mov	 edi, eax
  007ff	89 85 7c ff ff
	ff		 mov	 DWORD PTR _loadout$1$[ebp], eax
$LN727@CreateElem:
  00805	8b 75 9c	 mov	 esi, DWORD PTR _deck$1$[ebp]
$LN68@CreateElem:

; 706  :                         }
; 707  :                     }
; 708  : 
; 709  :                     element->SetLoadout(loadout);

  00808	8b 4d 88	 mov	 ecx, DWORD PTR _element$1$[ebp]
  0080b	57		 push	 edi
  0080c	e8 00 00 00 00	 call	 ?SetLoadout@Element@@QAEXPAH@Z ; Element::SetLoadout

; 710  : 
; 711  :                     for (int i = 0; i < msn_elem->Count(); i++) {

  00811	8b 4d a4	 mov	 ecx, DWORD PTR _msn_elem$1$[ebp]
  00814	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  0081b	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0081f	0f 8e d8 09 00
	00		 jle	 $LN744@CreateElem
$LL22@CreateElem:

; 712  :                         int   squadron = -1;
; 713  :                         int   slot     = -1;
; 714  : 
; 715  :                         if (hangar->FindAvailSlot(msn_elem->GetDesign(), squadron, slot)) {

  00825	8d 45 94	 lea	 eax, DWORD PTR _slot$36[ebp]
  00828	c7 45 84 ff ff
	ff ff		 mov	 DWORD PTR _squadron$33[ebp], -1
  0082f	50		 push	 eax
  00830	8d 45 84	 lea	 eax, DWORD PTR _squadron$33[ebp]
  00833	c7 45 94 ff ff
	ff ff		 mov	 DWORD PTR _slot$36[ebp], -1
  0083a	50		 push	 eax
  0083b	ff 71 30	 push	 DWORD PTR [ecx+48]
  0083e	8b 4d 80	 mov	 ecx, DWORD PTR _hangar$1$[ebp]
  00841	8b 01		 mov	 eax, DWORD PTR [ecx]
  00843	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  00846	ff d0		 call	 eax
  00848	84 c0		 test	 al, al
  0084a	0f 84 c0 00 00
	00		 je	 $LN20@CreateElem

; 716  :                             alertPrep = alertPrep &&

  00850	80 7d 9b 00	 cmp	 BYTE PTR _alertPrep$1$[ebp], 0
  00854	74 25		 je	 SHORT $LN741@CreateElem
  00856	6a 01		 push	 1
  00858	6a 01		 push	 1
  0085a	57		 push	 edi
  0085b	ff 75 88	 push	 DWORD PTR _element$1$[ebp]
  0085e	56		 push	 esi
  0085f	8b 75 80	 mov	 esi, DWORD PTR _hangar$1$[ebp]
  00862	8b ce		 mov	 ecx, esi
  00864	ff 75 94	 push	 DWORD PTR _slot$36[ebp]
  00867	ff 75 84	 push	 DWORD PTR _squadron$33[ebp]
  0086a	8b 06		 mov	 eax, DWORD PTR [esi]
  0086c	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0086f	ff d0		 call	 eax
  00871	84 c0		 test	 al, al
  00873	74 09		 je	 SHORT $LN119@CreateElem
  00875	c6 45 9b 01	 mov	 BYTE PTR _alertPrep$1$[ebp], 1
  00879	eb 07		 jmp	 SHORT $LN120@CreateElem
$LN741@CreateElem:
  0087b	8b 75 80	 mov	 esi, DWORD PTR _hangar$1$[ebp]
$LN119@CreateElem:
  0087e	c6 45 9b 00	 mov	 BYTE PTR _alertPrep$1$[ebp], 0
$LN120@CreateElem:

; 717  :                             hangar->GotoAlert(squadron,
; 718  :                             slot,
; 719  :                             deck,
; 720  :                             element,
; 721  :                             loadout,
; 722  :                             true,    // package for launch
; 723  :                             true);   // expedite
; 724  : 
; 725  :                             HangarSlot* s         = (HangarSlot*) hangar->GetSlot(squadron, slot);

  00882	ff 75 94	 push	 DWORD PTR _slot$36[ebp]
  00885	8b ce		 mov	 ecx, esi
  00887	ff 75 84	 push	 DWORD PTR _squadron$33[ebp]
  0088a	e8 00 00 00 00	 call	 ?GetSlot@Hangar@@QBEPBVHangarSlot@@HH@Z ; Hangar::GetSlot

; 726  :                             Ship*       alertShip = hangar->GetShip(s);

  0088f	50		 push	 eax
  00890	e8 00 00 00 00	 call	 ?GetShip@Hangar@@QBEPAVShip@@PBVHangarSlot@@@Z ; Hangar::GetShip
  00895	8b f0		 mov	 esi, eax

; 727  : 
; 728  :                             if (alertShip) {

  00897	85 f6		 test	 esi, esi
  00899	74 75		 je	 SHORT $LN20@CreateElem
; File d:\programming\starshatter\trunk\stars45\ship.h

; 397  :     void              SetRespawnCount(int r)     { respawns = r;         }

  0089b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _respawns$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 731  :                                 if (msn_elem->Player() == i+1) {

  008a1	8b 4d a0	 mov	 ecx, DWORD PTR _i$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\ship.h

; 397  :     void              SetRespawnCount(int r)     { respawns = r;         }

  008a4	89 86 98 04 00
	00		 mov	 DWORD PTR [esi+1176], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 731  :                                 if (msn_elem->Player() == i+1) {

  008aa	41		 inc	 ecx
  008ab	8b 45 a4	 mov	 eax, DWORD PTR _msn_elem$1$[ebp]
  008ae	39 48 5c	 cmp	 DWORD PTR [eax+92], ecx
  008b1	75 5d		 jne	 SHORT $LN20@CreateElem
  008b3	8b 06		 mov	 eax, DWORD PTR [esi]
  008b5	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  008bb	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  008c0	75 08		 jne	 SHORT $LN130@CreateElem
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  008c2	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  008c8	eb 04		 jmp	 SHORT $LN129@CreateElem
$LN130@CreateElem:
  008ca	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 732  :                                     if (alertShip->GetRegion()) {

  008cc	ff d2		 call	 edx
$LN129@CreateElem:
  008ce	85 c0		 test	 eax, eax
  008d0	74 2d		 je	 SHORT $LN73@CreateElem
  008d2	8b 06		 mov	 eax, DWORD PTR [esi]
  008d4	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  008da	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  008df	75 10		 jne	 SHORT $LN132@CreateElem
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  008e1	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 733  :                                         alertShip->GetRegion()->SetPlayerShip(alertShip);

  008e7	8b c8		 mov	 ecx, eax
  008e9	56		 push	 esi
  008ea	e8 00 00 00 00	 call	 ?SetPlayerShip@SimRegion@@QAEXPAVShip@@@Z ; SimRegion::SetPlayerShip

; 734  :                                     }
; 735  :                                     else {

  008ef	eb 1f		 jmp	 SHORT $LN20@CreateElem
$LN132@CreateElem:
  008f1	8b ce		 mov	 ecx, esi

; 733  :                                         alertShip->GetRegion()->SetPlayerShip(alertShip);

  008f3	ff d2		 call	 edx
  008f5	56		 push	 esi
  008f6	8b c8		 mov	 ecx, eax
  008f8	e8 00 00 00 00	 call	 ?SetPlayerShip@SimRegion@@QAEXPAVShip@@@Z ; SimRegion::SetPlayerShip

; 734  :                                     }
; 735  :                                     else {

  008fd	eb 11		 jmp	 SHORT $LN20@CreateElem
$LN73@CreateElem:
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  008ff	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 736  :                                         ::Print("WARNING: alert ship '%s' region is null\n", alertShip->Name());

  00902	50		 push	 eax
  00903	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@IICEGJCO@WARNING?3?5alert?5ship?5?8?$CFs?8?5region?5@
  00908	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  0090d	83 c4 08	 add	 esp, 8
$LN20@CreateElem:

; 710  : 
; 711  :                     for (int i = 0; i < msn_elem->Count(); i++) {

  00910	8b 75 a4	 mov	 esi, DWORD PTR _msn_elem$1$[ebp]
  00913	8b 4d a0	 mov	 ecx, DWORD PTR _i$1$[ebp]
  00916	41		 inc	 ecx
  00917	89 4d a0	 mov	 DWORD PTR _i$1$[ebp], ecx
  0091a	3b 4e 38	 cmp	 ecx, DWORD PTR [esi+56]
  0091d	8b 75 9c	 mov	 esi, DWORD PTR _deck$1$[ebp]
  00920	8b 4d a4	 mov	 ecx, DWORD PTR _msn_elem$1$[ebp]
  00923	0f 8c fc fe ff
	ff		 jl	 $LL22@CreateElem

; 737  :                                     }
; 738  :                                 }
; 739  :                             }
; 740  :                         }
; 741  :                     }
; 742  :                 }
; 743  :             }
; 744  : 
; 745  :             if (!alertPrep) {

  00929	80 7d 9b 00	 cmp	 BYTE PTR _alertPrep$1$[ebp], 0
  0092d	0f 85 ca 08 00
	00		 jne	 $LN744@CreateElem
$LN734@CreateElem:
  00933	8b 75 a4	 mov	 esi, DWORD PTR _msn_elem$1$[ebp]
$LN720@CreateElem:

; 746  :                 // then, create the ships:
; 747  :                 for (int i = 0; i < msn_elem->Count(); i++) {

  00936	33 c9		 xor	 ecx, ecx
  00938	89 4d 94	 mov	 DWORD PTR _i$1$[ebp], ecx
  0093b	39 4e 38	 cmp	 DWORD PTR [esi+56], ecx
  0093e	0f 8e b9 08 00
	00		 jle	 $LN744@CreateElem
  00944	8d 46 68	 lea	 eax, DWORD PTR [esi+104]
  00947	89 45 84	 mov	 DWORD PTR tv2902[ebp], eax
  0094a	8d 86 00 01 00
	00		 lea	 eax, DWORD PTR [esi+256]
  00950	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv2892[ebp], eax
  00956	8b 45 a4	 mov	 eax, DWORD PTR _msn_elem$1$[ebp]
  00959	0f 1f 80 00 00
	00 00		 npad	 7
$LL25@CreateElem:

; 748  :                     MissionShip*   msn_ship = 0;
; 749  :                     Text           sname    = msn_elem->GetShipName(i);

  00960	51		 push	 ecx
  00961	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _sname$22[ebp]
  00967	33 f6		 xor	 esi, esi
  00969	51		 push	 ecx
  0096a	8b c8		 mov	 ecx, eax
  0096c	89 75 9c	 mov	 DWORD PTR _msn_ship$1$[ebp], esi
  0096f	e8 00 00 00 00	 call	 ?GetShipName@MissionElement@@QBE?AVText@@H@Z ; MissionElement::GetShipName

; 750  :                     Text           rnum     = msn_elem->GetRegistry(i);

  00974	8b 4d a4	 mov	 ecx, DWORD PTR _msn_elem$1$[ebp]
  00977	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _rnum$14[ebp]
  0097d	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00984	ff 75 94	 push	 DWORD PTR _i$1$[ebp]
  00987	50		 push	 eax
  00988	e8 00 00 00 00	 call	 ?GetRegistry@MissionElement@@QBE?AVText@@H@Z ; MissionElement::GetRegistry
  0098d	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 751  :                     Text           rgn_name = msn_elem->Region();

  00991	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _rgn_name$16[ebp]
  00997	ff 75 84	 push	 DWORD PTR tv2902[ebp]
  0099a	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text

; 752  : 
; 753  :                     if (msn_elem->Ships().size() > i) {

  0099f	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR tv2892[ebp]
  009a5	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  009a9	8b 45 94	 mov	 eax, DWORD PTR _i$1$[ebp]
  009ac	39 01		 cmp	 DWORD PTR [ecx], eax
  009ae	7e 35		 jle	 SHORT $LN76@CreateElem

; 754  :                         msn_ship = msn_elem->Ships()[i];

  009b0	50		 push	 eax
  009b1	e8 00 00 00 00	 call	 ??A?$List@VMissionShip@@@@QAEAAPAVMissionShip@@H@Z ; List<MissionShip>::operator[]

; 755  :                         sname    = msn_ship->Name();

  009b6	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _sname$22[ebp]
  009bc	8b 30		 mov	 esi, DWORD PTR [eax]
  009be	56		 push	 esi
  009bf	89 75 9c	 mov	 DWORD PTR _msn_ship$1$[ebp], esi
  009c2	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@ABV0@@Z ; Text::operator=
; File d:\programming\starshatter\trunk\stars45\mission.h

; 406  :     const Text&       RegNum()                const { return regnum;     }

  009c7	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 756  :                         rnum     = msn_ship->RegNum();

  009ca	50		 push	 eax
  009cb	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _rnum$14[ebp]
  009d1	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@ABV0@@Z ; Text::operator=
; File d:\programming\starshatter\trunk\stars45\mission.h

; 407  :     const Text&       Region()                const { return region;     }

  009d6	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 757  :                         rgn_name = msn_ship->Region();

  009d9	50		 push	 eax
  009da	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _rgn_name$16[ebp]
  009e0	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@ABV0@@Z ; Text::operator=
$LN76@CreateElem:

; 758  :                     }
; 759  : 
; 760  :                     Point l2 = msn_elem->Location();

  009e5	8b 4d a4	 mov	 ecx, DWORD PTR _msn_elem$1$[ebp]
  009e8	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _l2$21[ebp]
  009ee	50		 push	 eax
  009ef	e8 00 00 00 00	 call	 ?Location@MissionElement@@QBE?AUPoint@@XZ ; MissionElement::Location

; 761  : 
; 762  :                     if (msn_ship && fabs(msn_ship->Location().x) < 1e9) {

  009f4	85 f6		 test	 esi, esi
  009f6	0f 84 5d 01 00
	00		 je	 $LN77@CreateElem
  009fc	f2 0f 10 46 20	 movsd	 xmm0, QWORD PTR [esi+32]
  00a01	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00a08	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@41cdcd6500000000
  00a10	66 0f 2f c8	 comisd	 xmm1, xmm0
  00a14	0f 86 3f 01 00
	00		 jbe	 $LN77@CreateElem
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  00a1a	0f 10 46 20	 movups	 xmm0, XMMWORD PTR [esi+32]
  00a1e	0f 11 85 f8 fe
	ff ff		 movups	 XMMWORD PTR _l2$21[ebp], xmm0
  00a25	f2 0f 10 46 30	 movsd	 xmm0, QWORD PTR [esi+48]
  00a2a	f2 0f 11 85 08
	ff ff ff	 movsd	 QWORD PTR _l2$21[ebp+16], xmm0
$LN733@CreateElem:
  00a32	8b 75 a4	 mov	 esi, DWORD PTR _msn_elem$1$[ebp]
$LN79@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00a35	8d 86 f4 00 00
	00		 lea	 eax, DWORD PTR [esi+244]
  00a3b	c7 85 68 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _l$30[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00a45	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _l$30[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00a4b	89 85 64 ff ff
	ff		 mov	 DWORD PTR _l$30[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00a51	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionLoad@@@@QAEPAVMissionLoad@@XZ ; ListIter<MissionLoad>::next
  00a56	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 777  :                     while (++l) {

  00a58	0f 84 cb 01 00
	00		 je	 $LN27@CreateElem
  00a5e	66 90		 npad	 2
$LL26@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00a60	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _l$30[ebp]
  00a66	e8 00 00 00 00	 call	 ?value@?$ListIter@VMissionLoad@@@@QAEPAVMissionLoad@@XZ ; ListIter<MissionLoad>::value
  00a6b	8b c8		 mov	 ecx, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 778  :                         if ((l->GetShip() == i) || (l->GetShip() < 0 && loadout == 0)) {

  00a6d	e8 00 00 00 00	 call	 ?GetShip@MissionLoad@@QBEHXZ ; MissionLoad::GetShip
  00a72	3b 45 94	 cmp	 eax, DWORD PTR _i$1$[ebp]
  00a75	74 15		 je	 SHORT $LN82@CreateElem
  00a77	e8 00 00 00 00	 call	 ?GetShip@MissionLoad@@QBEHXZ ; MissionLoad::GetShip
  00a7c	85 c0		 test	 eax, eax
  00a7e	0f 89 8c 01 00
	00		 jns	 $LN84@CreateElem
  00a84	85 ff		 test	 edi, edi
  00a86	0f 85 84 01 00
	00		 jne	 $LN84@CreateElem
$LN82@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00a8c	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _l$30[ebp]
  00a92	e8 00 00 00 00	 call	 ?value@?$ListIter@VMissionLoad@@@@QAEPAVMissionLoad@@XZ ; ListIter<MissionLoad>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 779  :                             if (l->GetName().length()) {

  00a97	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00a9d	51		 push	 ecx
  00a9e	8b c8		 mov	 ecx, eax
  00aa0	e8 00 00 00 00	 call	 ?GetName@MissionLoad@@QBE?AVText@@XZ ; MissionLoad::GetName
  00aa5	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
; File d:\programming\starshatter\trunk\foundationex\text.h

; 126  :    int         length() const    { return rep->length; }

  00aab	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00aae	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 779  :                             if (l->GetName().length()) {

  00ab1	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  00ab6	85 f6		 test	 esi, esi
  00ab8	0f 84 3b 01 00
	00		 je	 $LN83@CreateElem
; File d:\programming\starshatter\trunk\stars45\mission.h

; 244  :     const ShipDesign* GetDesign()    const { return design;        }

  00abe	8b 75 a4	 mov	 esi, DWORD PTR _msn_elem$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00ac1	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _sl$28[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00ac7	c7 85 58 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _sl$28[ebp+4], -1
; File d:\programming\starshatter\trunk\stars45\mission.h

; 244  :     const ShipDesign* GetDesign()    const { return design;        }

  00ad1	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 780  :                                 ListIter<ShipLoad> sl = ((ShipDesign*) msn_elem->GetDesign())->loadouts;

  00ad4	05 f8 07 00 00	 add	 eax, 2040		; 000007f8H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00ad9	89 85 54 ff ff
	ff		 mov	 DWORD PTR _sl$28[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00adf	e8 00 00 00 00	 call	 ?next@?$ListIter@VShipLoad@@@@QAEPAVShipLoad@@XZ ; ListIter<ShipLoad>::next
  00ae4	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 781  :                                 while (++sl) {

  00ae6	0f 84 24 01 00
	00		 je	 $LN84@CreateElem
  00aec	0f 1f 40 00	 npad	 4
$LL28@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00af0	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _l$30[ebp]
  00af6	e8 00 00 00 00	 call	 ?value@?$ListIter@VMissionLoad@@@@QAEPAVMissionLoad@@XZ ; ListIter<MissionLoad>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 782  :                                     if (!_stricmp(sl->name, l->GetName()))

  00afb	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00b01	51		 push	 ecx
  00b02	8b c8		 mov	 ecx, eax
  00b04	e8 00 00 00 00	 call	 ?GetName@MissionLoad@@QBE?AVText@@XZ ; MissionLoad::GetName
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00b09	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _sl$28[ebp]
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  00b0f	8b 10		 mov	 edx, DWORD PTR [eax]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00b11	e8 00 00 00 00	 call	 ?value@?$ListIter@VShipLoad@@@@QAEPAVShipLoad@@XZ ; ListIter<ShipLoad>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 782  :                                     if (!_stricmp(sl->name, l->GetName()))

  00b16	52		 push	 edx
  00b17	50		 push	 eax
  00b18	e8 00 00 00 00	 call	 __stricmp
  00b1d	83 c4 08	 add	 esp, 8
  00b20	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00b26	85 c0		 test	 eax, eax
  00b28	0f 94 45 8f	 sete	 BYTE PTR $T34[ebp]
  00b2c	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  00b31	80 7d 8f 00	 cmp	 BYTE PTR $T34[ebp], 0
  00b35	74 0e		 je	 SHORT $LN85@CreateElem
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00b37	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _sl$28[ebp]
  00b3d	e8 00 00 00 00	 call	 ?value@?$ListIter@VShipLoad@@@@QAEPAVShipLoad@@XZ ; ListIter<ShipLoad>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 783  :                                     loadout = sl->load;

  00b42	8d 78 40	 lea	 edi, DWORD PTR [eax+64]
$LN85@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00b45	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _sl$28[ebp]
  00b4b	e8 00 00 00 00	 call	 ?next@?$ListIter@VShipLoad@@@@QAEPAVShipLoad@@XZ ; ListIter<ShipLoad>::next
  00b50	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 781  :                                 while (++sl) {

  00b52	75 9c		 jne	 SHORT $LL28@CreateElem

; 784  :                                 }
; 785  :                             }
; 786  : 
; 787  :                             else {

  00b54	e9 b7 00 00 00	 jmp	 $LN84@CreateElem
$LN77@CreateElem:

; 763  :                         l2 = msn_ship->Location();
; 764  :                     }
; 765  :                     else if (i) {

  00b59	83 7d 94 00	 cmp	 DWORD PTR _i$1$[ebp], 0
  00b5d	0f 84 cf fe ff
	ff		 je	 $LN733@CreateElem

; 766  :                         Point offset = RandomPoint();

  00b63	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _offset$13[ebp]
  00b69	50		 push	 eax
  00b6a	e8 00 00 00 00	 call	 ?RandomPoint@@YA?AUPoint@@XZ ; RandomPoint

; 767  :                         offset.z = Random(-1e3, 1e3);

  00b6f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@408f400000000000c08f400000000000
  00b76	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00b79	0f 11 04 24	 movups	 XMMWORD PTR [esp], xmm0
  00b7d	e8 00 00 00 00	 call	 ?Random@@YANNN@Z	; Random

; 769  :                         if (msn_elem->Count() < 5)

  00b82	8b 75 a4	 mov	 esi, DWORD PTR _msn_elem$1$[ebp]
  00b85	83 c4 10	 add	 esp, 16			; 00000010H
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 238  :     Point& operator*=(double s)            { x*=s;   y*=s;   z*=s;   return *this; }

  00b88	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR _offset$13[ebp]
  00b90	f2 0f 10 8d c8
	fe ff ff	 movsd	 xmm1, QWORD PTR _offset$13[ebp+8]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 767  :                         offset.z = Random(-1e3, 1e3);

  00b98	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR _offset$13[ebp+16]

; 769  :                         if (msn_elem->Count() < 5)

  00b9e	83 7e 38 05	 cmp	 DWORD PTR [esi+56], 5
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 238  :     Point& operator*=(double s)            { x*=s;   y*=s;   z*=s;   return *this; }

  00ba2	f2 0f 10 95 d0
	fe ff ff	 movsd	 xmm2, QWORD PTR _offset$13[ebp+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 769  :                         if (msn_elem->Count() < 5)

  00baa	7d 14		 jge	 SHORT $LN80@CreateElem
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 238  :     Point& operator*=(double s)            { x*=s;   y*=s;   z*=s;   return *this; }

  00bac	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3fd3333333333333
  00bb4	f2 0f 59 c3	 mulsd	 xmm0, xmm3
  00bb8	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  00bbc	f2 0f 59 d3	 mulsd	 xmm2, xmm3
$LN80@CreateElem:

; 236  :     Point& operator+=(const Point& p)      { x+=p.x; y+=p.y; z+=p.z; return *this; }

  00bc0	f2 0f 58 85 f8
	fe ff ff	 addsd	 xmm0, QWORD PTR _l2$21[ebp]
  00bc8	f2 0f 58 8d 00
	ff ff ff	 addsd	 xmm1, QWORD PTR _l2$21[ebp+8]
  00bd0	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR _l2$21[ebp], xmm0
  00bd8	f2 0f 10 85 08
	ff ff ff	 movsd	 xmm0, QWORD PTR _l2$21[ebp+16]
  00be0	f2 0f 58 c2	 addsd	 xmm0, xmm2
  00be4	f2 0f 11 8d 00
	ff ff ff	 movsd	 QWORD PTR _l2$21[ebp+8], xmm1
  00bec	f2 0f 11 85 08
	ff ff ff	 movsd	 QWORD PTR _l2$21[ebp+16], xmm0
  00bf4	e9 3c fe ff ff	 jmp	 $LN79@CreateElem
$LN83@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00bf9	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _l$30[ebp]
  00bff	e8 00 00 00 00	 call	 ?value@?$ListIter@VMissionLoad@@@@QAEPAVMissionLoad@@XZ ; ListIter<MissionLoad>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 788  :                                 loadout = l->GetStations();

  00c04	8b c8		 mov	 ecx, eax
  00c06	e8 00 00 00 00	 call	 ?GetStations@MissionLoad@@QAEPAHXZ ; MissionLoad::GetStations
  00c0b	8b 75 a4	 mov	 esi, DWORD PTR _msn_elem$1$[ebp]
  00c0e	8b f8		 mov	 edi, eax
$LN84@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00c10	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _l$30[ebp]
  00c16	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionLoad@@@@QAEPAVMissionLoad@@XZ ; ListIter<MissionLoad>::next
  00c1b	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 777  :                     while (++l) {

  00c1d	0f 85 3d fe ff
	ff		 jne	 $LL26@CreateElem
  00c23	89 bd 7c ff ff
	ff		 mov	 DWORD PTR _loadout$1$[ebp], edi
$LN27@CreateElem:

; 789  :                             }
; 790  :                         }
; 791  :                     }
; 792  : 
; 793  :                     element->SetLoadout(loadout);

  00c29	8b 4d 88	 mov	 ecx, DWORD PTR _element$1$[ebp]
  00c2c	57		 push	 edi
  00c2d	e8 00 00 00 00	 call	 ?SetLoadout@Element@@QAEXPAH@Z ; Element::SetLoadout

; 794  : 
; 795  :                     Ship* ship = CreateShip(sname, rnum, 

  00c32	8b 4d 90	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00c35	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _l2$21[ebp]
  00c3b	57		 push	 edi
  00c3c	ff 76 60	 push	 DWORD PTR [esi+96]
  00c3f	ff 76 44	 push	 DWORD PTR [esi+68]
  00c42	50		 push	 eax
  00c43	ff b5 e8 fe ff
	ff		 push	 DWORD PTR _rgn_name$16[ebp]
  00c49	ff 76 30	 push	 DWORD PTR [esi+48]
  00c4c	ff b5 dc fe ff
	ff		 push	 DWORD PTR _rnum$14[ebp]
  00c52	ff b5 18 ff ff
	ff		 push	 DWORD PTR _sname$22[ebp]
  00c58	e8 00 00 00 00	 call	 ?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z ; Sim::CreateShip
  00c5d	8b f0		 mov	 esi, eax
  00c5f	89 b5 60 ff ff
	ff		 mov	 DWORD PTR _ship$1$[ebp], esi

; 796  :                     (ShipDesign*) msn_elem->GetDesign(), 
; 797  :                     rgn_name, l2,
; 798  :                     msn_elem->GetIFF(),
; 799  :                     msn_elem->CommandAI(),
; 800  :                     loadout);
; 801  : 
; 802  :                     if (ship) {

  00c65	85 f6		 test	 esi, esi
  00c67	0f 84 55 05 00
	00		 je	 $LN113@CreateElem
; File d:\programming\starshatter\trunk\stars45\mission.h

; 273  :     double            Heading()      const { return heading;       }

  00c6d	8b 55 a4	 mov	 edx, DWORD PTR _msn_elem$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 806  :                         if (msn_ship) {

  00c70	8b 45 9c	 mov	 eax, DWORD PTR _msn_ship$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 273  :     double            Heading()      const { return heading;       }

  00c73	f2 0f 10 82 c0
	00 00 00	 movsd	 xmm0, QWORD PTR [edx+192]

; 245  :     const Skin*       GetSkin()      const { return skin;          }

  00c7b	8b 4a 34	 mov	 ecx, DWORD PTR [edx+52]

; 273  :     double            Heading()      const { return heading;       }

  00c7e	f2 0f 11 85 48
	ff ff ff	 movsd	 QWORD PTR _heading$1$[ebp], xmm0

; 245  :     const Skin*       GetSkin()      const { return skin;          }

  00c86	89 4d a0	 mov	 DWORD PTR _skin$1$[ebp], ecx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 806  :                         if (msn_ship) {

  00c89	85 c0		 test	 eax, eax
  00c8b	74 18		 je	 SHORT $LN88@CreateElem
; File d:\programming\starshatter\trunk\stars45\mission.h

; 412  :     double            Heading()               const { return heading;    }

  00c8d	f2 0f 10 40 58	 movsd	 xmm0, QWORD PTR [eax+88]

; 408  :     const Skin*       GetSkin()               const { return skin;       }

  00c92	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 809  :                             if (msn_ship->GetSkin())

  00c95	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\mission.h

; 412  :     double            Heading()               const { return heading;    }

  00c97	f2 0f 11 85 48
	ff ff ff	 movsd	 QWORD PTR _heading$1$[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 809  :                             if (msn_ship->GetSkin())

  00c9f	0f 45 c8	 cmovne	 ecx, eax
  00ca2	89 4d a0	 mov	 DWORD PTR _skin$1$[ebp], ecx
$LN88@CreateElem:
; File d:\programming\starshatter\trunk\stars45\mission.h

; 263  :     bool              IsRogue()      const { return rogue;         }

  00ca5	8a 42 66	 mov	 al, BYTE PTR [edx+102]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 813  :                         ship->SetRogue(msn_elem->IsRogue());

  00ca8	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\mission.h

; 263  :     bool              IsRogue()      const { return rogue;         }

  00caa	88 85 f4 fe ff
	ff		 mov	 BYTE PTR $T18[ebp], al
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 813  :                         ship->SetRogue(msn_elem->IsRogue());

  00cb0	ff b5 f4 fe ff
	ff		 push	 DWORD PTR $T18[ebp]
  00cb6	e8 00 00 00 00	 call	 ?SetRogue@Ship@@QAEX_N@Z ; Ship::SetRogue
; File d:\programming\starshatter\trunk\stars45\mission.h

; 264  :     bool              IsInvulnerable() const { return invulnerable; }

  00cbb	8b 4d a4	 mov	 ecx, DWORD PTR _msn_elem$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 815  :                         ship->SetHeading(0, 0, heading + PI);

  00cbe	83 ec 18	 sub	 esp, 24			; 00000018H
  00cc1	f2 0f 10 85 48
	ff ff ff	 movsd	 xmm0, QWORD PTR _heading$1$[ebp]
  00cc9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@400921fb54442d18
; File d:\programming\starshatter\trunk\stars45\mission.h

; 264  :     bool              IsInvulnerable() const { return invulnerable; }

  00cd1	8a 41 67	 mov	 al, BYTE PTR [ecx+103]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 815  :                         ship->SetHeading(0, 0, heading + PI);

  00cd4	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 188  :     void              SetInvulnerable(bool n)          { invulnerable = n;         }

  00cd6	88 86 22 04 00
	00		 mov	 BYTE PTR [esi+1058], al
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 815  :                         ship->SetHeading(0, 0, heading + PI);

  00cdc	8b 06		 mov	 eax, DWORD PTR [esi]
  00cde	f2 0f 11 44 24
	10		 movsd	 QWORD PTR [esp+16], xmm0
  00ce4	0f 57 c0	 xorps	 xmm0, xmm0
  00ce7	0f 11 04 24	 movups	 XMMWORD PTR [esp], xmm0
  00ceb	ff 50 3c	 call	 DWORD PTR [eax+60]
; File d:\programming\starshatter\trunk\stars45\ship.h

; 397  :     void              SetRespawnCount(int r)     { respawns = r;         }

  00cee	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _respawns$1$[ebp]
  00cf4	89 86 98 04 00
	00		 mov	 DWORD PTR [esi+1176], eax

; 365  :     const char*       Abbreviation()    const;
; 366  :     const char*       DesignName()      const;
; 367  :     const char*       DesignFileName()  const;
; 368  :     static const char* ClassName(int c);
; 369  :     static int        ClassForName(const char* name);
; 370  :     const char*       ClassName()       const;
; 371  :     CLASSIFICATION    Class()           const;
; 372  :     bool              IsGroundUnit()    const;
; 373  :     bool              IsStarship()      const;
; 374  :     bool              IsDropship()      const;
; 375  :     bool              IsStatic()        const;
; 376  :     bool              IsRogue()         const;
; 377  :     void              SetRogue(bool r=true);
; 378  :     int               GetFriendlyFire() const    { return ff_count;      }
; 379  :     void              SetFriendlyFire(int f);
; 380  :     void              IncFriendlyFire(int f=1);
; 381  :     double            Agility()         const    { return agility;       }
; 382  :     DWORD             MissionClock()    const;
; 383  :     Graphic*          Cockpit()         const;
; 384  :     void              ShowCockpit();
; 385  :     void              HideCockpit();
; 386  :     int               Value()           const;
; 387  :     double            AIValue()         const;
; 388  :     static int        Value(int type);
; 389  : 
; 390  :     const Skin*       GetSkin()         const    { return skin;          }
; 391  :     void              UseSkin(const Skin* s)     { skin = s;             }

  00cfa	8b 45 a0	 mov	 eax, DWORD PTR _skin$1$[ebp]
  00cfd	89 86 2c 03 00
	00		 mov	 DWORD PTR [esi+812], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 819  :                         if (!netgame)

  00d03	8b 45 90	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00d06	83 b8 c4 00 00
	00 00		 cmp	 DWORD PTR [eax+196], 0
  00d0d	75 4b		 jne	 SHORT $LN89@CreateElem

; 820  :                         ship->SetRespawnLoc(RandomPoint() * 2);

  00d0f	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  00d15	50		 push	 eax
  00d16	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR $T20[ebp]
  00d1c	50		 push	 eax
  00d1d	e8 00 00 00 00	 call	 ?RandomPoint@@YA?AUPoint@@XZ ; RandomPoint
  00d22	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@4000000000000000
  00d2a	83 c4 04	 add	 esp, 4
  00d2d	8b c8		 mov	 ecx, eax
  00d2f	e8 00 00 00 00	 call	 ??DPoint@@QBE?AU0@N@Z	; Point::operator*
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  00d34	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00d38	f2 0f 11 86 80
	04 00 00	 movsd	 QWORD PTR [esi+1152], xmm0
  00d40	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00d45	f2 0f 11 86 88
	04 00 00	 movsd	 QWORD PTR [esi+1160], xmm0
  00d4d	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  00d52	f2 0f 11 86 90
	04 00 00	 movsd	 QWORD PTR [esi+1168], xmm0
$LN89@CreateElem:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 822  :                         if (ship->IsStarship())

  00d5a	8b ce		 mov	 ecx, esi
  00d5c	e8 00 00 00 00	 call	 ?IsStarship@Ship@@QBE_NXZ ; Ship::IsStarship
  00d61	84 c0		 test	 al, al
  00d63	74 12		 je	 SHORT $LN90@CreateElem

; 823  :                         ship->SetHelmHeading(heading);

  00d65	f2 0f 10 8d 48
	ff ff ff	 movsd	 xmm1, QWORD PTR _heading$1$[ebp]
  00d6d	e8 00 00 00 00	 call	 ?SetHelmHeading@Ship@@QAEXN@Z ; Ship::SetHelmHeading
  00d72	e9 7d 00 00 00	 jmp	 $LN133@CreateElem
$LN90@CreateElem:

; 824  : 
; 825  :                         else if (ship->IsAirborne() && ship->AltitudeAGL() > 25)

  00d77	e8 00 00 00 00	 call	 ?IsAirborne@Ship@@QBE_NXZ ; Ship::IsAirborne
  00d7c	84 c0		 test	 al, al
  00d7e	74 74		 je	 SHORT $LN133@CreateElem
  00d80	8b ce		 mov	 ecx, esi
  00d82	e8 00 00 00 00	 call	 ?AltitudeAGL@Ship@@QBENXZ ; Ship::AltitudeAGL
  00d87	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4039000000000000
  00d8f	76 63		 jbe	 SHORT $LN133@CreateElem
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 105  :     Point             Heading()   const { return cam.vpn();  }

  00d91	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00d97	50		 push	 eax
  00d98	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00d9b	e8 00 00 00 00	 call	 ?vpn@Camera@@QBE?AUPoint@@XZ ; Camera::vpn
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 826  :                         ship->SetVelocity(ship->Heading() * 250);

  00da0	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@406f400000000000
  00da8	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR $T19[ebp]
  00dae	50		 push	 eax
  00daf	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00db5	e8 00 00 00 00	 call	 ??DPoint@@QBE?AU0@N@Z	; Point::operator*
  00dba	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00dbc	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00dbf	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET ??_7Ship@@6BSimObject@@@
  00dc5	75 28		 jne	 SHORT $LN134@CreateElem
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  00dc7	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00dcb	f2 0f 11 86 a8
	00 00 00	 movsd	 QWORD PTR [esi+168], xmm0
  00dd3	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00dd8	f2 0f 11 86 b0
	00 00 00	 movsd	 QWORD PTR [esi+176], xmm0
  00de0	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  00de5	f2 0f 11 86 b8
	00 00 00	 movsd	 QWORD PTR [esi+184], xmm0
  00ded	eb 05		 jmp	 SHORT $LN133@CreateElem
$LN134@CreateElem:
  00def	50		 push	 eax
  00df0	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 826  :                         ship->SetVelocity(ship->Heading() * 250);

  00df2	ff d2		 call	 edx
$LN133@CreateElem:

; 827  : 
; 828  :                         if (element)
; 829  :                         element->AddShip(ship);

  00df4	8b 4d 88	 mov	 ecx, DWORD PTR _element$1$[ebp]
  00df7	6a ff		 push	 -1
  00df9	56		 push	 esi
  00dfa	e8 00 00 00 00	 call	 ?AddShip@Element@@QAEHPAVShip@@H@Z ; Element::AddShip

; 830  : 
; 831  :                         if (hangar)

  00dff	8b 4d 80	 mov	 ecx, DWORD PTR _hangar$1$[ebp]
  00e02	85 c9		 test	 ecx, ecx
  00e04	74 16		 je	 SHORT $LN135@CreateElem

; 832  :                         hangar->FindSlot(ship, squadron, slot, Hangar::ACTIVE);

  00e06	6a 06		 push	 6
  00e08	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _slot$17[ebp]
  00e0e	50		 push	 eax
  00e0f	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _squadron$29[ebp]
  00e15	50		 push	 eax
  00e16	8b 01		 mov	 eax, DWORD PTR [ecx]
  00e18	56		 push	 esi
  00e19	ff 50 38	 call	 DWORD PTR [eax+56]
$LN135@CreateElem:
  00e1c	8b 06		 mov	 eax, DWORD PTR [esi]
  00e1e	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00e24	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00e29	75 08		 jne	 SHORT $LN138@CreateElem
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00e2b	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00e31	eb 04		 jmp	 SHORT $LN137@CreateElem
$LN138@CreateElem:
  00e33	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 834  :                         if (ship->GetRegion() && msn_elem->Player() == i+1)

  00e35	ff d2		 call	 edx
$LN137@CreateElem:
  00e37	85 c0		 test	 eax, eax
  00e39	74 2f		 je	 SHORT $LN95@CreateElem
  00e3b	8b 4d a4	 mov	 ecx, DWORD PTR _msn_elem$1$[ebp]
  00e3e	8b 45 94	 mov	 eax, DWORD PTR _i$1$[ebp]
  00e41	40		 inc	 eax
  00e42	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  00e45	75 23		 jne	 SHORT $LN95@CreateElem
  00e47	8b 06		 mov	 eax, DWORD PTR [esi]
  00e49	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00e4f	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00e54	75 08		 jne	 SHORT $LN140@CreateElem
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00e56	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00e5c	eb 04		 jmp	 SHORT $LN139@CreateElem
$LN140@CreateElem:
  00e5e	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 835  :                         ship->GetRegion()->SetPlayerShip(ship);

  00e60	ff d2		 call	 edx
$LN139@CreateElem:
  00e62	56		 push	 esi
  00e63	8b c8		 mov	 ecx, eax
  00e65	e8 00 00 00 00	 call	 ?SetPlayerShip@SimRegion@@QAEXPAVShip@@@Z ; SimRegion::SetPlayerShip
$LN95@CreateElem:

; 836  : 
; 837  :                         if (ship->NumFlightDecks()) {

  00e6a	8b ce		 mov	 ecx, esi
  00e6c	e8 00 00 00 00	 call	 ?NumFlightDecks@Ship@@QBEHXZ ; Ship::NumFlightDecks
  00e71	85 c0		 test	 eax, eax
  00e73	74 3b		 je	 SHORT $LN31@CreateElem

; 838  :                             for (int i = 0; i < ship->NumFlightDecks(); i++) {

  00e75	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  00e7c	e8 00 00 00 00	 call	 ?NumFlightDecks@Ship@@QBEHXZ ; Ship::NumFlightDecks
  00e81	85 c0		 test	 eax, eax
  00e83	7e 2b		 jle	 SHORT $LN31@CreateElem
  00e85	8b 7d a0	 mov	 edi, DWORD PTR _i$1$[ebp]
$LL32@CreateElem:

; 839  :                                 FlightDeck* deck = ship->GetFlightDeck(i);

  00e88	57		 push	 edi
  00e89	8b ce		 mov	 ecx, esi
  00e8b	e8 00 00 00 00	 call	 ?GetFlightDeck@Ship@@QBEPAVFlightDeck@@H@Z ; Ship::GetFlightDeck

; 840  :                                 if (deck)

  00e90	85 c0		 test	 eax, eax
  00e92	74 0a		 je	 SHORT $LN30@CreateElem

; 841  :                                 deck->Orient(ship);

  00e94	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e96	56		 push	 esi
  00e97	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00e9a	8b c8		 mov	 ecx, eax
  00e9c	ff d2		 call	 edx
$LN30@CreateElem:

; 838  :                             for (int i = 0; i < ship->NumFlightDecks(); i++) {

  00e9e	8b ce		 mov	 ecx, esi
  00ea0	47		 inc	 edi
  00ea1	e8 00 00 00 00	 call	 ?NumFlightDecks@Ship@@QBEHXZ ; Ship::NumFlightDecks
  00ea6	3b f8		 cmp	 edi, eax
  00ea8	7c de		 jl	 SHORT $LL32@CreateElem
  00eaa	8b bd 7c ff ff
	ff		 mov	 edi, DWORD PTR _loadout$1$[ebp]
$LN31@CreateElem:

; 842  :                             }
; 843  :                         }
; 844  : 
; 845  :                         if (msn_ship) {

  00eb0	8b 45 9c	 mov	 eax, DWORD PTR _msn_ship$1$[ebp]
  00eb3	85 c0		 test	 eax, eax
  00eb5	0f 84 87 01 00
	00		 je	 $LN107@CreateElem

; 846  :                             ship->SetVelocity(msn_ship->Velocity().OtherHand());

  00ebb	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00ec1	51		 push	 ecx
; File d:\programming\starshatter\trunk\stars45\mission.h

; 410  :     const Point&      Velocity()              const { return velocity;   }

  00ec2	8d 48 38	 lea	 ecx, DWORD PTR [eax+56]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 846  :                             ship->SetVelocity(msn_ship->Velocity().OtherHand());

  00ec5	e8 00 00 00 00	 call	 ?OtherHand@Point@@QBE?AU1@XZ ; Point::OtherHand
  00eca	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00ecc	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00ecf	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET ??_7Ship@@6BSimObject@@@
  00ed5	75 28		 jne	 SHORT $LN144@CreateElem
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  00ed7	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00edb	f2 0f 11 86 a8
	00 00 00	 movsd	 QWORD PTR [esi+168], xmm0
  00ee3	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00ee8	f2 0f 11 86 b0
	00 00 00	 movsd	 QWORD PTR [esi+176], xmm0
  00ef0	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  00ef5	f2 0f 11 86 b8
	00 00 00	 movsd	 QWORD PTR [esi+184], xmm0
  00efd	eb 05		 jmp	 SHORT $LN143@CreateElem
$LN144@CreateElem:
  00eff	50		 push	 eax
  00f00	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 846  :                             ship->SetVelocity(msn_ship->Velocity().OtherHand());

  00f02	ff d2		 call	 edx
$LN143@CreateElem:

; 847  :                             ship->SetIntegrity((float) msn_ship->Integrity());

  00f04	8b 4d 9c	 mov	 ecx, DWORD PTR _msn_ship$1$[ebp]
  00f07	8b 06		 mov	 eax, DWORD PTR [esi]
  00f09	f2 0f 10 41 60	 movsd	 xmm0, QWORD PTR [ecx+96]
  00f0e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00f12	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00f17	75 0a		 jne	 SHORT $LN146@CreateElem
; File d:\programming\starshatter\trunk\stars45\ship.h

; 331  :     virtual void      SetIntegrity(float n)      { integrity = n;        }

  00f19	f3 0f 11 86 b8
	01 00 00	 movss	 DWORD PTR [esi+440], xmm0
  00f21	eb 11		 jmp	 SHORT $LN145@CreateElem
$LN146@CreateElem:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 847  :                             ship->SetIntegrity((float) msn_ship->Integrity());

  00f23	51		 push	 ecx
  00f24	8b ce		 mov	 ecx, esi
  00f26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f2b	ff 90 80 01 00
	00		 call	 DWORD PTR [eax+384]
  00f31	8b 4d 9c	 mov	 ecx, DWORD PTR _msn_ship$1$[ebp]
$LN145@CreateElem:
; File d:\programming\starshatter\trunk\stars45\ship.h

; 397  :     void              SetRespawnCount(int r)     { respawns = r;         }

  00f34	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00f37	89 86 98 04 00
	00		 mov	 DWORD PTR [esi+1176], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 850  :                             if (msn_ship->Ammo()[0] > -10) {

  00f3d	8d 41 70	 lea	 eax, DWORD PTR [ecx+112]
  00f40	83 38 f6	 cmp	 DWORD PTR [eax], -10	; fffffff6H
  00f43	89 45 a0	 mov	 DWORD PTR tv2862[ebp], eax
  00f46	7e 38		 jle	 SHORT $LN100@CreateElem

; 851  :                                 for (int i = 0; i < 64; i++) {

  00f48	33 ff		 xor	 edi, edi
  00f4a	66 0f 1f 44 00
	00		 npad	 6
$LL35@CreateElem:
  00f50	8b 06		 mov	 eax, DWORD PTR [esi]
  00f52	47		 inc	 edi
  00f53	57		 push	 edi
  00f54	8b ce		 mov	 ecx, esi
  00f56	8b 80 18 01 00
	00		 mov	 eax, DWORD PTR [eax+280]

; 852  :                                     Weapon* w = ship->GetWeaponByIndex(i+1);

  00f5c	ff d0		 call	 eax

; 853  :                                     if (w)

  00f5e	85 c0		 test	 eax, eax
  00f60	74 15		 je	 SHORT $LN726@CreateElem

; 854  :                                     w->SetAmmo(msn_ship->Ammo()[i]);

  00f62	8b 4d a0	 mov	 ecx, DWORD PTR tv2862[ebp]
  00f65	ff 31		 push	 DWORD PTR [ecx]
  00f67	8b c8		 mov	 ecx, eax
  00f69	e8 00 00 00 00	 call	 ?SetAmmo@Weapon@@QAEXH@Z ; Weapon::SetAmmo
  00f6e	83 45 a0 04	 add	 DWORD PTR tv2862[ebp], 4
  00f72	83 ff 40	 cmp	 edi, 64			; 00000040H
  00f75	7c d9		 jl	 SHORT $LL35@CreateElem
$LN726@CreateElem:
  00f77	8b bd 7c ff ff
	ff		 mov	 edi, DWORD PTR _loadout$1$[ebp]
  00f7d	8b 4d 9c	 mov	 ecx, DWORD PTR _msn_ship$1$[ebp]
$LN100@CreateElem:

; 855  :                                     else
; 856  :                                     break;
; 857  :                                 }
; 858  :                             }
; 859  : 
; 860  :                             if (msn_ship->Fuel()[0] > -10) {

  00f80	83 b9 b0 00 00
	00 f6		 cmp	 DWORD PTR [ecx+176], -10 ; fffffff6H
  00f87	8d 81 b0 00 00
	00		 lea	 eax, DWORD PTR [ecx+176]
  00f8d	89 45 a0	 mov	 DWORD PTR tv2841[ebp], eax
  00f90	7e 58		 jle	 SHORT $LN37@CreateElem

; 861  :                                 for (int i = 0; i < 4; i++) {

  00f92	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  00f9c	8d be 90 03 00
	00		 lea	 edi, DWORD PTR [esi+912]
  00fa2	8b b5 4c ff ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
$LL38@CreateElem:

; 862  :                                     if (ship->Reactors().size() > i) {

  00fa8	39 37		 cmp	 DWORD PTR [edi], esi
  00faa	7e 23		 jle	 SHORT $LN36@CreateElem

; 863  :                                         PowerSource* p = ship->Reactors()[i];

  00fac	56		 push	 esi
  00fad	8b cf		 mov	 ecx, edi
  00faf	e8 00 00 00 00	 call	 ??A?$List@VPowerSource@@@@QAEAAPAVPowerSource@@H@Z ; List<PowerSource>::operator[]

; 864  :                                         p->SetCapacity(msn_ship->Fuel()[i]);

  00fb4	8b 4d a0	 mov	 ecx, DWORD PTR tv2841[ebp]
  00fb7	8b 00		 mov	 eax, DWORD PTR [eax]
  00fb9	66 0f 6e 01	 movd	 xmm0, DWORD PTR [ecx]
  00fbd	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\system.h

; 137  :     void              SetCapacity(double c) { capacity = (float) c; }

  00fc1	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00fc5	f3 0f 11 80 84
	00 00 00	 movss	 DWORD PTR [eax+132], xmm0
  00fcd	8b c1		 mov	 eax, ecx
$LN36@CreateElem:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 861  :                                 for (int i = 0; i < 4; i++) {

  00fcf	46		 inc	 esi
  00fd0	83 c0 04	 add	 eax, 4
  00fd3	89 45 a0	 mov	 DWORD PTR tv2841[ebp], eax
  00fd6	83 fe 04	 cmp	 esi, 4
  00fd9	7c cd		 jl	 SHORT $LL38@CreateElem
  00fdb	8b b5 60 ff ff
	ff		 mov	 esi, DWORD PTR _ship$1$[ebp]
  00fe1	8b bd 7c ff ff
	ff		 mov	 edi, DWORD PTR _loadout$1$[ebp]
  00fe7	8b 4d 9c	 mov	 ecx, DWORD PTR _msn_ship$1$[ebp]
$LN37@CreateElem:

; 865  :                                     }
; 866  :                                 }
; 867  :                             }
; 868  : 
; 869  :                             if (msn_ship->Decoys() > -10) {

  00fea	83 79 68 f6	 cmp	 DWORD PTR [ecx+104], -10 ; fffffff6H
  00fee	7e 20		 jle	 SHORT $LN105@CreateElem

; 870  :                                 Weapon* w = ship->GetDecoy();

  00ff0	8b 06		 mov	 eax, DWORD PTR [esi]
  00ff2	8b ce		 mov	 ecx, esi
  00ff4	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  00ffa	ff d0		 call	 eax

; 871  :                                 if (w)
; 872  :                                 w->SetAmmo(msn_ship->Decoys());

  00ffc	8b 4d 9c	 mov	 ecx, DWORD PTR _msn_ship$1$[ebp]
  00fff	85 c0		 test	 eax, eax
  01001	74 0d		 je	 SHORT $LN105@CreateElem
  01003	ff 71 68	 push	 DWORD PTR [ecx+104]
  01006	8b c8		 mov	 ecx, eax
  01008	e8 00 00 00 00	 call	 ?SetAmmo@Weapon@@QAEXH@Z ; Weapon::SetAmmo
  0100d	8b 4d 9c	 mov	 ecx, DWORD PTR _msn_ship$1$[ebp]
$LN105@CreateElem:

; 873  :                             }
; 874  : 
; 875  :                             if (msn_ship->Probes() > -10) {

  01010	83 79 6c f6	 cmp	 DWORD PTR [ecx+108], -10 ; fffffff6H
  01014	7e 2c		 jle	 SHORT $LN107@CreateElem
  01016	8b 06		 mov	 eax, DWORD PTR [esi]
  01018	8b 90 bc 01 00
	00		 mov	 edx, DWORD PTR [eax+444]
  0101e	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  01023	75 08		 jne	 SHORT $LN152@CreateElem
; File d:\programming\starshatter\trunk\stars45\ship.h

; 353  :     virtual Weapon*   GetProbeLauncher() const   { return probe;         }

  01025	8b 86 60 03 00
	00		 mov	 eax, DWORD PTR [esi+864]
  0102b	eb 07		 jmp	 SHORT $LN151@CreateElem
$LN152@CreateElem:
  0102d	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 876  :                                 Weapon* w = ship->GetProbeLauncher();

  0102f	ff d2		 call	 edx
  01031	8b 4d 9c	 mov	 ecx, DWORD PTR _msn_ship$1$[ebp]
$LN151@CreateElem:

; 877  :                                 if (w)

  01034	85 c0		 test	 eax, eax
  01036	74 0a		 je	 SHORT $LN107@CreateElem

; 878  :                                 w->SetAmmo(msn_ship->Probes());

  01038	ff 71 6c	 push	 DWORD PTR [ecx+108]
  0103b	8b c8		 mov	 ecx, eax
  0103d	e8 00 00 00 00	 call	 ?SetAmmo@Weapon@@QAEXH@Z ; Weapon::SetAmmo
$LN107@CreateElem:
; File d:\programming\starshatter\trunk\stars45\ship.h

; 459  :     Shield*                 GetShield()          { return shield;        }

  01042	8b 8e 40 03 00
	00		 mov	 ecx, DWORD PTR [esi+832]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 884  :                         if (shield) {

  01048	85 c9		 test	 ecx, ecx
  0104a	74 15		 je	 SHORT $LN153@CreateElem

; 885  :                             shield->SetPowerLevel(50);

  0104c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0104e	83 ec 08	 sub	 esp, 8
  01051	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4049000000000000
  01059	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0105e	ff 50 44	 call	 DWORD PTR [eax+68]
$LN153@CreateElem:

; 886  :                         }
; 887  : 
; 888  :                         if (ship->Class() > Ship::FRIGATE) {

  01061	8b ce		 mov	 ecx, esi
  01063	e8 00 00 00 00	 call	 ?Class@Ship@@QBE?AW4CLASSIFICATION@1@XZ ; Ship::Class
  01068	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0106d	7e 5d		 jle	 SHORT $LN40@CreateElem
; File d:\programming\starshatter\trunk\stars45\ship.h

; 453  :     List<WeaponGroup>&      Weapons()            { return weapons;       }

  0106f	8d 86 9c 03 00
	00		 lea	 eax, DWORD PTR [esi+924]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  01075	c7 85 24 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _iter$23[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  0107f	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _iter$23[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  01085	89 85 20 ff ff
	ff		 mov	 DWORD PTR _iter$23[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  0108b	e8 00 00 00 00	 call	 ?next@?$ListIter@VWeaponGroup@@@@QAEPAVWeaponGroup@@XZ ; ListIter<WeaponGroup>::next
  01090	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 890  :                             while (++iter) {

  01092	74 38		 je	 SHORT $LN40@CreateElem
$LL39@CreateElem:

; 891  :                                 WeaponGroup* weapon = iter.value();

  01094	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _iter$23[ebp]
  0109a	e8 00 00 00 00	 call	 ?value@?$ListIter@VWeaponGroup@@@@QAEPAVWeaponGroup@@XZ ; ListIter<WeaponGroup>::value

; 892  : 
; 893  :                                 // anti-air weapon?
; 894  :                                 if (weapon->GetDesign()->target_type & Ship::DRONE) {

  0109f	8b c8		 mov	 ecx, eax
  010a1	89 45 a0	 mov	 DWORD PTR _weapon$1$[ebp], eax
  010a4	e8 00 00 00 00	 call	 ?GetDesign@WeaponGroup@@QBEPAVWeaponDesign@@XZ ; WeaponGroup::GetDesign

; 895  :                                     weapon->SetFiringOrders(Weapon::POINT_DEFENSE);

  010a9	8b 4d a0	 mov	 ecx, DWORD PTR _weapon$1$[ebp]
  010ac	f6 40 34 01	 test	 BYTE PTR [eax+52], 1
  010b0	74 04		 je	 SHORT $LN110@CreateElem
  010b2	6a 02		 push	 2

; 896  :                                 }
; 897  :                                 else {

  010b4	eb 02		 jmp	 SHORT $LN750@CreateElem
$LN110@CreateElem:

; 898  :                                     weapon->SetFiringOrders(Weapon::MANUAL);

  010b6	6a 00		 push	 0
$LN750@CreateElem:
  010b8	e8 00 00 00 00	 call	 ?SetFiringOrders@WeaponGroup@@QAEXH@Z ; WeaponGroup::SetFiringOrders
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  010bd	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _iter$23[ebp]
  010c3	e8 00 00 00 00	 call	 ?next@?$ListIter@VWeaponGroup@@@@QAEPAVWeaponGroup@@XZ ; ListIter<WeaponGroup>::next
  010c8	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 890  :                             while (++iter) {

  010ca	75 c8		 jne	 SHORT $LL39@CreateElem
$LN40@CreateElem:

; 899  :                                 }
; 900  :                             }
; 901  :                         }
; 902  : 
; 903  :                         if (ship->Class() > Ship::DRONE && ship->Class() < Ship::STATION) {

  010cc	8b ce		 mov	 ecx, esi
  010ce	e8 00 00 00 00	 call	 ?Class@Ship@@QBE?AW4CLASSIFICATION@1@XZ ; Ship::Class
  010d3	83 f8 01	 cmp	 eax, 1
  010d6	0f 8e e6 00 00
	00		 jle	 $LN113@CreateElem
  010dc	e8 00 00 00 00	 call	 ?Class@Ship@@QBE?AW4CLASSIFICATION@1@XZ ; Ship::Class
  010e1	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  010e6	0f 8d d6 00 00
	00		 jge	 $LN113@CreateElem

; 904  :                             ShipStats* stats = ShipStats::Find(sname);

  010ec	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _sname$22[ebp]
  010f2	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find
  010f7	89 45 9c	 mov	 DWORD PTR _stats$1$[ebp], eax

; 905  :                             if (stats) {

  010fa	85 c0		 test	 eax, eax
  010fc	0f 84 c0 00 00
	00		 je	 $LN113@CreateElem
; File d:\programming\starshatter\trunk\stars45\ship.h

; 364  :     const ShipDesign* Design()          const    { return design;        }

  01102	8b 8e 00 02 00
	00		 mov	 ecx, DWORD PTR [esi+512]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 907  :                                 sprintf_s(design, "%s %s", ship->Abbreviation(), ship->Design()->display_name);

  01108	81 c1 c0 00 00
	00		 add	 ecx, 192		; 000000c0H
  0110e	51		 push	 ecx
  0110f	8b ce		 mov	 ecx, esi
  01111	e8 00 00 00 00	 call	 ?Abbreviation@Ship@@QBEPBDXZ ; Ship::Abbreviation
  01116	50		 push	 eax
  01117	8d 45 a8	 lea	 eax, DWORD PTR _design$37[ebp]
  0111a	68 00 00 00 00	 push	 OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
  0111f	50		 push	 eax
  01120	e8 00 00 00 00	 call	 ??$sprintf_s@$0EA@@@YAHAAY0EA@DPBDZZ ; sprintf_s<64>

; 908  :                                 stats->SetType(design);

  01125	8b 4d 9c	 mov	 ecx, DWORD PTR _stats$1$[ebp]
  01128	8d 45 a8	 lea	 eax, DWORD PTR _design$37[ebp]
  0112b	83 c4 10	 add	 esp, 16			; 00000010H
  0112e	50		 push	 eax
  0112f	e8 00 00 00 00	 call	 ?SetType@ShipStats@@QAEXPBD@Z ; ShipStats::SetType

; 909  :                                 stats->SetShipClass(ship->Class());

  01134	8b ce		 mov	 ecx, esi
  01136	e8 00 00 00 00	 call	 ?Class@Ship@@QBE?AW4CLASSIFICATION@1@XZ ; Ship::Class
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 141  :     void           SetShipClass(int c)     { ship_class = c;       }

  0113b	8b 55 9c	 mov	 edx, DWORD PTR _stats$1$[ebp]
  0113e	89 42 30	 mov	 DWORD PTR [edx+48], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 910  :                                 stats->SetRole(Mission::RoleName(msn_elem->MissionRole()));

  01141	8b 45 a4	 mov	 eax, DWORD PTR _msn_elem$1$[ebp]
  01144	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  01147	e8 00 00 00 00	 call	 ?RoleName@Mission@@SAPBDH@Z ; Mission::RoleName
  0114c	50		 push	 eax
  0114d	8b ca		 mov	 ecx, edx
  0114f	e8 00 00 00 00	 call	 ?SetRole@ShipStats@@QAEXPBD@Z ; ShipStats::SetRole
  01154	8b 06		 mov	 eax, DWORD PTR [esi]
  01156	8b 90 98 01 00
	00		 mov	 edx, DWORD PTR [eax+408]
  0115c	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  01161	75 08		 jne	 SHORT $LN156@CreateElem
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  01163	8b 8e 04 03 00
	00		 mov	 ecx, DWORD PTR [esi+772]
  01169	eb 06		 jmp	 SHORT $LN155@CreateElem
$LN156@CreateElem:
  0116b	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 911  :                                 stats->SetIFF(ship->GetIFF());

  0116d	ff d2		 call	 edx
  0116f	8b c8		 mov	 ecx, eax
$LN155@CreateElem:
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 142  :     void           SetIFF(int i)           { iff = i;              }

  01171	8b 45 9c	 mov	 eax, DWORD PTR _stats$1$[ebp]
  01174	89 48 34	 mov	 DWORD PTR [eax+52], ecx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 912  :                                 stats->SetRegion(msn_elem->Region());

  01177	8b 4d 84	 mov	 ecx, DWORD PTR tv2902[ebp]
  0117a	ff 31		 push	 DWORD PTR [ecx]
  0117c	8b c8		 mov	 ecx, eax
  0117e	e8 00 00 00 00	 call	 ?SetRegion@ShipStats@@QAEXPBD@Z ; ShipStats::SetRegion

; 913  :                                 stats->SetCombatGroup(msn_elem->GetCombatGroup());

  01183	8b 55 a4	 mov	 edx, DWORD PTR _msn_elem$1$[ebp]
  01186	8b 4d 9c	 mov	 ecx, DWORD PTR _stats$1$[ebp]
  01189	ff b2 c8 00 00
	00		 push	 DWORD PTR [edx+200]
  0118f	e8 00 00 00 00	 call	 ?SetCombatGroup@ShipStats@@QAEXPAVCombatGroup@@@Z ; ShipStats::SetCombatGroup

; 914  :                                 stats->SetCombatUnit(msn_elem->GetCombatUnit());

  01194	ff b2 cc 00 00
	00		 push	 DWORD PTR [edx+204]
  0119a	e8 00 00 00 00	 call	 ?SetCombatUnit@ShipStats@@QAEXPAVCombatUnit@@@Z ; ShipStats::SetCombatUnit

; 915  :                                 stats->SetPlayer(msn_elem->Player() == i+1);

  0119f	8b 45 94	 mov	 eax, DWORD PTR _i$1$[ebp]
  011a2	40		 inc	 eax
  011a3	39 42 5c	 cmp	 DWORD PTR [edx+92], eax
  011a6	0f 94 c0	 sete	 al
  011a9	0f b6 c0	 movzx	 eax, al
  011ac	50		 push	 eax
  011ad	e8 00 00 00 00	 call	 ?SetPlayer@ShipStats@@QAEX_N@Z ; ShipStats::SetPlayer

; 916  :                                 stats->SetElementIndex(ship->GetElementIndex());

  011b2	8b ce		 mov	 ecx, esi
  011b4	e8 00 00 00 00	 call	 ?GetElementIndex@Ship@@QBEHXZ ; Ship::GetElementIndex
  011b9	8b 4d 9c	 mov	 ecx, DWORD PTR _stats$1$[ebp]
  011bc	50		 push	 eax
  011bd	e8 00 00 00 00	 call	 ?SetElementIndex@ShipStats@@QAEXH@Z ; ShipStats::SetElementIndex
$LN113@CreateElem:

; 917  :                             }
; 918  :                         }
; 919  :                     }  // ship
; 920  :                 }     // count

  011c2	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _rgn_name$16[ebp]
  011c8	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  011cd	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _rnum$14[ebp]
  011d3	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  011d8	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _sname$22[ebp]
  011de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  011e5	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  011ea	8b 4d 94	 mov	 ecx, DWORD PTR _i$1$[ebp]
  011ed	8b 45 a4	 mov	 eax, DWORD PTR _msn_elem$1$[ebp]
  011f0	41		 inc	 ecx
  011f1	89 4d 94	 mov	 DWORD PTR _i$1$[ebp], ecx
  011f4	3b 48 38	 cmp	 ecx, DWORD PTR [eax+56]
  011f7	0f 8c 63 f7 ff
	ff		 jl	 $LL25@CreateElem
$LN744@CreateElem:
  011fd	8b 7d 90	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN24@CreateElem:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  01200	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _e_iter$[ebp]
  01206	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionElement@@@@QAEPAVMissionElement@@XZ ; ListIter<MissionElement>::next
  0120b	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 509  :     while (++e_iter) {

  0120d	0f 85 61 ee ff
	ff		 jne	 $LL2@CreateElem
$LN3@CreateElem:

; 921  :             }
; 922  :         }
; 923  :     }
; 924  : }

  01213	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01216	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0121d	59		 pop	 ecx
  0121e	5f		 pop	 edi
  0121f	5e		 pop	 esi
  01220	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01223	33 cd		 xor	 ecx, ebp
  01225	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0122a	8b e5		 mov	 esp, ebp
  0122c	5d		 pop	 ebp
  0122d	8b e3		 mov	 esp, ebx
  0122f	5b		 pop	 ebx
  01230	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateElements@Sim@@IAEXXZ$4:
  00000	68 78 02 00 00	 push	 632			; 00000278H
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR $T9[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
__unwindfunclet$?CreateElements@Sim@@IAEXXZ$5:
  0001a	68 8c 02 00 00	 push	 652			; 0000028cH
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  00024	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR $T15[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
  00033	c3		 ret	 0
__unwindfunclet$?CreateElements@Sim@@IAEXXZ$8:
  00034	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _sname$22[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CreateElements@Sim@@IAEXXZ$9:
  0003f	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _rnum$14[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CreateElements@Sim@@IAEXXZ$10:
  0004a	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _rgn_name$16[ebp]
  00050	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__ehhandler$?CreateElements@Sim@@IAEXXZ:
  00055	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00059	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005c	8b 8a 80 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-384]
  00062	33 c8		 xor	 ecx, eax
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0006c	33 c8		 xor	 ecx, eax
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateElements@Sim@@IAEXXZ
  00078	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateElements@Sim@@IAEXXZ ENDP			; Sim::CreateElements
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_iter$2 = -24						; size = 8
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CopyEvents@Sim@@IAEXXZ PROC				; Sim::CopyEvents
; _this$ = ecx

; 928  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CopyEvents@Sim@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 929  :     events.destroy();

  0002a	8d 9e a0 00 00
	00		 lea	 ebx, DWORD PTR [esi+160]
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?destroy@?$List@VMissionEvent@@@@QAEXXZ ; List<MissionEvent>::destroy

; 930  : 
; 931  :     if (mission) {

  00037	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
  0003d	85 c0		 test	 eax, eax
  0003f	0f 84 bd 01 00
	00		 je	 $LN3@CopyEvents
; File d:\programming\starshatter\trunk\stars45\mission.h

; 148  :     List<MissionEvent>&  GetEvents()           { return events;       }

  00045	05 f8 00 00 00	 add	 eax, 248		; 000000f8H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0004a	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _iter$2[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00051	8d 4d e8	 lea	 ecx, DWORD PTR _iter$2[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00054	89 45 e8	 mov	 DWORD PTR _iter$2[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00057	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionEvent@@@@QAEPAVMissionEvent@@XZ ; ListIter<MissionEvent>::next
  0005c	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 933  :         while (++iter) {

  0005e	0f 84 9e 01 00
	00		 je	 $LN3@CopyEvents
$LL2@CopyEvents:

; 934  :             MissionEvent* orig = iter.value();

  00064	8d 4d e8	 lea	 ecx, DWORD PTR _iter$2[ebp]
  00067	e8 00 00 00 00	 call	 ?value@?$ListIter@VMissionEvent@@@@QAEPAVMissionEvent@@XZ ; ListIter<MissionEvent>::value
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  0006c	68 48 01 00 00	 push	 328			; 00000148H
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 934  :             MissionEvent* orig = iter.value();

  00071	8b f8		 mov	 edi, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00073	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 935  :             MissionEvent* event = new(__FILE__,__LINE__) MissionEvent(*orig);

  00078	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  0007a	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 935  :             MissionEvent* event = new(__FILE__,__LINE__) MissionEvent(*orig);

  0007d	89 75 f0	 mov	 DWORD PTR $T3[ebp], esi
  00080	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00087	85 f6		 test	 esi, esi
  00089	0f 84 52 01 00
	00		 je	 $LN6@CopyEvents
  0008f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7MissionEvent@@6B@
  00095	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00098	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0009b	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0009e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000a1	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000a4	f2 0f 10 47 10	 movsd	 xmm0, QWORD PTR [edi+16]
  000a9	f2 0f 11 46 10	 movsd	 QWORD PTR [esi+16], xmm0
  000ae	f2 0f 10 47 18	 movsd	 xmm0, QWORD PTR [edi+24]
  000b3	f2 0f 11 46 18	 movsd	 QWORD PTR [esi+24], xmm0
  000b8	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000bb	89 46 20	 mov	 DWORD PTR [esi+32], eax
  000be	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  000c7	8d 47 2c	 lea	 eax, DWORD PTR [edi+44]
  000ca	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ce	50		 push	 eax
  000cf	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  000d2	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  000d7	8d 47 34	 lea	 eax, DWORD PTR [edi+52]
  000da	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000de	50		 push	 eax
  000df	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  000e2	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  000e7	8d 47 3c	 lea	 eax, DWORD PTR [edi+60]
  000ea	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000ee	50		 push	 eax
  000ef	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  000f2	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  000f7	8d 47 44	 lea	 eax, DWORD PTR [edi+68]
  000fa	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000fe	50		 push	 eax
  000ff	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00102	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  00107	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0010b	8d 8e 9c 00 00
	00		 lea	 ecx, DWORD PTR [esi+156]
  00111	0f 10 47 4c	 movups	 xmm0, XMMWORD PTR [edi+76]
  00115	0f 11 46 4c	 movups	 XMMWORD PTR [esi+76], xmm0
  00119	0f 10 47 5c	 movups	 xmm0, XMMWORD PTR [edi+92]
  0011d	0f 11 46 5c	 movups	 XMMWORD PTR [esi+92], xmm0
  00121	f3 0f 7e 47 6c	 movq	 xmm0, QWORD PTR [edi+108]
  00126	66 0f d6 46 6c	 movq	 QWORD PTR [esi+108], xmm0
  0012b	8b 47 74	 mov	 eax, DWORD PTR [edi+116]
  0012e	89 46 74	 mov	 DWORD PTR [esi+116], eax
  00131	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00134	89 46 78	 mov	 DWORD PTR [esi+120], eax
  00137	f3 0f 7e 47 7c	 movq	 xmm0, QWORD PTR [edi+124]
  0013c	66 0f d6 46 7c	 movq	 QWORD PTR [esi+124], xmm0
  00141	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  00147	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  0014d	0f 10 87 88 00
	00 00		 movups	 xmm0, XMMWORD PTR [edi+136]
  00154	0f 11 86 88 00
	00 00		 movups	 XMMWORD PTR [esi+136], xmm0
  0015b	8b 87 98 00 00
	00		 mov	 eax, DWORD PTR [edi+152]
  00161	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
  00167	8d 87 9c 00 00
	00		 lea	 eax, DWORD PTR [edi+156]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  00173	8d 87 a4 00 00
	00		 lea	 eax, DWORD PTR [edi+164]
  00179	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0017d	50		 push	 eax
  0017e	8d 8e a4 00 00
	00		 lea	 ecx, DWORD PTR [esi+164]
  00184	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  00189	0f 10 87 ac 00
	00 00		 movups	 xmm0, XMMWORD PTR [edi+172]
  00190	8d 8e d8 00 00
	00		 lea	 ecx, DWORD PTR [esi+216]
  00196	0f 11 86 ac 00
	00 00		 movups	 XMMWORD PTR [esi+172], xmm0
  0019d	0f 10 87 bc 00
	00 00		 movups	 xmm0, XMMWORD PTR [edi+188]
  001a4	0f 11 86 bc 00
	00 00		 movups	 XMMWORD PTR [esi+188], xmm0
  001ab	f3 0f 7e 87 cc
	00 00 00	 movq	 xmm0, QWORD PTR [edi+204]
  001b3	66 0f d6 86 cc
	00 00 00	 movq	 QWORD PTR [esi+204], xmm0
  001bb	8b 87 d4 00 00
	00		 mov	 eax, DWORD PTR [edi+212]
  001c1	89 86 d4 00 00
	00		 mov	 DWORD PTR [esi+212], eax
  001c7	8d 87 d8 00 00
	00		 lea	 eax, DWORD PTR [edi+216]
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@ABV0@@Z
  001d3	8b 87 40 01 00
	00		 mov	 eax, DWORD PTR [edi+320]
  001d9	89 86 40 01 00
	00		 mov	 DWORD PTR [esi+320], eax
  001df	eb 02		 jmp	 SHORT $LN7@CopyEvents
$LN6@CopyEvents:
  001e1	33 f6		 xor	 esi, esi
$LN7@CopyEvents:

; 936  :             events.append(event);

  001e3	56		 push	 esi
  001e4	8b cb		 mov	 ecx, ebx
  001e6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001ed	e8 00 00 00 00	 call	 ?append@?$List@VMissionEvent@@@@QAEXPBVMissionEvent@@@Z ; List<MissionEvent>::append
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  001f2	8d 4d e8	 lea	 ecx, DWORD PTR _iter$2[ebp]
  001f5	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionEvent@@@@QAEPAVMissionEvent@@XZ ; ListIter<MissionEvent>::next
  001fa	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 933  :         while (++iter) {

  001fc	0f 85 62 fe ff
	ff		 jne	 $LL2@CopyEvents
$LN3@CopyEvents:

; 937  :         }
; 938  :     }
; 939  : }

  00202	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00205	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0020c	59		 pop	 ecx
  0020d	5f		 pop	 edi
  0020e	5e		 pop	 esi
  0020f	5b		 pop	 ebx
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$0:
  00000	68 a7 03 00 00	 push	 935			; 000003a7H
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$1:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  0001a	83 c1 24	 add	 ecx, 36			; 00000024H
  0001d	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$2:
  00022	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  00025	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00028	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$3:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  00030	83 c1 34	 add	 ecx, 52			; 00000034H
  00033	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$4:
  00038	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  0003b	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0003e	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$5:
  00043	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  00046	83 c1 44	 add	 ecx, 68			; 00000044H
  00049	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CopyEvents@Sim@@IAEXXZ$6:
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  00051	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  00057	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__ehhandler$?CopyEvents@Sim@@IAEXXZ:
  0005c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00060	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00063	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00066	33 c8		 xor	 ecx, eax
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CopyEvents@Sim@@IAEXXZ
  00072	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CopyEvents@Sim@@IAEXXZ ENDP				; Sim::CopyEvents
; Function compile flags: /Ogtp
;	COMDAT ??0MissionEvent@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MissionEvent@@QAE@ABV0@@Z PROC			; MissionEvent::MissionEvent, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0MissionEvent@@QAE@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  00030	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7MissionEvent@@6B@
  00036	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00039	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0003c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0003f	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00042	f2 0f 10 46 10	 movsd	 xmm0, QWORD PTR [esi+16]
  00047	f2 0f 11 47 10	 movsd	 QWORD PTR [edi+16], xmm0
  0004c	f2 0f 10 46 18	 movsd	 xmm0, QWORD PTR [esi+24]
  00051	f2 0f 11 47 18	 movsd	 QWORD PTR [edi+24], xmm0
  00056	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00059	89 47 20	 mov	 DWORD PTR [edi+32], eax
  0005c	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  00065	8d 46 2c	 lea	 eax, DWORD PTR [esi+44]
  00068	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006f	50		 push	 eax
  00070	8d 4f 2c	 lea	 ecx, DWORD PTR [edi+44]
  00073	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  00078	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
  0007b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0007f	50		 push	 eax
  00080	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
  00083	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  00088	8d 46 3c	 lea	 eax, DWORD PTR [esi+60]
  0008b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0008f	50		 push	 eax
  00090	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00093	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  00098	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
  0009b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0009f	50		 push	 eax
  000a0	8d 4f 44	 lea	 ecx, DWORD PTR [edi+68]
  000a3	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  000a8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000ac	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  000b2	0f 10 46 4c	 movups	 xmm0, XMMWORD PTR [esi+76]
  000b6	0f 11 47 4c	 movups	 XMMWORD PTR [edi+76], xmm0
  000ba	0f 10 46 5c	 movups	 xmm0, XMMWORD PTR [esi+92]
  000be	0f 11 47 5c	 movups	 XMMWORD PTR [edi+92], xmm0
  000c2	f3 0f 7e 46 6c	 movq	 xmm0, QWORD PTR [esi+108]
  000c7	66 0f d6 47 6c	 movq	 QWORD PTR [edi+108], xmm0
  000cc	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  000cf	89 47 74	 mov	 DWORD PTR [edi+116], eax
  000d2	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  000d5	89 47 78	 mov	 DWORD PTR [edi+120], eax
  000d8	f3 0f 7e 46 7c	 movq	 xmm0, QWORD PTR [esi+124]
  000dd	66 0f d6 47 7c	 movq	 QWORD PTR [edi+124], xmm0
  000e2	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  000e8	89 87 84 00 00
	00		 mov	 DWORD PTR [edi+132], eax
  000ee	0f 10 86 88 00
	00 00		 movups	 xmm0, XMMWORD PTR [esi+136]
  000f5	0f 11 87 88 00
	00 00		 movups	 XMMWORD PTR [edi+136], xmm0
  000fc	8b 86 98 00 00
	00		 mov	 eax, DWORD PTR [esi+152]
  00102	89 87 98 00 00
	00		 mov	 DWORD PTR [edi+152], eax
  00108	8d 86 9c 00 00
	00		 lea	 eax, DWORD PTR [esi+156]
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  00114	8d 86 a4 00 00
	00		 lea	 eax, DWORD PTR [esi+164]
  0011a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0011e	50		 push	 eax
  0011f	8d 8f a4 00 00
	00		 lea	 ecx, DWORD PTR [edi+164]
  00125	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
  0012a	0f 10 86 ac 00
	00 00		 movups	 xmm0, XMMWORD PTR [esi+172]
  00131	8d 8f d8 00 00
	00		 lea	 ecx, DWORD PTR [edi+216]
  00137	0f 11 87 ac 00
	00 00		 movups	 XMMWORD PTR [edi+172], xmm0
  0013e	0f 10 86 bc 00
	00 00		 movups	 xmm0, XMMWORD PTR [esi+188]
  00145	0f 11 87 bc 00
	00 00		 movups	 XMMWORD PTR [edi+188], xmm0
  0014c	f3 0f 7e 86 cc
	00 00 00	 movq	 xmm0, QWORD PTR [esi+204]
  00154	66 0f d6 87 cc
	00 00 00	 movq	 QWORD PTR [edi+204], xmm0
  0015c	8b 86 d4 00 00
	00		 mov	 eax, DWORD PTR [esi+212]
  00162	89 87 d4 00 00
	00		 mov	 DWORD PTR [edi+212], eax
  00168	8d 86 d8 00 00
	00		 lea	 eax, DWORD PTR [esi+216]
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@ABV0@@Z
  00174	8b 86 40 01 00
	00		 mov	 eax, DWORD PTR [esi+320]
  0017a	89 87 40 01 00
	00		 mov	 DWORD PTR [edi+320], eax
  00180	8b c7		 mov	 eax, edi
  00182	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00185	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018c	59		 pop	 ecx
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	8b e5		 mov	 esp, ebp
  00191	5d		 pop	 ebp
  00192	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MissionEvent@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 24	 add	 ecx, 36			; 00000024H
  00006	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$??0MissionEvent@@QAE@ABV0@@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00011	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$??0MissionEvent@@QAE@ABV0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 34	 add	 ecx, 52			; 00000034H
  0001c	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$??0MissionEvent@@QAE@ABV0@@Z$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00027	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$??0MissionEvent@@QAE@ABV0@@Z$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 44	 add	 ecx, 68			; 00000044H
  00032	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$??0MissionEvent@@QAE@ABV0@@Z$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  00040	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__ehhandler$??0MissionEvent@@QAE@ABV0@@Z:
  00045	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00049	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004c	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0MissionEvent@@QAE@ABV0@@Z
  0005b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0MissionEvent@@QAE@ABV0@@Z ENDP			; MissionEvent::MissionEvent
; Function compile flags: /Ogtp
;	COMDAT ??0Bitmap@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Bitmap@@QAE@ABV0@@Z PROC				; Bitmap::Bitmap, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Resource@@6B@
  0000c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00012	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Bitmap@@6B@
  00018	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0001e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00021	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00024	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00027	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0002a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0002d	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00030	0f b6 42 18	 movzx	 eax, BYTE PTR [edx+24]
  00034	88 41 18	 mov	 BYTE PTR [ecx+24], al
  00037	0f b6 42 19	 movzx	 eax, BYTE PTR [edx+25]
  0003b	88 41 19	 mov	 BYTE PTR [ecx+25], al
  0003e	0f b6 42 1a	 movzx	 eax, BYTE PTR [edx+26]
  00042	88 41 1a	 mov	 BYTE PTR [ecx+26], al
  00045	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00048	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  0004b	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0004e	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00051	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00054	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00057	8b c1		 mov	 eax, ecx
  00059	0f 10 42 28	 movups	 xmm0, XMMWORD PTR [edx+40]
  0005d	0f 11 41 28	 movups	 XMMWORD PTR [ecx+40], xmm0
  00061	0f 10 42 38	 movups	 xmm0, XMMWORD PTR [edx+56]
  00065	0f 11 41 38	 movups	 XMMWORD PTR [ecx+56], xmm0
  00069	0f 10 42 48	 movups	 xmm0, XMMWORD PTR [edx+72]
  0006d	0f 11 41 48	 movups	 XMMWORD PTR [ecx+72], xmm0
  00071	0f 10 42 58	 movups	 xmm0, XMMWORD PTR [edx+88]
  00075	0f 11 41 58	 movups	 XMMWORD PTR [ecx+88], xmm0
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
??0Bitmap@@QAE@ABV0@@Z ENDP				; Bitmap::Bitmap
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GBitmap@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GBitmap@@UAEPAXI@Z PROC				; Bitmap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1Bitmap@@UAE@XZ	; Bitmap::~Bitmap
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 68		 push	 104			; 00000068H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GBitmap@@UAEPAXI@Z ENDP				; Bitmap::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0Resource@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Resource@@QAE@ABV0@@Z PROC				; Resource::Resource, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Resource@@6B@
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0Resource@@QAE@ABV0@@Z ENDP				; Resource::Resource
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GResource@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GResource@@UAEPAXI@Z PROC				; Resource::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1Resource@@UAE@XZ	; Resource::~Resource
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 08		 push	 8
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GResource@@UAEPAXI@Z ENDP				; Resource::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_rgn$ = -8						; size = 8
_objid$ = 8						; size = 4
?FindShipByObjID@Sim@@UAEPAVShip@@K@Z PROC		; Sim::FindShipByObjID
; _this$ = ecx

; 1077 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi

; 1079 : 
; 1080 :     ListIter<SimRegion> rgn = regions;

  0000a	8d 41 58	 lea	 eax, DWORD PTR [ecx+88]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0000d	c7 44 24 08 ff
	ff ff ff	 mov	 DWORD PTR _rgn$[esp+16], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1077 : {

  00015	57		 push	 edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00016	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0001a	89 44 24 08	 mov	 DWORD PTR _rgn$[esp+16], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1078 :     Ship* ship = 0;

  0001e	33 f6		 xor	 esi, esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00020	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00025	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1081 :     while (++rgn && !ship)

  00027	74 2b		 je	 SHORT $LN17@FindShipBy
  00029	8b 7d 08	 mov	 edi, DWORD PTR _objid$[ebp]
  0002c	0f 1f 40 00	 npad	 4
$LL2@FindShipBy:
  00030	85 f6		 test	 esi, esi
  00032	75 20		 jne	 SHORT $LN17@FindShipBy
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00034	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$[esp+16]
  00038	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
  0003d	8b c8		 mov	 ecx, eax
  0003f	57		 push	 edi
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1082 :     ship = rgn->FindShipByObjID(objid);

  00042	ff 50 10	 call	 DWORD PTR [eax+16]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00045	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$[esp+16]
  00049	8b f0		 mov	 esi, eax
  0004b	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00050	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1081 :     while (++rgn && !ship)

  00052	75 dc		 jne	 SHORT $LL2@FindShipBy
$LN17@FindShipBy:

; 1083 : 
; 1084 :     return ship;
; 1085 : }

  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?FindShipByObjID@Sim@@UAEPAVShip@@K@Z ENDP		; Sim::FindShipByObjID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_rgn$ = -8						; size = 8
_objid$ = 8						; size = 4
?FindShotByObjID@Sim@@UAEPAVShot@@K@Z PROC		; Sim::FindShotByObjID
; _this$ = ecx

; 1089 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi

; 1091 : 
; 1092 :     ListIter<SimRegion> rgn = regions;

  0000a	8d 41 58	 lea	 eax, DWORD PTR [ecx+88]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0000d	c7 44 24 08 ff
	ff ff ff	 mov	 DWORD PTR _rgn$[esp+16], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1089 : {

  00015	57		 push	 edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00016	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0001a	89 44 24 08	 mov	 DWORD PTR _rgn$[esp+16], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1090 :     Shot* shot = 0;

  0001e	33 f6		 xor	 esi, esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00020	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00025	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1093 :     while (++rgn && !shot)

  00027	74 2b		 je	 SHORT $LN17@FindShotBy
  00029	8b 7d 08	 mov	 edi, DWORD PTR _objid$[ebp]
  0002c	0f 1f 40 00	 npad	 4
$LL2@FindShotBy:
  00030	85 f6		 test	 esi, esi
  00032	75 20		 jne	 SHORT $LN17@FindShotBy
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00034	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$[esp+16]
  00038	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
  0003d	8b c8		 mov	 ecx, eax
  0003f	57		 push	 edi
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1094 :     shot = rgn->FindShotByObjID(objid);

  00042	ff 50 14	 call	 DWORD PTR [eax+20]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00045	8d 4c 24 08	 lea	 ecx, DWORD PTR _rgn$[esp+16]
  00049	8b f0		 mov	 esi, eax
  0004b	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00050	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1093 :     while (++rgn && !shot)

  00052	75 dc		 jne	 SHORT $LL2@FindShotBy
$LN17@FindShotBy:

; 1095 : 
; 1096 :     return shot;
; 1097 : }

  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?FindShotByObjID@Sim@@UAEPAVShot@@K@Z ENDP		; Sim::FindShotByObjID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -32						; size = 12
$T3 = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pos$ = 8						; size = 4
_t$ = 12						; size = 4
_rgn$ = 16						; size = 4
_mass$ = 20						; size = 8
?CreateAsteroid@Sim@@QAEPAVAsteroid@@ABUPoint@@HNPAVSimRegion@@@Z PROC ; Sim::CreateAsteroid
; _this$ = ecx

; 1179 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateAsteroid@Sim@@QAEPAVAsteroid@@ABUPoint@@HNPAVSimRegion@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00029	68 e0 01 00 00	 push	 480			; 000001e0H
  0002e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00033	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1180 :     Asteroid* asteroid = new(__FILE__,__LINE__) Asteroid(t, pos, mass);

  00036	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	85 c0		 test	 eax, eax
  00042	74 43		 je	 SHORT $LN6@CreateAste
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00044	8b 4d 08	 mov	 ecx, DWORD PTR _pos$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1180 :     Asteroid* asteroid = new(__FILE__,__LINE__) Asteroid(t, pos, mass);

  00047	f2 0f 10 5d 14	 movsd	 xmm3, QWORD PTR _mass$[ebp]
  0004c	f2 0f 10 11	 movsd	 xmm2, QWORD PTR [ecx]
  00050	f2 0f 10 49 08	 movsd	 xmm1, QWORD PTR [ecx+8]
  00055	f2 0f 10 41 10	 movsd	 xmm0, QWORD PTR [ecx+16]
  0005a	8d 4d e0	 lea	 ecx, DWORD PTR $T2[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  0005d	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1180 :     Asteroid* asteroid = new(__FILE__,__LINE__) Asteroid(t, pos, mass);

  00061	51		 push	 ecx
  00062	8b c8		 mov	 ecx, eax
  00064	ff 75 0c	 push	 DWORD PTR _t$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00067	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0006b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0006f	f3 0f 11 55 e0	 movss	 DWORD PTR $T2[ebp], xmm2
  00074	f3 0f 11 4d e4	 movss	 DWORD PTR $T2[ebp+4], xmm1
  00079	f3 0f 11 45 e8	 movss	 DWORD PTR $T2[ebp+8], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1180 :     Asteroid* asteroid = new(__FILE__,__LINE__) Asteroid(t, pos, mass);

  0007e	e8 00 00 00 00	 call	 ??0Asteroid@@QAE@HABUVec3@@N@Z ; Asteroid::Asteroid
  00083	8b f0		 mov	 esi, eax
  00085	eb 02		 jmp	 SHORT $LN7@CreateAste
$LN6@CreateAste:
  00087	33 f6		 xor	 esi, esi
$LN7@CreateAste:

; 1181 : 
; 1182 :     if (rgn)

  00089	8b 4d 10	 mov	 ecx, DWORD PTR _rgn$[ebp]
  0008c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00093	85 c9		 test	 ecx, ecx
  00095	75 07		 jne	 SHORT $LN21@CreateAste

; 1183 :     rgn->InsertObject(asteroid);
; 1184 : 
; 1185 :     else if (active_region)

  00097	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0009a	85 c9		 test	 ecx, ecx
  0009c	74 06		 je	 SHORT $LN19@CreateAste
$LN21@CreateAste:

; 1186 :     active_region->InsertObject(asteroid);

  0009e	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a0	56		 push	 esi
  000a1	ff 50 18	 call	 DWORD PTR [eax+24]
$LN19@CreateAste:

; 1187 : 
; 1188 :     return asteroid;

  000a4	8b c6		 mov	 eax, esi

; 1189 : }

  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateAsteroid@Sim@@QAEPAVAsteroid@@ABUPoint@@HNPAVSimRegion@@@Z$0:
  00000	68 9c 04 00 00	 push	 1180			; 0000049cH
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__ehhandler$?CreateAsteroid@Sim@@QAEPAVAsteroid@@ABUPoint@@HNPAVSimRegion@@@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateAsteroid@Sim@@QAEPAVAsteroid@@ABUPoint@@HNPAVSimRegion@@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateAsteroid@Sim@@QAEPAVAsteroid@@ABUPoint@@HNPAVSimRegion@@@Z ENDP ; Sim::CreateAsteroid
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\shot.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\shot.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\shot.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -108						; size = 24
$T3 = -84						; size = 24
_n$1$ = -60						; size = 8
$T4 = -52						; size = 8
$T5 = -44						; size = 8
$T6 = -36						; size = 8
_damage$1$ = -28					; size = 8
_this$1$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
$T7 = 8							; size = 4
_shot$ = 8						; size = 4
?CreateSplashDamage@Sim@@QAEXPAVShot@@@Z PROC		; Sim::CreateSplashDamage
; _this$ = ecx

; 1212 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateSplashDamage@Sim@@QAEXPAVShot@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 1213 :     if (shot && shot->GetRegion()) {

  0002d	8b 75 08	 mov	 esi, DWORD PTR _shot$[ebp]
  00030	85 f6		 test	 esi, esi
  00032	0f 84 b8 01 00
	00		 je	 $LN2@CreateSpla
  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00040	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  00045	75 08		 jne	 SHORT $LN9@CreateSpla
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00047	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  0004d	eb 04		 jmp	 SHORT $LN8@CreateSpla
$LN9@CreateSpla:
  0004f	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1213 :     if (shot && shot->GetRegion()) {

  00051	ff d0		 call	 eax
$LN8@CreateSpla:
  00053	85 c0		 test	 eax, eax
  00055	0f 84 95 01 00
	00		 je	 $LN2@CreateSpla

; 1214 :         double damage = shot->Damage();

  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?Damage@Shot@@QBENXZ	; Shot::Damage
; File d:\programming\starshatter\trunk\stars45\shot.h

; 111  :     const WeaponDesign* Design()     const { return design;     }

  00062	8b 86 20 02 00
	00		 mov	 eax, DWORD PTR [esi+544]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1214 :         double damage = shot->Damage();

  00068	f2 0f 11 45 e4	 movsd	 QWORD PTR _damage$1$[ebp], xmm0
  0006d	f3 0f 10 88 60
	01 00 00	 movss	 xmm1, DWORD PTR [eax+352]

; 1215 :         if (damage < shot->Design()->damage)

  00075	0f 5a c9	 cvtps2pd xmm1, xmm1
  00078	66 0f 2f c8	 comisd	 xmm1, xmm0
  0007c	76 10		 jbe	 SHORT $LN3@CreateSpla

; 1216 :         damage = shot->Design()->damage;

  0007e	f3 0f 10 80 60
	01 00 00	 movss	 xmm0, DWORD PTR [eax+352]
  00086	0f 5a c0	 cvtps2pd xmm0, xmm0
  00089	f2 0f 11 45 e4	 movsd	 QWORD PTR _damage$1$[ebp], xmm0
$LN3@CreateSpla:
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  0008e	6a 38		 push	 56			; 00000038H
  00090	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1219 :         SimSplash(shot->GetRegion(),

  00095	8b f8		 mov	 edi, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00097	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1219 :         SimSplash(shot->GetRegion(),

  0009a	89 7d 08	 mov	 DWORD PTR $T7[ebp], edi
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a4	85 ff		 test	 edi, edi
  000a6	0f 84 9b 00 00
	00		 je	 $LN6@CreateSpla
  000ac	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ae	8b 81 90 00 00
	00		 mov	 eax, DWORD PTR [ecx+144]
  000b4	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  000b9	75 08		 jne	 SHORT $LN11@CreateSpla
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  000bb	8b 9e c8 01 00
	00		 mov	 ebx, DWORD PTR [esi+456]
  000c1	eb 06		 jmp	 SHORT $LN10@CreateSpla
$LN11@CreateSpla:
  000c3	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1219 :         SimSplash(shot->GetRegion(),

  000c5	ff d0		 call	 eax
  000c7	8b d8		 mov	 ebx, eax
$LN10@CreateSpla:
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  000c9	f2 0f 10 46 48	 movsd	 xmm0, QWORD PTR [esi+72]
; File d:\programming\starshatter\trunk\stars45\shot.h

; 111  :     const WeaponDesign* Design()     const { return design;     }

  000ce	8b 8e 20 02 00
	00		 mov	 ecx, DWORD PTR [esi+544]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  000d4	f2 0f 11 45 dc	 movsd	 QWORD PTR $T6[ebp], xmm0
  000d9	f2 0f 10 46 50	 movsd	 xmm0, QWORD PTR [esi+80]
  000de	f2 0f 11 45 d4	 movsd	 QWORD PTR $T5[ebp], xmm0
  000e3	f2 0f 10 46 58	 movsd	 xmm0, QWORD PTR [esi+88]
  000e8	f2 0f 11 45 cc	 movsd	 QWORD PTR $T4[ebp], xmm0
  000ed	f3 0f 10 81 98
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+408]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 132  :     owner_name("Collateral Damage"), missile(false) { }

  000f5	8b cf		 mov	 ecx, edi

; 1219 :         SimSplash(shot->GetRegion(),

  000f7	0f 5a c0	 cvtps2pd xmm0, xmm0

; 132  :     owner_name("Collateral Damage"), missile(false) { }

  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CAMCFAKE@Collateral?5Damage?$AA@

; 1219 :         SimSplash(shot->GetRegion(),

  000ff	f2 0f 11 45 c4	 movsd	 QWORD PTR _n$1$[ebp], xmm0

; 132  :     owner_name("Collateral Damage"), missile(false) { }

  00104	e8 00 00 00 00	 call	 ??0Text@@QAE@PBD@Z	; Text::Text
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00109	f2 0f 10 45 dc	 movsd	 xmm0, QWORD PTR $T6[ebp]
  0010e	f2 0f 11 47 08	 movsd	 QWORD PTR [edi+8], xmm0
  00113	f2 0f 10 45 d4	 movsd	 xmm0, QWORD PTR $T5[ebp]
  00118	f2 0f 11 47 10	 movsd	 QWORD PTR [edi+16], xmm0
  0011d	f2 0f 10 45 cc	 movsd	 xmm0, QWORD PTR $T4[ebp]
  00122	f2 0f 11 47 18	 movsd	 QWORD PTR [edi+24], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 131  :     : rgn(r), loc(l), damage(d), range(n),

  00127	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _damage$1$[ebp]
  0012c	f2 0f 11 47 20	 movsd	 QWORD PTR [edi+32], xmm0
  00131	f2 0f 10 45 c4	 movsd	 xmm0, QWORD PTR _n$1$[ebp]
  00136	89 5f 30	 mov	 DWORD PTR [edi+48], ebx

; 1219 :         SimSplash(shot->GetRegion(),

  00139	8b 5d ec	 mov	 ebx, DWORD PTR _this$1$[ebp]

; 131  :     : rgn(r), loc(l), damage(d), range(n),

  0013c	f2 0f 11 47 28	 movsd	 QWORD PTR [edi+40], xmm0

; 132  :     owner_name("Collateral Damage"), missile(false) { }

  00141	c6 47 34 00	 mov	 BYTE PTR [edi+52], 0

; 1219 :         SimSplash(shot->GetRegion(),

  00145	eb 02		 jmp	 SHORT $LN7@CreateSpla
$LN6@CreateSpla:
  00147	33 ff		 xor	 edi, edi
$LN7@CreateSpla:
  00149	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 1220 :         shot->Location(),
; 1221 :         damage,
; 1222 :         shot->Design()->lethal_radius);
; 1223 : 
; 1224 :         if (shot->Owner())

  00150	8b 86 f0 01 00
	00		 mov	 eax, DWORD PTR [esi+496]
  00156	85 c0		 test	 eax, eax
  00158	74 0b		 je	 SHORT $LN4@CreateSpla
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  0015a	83 c0 10	 add	 eax, 16			; 00000010H
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1225 :         splash->owner_name = shot->Owner()->Name();

  0015d	8b cf		 mov	 ecx, edi
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
$LN4@CreateSpla:
  00165	8b 06		 mov	 eax, DWORD PTR [esi]
  00167	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [eax+208]
  0016d	3d 00 00 00 00	 cmp	 eax, OFFSET ?IsMissile@Shot@@UBE_NXZ ; Shot::IsMissile
  00172	75 0c		 jne	 SHORT $LN13@CreateSpla
; File d:\programming\starshatter\trunk\stars45\shot.h

; 85   :     virtual bool      IsMissile()    const { return !primary;   }

  00174	80 be 0c 02 00
	00 00		 cmp	 BYTE PTR [esi+524], 0
  0017b	0f 94 c0	 sete	 al
  0017e	eb 04		 jmp	 SHORT $LN12@CreateSpla
$LN13@CreateSpla:
  00180	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1227 :         splash->missile = shot->IsMissile();

  00182	ff d0		 call	 eax
$LN12@CreateSpla:

; 1228 : 
; 1229 :         splashlist.append(splash);

  00184	57		 push	 edi
  00185	8d 4b 7c	 lea	 ecx, DWORD PTR [ebx+124]
  00188	88 47 34	 mov	 BYTE PTR [edi+52], al
  0018b	e8 00 00 00 00	 call	 ?append@?$List@VSimSplash@@@@QAEXPBVSimSplash@@@Z ; List<SimSplash>::append
  00190	8b 06		 mov	 eax, DWORD PTR [esi]
  00192	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00198	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  0019d	75 08		 jne	 SHORT $LN15@CreateSpla
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0019f	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  001a5	eb 04		 jmp	 SHORT $LN14@CreateSpla
$LN15@CreateSpla:
  001a7	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1230 :         CreateExplosion(shot->Location(), Point(), Explosion::SHOT_BLAST, 20.0f, 1.0f, shot->GetRegion());

  001a9	ff d0		 call	 eax
$LN14@CreateSpla:
  001ab	51		 push	 ecx
  001ac	6a 00		 push	 0
  001ae	50		 push	 eax
  001af	83 ec 08	 sub	 esp, 8
  001b2	8d 45 94	 lea	 eax, DWORD PTR $T2[ebp]
  001b5	0f 57 c0	 xorps	 xmm0, xmm0
  001b8	8b cb		 mov	 ecx, ebx
  001ba	0f 11 45 94	 movups	 XMMWORD PTR $T2[ebp], xmm0
  001be	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 217  :     Point()                                : x(0),   y(0),   z(0)    { }

  001c6	f2 0f 11 45 a4	 movsd	 QWORD PTR $T2[ebp+16], xmm0

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  001cb	0f 10 46 48	 movups	 xmm0, XMMWORD PTR [esi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1230 :         CreateExplosion(shot->Location(), Point(), Explosion::SHOT_BLAST, 20.0f, 1.0f, shot->GetRegion());

  001cf	c7 04 24 00 00
	a0 41		 mov	 DWORD PTR [esp], 1101004800 ; 41a00000H
  001d6	6a 04		 push	 4
  001d8	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  001d9	0f 11 45 ac	 movups	 XMMWORD PTR $T3[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1230 :         CreateExplosion(shot->Location(), Point(), Explosion::SHOT_BLAST, 20.0f, 1.0f, shot->GetRegion());

  001dd	8d 45 ac	 lea	 eax, DWORD PTR $T3[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  001e0	f2 0f 10 46 58	 movsd	 xmm0, QWORD PTR [esi+88]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1230 :         CreateExplosion(shot->Location(), Point(), Explosion::SHOT_BLAST, 20.0f, 1.0f, shot->GetRegion());

  001e5	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  001e6	f2 0f 11 45 bc	 movsd	 QWORD PTR $T3[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1230 :         CreateExplosion(shot->Location(), Point(), Explosion::SHOT_BLAST, 20.0f, 1.0f, shot->GetRegion());

  001eb	e8 00 00 00 00	 call	 ?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z ; Sim::CreateExplosion
$LN2@CreateSpla:

; 1231 :     }
; 1232 : }

  001f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001fa	59		 pop	 ecx
  001fb	5f		 pop	 edi
  001fc	5e		 pop	 esi
  001fd	5b		 pop	 ebx
  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateSplashDamage@Sim@@QAEXPAVShot@@@Z$0:
  00000	68 c2 04 00 00	 push	 1218			; 000004c2H
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 45 08	 mov	 eax, DWORD PTR $T7[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__ehhandler$?CreateSplashDamage@Sim@@QAEXPAVShot@@@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateSplashDamage@Sim@@QAEXPAVShot@@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateSplashDamage@Sim@@QAEXPAVShot@@@Z ENDP		; Sim::CreateSplashDamage
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
?GridShown@Sim@@QBE_NXZ PROC				; Sim::GridShown
; _this$ = ecx

; 1257 :     return grid_shown;

  00000	8a 81 bd 00 00
	00		 mov	 al, BYTE PTR [ecx+189]

; 1258 : }

  00006	c3		 ret	 0
?GridShown@Sim@@QBE_NXZ ENDP				; Sim::GridShown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??__Fdummy_system_list@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@YAXXZ
text$yd	SEGMENT
??__Fdummy_system_list@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@YAXXZ PROC ; `Sim::GetSystemList'::`2'::`dynamic atexit destructor for 'dummy_system_list'', COMDAT

; 54   :    ~List()  { delete [] array; }

  00000	ff 35 08 00 00
	00		 push	 DWORD PTR ?dummy_system_list@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@4V3@A+8
  00006	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
??__Fdummy_system_list@?1??GetSystemList@Sim@@QAEAAV?$List@VStarSystem@@@@XZ@YAXXZ ENDP ; `Sim::GetSystemList'::`2'::`dynamic atexit destructor for 'dummy_system_list''
text$yd	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
?NextView@Sim@@QAEXXZ PROC				; Sim::NextView
; _this$ = ecx

; 1277 :     if (active_region)

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	0f 85 00 00 00
	00		 jne	 ?NextView@SimRegion@@QAEXXZ ; SimRegion::NextView

; 1278 :     active_region->NextView();
; 1279 : }

  0000b	c3		 ret	 0
?NextView@Sim@@QAEXXZ ENDP				; Sim::NextView
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_s$ = 8							; size = 4
?IsSelected@Sim@@QAE_NPAVShip@@@Z PROC			; Sim::IsSelected
; _this$ = ecx

; 1319 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1320 :     if (active_region)

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@IsSelected

; 1324 : }

  0000a	5d		 pop	 ebp

; 1321 :     return active_region->IsSelected(s);

  0000b	e9 00 00 00 00	 jmp	 ?IsSelected@SimRegion@@QAE_NPAVShip@@@Z ; SimRegion::IsSelected
$LN2@IsSelected:

; 1322 : 
; 1323 :     return false;

  00010	32 c0		 xor	 al, al

; 1324 : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?IsSelected@Sim@@QAE_NPAVShip@@@Z ENDP			; Sim::IsSelected
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ PROC	; Sim::GetSelection
; _this$ = ecx

; 1328 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1329 :     if (active_region)

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN3@GetSelecti

; 1330 :     return active_region->GetSelection();

  0000a	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0000d	52		 push	 edx
  0000e	e8 00 00 00 00	 call	 ?GetSelection@SimRegion@@QAE?AV?$ListIter@VShip@@@@XZ ; SimRegion::GetSelection
  00013	8b c2		 mov	 eax, edx

; 1334 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN3@GetSelecti:

; 1332 :     static List<Ship> empty;

  00019	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4HA
  00026	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0002c	7e 4b		 jle	 SHORT $LN2@GetSelecti
  0002e	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4HA
  00033	e8 00 00 00 00	 call	 __Init_thread_header
  00038	83 c4 04	 add	 esp, 4
  0003b	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4HA, -1
  00042	75 35		 jne	 SHORT $LN2@GetSelecti
  00044	68 00 00 00 00	 push	 OFFSET ??__Fempty@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@YAXXZ ; `Sim::GetSelection'::`2'::`dynamic atexit destructor for 'empty''
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  00049	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?empty@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4V?$List@VShip@@@@A, 0
  00053	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?empty@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4V?$List@VShip@@@@A+4, 0
  0005d	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?empty@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4V?$List@VShip@@@@A+8, 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1332 :     static List<Ship> empty;

  00067	e8 00 00 00 00	 call	 _atexit
  0006c	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4HA
  00071	e8 00 00 00 00	 call	 __Init_thread_footer
  00076	83 c4 08	 add	 esp, 8
$LN2@GetSelecti:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00079	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0007c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?empty@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4V?$List@VShip@@@@A
  00082	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1334 : }

  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
?GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ ENDP	; Sim::GetSelection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??__Fempty@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@YAXXZ
text$yd	SEGMENT
??__Fempty@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@YAXXZ PROC ; `Sim::GetSelection'::`2'::`dynamic atexit destructor for 'empty'', COMDAT

; 54   :    ~List()  { delete [] array; }

  00000	ff 35 08 00 00
	00		 push	 DWORD PTR ?empty@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@4V?$List@VShip@@@@A+8
  00006	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
??__Fempty@?1??GetSelection@Sim@@QAE?AV?$ListIter@VShip@@@@XZ@YAXXZ ENDP ; `Sim::GetSelection'::`2'::`dynamic atexit destructor for 'empty''
text$yd	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
?ClearSelection@Sim@@QAEXXZ PROC			; Sim::ClearSelection
; _this$ = ecx

; 1339 :     if (active_region)

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	0f 85 00 00 00
	00		 jne	 ?ClearSelection@SimRegion@@QAEXXZ ; SimRegion::ClearSelection

; 1340 :     active_region->ClearSelection();
; 1341 : }

  0000b	c3		 ret	 0
?ClearSelection@Sim@@QAEXXZ ENDP			; Sim::ClearSelection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_s$ = 8							; size = 4
?AddSelection@Sim@@QAEXPAVShip@@@Z PROC			; Sim::AddSelection
; _this$ = ecx

; 1345 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1346 :     if (active_region)

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@AddSelecti

; 1348 : }

  0000a	5d		 pop	 ebp

; 1347 :     active_region->AddSelection(s);

  0000b	e9 00 00 00 00	 jmp	 ?AddSelection@SimRegion@@QAEXPAVShip@@@Z ; SimRegion::AddSelection
$LN2@AddSelecti:

; 1348 : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?AddSelection@Sim@@QAEXPAVShip@@@Z ENDP			; Sim::AddSelection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_newsel$ = 8						; size = 4
?SetSelection@Sim@@QAEXPAVShip@@@Z PROC			; Sim::SetSelection
; _this$ = ecx

; 1352 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1353 :     if (active_region)

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@SetSelecti

; 1355 : }

  0000a	5d		 pop	 ebp

; 1354 :     active_region->SetSelection(newsel);

  0000b	e9 00 00 00 00	 jmp	 ?SetSelection@SimRegion@@QAEXPAVShip@@@Z ; SimRegion::SetSelection
$LN2@SetSelecti:

; 1355 : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?SetSelection@Sim@@QAEXPAVShip@@@Z ENDP			; Sim::SetSelection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_t$ = 8							; size = 1
?SetTestMode@Sim@@QAEX_N@Z PROC				; Sim::SetTestMode
; _this$ = ecx

; 1361 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1362 :     test_mode    = t;

  00003	8a 45 08	 mov	 al, BYTE PTR _t$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	88 86 bc 00 00
	00		 mov	 BYTE PTR [esi+188], al

; 1363 :     Ship* pship  = GetPlayerShip();

  0000f	e8 00 00 00 00	 call	 ?GetPlayerShip@Sim@@QAEPAVShip@@XZ ; Sim::GetPlayerShip
  00014	8b c8		 mov	 ecx, eax

; 1364 : 
; 1365 :     if (pship)

  00016	85 c9		 test	 ecx, ecx
  00018	74 28		 je	 SHORT $LN8@SetTestMod

; 1366 :     if (IsTestMode())

  0001a	80 be bc 00 00
	00 00		 cmp	 BYTE PTR [esi+188], 0
  00021	74 11		 je	 SHORT $LN3@SetTestMod

; 1367 :     pship->SetControls(0);

  00023	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1370 : }

  00025	5e		 pop	 esi

; 1367 :     pship->SetControls(0);

  00026	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _t$[ebp], 0

; 1370 : }

  0002d	5d		 pop	 ebp

; 1367 :     pship->SetControls(0);

  0002e	ff a2 cc 00 00
	00		 jmp	 DWORD PTR [edx+204]
$LN3@SetTestMod:

; 1368 :     else
; 1369 :     pship->SetControls(ctrl);

  00034	8b 01		 mov	 eax, DWORD PTR [ecx]
  00036	ff b6 b8 00 00
	00		 push	 DWORD PTR [esi+184]
  0003c	ff 90 cc 00 00
	00		 call	 DWORD PTR [eax+204]
$LN8@SetTestMod:

; 1370 : }

  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?SetTestMode@Sim@@QAEX_N@Z ENDP				; Sim::SetTestMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_rgn$ = -8						; size = 8
_orgn$ = 8						; size = 4
?FindRegion@Sim@@QAEPAVSimRegion@@PAVOrbitalRegion@@@Z PROC ; Sim::FindRegion
; _this$ = ecx

; 1387 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1388 :     ListIter<SimRegion> rgn = regions;

  00006	8d 41 58	 lea	 eax, DWORD PTR [ecx+88]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00009	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _rgn$[ebp+4], -1
  00010	56		 push	 esi

; 108  :    int operator++() { return next() != 0; }

  00011	8d 4d f8	 lea	 ecx, DWORD PTR _rgn$[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00014	89 45 f8	 mov	 DWORD PTR _rgn$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00017	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  0001c	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1389 :     while (++rgn)

  0001e	74 1c		 je	 SHORT $LN3@FindRegion
  00020	8b 75 08	 mov	 esi, DWORD PTR _orgn$[ebp]
$LL2@FindRegion:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00023	8d 4d f8	 lea	 ecx, DWORD PTR _rgn$[ebp]
  00026	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value

; 108  :    int operator++() { return next() != 0; }

  0002b	8d 4d f8	 lea	 ecx, DWORD PTR _rgn$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1390 :     if (rgn->orbital_region == orgn)

  0002e	39 70 1c	 cmp	 DWORD PTR [eax+28], esi
  00031	74 12		 je	 SHORT $LN13@FindRegion
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00033	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00038	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1389 :     while (++rgn)

  0003a	75 e7		 jne	 SHORT $LL2@FindRegion
$LN3@FindRegion:

; 1392 : 
; 1393 :     return 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	5e		 pop	 esi

; 1394 : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN13@FindRegion:

; 1391 :     return rgn.value();

  00045	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
  0004a	5e		 pop	 esi

; 1394 : }

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?FindRegion@Sim@@QAEPAVSimRegion@@PAVOrbitalRegion@@@Z ENDP ; Sim::FindRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T1 = -120						; size = 24
$T2 = -96						; size = 24
$T3 = -96						; size = 24
_objloc$ = -72						; size = 24
_objloc$3$ = -48					; size = 8
_objloc$2$ = -40					; size = 8
_objloc$1$ = -32					; size = 8
_distance$1$ = -24					; size = 8
_rgn$ = -12						; size = 8
_this$1$ = -8						; size = 4
_result$1$ = -4						; size = 4
_object$ = 8						; size = 4
_type$ = 12						; size = 4
?FindNearestRegion@Sim@@QAEPAVSimRegion@@PAVSimObject@@H@Z PROC ; Sim::FindNearestRegion
; _this$ = ecx

; 1412 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 78	 sub	 esp, 120		; 00000078H
  00019	56		 push	 esi

; 1413 :     if (!object) return 0;

  0001a	8b 73 08	 mov	 esi, DWORD PTR _object$[ebx]
  0001d	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00020	57		 push	 edi
  00021	85 f6		 test	 esi, esi
  00023	75 0d		 jne	 SHORT $LN4@FindNeares
  00025	33 c0		 xor	 eax, eax

; 1439 : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	8b e3		 mov	 esp, ebx
  0002e	5b		 pop	 ebx
  0002f	c2 08 00	 ret	 8
$LN4@FindNeares:

; 1416 :     double      distance = 1.0e40;

  00032	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@483d6329f1c35ca5

; 1419 :     objloc = objloc.OtherHand();

  0003a	8d 45 a0	 lea	 eax, DWORD PTR $T3[ebp]
  0003d	f2 0f 11 45 e8	 movsd	 QWORD PTR _distance$1$[ebp], xmm0
  00042	8d 4d b8	 lea	 ecx, DWORD PTR _objloc$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00045	0f 10 46 48	 movups	 xmm0, XMMWORD PTR [esi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1415 :     SimRegion*  result   = 0;

  00049	33 ff		 xor	 edi, edi

; 1419 :     objloc = objloc.OtherHand();

  0004b	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0004c	0f 11 45 b8	 movups	 XMMWORD PTR _objloc$[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1415 :     SimRegion*  result   = 0;

  00050	89 7d fc	 mov	 DWORD PTR _result$1$[ebp], edi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00053	f2 0f 10 46 58	 movsd	 xmm0, QWORD PTR [esi+88]
  00058	f2 0f 11 45 c8	 movsd	 QWORD PTR _objloc$[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1419 :     objloc = objloc.OtherHand();

  0005d	e8 00 00 00 00	 call	 ?OtherHand@Point@@QBE?AU1@XZ ; Point::OtherHand
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  00062	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00066	f2 0f 11 45 e0	 movsd	 QWORD PTR _objloc$1$[ebp], xmm0
  0006b	f2 0f 11 45 b8	 movsd	 QWORD PTR _objloc$[ebp], xmm0
  00070	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00075	f2 0f 11 45 d8	 movsd	 QWORD PTR _objloc$2$[ebp], xmm0
  0007a	f2 0f 11 45 c0	 movsd	 QWORD PTR _objloc$[ebp+8], xmm0
  0007f	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  00084	8b 06		 mov	 eax, DWORD PTR [esi]
  00086	f2 0f 11 45 d0	 movsd	 QWORD PTR _objloc$3$[ebp], xmm0
  0008b	f2 0f 11 45 c8	 movsd	 QWORD PTR _objloc$[ebp+16], xmm0
  00090	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00096	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  0009b	0f 85 e4 00 00
	00		 jne	 $LN61@FindNeares
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  000a1	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
$LN10@FindNeares:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1421 :     if (object->GetRegion())

  000a7	85 c0		 test	 eax, eax
  000a9	74 46		 je	 SHORT $LN5@FindNeares
  000ab	8b 06		 mov	 eax, DWORD PTR [esi]
  000ad	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  000b3	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  000b8	0f 85 d0 00 00
	00		 jne	 $LN13@FindNeares
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  000be	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
$LN12@FindNeares:
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  000c4	f2 0f 10 40 28	 movsd	 xmm0, QWORD PTR [eax+40]
  000c9	f2 0f 10 48 30	 movsd	 xmm1, QWORD PTR [eax+48]

; 236  :     Point& operator+=(const Point& p)      { x+=p.x; y+=p.y; z+=p.z; return *this; }

  000ce	f2 0f 10 55 e0	 movsd	 xmm2, QWORD PTR _objloc$1$[ebp]
  000d3	f2 0f 58 50 20	 addsd	 xmm2, QWORD PTR [eax+32]
  000d8	f2 0f 58 45 d8	 addsd	 xmm0, QWORD PTR _objloc$2$[ebp]
  000dd	f2 0f 58 4d d0	 addsd	 xmm1, QWORD PTR _objloc$3$[ebp]
  000e2	f2 0f 11 55 b8	 movsd	 QWORD PTR _objloc$[ebp], xmm2
  000e7	f2 0f 11 45 c0	 movsd	 QWORD PTR _objloc$[ebp+8], xmm0
  000ec	f2 0f 11 4d c8	 movsd	 QWORD PTR _objloc$[ebp+16], xmm1
$LN5@FindNeares:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1424 :     ListIter<SimRegion> rgn = regions;

  000f1	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000f4	8d 4d f4	 lea	 ecx, DWORD PTR _rgn$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1424 :     ListIter<SimRegion> rgn = regions;

  000f7	83 c0 58	 add	 eax, 88			; 00000058H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000fa	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _rgn$[ebp+4], -1
  00101	89 45 f4	 mov	 DWORD PTR _rgn$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00104	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00109	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1425 :     while (++rgn) {

  0010b	74 6b		 je	 SHORT $LN3@FindNeares
  0010d	8b 7b 0c	 mov	 edi, DWORD PTR _type$[ebx]
$LL2@FindNeares:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00110	8d 4d f4	 lea	 ecx, DWORD PTR _rgn$[ebp]
  00113	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
  00118	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1426 :         if (rgn->Type() == type) {

  0011a	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0011d	75 4a		 jne	 SHORT $LN8@FindNeares
; File d:\programming\starshatter\trunk\stars45\sim.h

; 264  :     OrbitalRegion*       GetOrbitalRegion() { return orbital_region; }

  0011f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1428 :             if (orgn) {

  00122	85 c0		 test	 eax, eax
  00124	74 43		 je	 SHORT $LN8@FindNeares
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00126	0f 10 40 60	 movups	 xmm0, XMMWORD PTR [eax+96]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1429 :                 double test = fabs((orgn->Location() - objloc).length());

  0012a	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0012d	0f 11 45 a0	 movups	 XMMWORD PTR $T2[ebp], xmm0
  00131	f2 0f 10 40 70	 movsd	 xmm0, QWORD PTR [eax+112]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1429 :                 double test = fabs((orgn->Location() - objloc).length());

  00136	8d 45 b8	 lea	 eax, DWORD PTR _objloc$[ebp]
  00139	50		 push	 eax
  0013a	8d 45 88	 lea	 eax, DWORD PTR $T1[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0013d	f2 0f 11 45 b0	 movsd	 QWORD PTR $T2[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1429 :                 double test = fabs((orgn->Location() - objloc).length());

  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ??GPoint@@QBE?AU0@ABU0@@Z ; Point::operator-
  00148	8b c8		 mov	 ecx, eax
  0014a	e8 00 00 00 00	 call	 ?length@Point@@QBENXZ	; Point::length
  0014f	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff

; 1430 :                 if (test < distance) {

  00156	f2 0f 10 4d e8	 movsd	 xmm1, QWORD PTR _distance$1$[ebp]
  0015b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0015f	76 08		 jbe	 SHORT $LN8@FindNeares

; 1431 :                     result = rgn.value();

  00161	89 75 fc	 mov	 DWORD PTR _result$1$[ebp], esi

; 1432 :                     distance = test;

  00164	f2 0f 11 45 e8	 movsd	 QWORD PTR _distance$1$[ebp], xmm0
$LN8@FindNeares:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00169	8d 4d f4	 lea	 ecx, DWORD PTR _rgn$[ebp]
  0016c	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00171	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1425 :     while (++rgn) {

  00173	75 9b		 jne	 SHORT $LL2@FindNeares
  00175	8b 7d fc	 mov	 edi, DWORD PTR _result$1$[ebp]
$LN3@FindNeares:

; 1433 :                 }
; 1434 :             }
; 1435 :         }
; 1436 :     }
; 1437 :     
; 1438 :     return result;

  00178	8b c7		 mov	 eax, edi

; 1439 : }

  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	8b e3		 mov	 esp, ebx
  00181	5b		 pop	 ebx
  00182	c2 08 00	 ret	 8
$LN61@FindNeares:
  00185	8b ce		 mov	 ecx, esi

; 1421 :     if (object->GetRegion())

  00187	ff d0		 call	 eax
  00189	e9 19 ff ff ff	 jmp	 $LN10@FindNeares
$LN13@FindNeares:
  0018e	8b ce		 mov	 ecx, esi

; 1422 :     objloc += object->GetRegion()->Location();

  00190	ff d0		 call	 eax
  00192	e9 2d ff ff ff	 jmp	 $LN12@FindNeares
?FindNearestRegion@Sim@@QAEPAVSimRegion@@PAVSimObject@@H@Z ENDP ; Sim::FindNearestRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_e_iter$1 = -8						; size = 8
_rgn$ = -8						; size = 8
_elem$ = -8						; size = 8
_seconds$ = 8						; size = 8
?ExecFrame@Sim@@UAEXN@Z PROC				; Sim::ExecFrame
; _this$ = ecx

; 1516 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 c0	 and	 esp, -64		; ffffffc0H
  00006	83 ec 34	 sub	 esp, 52			; 00000034H

; 1517 :     if (first_frame) {

  00009	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?first_frame@@3_NA, 0
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b f1		 mov	 esi, ecx
  00015	74 12		 je	 SHORT $LN10@ExecFrame

; 1518 :         first_frame = false;

  00017	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?first_frame@@3_NA, 0

; 1519 :         netgame = NetGame::Create();

  0001e	e8 00 00 00 00	 call	 ?Create@NetGame@@SAPAV1@XZ ; NetGame::Create
  00023	89 86 c4 00 00
	00		 mov	 DWORD PTR [esi+196], eax
$LN10@ExecFrame:

; 1520 :     }
; 1521 : 
; 1522 :     if (netgame)

  00029	8b 8e c4 00 00
	00		 mov	 ecx, DWORD PTR [esi+196]
  0002f	85 c9		 test	 ecx, ecx
  00031	74 05		 je	 SHORT $LN11@ExecFrame

; 1523 :     netgame->ExecFrame();

  00033	8b 01		 mov	 eax, DWORD PTR [ecx]
  00035	ff 50 18	 call	 DWORD PTR [eax+24]
$LN11@ExecFrame:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 75   :    bool     isEmpty() const      { return !items; }

  00038	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0003c	8d 7e 58	 lea	 edi, DWORD PTR [esi+88]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1525 :     if (regions.isEmpty()) {

  0003f	75 29		 jne	 SHORT $LN12@ExecFrame

; 1526 :         active_region = 0;
; 1527 :         rgn_queue.clear();

  00041	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  00044	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0004b	e8 00 00 00 00	 call	 ?clear@?$List@VSimRegion@@@@QAEXXZ ; List<SimRegion>::clear

; 1528 :         jumplist.destroy();

  00050	8d 4e 70	 lea	 ecx, DWORD PTR [esi+112]
  00053	e8 00 00 00 00	 call	 ?destroy@?$List@VSimHyper@@@@QAEXXZ ; List<SimHyper>::destroy

; 1529 :         scene.Collect();

  00058	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0005b	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0005e	ff 50 04	 call	 DWORD PTR [eax+4]

; 1600 :                     }
; 1601 :                 }
; 1602 :             }
; 1603 :         }
; 1604 :     }
; 1605 : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN12@ExecFrame:

; 1530 :         return;
; 1531 :     }
; 1532 : 
; 1533 :     ListIter<Element> elem = elements;

  0006a	8d 9e 88 00 00
	00		 lea	 ebx, DWORD PTR [esi+136]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00070	c7 44 24 3c ff
	ff ff ff	 mov	 DWORD PTR _elem$[esp+68], -1

; 108  :    int operator++() { return next() != 0; }

  00078	8d 4c 24 38	 lea	 ecx, DWORD PTR _elem$[esp+64]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0007c	89 5c 24 38	 mov	 DWORD PTR _elem$[esp+64], ebx

; 108  :    int operator++() { return next() != 0; }

  00080	e8 00 00 00 00	 call	 ?next@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::next
  00085	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1534 :     while (++elem)

  00087	74 3a		 je	 SHORT $LN3@ExecFrame
  00089	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@ExecFrame:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00090	8d 4c 24 38	 lea	 ecx, DWORD PTR _elem$[esp+64]
  00094	e8 00 00 00 00	 call	 ?value@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::value
  00099	8b c8		 mov	 ecx, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1535 :     if (!elem->IsSquadron())

  0009b	e8 00 00 00 00	 call	 ?IsSquadron@Element@@QBE_NXZ ; Element::IsSquadron
  000a0	84 c0		 test	 al, al
  000a2	75 12		 jne	 SHORT $LN33@ExecFrame

; 1536 :     elem->ExecFrame(seconds);

  000a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a6	83 ec 08	 sub	 esp, 8
  000a9	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _seconds$[ebp]
  000ae	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000b3	ff 52 1c	 call	 DWORD PTR [edx+28]
$LN33@ExecFrame:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000b6	8d 4c 24 38	 lea	 ecx, DWORD PTR _elem$[esp+64]
  000ba	e8 00 00 00 00	 call	 ?next@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::next
  000bf	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1534 :     while (++elem)

  000c1	75 cd		 jne	 SHORT $LL2@ExecFrame
$LN3@ExecFrame:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000c3	8d 4c 24 38	 lea	 ecx, DWORD PTR _rgn$[esp+64]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000c7	89 7c 24 38	 mov	 DWORD PTR _rgn$[esp+64], edi
  000cb	c7 44 24 3c ff
	ff ff ff	 mov	 DWORD PTR _rgn$[esp+68], -1

; 108  :    int operator++() { return next() != 0; }

  000d3	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  000d8	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1539 :     while (++rgn)

  000da	74 44		 je	 SHORT $LN5@ExecFrame
  000dc	0f 1f 40 00	 npad	 4
$LL4@ExecFrame:

; 1540 :     if (rgn.value() != active_region && rgn->NumShips() && !rgn_queue.contains(rgn.value()))

  000e0	8d 4c 24 38	 lea	 ecx, DWORD PTR _rgn$[esp+64]
  000e4	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
  000e9	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000ec	74 25		 je	 SHORT $LN14@ExecFrame
  000ee	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  000f2	74 1f		 je	 SHORT $LN14@ExecFrame
  000f4	50		 push	 eax
  000f5	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  000f8	e8 00 00 00 00	 call	 ?contains@?$List@VSimRegion@@@@QBE_NPBVSimRegion@@@Z ; List<SimRegion>::contains
  000fd	84 c0		 test	 al, al
  000ff	75 12		 jne	 SHORT $LN14@ExecFrame

; 1541 :     rgn_queue.append(rgn.value());

  00101	8d 4c 24 38	 lea	 ecx, DWORD PTR _rgn$[esp+64]
  00105	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
  0010a	50		 push	 eax
  0010b	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  0010e	e8 00 00 00 00	 call	 ?append@?$List@VSimRegion@@@@QAEXPBVSimRegion@@@Z ; List<SimRegion>::append
$LN14@ExecFrame:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00113	8d 4c 24 38	 lea	 ecx, DWORD PTR _rgn$[esp+64]
  00117	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  0011c	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1539 :     while (++rgn)

  0011e	75 c0		 jne	 SHORT $LL4@ExecFrame
$LN5@ExecFrame:

; 1542 : 
; 1543 :     // execframe for one inactive sim region:
; 1544 :     if (rgn_queue.size()) {

  00120	83 7e 64 00	 cmp	 DWORD PTR [esi+100], 0
  00124	74 43		 je	 SHORT $LN94@ExecFrame

; 1545 :         SimRegion* exec_rgn = rgn_queue.removeIndex(0);

  00126	51		 push	 ecx
  00127	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  0012a	e8 00 00 00 00	 call	 ?removeIndex@?$List@VSimRegion@@@@QAEPAVSimRegion@@H@Z ; List<SimRegion>::removeIndex
  0012f	8b c8		 mov	 ecx, eax

; 1546 : 
; 1547 :         while (exec_rgn && (exec_rgn->NumShips() == 0 || exec_rgn == active_region))

  00131	85 c9		 test	 ecx, ecx
  00133	74 34		 je	 SHORT $LN94@ExecFrame
$LL6@ExecFrame:
  00135	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  00139	74 05		 je	 SHORT $LN16@ExecFrame
  0013b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0013e	75 17		 jne	 SHORT $LN7@ExecFrame
$LN16@ExecFrame:

; 1548 :         if (rgn_queue.size())

  00140	83 7e 64 00	 cmp	 DWORD PTR [esi+100], 0
  00144	74 23		 je	 SHORT $LN94@ExecFrame

; 1549 :         exec_rgn = rgn_queue.removeIndex(0);

  00146	51		 push	 ecx
  00147	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  0014a	e8 00 00 00 00	 call	 ?removeIndex@?$List@VSimRegion@@@@QAEPAVSimRegion@@H@Z ; List<SimRegion>::removeIndex
  0014f	8b c8		 mov	 ecx, eax
  00151	85 c9		 test	 ecx, ecx
  00153	75 e0		 jne	 SHORT $LL6@ExecFrame

; 1546 : 
; 1547 :         while (exec_rgn && (exec_rgn->NumShips() == 0 || exec_rgn == active_region))

  00155	eb 12		 jmp	 SHORT $LN94@ExecFrame
$LN7@ExecFrame:

; 1550 :         else
; 1551 :         exec_rgn = 0;
; 1552 : 
; 1553 :         if (exec_rgn)
; 1554 :         exec_rgn->ExecFrame(seconds);

  00157	8b 01		 mov	 eax, DWORD PTR [ecx]
  00159	83 ec 08	 sub	 esp, 8
  0015c	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _seconds$[ebp]
  00161	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00166	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN94@ExecFrame:

; 1555 :     }
; 1556 : 
; 1557 :     if (active_region)

  00169	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0016c	85 c9		 test	 ecx, ecx
  0016e	74 12		 je	 SHORT $LN37@ExecFrame

; 1558 :     active_region->ExecFrame(seconds);

  00170	8b 01		 mov	 eax, DWORD PTR [ecx]
  00172	83 ec 08	 sub	 esp, 8
  00175	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _seconds$[ebp]
  0017a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0017f	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN37@ExecFrame:

; 1559 : 
; 1560 :     ExecEvents(seconds);

  00182	f2 0f 10 4d 08	 movsd	 xmm1, QWORD PTR _seconds$[ebp]
  00187	8b ce		 mov	 ecx, esi
  00189	e8 00 00 00 00	 call	 ?ExecEvents@Sim@@QAEXN@Z ; Sim::ExecEvents

; 1561 :     ResolveHyperList();

  0018e	8b ce		 mov	 ecx, esi
  00190	e8 00 00 00 00	 call	 ?ResolveHyperList@Sim@@QAEXXZ ; Sim::ResolveHyperList

; 1562 :     ResolveSplashList();

  00195	8b ce		 mov	 ecx, esi
  00197	e8 00 00 00 00	 call	 ?ResolveSplashList@Sim@@QAEXXZ ; Sim::ResolveSplashList

; 1563 : 
; 1564 :     // GC all the dead objects:
; 1565 :     scene.Collect();

  0019c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0019f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  001a2	ff 50 04	 call	 DWORD PTR [eax+4]

; 1566 : 
; 1567 :     if (!IsTestMode()) {

  001a5	80 be bc 00 00
	00 00		 cmp	 BYTE PTR [esi+188], 0
  001ac	75 58		 jne	 SHORT $LN9@ExecFrame
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  001ae	8d 4c 24 38	 lea	 ecx, DWORD PTR _e_iter$1[esp+64]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  001b2	89 5c 24 38	 mov	 DWORD PTR _e_iter$1[esp+64], ebx
  001b6	c7 44 24 3c ff
	ff ff ff	 mov	 DWORD PTR _e_iter$1[esp+68], -1

; 108  :    int operator++() { return next() != 0; }

  001be	e8 00 00 00 00	 call	 ?next@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::next
  001c3	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1569 :         while (++e_iter) {

  001c5	74 3f		 je	 SHORT $LN9@ExecFrame
$LL8@ExecFrame:

; 1570 :             Element* elem = e_iter.value();

  001c7	8d 4c 24 38	 lea	 ecx, DWORD PTR _e_iter$1[esp+64]
  001cb	e8 00 00 00 00	 call	 ?value@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::value
  001d0	8b c8		 mov	 ecx, eax

; 1571 :             if (!elem->IsSquadron() && elem->IsFinished()) {

  001d2	e8 00 00 00 00	 call	 ?IsSquadron@Element@@QBE_NXZ ; Element::IsSquadron
  001d7	84 c0		 test	 al, al
  001d9	75 1e		 jne	 SHORT $LN22@ExecFrame
  001db	e8 00 00 00 00	 call	 ?IsFinished@Element@@QBE_NXZ ; Element::IsFinished
  001e0	84 c0		 test	 al, al
  001e2	74 15		 je	 SHORT $LN22@ExecFrame

; 1572 :                 finished.append(e_iter.removeItem());

  001e4	8d 4c 24 38	 lea	 ecx, DWORD PTR _e_iter$1[esp+64]
  001e8	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::removeItem
  001ed	50		 push	 eax
  001ee	8d 8e 94 00 00
	00		 lea	 ecx, DWORD PTR [esi+148]
  001f4	e8 00 00 00 00	 call	 ?append@?$List@VElement@@@@QAEXPBVElement@@@Z ; List<Element>::append
$LN22@ExecFrame:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  001f9	8d 4c 24 38	 lea	 ecx, DWORD PTR _e_iter$1[esp+64]
  001fd	e8 00 00 00 00	 call	 ?next@?$ListIter@VElement@@@@QAEPAVElement@@XZ ; ListIter<Element>::next
  00202	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1569 :         while (++e_iter) {

  00204	75 c1		 jne	 SHORT $LL8@ExecFrame
$LN9@ExecFrame:

; 1573 :             }
; 1574 :         }
; 1575 :     }
; 1576 : 
; 1577 :     // setup music
; 1578 :     if (!MusicDirector::IsNoMusic()) {

  00206	e8 00 00 00 00	 call	 ?IsNoMusic@MusicDirector@@SA_NXZ ; MusicDirector::IsNoMusic
  0020b	84 c0		 test	 al, al
  0020d	75 7b		 jne	 SHORT $LN31@ExecFrame

; 1579 :         Starshatter* stars = Starshatter::GetInstance();

  0020f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?instance@Starshatter@@1PAV1@A ; Starshatter::instance

; 1580 :         if (stars && stars->GetGameMode() == Starshatter::PLAY_MODE) {

  00214	85 c0		 test	 eax, eax
  00216	74 72		 je	 SHORT $LN31@ExecFrame
  00218	83 b8 cc a5 00
	00 06		 cmp	 DWORD PTR [eax+42444], 6
  0021f	75 69		 jne	 SHORT $LN31@ExecFrame

; 1581 :             Ship* player_ship = GetPlayerShip();

  00221	8b ce		 mov	 ecx, esi
  00223	e8 00 00 00 00	 call	 ?GetPlayerShip@Sim@@QAEPAVShip@@XZ ; Sim::GetPlayerShip
  00228	8b f0		 mov	 esi, eax

; 1582 :             if (player_ship) {

  0022a	85 f6		 test	 esi, esi
  0022c	74 5c		 je	 SHORT $LN31@ExecFrame
  0022e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00230	8b 81 d4 00 00
	00		 mov	 eax, DWORD PTR [ecx+212]
  00236	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetFlightPhase@Ship@@UBEHXZ ; Ship::GetFlightPhase
  0023b	75 56		 jne	 SHORT $LN97@ExecFrame
; File d:\programming\starshatter\trunk\stars45\ship.h

; 182  :     virtual int       GetFlightPhase()           const { return flight_phase; }

  0023d	8b 86 10 03 00
	00		 mov	 eax, DWORD PTR [esi+784]
$LN39@ExecFrame:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1585 :                 if (phase < Ship::ACTIVE) {

  00243	83 f8 05	 cmp	 eax, 5
  00246	7d 13		 jge	 SHORT $LN95@ExecFrame

; 1586 :                     MusicDirector::SetMode(MusicDirector::LAUNCH);

  00248	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH

; 1596 :                     }
; 1597 : 
; 1598 :                     else {
; 1599 :                         MusicDirector::SetMode(MusicDirector::FLIGHT);

  0024d	e8 00 00 00 00	 call	 ?SetMode@MusicDirector@@SAXH@Z ; MusicDirector::SetMode

; 1600 :                     }
; 1601 :                 }
; 1602 :             }
; 1603 :         }
; 1604 :     }
; 1605 : }

  00252	5f		 pop	 edi
  00253	5e		 pop	 esi
  00254	5b		 pop	 ebx
  00255	8b e5		 mov	 esp, ebp
  00257	5d		 pop	 ebp
  00258	c2 08 00	 ret	 8
$LN95@ExecFrame:

; 1587 :                 }
; 1588 : 
; 1589 :                 else if (phase > Ship::ACTIVE) {

  0025b	7e 13		 jle	 SHORT $LN28@ExecFrame

; 1590 :                     MusicDirector::SetMode(MusicDirector::RECOVERY);

  0025d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH

; 1596 :                     }
; 1597 : 
; 1598 :                     else {
; 1599 :                         MusicDirector::SetMode(MusicDirector::FLIGHT);

  00262	e8 00 00 00 00	 call	 ?SetMode@MusicDirector@@SAXH@Z ; MusicDirector::SetMode

; 1600 :                     }
; 1601 :                 }
; 1602 :             }
; 1603 :         }
; 1604 :     }
; 1605 : }

  00267	5f		 pop	 edi
  00268	5e		 pop	 esi
  00269	5b		 pop	 ebx
  0026a	8b e5		 mov	 esp, ebp
  0026c	5d		 pop	 ebp
  0026d	c2 08 00	 ret	 8
$LN28@ExecFrame:

; 1591 :                 }
; 1592 : 
; 1593 :                 else {
; 1594 :                     if (player_ship->IsInCombat()) {

  00270	8b ce		 mov	 ecx, esi
  00272	e8 00 00 00 00	 call	 ?IsInCombat@Ship@@QAE_NXZ ; Ship::IsInCombat

; 1595 :                         MusicDirector::SetMode(MusicDirector::COMBAT);

  00277	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0027c	84 c0		 test	 al, al
  0027e	75 05		 jne	 SHORT $LN96@ExecFrame

; 1596 :                     }
; 1597 : 
; 1598 :                     else {
; 1599 :                         MusicDirector::SetMode(MusicDirector::FLIGHT);

  00280	b9 09 00 00 00	 mov	 ecx, 9
$LN96@ExecFrame:
  00285	e8 00 00 00 00	 call	 ?SetMode@MusicDirector@@SAXH@Z ; MusicDirector::SetMode
$LN31@ExecFrame:

; 1600 :                     }
; 1601 :                 }
; 1602 :             }
; 1603 :         }
; 1604 :     }
; 1605 : }

  0028a	5f		 pop	 edi
  0028b	5e		 pop	 esi
  0028c	5b		 pop	 ebx
  0028d	8b e5		 mov	 esp, ebp
  0028f	5d		 pop	 ebp
  00290	c2 08 00	 ret	 8
$LN97@ExecFrame:
  00293	8b ce		 mov	 ecx, esi

; 1583 :                 int phase = player_ship->GetFlightPhase();

  00295	ff d0		 call	 eax
  00297	eb aa		 jmp	 SHORT $LN39@ExecFrame
?ExecFrame@Sim@@UAEXN@Z ENDP				; Sim::ExecFrame
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_seconds$1$ = -16					; size = 8
_iter$ = -8						; size = 8
?ExecEvents@Sim@@QAEXN@Z PROC				; Sim::ExecEvents
; _this$ = ecx
; _seconds$ = xmm1l

; 1609 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1610 :     ListIter<MissionEvent> iter = events;

  00006	8d 81 a0 00 00
	00		 lea	 eax, DWORD PTR [ecx+160]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0000c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _iter$[ebp+4], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1609 : {

  00013	0f 28 c1	 movaps	 xmm0, xmm1
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00016	89 45 f8	 mov	 DWORD PTR _iter$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00019	8d 4d f8	 lea	 ecx, DWORD PTR _iter$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1609 : {

  0001c	f2 0f 11 45 f0	 movsd	 QWORD PTR _seconds$1$[ebp], xmm0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00021	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionEvent@@@@QAEPAVMissionEvent@@XZ ; ListIter<MissionEvent>::next
  00026	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1611 :     while (++iter) {

  00028	74 29		 je	 SHORT $LN3@ExecEvents
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL2@ExecEvents:

; 1612 :         MissionEvent* event = iter.value();

  00030	8d 4d f8	 lea	 ecx, DWORD PTR _iter$[ebp]
  00033	e8 00 00 00 00	 call	 ?value@?$ListIter@VMissionEvent@@@@QAEPAVMissionEvent@@XZ ; ListIter<MissionEvent>::value

; 1613 :         event->ExecFrame(seconds);

  00038	0f 28 c8	 movaps	 xmm1, xmm0
  0003b	8b c8		 mov	 ecx, eax
  0003d	e8 00 00 00 00	 call	 ?ExecFrame@MissionEvent@@QAEXN@Z ; MissionEvent::ExecFrame
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00042	8d 4d f8	 lea	 ecx, DWORD PTR _iter$[ebp]
  00045	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionEvent@@@@QAEPAVMissionEvent@@XZ ; ListIter<MissionEvent>::next
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1611 :     while (++iter) {

  0004a	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _seconds$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0004f	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1611 :     while (++iter) {

  00051	75 dd		 jne	 SHORT $LL2@ExecEvents
$LN3@ExecEvents:

; 1614 :     }
; 1615 : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?ExecEvents@Sim@@QAEXN@Z ENDP				; Sim::ExecEvents
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -184						; size = 24
tv1450 = -156						; size = 4
_pship$1$ = -152					; size = 4
tv1443 = -148						; size = 4
$T3 = -144						; size = 24
$T4 = -144						; size = 24
$T5 = -144						; size = 24
$T6 = -144						; size = 24
$T7 = -144						; size = 24
$T8 = -144						; size = 24
_delta$9 = -144						; size = 24
_delta$10 = -144					; size = 24
_j_iter$11 = -116					; size = 8
_neighbor$12 = -108					; size = 8
_riders$13 = -100					; size = 12
$T14 = -88						; size = 24
$T15 = -88						; size = 24
$T16 = -88						; size = 24
$T17 = -88						; size = 24
$T18 = -88						; size = 24
_deck$19 = -60						; size = 8
_i$1$ = -52						; size = 4
_jumpship$1$ = -52					; size = 4
$T20 = -48						; size = 24
$T21 = -48						; size = 24
$T22 = -48						; size = 24
$T23 = -48						; size = 24
$T24 = -48						; size = 24
$T25 = -48						; size = 24
$T26 = -48						; size = 24
$T27 = -48						; size = 24
$T28 = -48						; size = 24
$T29 = -48						; size = 24
$T30 = -48						; size = 24
_s$1$ = -24						; size = 4
_dest$1$ = -24						; size = 4
_jump$1$ = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ResolveHyperList@Sim@@QAEXXZ PROC			; Sim::ResolveHyperList
; _this$ = ecx

; 1619 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ResolveHyperList@Sim@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx

; 1621 :     if (jumplist.size()) {

  00030	83 7b 70 00	 cmp	 DWORD PTR [ebx+112], 0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  00034	8d 7b 70	 lea	 edi, DWORD PTR [ebx+112]
  00037	89 bd 64 ff ff
	ff		 mov	 DWORD PTR tv1450[ebp], edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1621 :     if (jumplist.size()) {

  0003d	0f 84 2b 07 00
	00		 je	 $LN37@ResolveHyp

; 1622 :         Ship* pship = GetPlayerShip();

  00043	e8 00 00 00 00	 call	 ?GetPlayerShip@Sim@@QAEPAVShip@@XZ ; Sim::GetPlayerShip
  00048	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0004a	89 7d 8c	 mov	 DWORD PTR _j_iter$11[ebp], edi

; 108  :    int operator++() { return next() != 0; }

  0004d	8d 4d 8c	 lea	 ecx, DWORD PTR _j_iter$11[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1622 :         Ship* pship = GetPlayerShip();

  00050	89 b5 68 ff ff
	ff		 mov	 DWORD PTR _pship$1$[ebp], esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00056	c7 45 90 ff ff
	ff ff		 mov	 DWORD PTR _j_iter$11[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  0005d	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimHyper@@@@QAEPAVSimHyper@@XZ ; ListIter<SimHyper>::next
  00062	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1625 :         while (++j_iter) {

  00064	0f 84 97 06 00
	00		 je	 $LN3@ResolveHyp
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL2@ResolveHyp:

; 1626 :             SimHyper*   jump     = j_iter.value();

  00070	8d 4d 8c	 lea	 ecx, DWORD PTR _j_iter$11[ebp]
  00073	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimHyper@@@@QAEPAVSimHyper@@XZ ; ListIter<SimHyper>::value
  00078	8b f0		 mov	 esi, eax
  0007a	89 75 ec	 mov	 DWORD PTR _jump$1$[ebp], esi

; 1627 :             Ship*       jumpship = jump->ship;

  0007d	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0007f	89 5d cc	 mov	 DWORD PTR _jumpship$1$[ebp], ebx

; 1628 : 
; 1629 :             if (jumpship) {

  00082	85 db		 test	 ebx, ebx
  00084	0f 84 58 06 00
	00		 je	 $LN59@ResolveHyp

; 1630 :                 SimRegion* dest = jump->rgn;

  0008a	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0008d	89 7d e8	 mov	 DWORD PTR _dest$1$[ebp], edi

; 1631 : 
; 1632 :                 if (!dest)

  00090	85 ff		 test	 edi, edi
  00092	75 47		 jne	 SHORT $LN351@ResolveHyp

; 1633 :                 dest = FindNearestSpaceRegion(jumpship);

  00094	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00097	53		 push	 ebx
  00098	e8 00 00 00 00	 call	 ?FindNearestSpaceRegion@Sim@@QAEPAVSimRegion@@PAVSimObject@@@Z ; Sim::FindNearestSpaceRegion
  0009d	8b f8		 mov	 edi, eax
  0009f	89 45 e8	 mov	 DWORD PTR _dest$1$[ebp], eax

; 1634 : 
; 1635 :                 if (dest) {

  000a2	85 ff		 test	 edi, edi
  000a4	75 35		 jne	 SHORT $LN351@ResolveHyp
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  000a6	8b 75 f0	 mov	 esi, DWORD PTR _this$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1748 :                 else if (regions.size() > 1) {

  000a9	83 7e 58 01	 cmp	 DWORD PTR [esi+88], 1
  000ad	0f 8e 20 06 00
	00		 jle	 $LN57@ResolveHyp
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  000b3	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1749 :                     ::Print("Warning: Unusual jump request for ship '%s'\n", jumpship->Name());

  000b6	50		 push	 eax
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@DDGAJNGP@Warning?3?5Unusual?5jump?5request?5fo@
  000bc	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  000c1	83 c4 08	 add	 esp, 8

; 1750 :                     regions[1]->InsertObject(jumpship);

  000c4	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  000c7	6a 01		 push	 1
  000c9	e8 00 00 00 00	 call	 ??A?$List@VSimRegion@@@@QAEAAPAVSimRegion@@H@Z ; List<SimRegion>::operator[]
  000ce	53		 push	 ebx
  000cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d1	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d3	ff 50 28	 call	 DWORD PTR [eax+40]
  000d6	e9 f8 05 00 00	 jmp	 $LN57@ResolveHyp
$LN351@ResolveHyp:
; File d:\programming\starshatter\trunk\stars45\ship.h

; 456  :     List<FlightDeck>&       FlightDecks()        { return flight_decks;  }

  000db	8d 83 c0 03 00
	00		 lea	 eax, DWORD PTR [ebx+960]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000e1	c7 45 c8 ff ff
	ff ff		 mov	 DWORD PTR _deck$19[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  000e8	8d 4d c4	 lea	 ecx, DWORD PTR _deck$19[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000eb	89 45 c4	 mov	 DWORD PTR _deck$19[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  000ee	e8 00 00 00 00	 call	 ?next@?$ListIter@VFlightDeck@@@@QAEPAVFlightDeck@@XZ ; ListIter<FlightDeck>::next
  000f3	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1638 :                     while (++deck) {

  000f5	74 62		 je	 SHORT $LN5@ResolveHyp
  000f7	8b 5d e8	 mov	 ebx, DWORD PTR _dest$1$[ebp]
  000fa	66 0f 1f 44 00
	00		 npad	 6
$LL4@ResolveHyp:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00100	8d 4d c4	 lea	 ecx, DWORD PTR _deck$19[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1639 :                         for (int i = 0; i < deck->NumSlots(); i++) {

  00103	33 f6		 xor	 esi, esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00105	e8 00 00 00 00	 call	 ?value@?$ListIter@VFlightDeck@@@@QAEPAVFlightDeck@@XZ ; ListIter<FlightDeck>::value
  0010a	8b c8		 mov	 ecx, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1639 :                         for (int i = 0; i < deck->NumSlots(); i++) {

  0010c	39 b1 d0 00 00
	00		 cmp	 DWORD PTR [ecx+208], esi
  00112	7e 30		 jle	 SHORT $LN7@ResolveHyp
$LL8@ResolveHyp:

; 1640 :                             Ship* s = deck->GetShip(i);

  00114	56		 push	 esi
  00115	e8 00 00 00 00	 call	 ?GetShip@FlightDeck@@QBEPAVShip@@H@Z ; FlightDeck::GetShip
  0011a	8b f8		 mov	 edi, eax

; 1641 : 
; 1642 :                             if (s) {

  0011c	85 ff		 test	 edi, edi
  0011e	74 11		 je	 SHORT $LN6@ResolveHyp

; 1643 :                                 dest->InsertObject(s);

  00120	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00122	57		 push	 edi
  00123	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00126	8b cb		 mov	 ecx, ebx
  00128	ff d2		 call	 edx

; 1644 :                                 s->ClearTrack();

  0012a	8b cf		 mov	 ecx, edi
  0012c	e8 00 00 00 00	 call	 ?ClearTrack@Ship@@QAEXXZ ; Ship::ClearTrack
$LN6@ResolveHyp:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00131	8d 4d c4	 lea	 ecx, DWORD PTR _deck$19[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1639 :                         for (int i = 0; i < deck->NumSlots(); i++) {

  00134	46		 inc	 esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00135	e8 00 00 00 00	 call	 ?value@?$ListIter@VFlightDeck@@@@QAEPAVFlightDeck@@XZ ; ListIter<FlightDeck>::value
  0013a	8b c8		 mov	 ecx, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1639 :                         for (int i = 0; i < deck->NumSlots(); i++) {

  0013c	3b b1 d0 00 00
	00		 cmp	 esi, DWORD PTR [ecx+208]
  00142	7c d0		 jl	 SHORT $LL8@ResolveHyp
$LN7@ResolveHyp:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00144	8d 4d c4	 lea	 ecx, DWORD PTR _deck$19[ebp]
  00147	e8 00 00 00 00	 call	 ?next@?$ListIter@VFlightDeck@@@@QAEPAVFlightDeck@@XZ ; ListIter<FlightDeck>::next
  0014c	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1638 :                     while (++deck) {

  0014e	75 b0		 jne	 SHORT $LL4@ResolveHyp
  00150	8b 5d cc	 mov	 ebx, DWORD PTR _jumpship$1$[ebp]
  00153	8b 7d e8	 mov	 edi, DWORD PTR _dest$1$[ebp]
  00156	8b 75 ec	 mov	 esi, DWORD PTR _jump$1$[ebp]
$LN5@ResolveHyp:

; 1645 :                             }
; 1646 :                         }
; 1647 :                     }
; 1648 : 
; 1649 :                     if (jump->type == 0 && !jump->hyperdrive) {

  00159	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  0015d	0f 85 65 02 00
	00		 jne	 $LN171@ResolveHyp
  00163	80 7e 24 00	 cmp	 BYTE PTR [esi+36], 0
  00167	0f 85 5b 02 00
	00		 jne	 $LN171@ResolveHyp
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  0016d	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _riders$13[ebp], 0
  00174	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _riders$13[ebp+4], 0
  0017b	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _riders$13[ebp+8], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1656 :                         List<Ship> riders;

  00182	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00189	8b 03		 mov	 eax, DWORD PTR [ebx]
  0018b	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00191	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  00196	75 08		 jne	 SHORT $LN42@ResolveHyp
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00198	8b 83 c8 01 00
	00		 mov	 eax, DWORD PTR [ebx+456]
  0019e	eb 04		 jmp	 SHORT $LN41@ResolveHyp
$LN42@ResolveHyp:
  001a0	8b cb		 mov	 ecx, ebx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1657 :                         ListIter<Ship> neighbor = jumpship->GetRegion()->Ships();

  001a2	ff d0		 call	 eax
$LN41@ResolveHyp:
; File d:\programming\starshatter\trunk\stars45\sim.h

; 283  :     List<Ship>&          Ships()      { return ships;           }

  001a4	83 c0 4c	 add	 eax, 76			; 0000004cH
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  001a7	c7 45 98 ff ff
	ff ff		 mov	 DWORD PTR _neighbor$12[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  001ae	8d 4d 94	 lea	 ecx, DWORD PTR _neighbor$12[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  001b1	89 45 94	 mov	 DWORD PTR _neighbor$12[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  001b4	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  001b9	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1658 :                         while (++neighbor) {

  001bb	0f 84 81 00 00
	00		 je	 $LN10@ResolveHyp
$LL9@ResolveHyp:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  001c1	8d 4d 94	 lea	 ecx, DWORD PTR _neighbor$12[ebp]
  001c4	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value
  001c9	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1659 :                             if (neighbor->IsDropship()) {

  001cb	8b ce		 mov	 ecx, esi
  001cd	e8 00 00 00 00	 call	 ?IsDropship@Ship@@QBE_NXZ ; Ship::IsDropship
  001d2	84 c0		 test	 al, al
  001d4	74 5d		 je	 SHORT $LN23@ResolveHyp

; 1660 :                                 Ship* s = neighbor.value();
; 1661 :                                 if (s == jumpship) continue;

  001d6	3b f3		 cmp	 esi, ebx
  001d8	74 59		 je	 SHORT $LN23@ResolveHyp
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  001da	0f 10 43 48	 movups	 xmm0, XMMWORD PTR [ebx+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1663 :                                 Point delta = s->Location() - jumpship->Location();

  001de	8d 45 a8	 lea	 eax, DWORD PTR $T18[ebp]
  001e1	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  001e2	0f 11 45 a8	 movups	 XMMWORD PTR $T18[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1663 :                                 Point delta = s->Location() - jumpship->Location();

  001e6	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _delta$10[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  001ec	f2 0f 10 43 58	 movsd	 xmm0, QWORD PTR [ebx+88]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1663 :                                 Point delta = s->Location() - jumpship->Location();

  001f1	8d 4d d0	 lea	 ecx, DWORD PTR $T30[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  001f4	f2 0f 11 45 b8	 movsd	 QWORD PTR $T18[ebp+16], xmm0
  001f9	0f 10 46 48	 movups	 xmm0, XMMWORD PTR [esi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1663 :                                 Point delta = s->Location() - jumpship->Location();

  001fd	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  001fe	0f 11 45 d0	 movups	 XMMWORD PTR $T30[ebp], xmm0
  00202	f2 0f 10 46 58	 movsd	 xmm0, QWORD PTR [esi+88]
  00207	f2 0f 11 45 e0	 movsd	 QWORD PTR $T30[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1663 :                                 Point delta = s->Location() - jumpship->Location();

  0020c	e8 00 00 00 00	 call	 ??GPoint@@QBE?AU0@ABU0@@Z ; Point::operator-

; 1664 : 
; 1665 :                                 if (delta.length() < 5e3) {

  00211	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _delta$10[ebp]
  00217	e8 00 00 00 00	 call	 ?length@Point@@QBENXZ	; Point::length
  0021c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40b3880000000000
  00224	66 0f 2f c8	 comisd	 xmm1, xmm0
  00228	76 09		 jbe	 SHORT $LN23@ResolveHyp

; 1666 :                                     riders.append(s);

  0022a	56		 push	 esi
  0022b	8d 4d 9c	 lea	 ecx, DWORD PTR _riders$13[ebp]
  0022e	e8 00 00 00 00	 call	 ?append@?$List@VShip@@@@QAEXPBVShip@@@Z ; List<Ship>::append
$LN23@ResolveHyp:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00233	8d 4d 94	 lea	 ecx, DWORD PTR _neighbor$12[ebp]
  00236	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  0023b	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1658 :                         while (++neighbor) {

  0023d	75 82		 jne	 SHORT $LL9@ResolveHyp
  0023f	8b 75 ec	 mov	 esi, DWORD PTR _jump$1$[ebp]
$LN10@ResolveHyp:

; 1667 :                                 }
; 1668 :                             }
; 1669 :                         }
; 1670 : 
; 1671 :                         // part two: now transfer the list to the destination:
; 1672 :                         for (int i = 0; i < riders.size(); i++) {

  00242	33 c0		 xor	 eax, eax
  00244	89 45 cc	 mov	 DWORD PTR _i$1$[ebp], eax
  00247	39 45 9c	 cmp	 DWORD PTR _riders$13[ebp], eax
  0024a	0f 8e 63 01 00
	00		 jle	 $LN12@ResolveHyp
  00250	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00253	89 8d 6c ff ff
	ff		 mov	 DWORD PTR tv1443[ebp], ecx
  00259	0f 1f 80 00 00
	00 00		 npad	 7
$LL13@ResolveHyp:

; 1673 :                             Ship* s = riders[i];

  00260	50		 push	 eax
  00261	8d 4d 9c	 lea	 ecx, DWORD PTR _riders$13[ebp]
  00264	e8 00 00 00 00	 call	 ??A?$List@VShip@@@@QAEAAPAVShip@@H@Z ; List<Ship>::operator[]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00269	0f 10 43 48	 movups	 xmm0, XMMWORD PTR [ebx+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1674 :                             Point delta = s->Location() - jumpship->Location();

  0026d	8d 4d a8	 lea	 ecx, DWORD PTR $T17[ebp]
  00270	8b 30		 mov	 esi, DWORD PTR [eax]
  00272	8d 45 d0	 lea	 eax, DWORD PTR $T29[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00275	0f 11 45 d0	 movups	 XMMWORD PTR $T29[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1674 :                             Point delta = s->Location() - jumpship->Location();

  00279	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0027a	f2 0f 10 43 58	 movsd	 xmm0, QWORD PTR [ebx+88]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1674 :                             Point delta = s->Location() - jumpship->Location();

  0027f	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _delta$9[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00285	f2 0f 11 45 e0	 movsd	 QWORD PTR $T29[ebp+16], xmm0
  0028a	0f 10 46 48	 movups	 xmm0, XMMWORD PTR [esi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1674 :                             Point delta = s->Location() - jumpship->Location();

  0028e	50		 push	 eax
  0028f	89 75 e8	 mov	 DWORD PTR _s$1$[ebp], esi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00292	0f 11 45 a8	 movups	 XMMWORD PTR $T17[ebp], xmm0
  00296	f2 0f 10 46 58	 movsd	 xmm0, QWORD PTR [esi+88]
  0029b	f2 0f 11 45 b8	 movsd	 QWORD PTR $T17[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1674 :                             Point delta = s->Location() - jumpship->Location();

  002a0	e8 00 00 00 00	 call	 ??GPoint@@QBE?AU0@ABU0@@Z ; Point::operator-
  002a5	8b 07		 mov	 eax, DWORD PTR [edi]
  002a7	8b cf		 mov	 ecx, edi
  002a9	56		 push	 esi

; 1675 :                             dest->InsertObject(s);

  002aa	ff 50 28	 call	 DWORD PTR [eax+40]

; 1676 :                             s->MoveTo(jump->loc.OtherHand() + delta);

  002ad	8b 36		 mov	 esi, DWORD PTR [esi]
  002af	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _delta$9[ebp]
  002b5	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR tv1443[ebp]
  002bb	50		 push	 eax
  002bc	8d 45 d0	 lea	 eax, DWORD PTR $T28[ebp]
  002bf	50		 push	 eax
  002c0	8d 45 a8	 lea	 eax, DWORD PTR $T16[ebp]
  002c3	50		 push	 eax
  002c4	e8 00 00 00 00	 call	 ?OtherHand@Point@@QBE?AU1@XZ ; Point::OtherHand
  002c9	8b c8		 mov	 ecx, eax
  002cb	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
  002d0	8b 4d e8	 mov	 ecx, DWORD PTR _s$1$[ebp]
  002d3	50		 push	 eax
  002d4	ff 56 1c	 call	 DWORD PTR [esi+28]

; 1677 :                             s->ClearTrack();

  002d7	8b 75 e8	 mov	 esi, DWORD PTR _s$1$[ebp]
  002da	8b ce		 mov	 ecx, esi
  002dc	e8 00 00 00 00	 call	 ?ClearTrack@Ship@@QAEXXZ ; Ship::ClearTrack

; 1678 : 
; 1679 :                             if (jump->fc_dst) {

  002e1	8b 45 ec	 mov	 eax, DWORD PTR _jump$1$[ebp]
  002e4	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  002e7	85 c0		 test	 eax, eax
  002e9	0f 84 a2 00 00
	00		 je	 $LN45@ResolveHyp

; 1684 :                                 s->SetAbsoluteOrientation(r, p, w);

  002ef	f3 0f 10 80 0c
	01 00 00	 movss	 xmm0, DWORD PTR [eax+268]
  002f7	83 ec 18	 sub	 esp, 24			; 00000018H
  002fa	f3 0f 10 88 08
	01 00 00	 movss	 xmm1, DWORD PTR [eax+264]
  00302	8b ce		 mov	 ecx, esi
  00304	f3 0f 10 90 04
	01 00 00	 movss	 xmm2, DWORD PTR [eax+260]
  0030c	8b 06		 mov	 eax, DWORD PTR [esi]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 119  :     double            Yaw()       const { return yaw;        }

  0030e	0f 5a c0	 cvtps2pd xmm0, xmm0

; 118  :     double            Pitch()     const { return pitch;      }

  00311	0f 5a c9	 cvtps2pd xmm1, xmm1

; 117  :     double            Roll()      const { return roll;       }

  00314	0f 5a d2	 cvtps2pd xmm2, xmm2
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1684 :                                 s->SetAbsoluteOrientation(r, p, w);

  00317	f2 0f 11 44 24
	10		 movsd	 QWORD PTR [esp+16], xmm0
  0031d	f2 0f 11 4c 24
	08		 movsd	 QWORD PTR [esp+8], xmm1
  00323	f2 0f 11 14 24	 movsd	 QWORD PTR [esp], xmm2
  00328	ff 50 70	 call	 DWORD PTR [eax+112]

; 1685 :                                 s->SetVelocity(jump->fc_dst->Heading() * 500);

  0032b	8b 45 ec	 mov	 eax, DWORD PTR _jump$1$[ebp]
  0032e	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 105  :     Point             Heading()   const { return cam.vpn();  }

  00331	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00337	50		 push	 eax
  00338	83 c1 40	 add	 ecx, 64			; 00000040H
  0033b	e8 00 00 00 00	 call	 ?vpn@Camera@@QBE?AUPoint@@XZ ; Camera::vpn
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1685 :                                 s->SetVelocity(jump->fc_dst->Heading() * 500);

  00340	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@407f400000000000
  00348	8d 45 d0	 lea	 eax, DWORD PTR $T27[ebp]
  0034b	50		 push	 eax
  0034c	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00352	e8 00 00 00 00	 call	 ??DPoint@@QBE?AU0@N@Z	; Point::operator*
  00357	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00359	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0035c	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?SetVelocity@Physical@@UAEXABUPoint@@@Z ; Physical::SetVelocity
  00362	75 28		 jne	 SHORT $LN46@ResolveHyp
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  00364	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00368	f2 0f 11 86 a8
	00 00 00	 movsd	 QWORD PTR [esi+168], xmm0
  00370	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00375	f2 0f 11 86 b0
	00 00 00	 movsd	 QWORD PTR [esi+176], xmm0
  0037d	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  00382	f2 0f 11 86 b8
	00 00 00	 movsd	 QWORD PTR [esi+184], xmm0
  0038a	eb 05		 jmp	 SHORT $LN45@ResolveHyp
$LN46@ResolveHyp:
  0038c	50		 push	 eax
  0038d	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1685 :                                 s->SetVelocity(jump->fc_dst->Heading() * 500);

  0038f	ff d2		 call	 edx
$LN45@ResolveHyp:

; 1688 :                             ProcessEventTrigger(MissionEvent::TRIGGER_JUMP, 0, s->Name());

  00391	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  00394	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1688 :                             ProcessEventTrigger(MissionEvent::TRIGGER_JUMP, 0, s->Name());

  00397	6a 00		 push	 0
  00399	50		 push	 eax
  0039a	6a 00		 push	 0
  0039c	6a 03		 push	 3
  0039e	e8 00 00 00 00	 call	 ?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z ; Sim::ProcessEventTrigger
  003a3	8b 45 cc	 mov	 eax, DWORD PTR _i$1$[ebp]
  003a6	40		 inc	 eax
  003a7	89 45 cc	 mov	 DWORD PTR _i$1$[ebp], eax
  003aa	3b 45 9c	 cmp	 eax, DWORD PTR _riders$13[ebp]
  003ad	0f 8c ad fe ff
	ff		 jl	 $LL13@ResolveHyp
$LN12@ResolveHyp:

; 1689 :                         }
; 1690 :                     }

  003b3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File d:\programming\starshatter\trunk\foundationex\list.h

; 54   :    ~List()  { delete [] array; }

  003ba	ff 75 a4	 push	 DWORD PTR _riders$13[ebp+8]
  003bd	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  003c2	8b 75 ec	 mov	 esi, DWORD PTR _jump$1$[ebp]
  003c5	83 c4 04	 add	 esp, 4
$LN171@ResolveHyp:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1693 :                     dest->InsertObject(jumpship);

  003c8	8b 07		 mov	 eax, DWORD PTR [edi]
  003ca	8b cf		 mov	 ecx, edi
  003cc	53		 push	 ebx
  003cd	ff 50 28	 call	 DWORD PTR [eax+40]

; 1694 :                     jumpship->MoveTo(jump->loc.OtherHand());

  003d0	8b 13		 mov	 edx, DWORD PTR [ebx]
  003d2	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  003d8	83 c6 08	 add	 esi, 8
  003db	50		 push	 eax
  003dc	8b ce		 mov	 ecx, esi
  003de	e8 00 00 00 00	 call	 ?OtherHand@Point@@QBE?AU1@XZ ; Point::OtherHand
  003e3	50		 push	 eax
  003e4	8b cb		 mov	 ecx, ebx
  003e6	ff 52 1c	 call	 DWORD PTR [edx+28]

; 1695 :                     jumpship->ClearTrack();

  003e9	8b cb		 mov	 ecx, ebx
  003eb	e8 00 00 00 00	 call	 ?ClearTrack@Ship@@QAEXXZ ; Ship::ClearTrack

; 1697 :                     ProcessEventTrigger(MissionEvent::TRIGGER_JUMP, 0, jumpship->Name());

  003f0	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  003f3	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1697 :                     ProcessEventTrigger(MissionEvent::TRIGGER_JUMP, 0, jumpship->Name());

  003f6	6a 00		 push	 0
  003f8	50		 push	 eax
  003f9	6a 00		 push	 0
  003fb	6a 03		 push	 3
  003fd	e8 00 00 00 00	 call	 ?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z ; Sim::ProcessEventTrigger

; 1698 :                     NetUtil::SendObjHyper(jumpship, dest->Name(), jump->loc, jump->fc_src, jump->fc_dst, jump->type);

  00402	8b 45 ec	 mov	 eax, DWORD PTR _jump$1$[ebp]
  00405	8b cb		 mov	 ecx, ebx
  00407	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  0040a	ff 70 20	 push	 DWORD PTR [eax+32]
  0040d	ff 70 2c	 push	 DWORD PTR [eax+44]
  00410	ff 70 28	 push	 DWORD PTR [eax+40]
  00413	56		 push	 esi
  00414	e8 00 00 00 00	 call	 ?SendObjHyper@NetUtil@@SAXPAVShip@@PBDABUPoint@@PBV2@3H@Z ; NetUtil::SendObjHyper

; 1699 : 
; 1700 :                     // if using farcaster:
; 1701 :                     if (jump->fc_src) {

  00419	8b 75 ec	 mov	 esi, DWORD PTR _jump$1$[ebp]
  0041c	83 c4 10	 add	 esp, 16			; 00000010H
  0041f	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0

; 1702 :                         ::Print("Ship '%s' farcast to '%s'\n", jumpship->Name(), dest->Name());

  00423	ff 77 0c	 push	 DWORD PTR [edi+12]
  00426	0f 84 b7 00 00
	00		 je	 $LN25@ResolveHyp
  0042c	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
  0042f	50		 push	 eax
  00430	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@GPICPCGA@Ship?5?8?$CFs?8?5farcast?5to?5?8?$CFs?8?6?$AA@
  00435	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 1703 :                         CreateExplosion(jumpship->Location(), Point(0,0,0), Explosion::QUANTUM_FLASH, 1.0f, 0, dest);

  0043a	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0043d	8d 45 a8	 lea	 eax, DWORD PTR $T15[ebp]
  00440	83 c4 08	 add	 esp, 8
  00443	0f 57 c0	 xorps	 xmm0, xmm0
  00446	0f 11 45 a8	 movups	 XMMWORD PTR $T15[ebp], xmm0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  0044a	f2 0f 11 45 b8	 movsd	 QWORD PTR $T15[ebp+16], xmm0

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0044f	0f 10 43 48	 movups	 xmm0, XMMWORD PTR [ebx+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1703 :                         CreateExplosion(jumpship->Location(), Point(0,0,0), Explosion::QUANTUM_FLASH, 1.0f, 0, dest);

  00453	6a 00		 push	 0
  00455	57		 push	 edi
  00456	83 ec 08	 sub	 esp, 8
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00459	0f 11 45 d0	 movups	 XMMWORD PTR $T26[ebp], xmm0
  0045d	f2 0f 10 43 58	 movsd	 xmm0, QWORD PTR [ebx+88]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1703 :                         CreateExplosion(jumpship->Location(), Point(0,0,0), Explosion::QUANTUM_FLASH, 1.0f, 0, dest);

  00462	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  0046a	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00471	6a 0e		 push	 14			; 0000000eH
  00473	50		 push	 eax
  00474	8d 45 d0	 lea	 eax, DWORD PTR $T26[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00477	f2 0f 11 45 e0	 movsd	 QWORD PTR $T26[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1703 :                         CreateExplosion(jumpship->Location(), Point(0,0,0), Explosion::QUANTUM_FLASH, 1.0f, 0, dest);

  0047c	50		 push	 eax
  0047d	e8 00 00 00 00	 call	 ?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z ; Sim::CreateExplosion

; 1704 : 
; 1705 :                         if (jump->fc_dst) {

  00482	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00485	85 c9		 test	 ecx, ecx
  00487	0f 84 2d 02 00
	00		 je	 $LN55@ResolveHyp

; 1710 :                             jumpship->SetAbsoluteOrientation(r, p, w);

  0048d	f3 0f 10 81 0c
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+268]
  00495	83 ec 18	 sub	 esp, 24			; 00000018H
  00498	8b 03		 mov	 eax, DWORD PTR [ebx]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 119  :     double            Yaw()       const { return yaw;        }

  0049a	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1710 :                             jumpship->SetAbsoluteOrientation(r, p, w);

  0049d	f2 0f 11 44 24
	10		 movsd	 QWORD PTR [esp+16], xmm0
  004a3	f3 0f 10 81 08
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+264]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 118  :     double            Pitch()     const { return pitch;      }

  004ab	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1710 :                             jumpship->SetAbsoluteOrientation(r, p, w);

  004ae	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  004b4	f3 0f 10 81 04
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+260]
  004bc	8b cb		 mov	 ecx, ebx
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 117  :     double            Roll()      const { return roll;       }

  004be	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1710 :                             jumpship->SetAbsoluteOrientation(r, p, w);

  004c1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004c6	ff 50 70	 call	 DWORD PTR [eax+112]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 105  :     Point             Heading()   const { return cam.vpn();  }

  004c9	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  004cc	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  004d2	50		 push	 eax
  004d3	83 c1 40	 add	 ecx, 64			; 00000040H
  004d6	e8 00 00 00 00	 call	 ?vpn@Camera@@QBE?AUPoint@@XZ ; Camera::vpn
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1711 :                             jumpship->SetVelocity(jump->fc_dst->Heading() * 500);

  004db	8d 45 d0	 lea	 eax, DWORD PTR $T25[ebp]
  004de	e9 89 01 00 00	 jmp	 $LN354@ResolveHyp
$LN25@ResolveHyp:

; 1712 :                         }
; 1713 : 
; 1714 :                         jumpship->SetHelmHeading(jumpship->CompassHeading());
; 1715 :                         jumpship->SetHelmPitch(0);
; 1716 :                     }
; 1717 : 
; 1718 :                     // break orbit:
; 1719 :                     else if (jump->type == Ship::TRANSITION_DROP_ORBIT) {

  004e3	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  004e6	83 f8 02	 cmp	 eax, 2
  004e9	0f 85 92 00 00
	00		 jne	 $LN28@ResolveHyp

; 1720 :                         ::Print("Ship '%s' broke orbit to '%s'\n", jumpship->Name(), dest->Name());

  004ef	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
  004f2	50		 push	 eax
  004f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KPJAHLOO@Ship?5?8?$CFs?8?5broke?5orbit?5to?5?8?$CFs?8?6?$AA@
  004f8	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 1721 :                         jumpship->SetAbsoluteOrientation(0,PI/4,0);

  004fd	8b 03		 mov	 eax, DWORD PTR [ebx]
  004ff	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00502	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe921fb54442d18
  0050a	0f 57 c0	 xorps	 xmm0, xmm0
  0050d	8b cb		 mov	 ecx, ebx
  0050f	f2 0f 11 44 24
	10		 movsd	 QWORD PTR [esp+16], xmm0
  00515	f2 0f 11 4c 24
	08		 movsd	 QWORD PTR [esp+8], xmm1
  0051b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00520	ff 50 70	 call	 DWORD PTR [eax+112]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 105  :     Point             Heading()   const { return cam.vpn();  }

  00523	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00529	50		 push	 eax
  0052a	8d 4b 40	 lea	 ecx, DWORD PTR [ebx+64]
  0052d	e8 00 00 00 00	 call	 ?vpn@Camera@@QBE?AUPoint@@XZ ; Camera::vpn
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1722 :                         jumpship->SetVelocity(jumpship->Heading() * 1.0e3);

  00532	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@408f400000000000
$LN356@ResolveHyp:
  0053a	8d 45 d0	 lea	 eax, DWORD PTR $T24[ebp]
  0053d	50		 push	 eax
  0053e	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00544	e8 00 00 00 00	 call	 ??DPoint@@QBE?AU0@N@Z	; Point::operator*
  00549	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0054b	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0054e	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?SetVelocity@Physical@@UAEXABUPoint@@@Z ; Physical::SetVelocity
  00554	75 74		 jne	 SHORT $LN54@ResolveHyp
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  00556	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0055a	f2 0f 11 83 a8
	00 00 00	 movsd	 QWORD PTR [ebx+168], xmm0
  00562	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00567	f2 0f 11 83 b0
	00 00 00	 movsd	 QWORD PTR [ebx+176], xmm0
  0056f	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  00574	f2 0f 11 83 b8
	00 00 00	 movsd	 QWORD PTR [ebx+184], xmm0
  0057c	e9 52 01 00 00	 jmp	 $LN57@ResolveHyp
$LN28@ResolveHyp:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1726 :                     else if (jump->type == Ship::TRANSITION_MAKE_ORBIT) {

  00581	83 f8 03	 cmp	 eax, 3

; 1727 :                         ::Print("Ship '%s' achieved orbit '%s'\n", jumpship->Name(), dest->Name());

  00584	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
  00587	50		 push	 eax
  00588	75 4a		 jne	 SHORT $LN30@ResolveHyp
  0058a	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EADKDGGP@Ship?5?8?$CFs?8?5achieved?5orbit?5?8?$CFs?8?6?$AA@
  0058f	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 1728 :                         jumpship->LookAt(Point(0,0,0));

  00594	8b 03		 mov	 eax, DWORD PTR [ebx]
  00596	8d 4d d0	 lea	 ecx, DWORD PTR $T23[ebp]
  00599	83 c4 0c	 add	 esp, 12			; 0000000cH
  0059c	0f 57 c0	 xorps	 xmm0, xmm0
  0059f	0f 11 45 d0	 movups	 XMMWORD PTR $T23[ebp], xmm0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  005a3	f2 0f 11 45 e0	 movsd	 QWORD PTR $T23[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1728 :                         jumpship->LookAt(Point(0,0,0));

  005a8	51		 push	 ecx
  005a9	8b cb		 mov	 ecx, ebx
  005ab	ff 50 40	 call	 DWORD PTR [eax+64]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 105  :     Point             Heading()   const { return cam.vpn();  }

  005ae	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  005b4	50		 push	 eax
  005b5	8d 4b 40	 lea	 ecx, DWORD PTR [ebx+64]
  005b8	e8 00 00 00 00	 call	 ?vpn@Camera@@QBE?AUPoint@@XZ ; Camera::vpn
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1729 :                         jumpship->SetVelocity(jumpship->Heading() * 500.0);

  005bd	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@407f400000000000
  005c5	e9 70 ff ff ff	 jmp	 $LN356@ResolveHyp
$LN54@ResolveHyp:
  005ca	50		 push	 eax
  005cb	8b cb		 mov	 ecx, ebx
  005cd	ff d2		 call	 edx

; 1730 :                     }
; 1731 : 
; 1732 :                     // hyper jump:
; 1733 :                     else {

  005cf	e9 ff 00 00 00	 jmp	 $LN57@ResolveHyp
$LN30@ResolveHyp:

; 1734 :                         ::Print("Ship '%s' quantum to '%s'\n", jumpship->Name(), dest->Name());

  005d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BLBMKKEF@Ship?5?8?$CFs?8?5quantum?5to?5?8?$CFs?8?6?$AA@
  005d9	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  005de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1737 :                         CreateExplosion(jumpship->Location(), Point(0,0,0), Explosion::HYPER_FLASH,   1, 1, dest);

  005e1	8d 45 a8	 lea	 eax, DWORD PTR $T14[ebp]
  005e4	0f 57 c0	 xorps	 xmm0, xmm0
  005e7	0f 11 45 a8	 movups	 XMMWORD PTR $T14[ebp], xmm0
  005eb	51		 push	 ecx
  005ec	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  005ef	f2 0f 11 45 b8	 movsd	 QWORD PTR $T14[ebp+16], xmm0

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  005f4	0f 10 43 48	 movups	 xmm0, XMMWORD PTR [ebx+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1737 :                         CreateExplosion(jumpship->Location(), Point(0,0,0), Explosion::HYPER_FLASH,   1, 1, dest);

  005f8	6a 00		 push	 0
  005fa	57		 push	 edi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  005fb	0f 11 45 d0	 movups	 XMMWORD PTR $T22[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1737 :                         CreateExplosion(jumpship->Location(), Point(0,0,0), Explosion::HYPER_FLASH,   1, 1, dest);

  005ff	83 ec 08	 sub	 esp, 8
  00602	80 7e 24 00	 cmp	 BYTE PTR [esi+36], 0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00606	f2 0f 10 43 58	 movsd	 xmm0, QWORD PTR [ebx+88]
  0060b	f2 0f 11 45 e0	 movsd	 QWORD PTR $T22[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1736 :                         if (jump->hyperdrive)

  00610	74 13		 je	 SHORT $LN32@ResolveHyp

; 1737 :                         CreateExplosion(jumpship->Location(), Point(0,0,0), Explosion::HYPER_FLASH,   1, 1, dest);

  00612	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  0061a	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00621	6a 0f		 push	 15			; 0000000fH

; 1738 :                         else

  00623	eb 11		 jmp	 SHORT $LN353@ResolveHyp
$LN32@ResolveHyp:

; 1739 :                         CreateExplosion(jumpship->Location(), Point(0,0,0), Explosion::QUANTUM_FLASH, 1, 0, dest);

  00625	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  0062d	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00634	6a 0e		 push	 14			; 0000000eH
$LN353@ResolveHyp:
  00636	50		 push	 eax
  00637	8d 45 d0	 lea	 eax, DWORD PTR $T21[ebp]
  0063a	50		 push	 eax
  0063b	e8 00 00 00 00	 call	 ?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z ; Sim::CreateExplosion

; 1741 :                         jumpship->LookAt(Point(0,0,0));

  00640	8b 03		 mov	 eax, DWORD PTR [ebx]
  00642	8d 4d d0	 lea	 ecx, DWORD PTR $T20[ebp]
  00645	0f 57 c0	 xorps	 xmm0, xmm0
  00648	51		 push	 ecx
  00649	8b cb		 mov	 ecx, ebx
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  0064b	f2 0f 11 45 e0	 movsd	 QWORD PTR $T20[ebp+16], xmm0
  00650	0f 11 45 d0	 movups	 XMMWORD PTR $T20[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1741 :                         jumpship->LookAt(Point(0,0,0));

  00654	ff 50 40	 call	 DWORD PTR [eax+64]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 105  :     Point             Heading()   const { return cam.vpn();  }

  00657	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0065d	50		 push	 eax
  0065e	8d 4b 40	 lea	 ecx, DWORD PTR [ebx+64]
  00661	e8 00 00 00 00	 call	 ?vpn@Camera@@QBE?AUPoint@@XZ ; Camera::vpn
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1742 :                         jumpship->SetVelocity(jumpship->Heading() * 500.0);

  00666	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
$LN354@ResolveHyp:
  0066c	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@407f400000000000
  00674	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0067a	50		 push	 eax
  0067b	e8 00 00 00 00	 call	 ??DPoint@@QBE?AU0@N@Z	; Point::operator*
  00680	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00682	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00685	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?SetVelocity@Physical@@UAEXABUPoint@@@Z ; Physical::SetVelocity
  0068b	75 28		 jne	 SHORT $LN56@ResolveHyp
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  0068d	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00691	f2 0f 11 83 a8
	00 00 00	 movsd	 QWORD PTR [ebx+168], xmm0
  00699	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  0069e	f2 0f 11 83 b0
	00 00 00	 movsd	 QWORD PTR [ebx+176], xmm0
  006a6	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  006ab	f2 0f 11 83 b8
	00 00 00	 movsd	 QWORD PTR [ebx+184], xmm0
  006b3	eb 05		 jmp	 SHORT $LN55@ResolveHyp
$LN56@ResolveHyp:
  006b5	50		 push	 eax
  006b6	8b cb		 mov	 ecx, ebx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1742 :                         jumpship->SetVelocity(jumpship->Heading() * 500.0);

  006b8	ff d2		 call	 edx
$LN55@ResolveHyp:

; 1743 :                         jumpship->SetHelmHeading(jumpship->CompassHeading());

  006ba	8b cb		 mov	 ecx, ebx
  006bc	e8 00 00 00 00	 call	 ?CompassHeading@Ship@@QBENXZ ; Ship::CompassHeading
  006c1	0f 28 c8	 movaps	 xmm1, xmm0
  006c4	8b cb		 mov	 ecx, ebx
  006c6	e8 00 00 00 00	 call	 ?SetHelmHeading@Ship@@QAEXN@Z ; Ship::SetHelmHeading
  006cb	0f 57 c9	 xorps	 xmm1, xmm1

; 1744 :                         jumpship->SetHelmPitch(0);

  006ce	e8 00 00 00 00	 call	 ?SetHelmPitch@Ship@@QAEXN@Z ; Ship::SetHelmPitch
$LN57@ResolveHyp:
; File d:\programming\starshatter\trunk\stars45\ship.h

; 461  :     Sensor*                 GetSensor()          { return sensor;        }

  006d3	8b 8b 50 03 00
	00		 mov	 ecx, DWORD PTR [ebx+848]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1754 :                 if (sensor)

  006d9	85 c9		 test	 ecx, ecx
  006db	74 05		 je	 SHORT $LN59@ResolveHyp

; 1755 :                 sensor->ClearAllContacts();

  006dd	8b 01		 mov	 eax, DWORD PTR [ecx]
  006df	ff 50 5c	 call	 DWORD PTR [eax+92]
$LN59@ResolveHyp:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  006e2	8d 4d 8c	 lea	 ecx, DWORD PTR _j_iter$11[ebp]
  006e5	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimHyper@@@@QAEPAVSimHyper@@XZ ; ListIter<SimHyper>::next
  006ea	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1625 :         while (++j_iter) {

  006ec	0f 85 7e f9 ff
	ff		 jne	 $LL2@ResolveHyp
  006f2	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]
  006f5	8b b5 68 ff ff
	ff		 mov	 esi, DWORD PTR _pship$1$[ebp]
  006fb	8b bd 64 ff ff
	ff		 mov	 edi, DWORD PTR tv1450[ebp]
$LN3@ResolveHyp:

; 1756 :             }
; 1757 :         }
; 1758 : 
; 1759 :         jumplist.destroy();

  00701	8b cf		 mov	 ecx, edi
  00703	e8 00 00 00 00	 call	 ?destroy@?$List@VSimHyper@@@@QAEXXZ ; List<SimHyper>::destroy

; 1761 :         if (pship && pship->GetRegion()) {

  00708	85 f6		 test	 esi, esi
  0070a	74 62		 je	 SHORT $LN37@ResolveHyp
  0070c	8b 06		 mov	 eax, DWORD PTR [esi]
  0070e	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00714	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  00719	75 08		 jne	 SHORT $LN62@ResolveHyp
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0071b	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00721	eb 04		 jmp	 SHORT $LN61@ResolveHyp
$LN62@ResolveHyp:
  00723	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1761 :         if (pship && pship->GetRegion()) {

  00725	ff d0		 call	 eax
$LN61@ResolveHyp:
  00727	85 c0		 test	 eax, eax
  00729	74 43		 je	 SHORT $LN37@ResolveHyp
  0072b	8b 06		 mov	 eax, DWORD PTR [esi]
  0072d	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00733	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  00738	75 08		 jne	 SHORT $LN64@ResolveHyp
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0073a	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00740	eb 04		 jmp	 SHORT $LN63@ResolveHyp
$LN64@ResolveHyp:
  00742	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1762 :             if (active_region != pship->GetRegion()) {

  00744	ff d0		 call	 eax
$LN63@ResolveHyp:
  00746	39 43 04	 cmp	 DWORD PTR [ebx+4], eax
  00749	74 23		 je	 SHORT $LN37@ResolveHyp
  0074b	8b 06		 mov	 eax, DWORD PTR [esi]
  0074d	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00753	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  00758	75 08		 jne	 SHORT $LN66@ResolveHyp
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0075a	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00760	eb 04		 jmp	 SHORT $LN65@ResolveHyp
$LN66@ResolveHyp:
  00762	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1763 :                 pship->GetRegion()->SetPlayerShip(pship);

  00764	ff d0		 call	 eax
$LN65@ResolveHyp:
  00766	56		 push	 esi
  00767	8b c8		 mov	 ecx, eax
  00769	e8 00 00 00 00	 call	 ?SetPlayerShip@SimRegion@@QAEXPAVShip@@@Z ; SimRegion::SetPlayerShip
$LN37@ResolveHyp:

; 1764 :             }
; 1765 :         }
; 1766 :     }
; 1767 : }

  0076e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00771	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00778	59		 pop	 ecx
  00779	5f		 pop	 edi
  0077a	5e		 pop	 esi
  0077b	5b		 pop	 ebx
  0077c	8b e5		 mov	 esp, ebp
  0077e	5d		 pop	 ebp
  0077f	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ResolveHyperList@Sim@@QAEXXZ$0:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR _riders$13[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$List@VShip@@@@QAE@XZ ; List<Ship>::~List<Ship>
__ehhandler$?ResolveHyperList@Sim@@QAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 44 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-188]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ResolveHyperList@Sim@@QAEXXZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ResolveHyperList@Sim@@QAEXXZ ENDP			; Sim::ResolveHyperList
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\drone.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_elem$1$ = -96						; size = 4
tv842 = -96						; size = 4
_this$1$ = -92						; size = 4
_damage$1$ = -88					; size = 8
_cmdr_stats$1$ = -88					; size = 4
_killer$1$ = -88					; size = 4
tv835 = -76						; size = 4
_s_iter$1 = -72						; size = 8
_drone_iter$2 = -64					; size = 8
_iter$3 = -56						; size = 8
$T4 = -48						; size = 24
$T5 = -24						; size = 24
?ResolveSplashList@Sim@@QAEXXZ PROC			; Sim::ResolveSplashList
; _this$ = ecx

; 1771 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 c0	 and	 esp, -64		; ffffffc0H
  00006	83 ec 74	 sub	 esp, 116		; 00000074H
  00009	8b c1		 mov	 eax, ecx
  0000b	89 44 24 18	 mov	 DWORD PTR _this$1$[esp+116], eax
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  0000f	83 c0 7c	 add	 eax, 124		; 0000007cH
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1771 : {

  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi

; 1772 :     if (splashlist.size()) {

  00015	83 38 00	 cmp	 DWORD PTR [eax], 0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  00018	89 44 24 34	 mov	 DWORD PTR tv835[esp+128], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1772 :     if (splashlist.size()) {

  0001c	0f 84 2a 04 00
	00		 je	 $LN8@ResolveSpl
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00022	8d 4c 24 48	 lea	 ecx, DWORD PTR _iter$3[esp+128]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00026	89 44 24 48	 mov	 DWORD PTR _iter$3[esp+128], eax
  0002a	c7 44 24 4c ff
	ff ff ff	 mov	 DWORD PTR _iter$3[esp+132], -1

; 108  :    int operator++() { return next() != 0; }

  00032	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimSplash@@@@QAEPAVSimSplash@@XZ ; ListIter<SimSplash>::next
  00037	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1774 :         while (++iter) {

  00039	0f 84 04 04 00
	00		 je	 $LN3@ResolveSpl
  0003f	90		 npad	 1
$LL2@ResolveSpl:

; 1775 :             SimSplash* splash = iter.value();

  00040	8d 4c 24 48	 lea	 ecx, DWORD PTR _iter$3[esp+128]
  00044	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimSplash@@@@QAEPAVSimSplash@@XZ ; ListIter<SimSplash>::value
  00049	8b d8		 mov	 ebx, eax

; 1776 : 
; 1777 :             if (!splash->rgn)

  0004b	8b 4b 30	 mov	 ecx, DWORD PTR [ebx+48]
  0004e	85 c9		 test	 ecx, ecx
  00050	0f 84 dc 03 00
	00		 je	 $LN7@ResolveSpl
; File d:\programming\starshatter\trunk\stars45\sim.h

; 283  :     List<Ship>&          Ships()      { return ships;           }

  00056	83 c1 4c	 add	 ecx, 76			; 0000004cH
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00059	c7 44 24 3c ff
	ff ff ff	 mov	 DWORD PTR _s_iter$1[esp+132], -1
  00061	89 4c 24 38	 mov	 DWORD PTR _s_iter$1[esp+128], ecx

; 108  :    int operator++() { return next() != 0; }

  00065	8d 4c 24 38	 lea	 ecx, DWORD PTR _s_iter$1[esp+128]
  00069	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  0006e	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1782 :             while (++s_iter) {

  00070	0f 84 7b 02 00
	00		 je	 $LN5@ResolveSpl
$LL4@ResolveSpl:

; 1783 :                 Ship* ship = s_iter.value();

  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR _s_iter$1[esp+128]
  0007a	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value
  0007f	8b f8		 mov	 edi, eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00081	f2 0f 10 57 48	 movsd	 xmm2, QWORD PTR [edi+72]
  00086	f2 0f 10 47 50	 movsd	 xmm0, QWORD PTR [edi+80]

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }
; 221  : 
; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }
; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }
; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  0008b	f2 0f 5c 43 10	 subsd	 xmm0, QWORD PTR [ebx+16]
  00090	f2 0f 5c 53 08	 subsd	 xmm2, QWORD PTR [ebx+8]

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00095	f2 0f 10 4f 58	 movsd	 xmm1, QWORD PTR [edi+88]

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }
; 221  : 
; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }
; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }
; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  0009a	f2 0f 5c 4b 18	 subsd	 xmm1, QWORD PTR [ebx+24]

; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  0009f	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  000a3	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  000a7	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  000ab	f2 0f 58 c2	 addsd	 xmm0, xmm2
  000af	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000b3	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1787 :                 if (distance > 1 && distance < splash->range) {

  000b8	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  000c0	0f 28 c8	 movaps	 xmm1, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1787 :                 if (distance > 1 && distance < splash->range) {

  000c3	66 0f 2f ca	 comisd	 xmm1, xmm2
  000c7	0f 86 13 02 00
	00		 jbe	 $LN12@ResolveSpl
  000cd	f2 0f 10 43 28	 movsd	 xmm0, QWORD PTR [ebx+40]
  000d2	66 0f 2f c1	 comisd	 xmm0, xmm1
  000d6	0f 86 04 02 00
	00		 jbe	 $LN12@ResolveSpl

; 1788 :                     double damage = splash->damage * (1 - distance/splash->range);

  000dc	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000e0	0f 28 c2	 movaps	 xmm0, xmm2
  000e3	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000e7	f2 0f 59 43 20	 mulsd	 xmm0, QWORD PTR [ebx+32]
  000ec	f2 0f 11 44 24
	28		 movsd	 QWORD PTR _damage$1$[esp+128], xmm0

; 1789 :                     if (!NetGame::IsNetGameClient()) {

  000f2	e8 00 00 00 00	 call	 ?IsNetGameClient@NetGame@@SA_NXZ ; NetGame::IsNetGameClient
  000f7	84 c0		 test	 al, al
  000f9	75 30		 jne	 SHORT $LN11@ResolveSpl

; 1790 :                         ship->InflictDamage(damage);

  000fb	83 ec 18	 sub	 esp, 24			; 00000018H
  000fe	0f 57 c0	 xorps	 xmm0, xmm0
  00101	8b c4		 mov	 eax, esp
  00103	8b cf		 mov	 ecx, edi
  00105	6a 03		 push	 3
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00107	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1790 :                         ship->InflictDamage(damage);

  0010a	6a 00		 push	 0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  0010c	f2 0f 11 40 10	 movsd	 QWORD PTR [eax+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1790 :                         ship->InflictDamage(damage);

  00111	83 ec 08	 sub	 esp, 8
  00114	8b 07		 mov	 eax, DWORD PTR [edi]
  00116	f2 0f 10 44 24
	50		 movsd	 xmm0, QWORD PTR _damage$1$[esp+168]
  0011c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00121	8b 80 6c 01 00
	00		 mov	 eax, DWORD PTR [eax+364]
  00127	ff d0		 call	 eax
  00129	dd d8		 fstp	 ST(0)
$LN11@ResolveSpl:
; File d:\programming\starshatter\trunk\stars45\ship.h

; 236  :     bool              InTransition()       const { return transition_type != TRANSITION_NONE;         }

  0012b	83 bf 60 04 00
	00 00		 cmp	 DWORD PTR [edi+1120], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1793 :                     int ship_destroyed = (!ship->InTransition() && ship->Integrity() < 1.0f);

  00132	0f 85 a8 01 00
	00		 jne	 $LN12@ResolveSpl
  00138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00140	0f 2f 87 b8 01
	00 00		 comiss	 xmm0, DWORD PTR [edi+440]
  00147	0f 86 93 01 00
	00		 jbe	 $LN12@ResolveSpl

; 1794 : 
; 1795 :                     // then delete the ship:
; 1796 :                     if (ship_destroyed) {
; 1797 :                         NetUtil::SendObjKill(ship, 0, NetObjKill::KILL_MISC);

  0014d	6a 00		 push	 0
  0014f	6a 00		 push	 0
  00151	33 d2		 xor	 edx, edx
  00153	8b cf		 mov	 ecx, edi
  00155	e8 00 00 00 00	 call	 ?SendObjKill@NetUtil@@SAXPAVShip@@PBV2@HH@Z ; NetUtil::SendObjKill
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  0015a	8b 33		 mov	 esi, DWORD PTR [ebx]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1798 :                         Print("    %s Killed %s (%s)\n", (const char*) splash->owner_name, ship->Name(), FormatGameTime());

  0015c	e8 00 00 00 00	 call	 ?FormatGameTime@@YAPBDXZ ; FormatGameTime
  00161	50		 push	 eax
  00162	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00165	50		 push	 eax
  00166	56		 push	 esi
  00167	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IBFIGKOO@?5?5?5?5?$CFs?5Killed?5?$CFs?5?$CI?$CFs?$CJ?6?$AA@
  0016c	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 1799 : 
; 1800 :                         // record the kill
; 1801 :                         ShipStats* killer = ShipStats::Find(splash->owner_name);

  00171	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00173	83 c4 18	 add	 esp, 24			; 00000018H
  00176	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find
  0017b	89 44 24 28	 mov	 DWORD PTR _killer$1$[esp+128], eax

; 1802 :                         if (killer) {

  0017f	85 c0		 test	 eax, eax
  00181	74 18		 je	 SHORT $LN15@ResolveSpl

; 1803 :                             if (splash->missile)

  00183	80 7b 34 00	 cmp	 BYTE PTR [ebx+52], 0

; 1804 :                             killer->AddEvent(SimEvent::MISSILE_KILL, ship->Name());

  00187	51		 push	 ecx
  00188	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0018b	51		 push	 ecx
  0018c	8b c8		 mov	 ecx, eax
  0018e	74 04		 je	 SHORT $LN14@ResolveSpl
  00190	6a 11		 push	 17			; 00000011H

; 1805 :                             else

  00192	eb 02		 jmp	 SHORT $LN158@ResolveSpl
$LN14@ResolveSpl:

; 1806 :                             killer->AddEvent(SimEvent::GUNS_KILL, ship->Name());

  00194	6a 10		 push	 16			; 00000010H
$LN158@ResolveSpl:
  00196	e8 00 00 00 00	 call	 ?AddEvent@ShipStats@@QAEPAVSimEvent@@HPBD0@Z ; ShipStats::AddEvent
$LN15@ResolveSpl:
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  0019b	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1809 :                         Ship* owner = FindShip(splash->owner_name, splash->rgn->Name());

  0019e	8b 4c 24 24	 mov	 ecx, DWORD PTR _this$1$[esp+128]
  001a2	ff 70 0c	 push	 DWORD PTR [eax+12]
  001a5	ff 33		 push	 DWORD PTR [ebx]
  001a7	e8 00 00 00 00	 call	 ?FindShip@Sim@@QAEPAVShip@@PBD0@Z ; Sim::FindShip
  001ac	8b f0		 mov	 esi, eax

; 1810 :                         if (owner && owner->GetIFF() != ship->GetIFF()) {

  001ae	85 f6		 test	 esi, esi
  001b0	0f 84 0b 01 00
	00		 je	 $LN25@ResolveSpl
  001b6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001b8	8b 81 98 01 00
	00		 mov	 eax, DWORD PTR [ecx+408]
  001be	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  001c3	0f 85 8a 02 00
	00		 jne	 $LN160@ResolveSpl
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  001c9	8b 86 04 03 00
	00		 mov	 eax, DWORD PTR [esi+772]
$LN159@ResolveSpl:
  001cf	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001d1	89 44 24 20	 mov	 DWORD PTR tv842[esp+128], eax
  001d5	8b 91 98 01 00
	00		 mov	 edx, DWORD PTR [ecx+408]
  001db	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  001e1	0f 85 75 02 00
	00		 jne	 $LN35@ResolveSpl
  001e7	8b 87 04 03 00
	00		 mov	 eax, DWORD PTR [edi+772]
$LN34@ResolveSpl:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1810 :                         if (owner && owner->GetIFF() != ship->GetIFF()) {

  001ed	39 44 24 20	 cmp	 DWORD PTR tv842[esp+128], eax
  001f1	0f 84 ca 00 00
	00		 je	 $LN25@ResolveSpl
  001f7	8b 07		 mov	 eax, DWORD PTR [edi]
  001f9	8b 80 98 01 00
	00		 mov	 eax, DWORD PTR [eax+408]
  001ff	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  00204	0f 85 5b 02 00
	00		 jne	 $LN37@ResolveSpl
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  0020a	8b 87 04 03 00
	00		 mov	 eax, DWORD PTR [edi+772]
$LN36@ResolveSpl:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1811 :                             if (ship->GetIFF() > 0 || owner->GetIFF() > 1) {

  00210	85 c0		 test	 eax, eax
  00212	7f 22		 jg	 SHORT $LN18@ResolveSpl
  00214	8b 06		 mov	 eax, DWORD PTR [esi]
  00216	8b 80 98 01 00
	00		 mov	 eax, DWORD PTR [eax+408]
  0021c	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  00221	0f 85 47 02 00
	00		 jne	 $LN39@ResolveSpl
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  00227	8b 86 04 03 00
	00		 mov	 eax, DWORD PTR [esi+772]
$LN38@ResolveSpl:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1811 :                             if (ship->GetIFF() > 0 || owner->GetIFF() > 1) {

  0022d	83 f8 01	 cmp	 eax, 1
  00230	0f 8e 8b 00 00
	00		 jle	 $LN25@ResolveSpl
$LN18@ResolveSpl:

; 1812 :                                 killer->AddPoints(ship->Value());

  00236	8b cf		 mov	 ecx, edi
  00238	e8 00 00 00 00	 call	 ?Value@Ship@@QBEHXZ	; Ship::Value
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 155  :     void           AddPoints(int p)        { points += p;          }

  0023d	8b 4c 24 28	 mov	 ecx, DWORD PTR _killer$1$[esp+128]
  00241	01 41 58	 add	 DWORD PTR [ecx+88], eax
; File d:\programming\starshatter\trunk\stars45\ship.h

; 420  :     Element*                GetElement()      const { return element; }

  00244	8b 86 e8 03 00
	00		 mov	 eax, DWORD PTR [esi+1000]
  0024a	89 44 24 20	 mov	 DWORD PTR _elem$1$[esp+128], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1815 :                                 if (elem) {

  0024e	85 c0		 test	 eax, eax
  00250	74 6f		 je	 SHORT $LN25@ResolveSpl

; 1816 :                                     if (owner->GetElementIndex() > 1) {

  00252	8b ce		 mov	 ecx, esi
  00254	e8 00 00 00 00	 call	 ?GetElementIndex@Ship@@QBEHXZ ; Ship::GetElementIndex

; 1817 :                                         Ship* s = elem->GetShip(1);

  00259	8b 74 24 20	 mov	 esi, DWORD PTR _elem$1$[esp+128]
  0025d	83 f8 01	 cmp	 eax, 1
  00260	7e 30		 jle	 SHORT $LN22@ResolveSpl
  00262	6a 01		 push	 1
  00264	8b ce		 mov	 ecx, esi
  00266	e8 00 00 00 00	 call	 ?GetShip@Element@@QAEPAVShip@@H@Z ; Element::GetShip

; 1818 : 
; 1819 :                                         if (s) {

  0026b	85 c0		 test	 eax, eax
  0026d	74 23		 je	 SHORT $LN22@ResolveSpl
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  0026f	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1820 :                                             ShipStats* cmdr_stats = ShipStats::Find(s->Name());

  00272	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find
  00277	89 44 24 28	 mov	 DWORD PTR _cmdr_stats$1$[esp+128], eax

; 1821 :                                             if (cmdr_stats) {

  0027b	85 c0		 test	 eax, eax
  0027d	74 13		 je	 SHORT $LN22@ResolveSpl

; 1822 :                                                 cmdr_stats->AddCommandPoints(ship->Value()/2);

  0027f	8b cf		 mov	 ecx, edi
  00281	e8 00 00 00 00	 call	 ?Value@Ship@@QBEHXZ	; Ship::Value
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 156  :     void           AddCommandPoints(int p) { cmd_points += p;      }

  00286	8b 4c 24 28	 mov	 ecx, DWORD PTR _cmdr_stats$1$[esp+128]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1822 :                                                 cmdr_stats->AddCommandPoints(ship->Value()/2);

  0028a	99		 cdq
  0028b	2b c2		 sub	 eax, edx
  0028d	d1 f8		 sar	 eax, 1
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 156  :     void           AddCommandPoints(int p) { cmd_points += p;      }

  0028f	01 41 5c	 add	 DWORD PTR [ecx+92], eax
$LN22@ResolveSpl:
; File d:\programming\starshatter\trunk\stars45\element.h

; 137  :     Element*          GetCommander()             const { return commander;  }

  00292	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1828 :                                     if (cmdr) {

  00295	85 c9		 test	 ecx, ecx
  00297	74 28		 je	 SHORT $LN25@ResolveSpl

; 1829 :                                         Ship* s = cmdr->GetShip(1);

  00299	6a 01		 push	 1
  0029b	e8 00 00 00 00	 call	 ?GetShip@Element@@QAEPAVShip@@H@Z ; Element::GetShip

; 1830 : 
; 1831 :                                         if (s) {

  002a0	85 c0		 test	 eax, eax
  002a2	74 1d		 je	 SHORT $LN25@ResolveSpl
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  002a4	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1832 :                                             ShipStats* cmdr_stats = ShipStats::Find(s->Name());

  002a7	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find
  002ac	8b f0		 mov	 esi, eax

; 1833 :                                             if (cmdr_stats) {

  002ae	85 f6		 test	 esi, esi
  002b0	74 0f		 je	 SHORT $LN25@ResolveSpl

; 1834 :                                                 cmdr_stats->AddCommandPoints(ship->Value()/2);

  002b2	8b cf		 mov	 ecx, edi
  002b4	e8 00 00 00 00	 call	 ?Value@Ship@@QBEHXZ	; Ship::Value
  002b9	99		 cdq
  002ba	2b c2		 sub	 eax, edx
  002bc	d1 f8		 sar	 eax, 1
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 156  :     void           AddCommandPoints(int p) { cmd_points += p;      }

  002be	01 46 5c	 add	 DWORD PTR [esi+92], eax
$LN25@ResolveSpl:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1842 :                         ShipStats* killee = ShipStats::Find(ship->Name());

  002c1	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  002c4	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find

; 1843 :                         if (killee)

  002c9	85 c0		 test	 eax, eax
  002cb	74 0c		 je	 SHORT $LN26@ResolveSpl

; 1844 :                         killee->AddEvent(SimEvent::DESTROYED, splash->owner_name);

  002cd	51		 push	 ecx
  002ce	ff 33		 push	 DWORD PTR [ebx]
  002d0	8b c8		 mov	 ecx, eax
  002d2	6a 07		 push	 7
  002d4	e8 00 00 00 00	 call	 ?AddEvent@ShipStats@@QAEPAVSimEvent@@HPBD0@Z ; ShipStats::AddEvent
$LN26@ResolveSpl:

; 1845 : 
; 1846 :                         ship->DeathSpiral();

  002d9	8b cf		 mov	 ecx, edi
  002db	e8 00 00 00 00	 call	 ?DeathSpiral@Ship@@QAEXXZ ; Ship::DeathSpiral
$LN12@ResolveSpl:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  002e0	8d 4c 24 38	 lea	 ecx, DWORD PTR _s_iter$1[esp+128]
  002e4	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  002e9	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1782 :             while (++s_iter) {

  002eb	0f 85 85 fd ff
	ff		 jne	 $LL4@ResolveSpl
$LN5@ResolveSpl:
; File d:\programming\starshatter\trunk\stars45\sim.h

; 286  :     List<Drone>&         Drones()     { return drones;          }

  002f1	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  002f4	8d 4c 24 40	 lea	 ecx, DWORD PTR _drone_iter$2[esp+128]
; File d:\programming\starshatter\trunk\stars45\sim.h

; 286  :     List<Drone>&         Drones()     { return drones;          }

  002f8	05 88 00 00 00	 add	 eax, 136		; 00000088H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  002fd	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR _drone_iter$2[esp+132], -1
  00305	89 44 24 40	 mov	 DWORD PTR _drone_iter$2[esp+128], eax

; 108  :    int operator++() { return next() != 0; }

  00309	e8 00 00 00 00	 call	 ?next@?$ListIter@VDrone@@@@QAEPAVDrone@@XZ ; ListIter<Drone>::next
  0030e	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1853 :             while (++drone_iter) {

  00310	0f 84 1c 01 00
	00		 je	 $LN7@ResolveSpl
$LL6@ResolveSpl:

; 1854 :                 Drone* drone = drone_iter.value();

  00316	8d 4c 24 40	 lea	 ecx, DWORD PTR _drone_iter$2[esp+128]
  0031a	e8 00 00 00 00	 call	 ?value@?$ListIter@VDrone@@@@QAEPAVDrone@@XZ ; ListIter<Drone>::value
  0031f	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00321	f2 0f 10 56 48	 movsd	 xmm2, QWORD PTR [esi+72]
  00326	f2 0f 10 46 50	 movsd	 xmm0, QWORD PTR [esi+80]

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }
; 221  : 
; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }
; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }
; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  0032b	f2 0f 5c 43 10	 subsd	 xmm0, QWORD PTR [ebx+16]
  00330	f2 0f 5c 53 08	 subsd	 xmm2, QWORD PTR [ebx+8]

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00335	f2 0f 10 4e 58	 movsd	 xmm1, QWORD PTR [esi+88]

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }
; 221  : 
; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }
; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }
; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  0033a	f2 0f 5c 4b 18	 subsd	 xmm1, QWORD PTR [ebx+24]

; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  0033f	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  00343	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  00347	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  0034b	f2 0f 58 c2	 addsd	 xmm0, xmm2
  0034f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00353	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1858 :                 if (distance > 1 && distance < splash->range) {

  00358	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  00360	0f 28 c8	 movaps	 xmm1, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1858 :                 if (distance > 1 && distance < splash->range) {

  00363	66 0f 2f ca	 comisd	 xmm1, xmm2
  00367	0f 86 b4 00 00
	00		 jbe	 $LN28@ResolveSpl
  0036d	f2 0f 10 43 28	 movsd	 xmm0, QWORD PTR [ebx+40]
  00372	66 0f 2f c1	 comisd	 xmm0, xmm1
  00376	0f 86 a5 00 00
	00		 jbe	 $LN28@ResolveSpl

; 1859 :                     double damage = splash->damage * (1 - distance/splash->range);

  0037c	f2 0f 5e c8	 divsd	 xmm1, xmm0

; 1860 :                     drone->InflictDamage(damage);

  00380	8b 06		 mov	 eax, DWORD PTR [esi]
  00382	8b ce		 mov	 ecx, esi
  00384	6a 00		 push	 0
  00386	83 ec 08	 sub	 esp, 8
  00389	0f 28 c2	 movaps	 xmm0, xmm2
  0038c	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00390	f2 0f 59 43 20	 mulsd	 xmm0, QWORD PTR [ebx+32]
  00395	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0039a	ff 50 54	 call	 DWORD PTR [eax+84]

; 1861 : 
; 1862 :                     int destroyed = (drone->Integrity() < 1.0f);

  0039d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003a5	33 c0		 xor	 eax, eax
  003a7	0f 2f 86 b8 01
	00 00		 comiss	 xmm0, DWORD PTR [esi+440]
  003ae	0f 97 c0	 seta	 al

; 1863 : 
; 1864 :                     // then mark the drone for deletion:
; 1865 :                     if (destroyed) {

  003b1	85 c0		 test	 eax, eax
  003b3	74 6c		 je	 SHORT $LN28@ResolveSpl

; 1866 :                         NetUtil::SendWepDestroy(drone);

  003b5	8b ce		 mov	 ecx, esi
  003b7	e8 00 00 00 00	 call	 ?SendWepDestroy@NetUtil@@SAXPAVShot@@@Z ; NetUtil::SendWepDestroy
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  003bc	8d 86 c0 00 00
	00		 lea	 eax, DWORD PTR [esi+192]
  003c2	50		 push	 eax
  003c3	8d 44 24 6c	 lea	 eax, DWORD PTR $T5[esp+132]
  003c7	50		 push	 eax
  003c8	8d 8e a8 00 00
	00		 lea	 ecx, DWORD PTR [esi+168]
  003ce	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  003d3	0f 10 46 48	 movups	 xmm0, XMMWORD PTR [esi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1867 :                         sim->CreateExplosion(drone->Location(), drone->Velocity(), 21 /* was LARGE_EXP */, 1.0f, 1.0f, splash->rgn);

  003d7	51		 push	 ecx
  003d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?sim@Sim@@1PAV1@A ; Sim::sim
  003de	8d 44 24 6c	 lea	 eax, DWORD PTR $T5[esp+132]
  003e2	6a 00		 push	 0
  003e4	ff 73 30	 push	 DWORD PTR [ebx+48]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  003e7	0f 11 44 24 5c	 movups	 XMMWORD PTR $T4[esp+140], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1867 :                         sim->CreateExplosion(drone->Location(), drone->Velocity(), 21 /* was LARGE_EXP */, 1.0f, 1.0f, splash->rgn);

  003ec	83 ec 08	 sub	 esp, 8
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  003ef	f2 0f 10 46 58	 movsd	 xmm0, QWORD PTR [esi+88]
  003f4	f2 0f 11 44 24
	74		 movsd	 QWORD PTR $T4[esp+164], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1867 :                         sim->CreateExplosion(drone->Location(), drone->Velocity(), 21 /* was LARGE_EXP */, 1.0f, 1.0f, splash->rgn);

  003fa	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00402	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00409	6a 15		 push	 21			; 00000015H
  0040b	50		 push	 eax
  0040c	8d 44 24 6c	 lea	 eax, DWORD PTR $T4[esp+156]
  00410	50		 push	 eax
  00411	e8 00 00 00 00	 call	 ?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z ; Sim::CreateExplosion
  00416	0f 57 c0	 xorps	 xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\drone.h

; 83   :     void        SetLife(int seconds) { life = seconds; }

  00419	f2 0f 11 86 a8
	01 00 00	 movsd	 QWORD PTR [esi+424], xmm0
$LN28@ResolveSpl:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00421	8d 4c 24 40	 lea	 ecx, DWORD PTR _drone_iter$2[esp+128]
  00425	e8 00 00 00 00	 call	 ?next@?$ListIter@VDrone@@@@QAEPAVDrone@@XZ ; ListIter<Drone>::next
  0042a	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1853 :             while (++drone_iter) {

  0042c	0f 85 e4 fe ff
	ff		 jne	 $LL6@ResolveSpl
$LN7@ResolveSpl:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00432	8d 4c 24 48	 lea	 ecx, DWORD PTR _iter$3[esp+128]
  00436	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimSplash@@@@QAEPAVSimSplash@@XZ ; ListIter<SimSplash>::next
  0043b	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1774 :         while (++iter) {

  0043d	0f 85 fd fb ff
	ff		 jne	 $LL2@ResolveSpl
$LN3@ResolveSpl:

; 1868 :                         drone->SetLife(0);
; 1869 :                     }
; 1870 :                 }
; 1871 :             }
; 1872 :         }
; 1873 : 
; 1874 :         splashlist.destroy();

  00443	8b 4c 24 34	 mov	 ecx, DWORD PTR tv835[esp+128]
  00447	e8 00 00 00 00	 call	 ?destroy@?$List@VSimSplash@@@@QAEXXZ ; List<SimSplash>::destroy
$LN8@ResolveSpl:

; 1875 :     }
; 1876 : }

  0044c	5f		 pop	 edi
  0044d	5e		 pop	 esi
  0044e	5b		 pop	 ebx
  0044f	8b e5		 mov	 esp, ebp
  00451	5d		 pop	 ebp
  00452	c3		 ret	 0
$LN160@ResolveSpl:
  00453	8b ce		 mov	 ecx, esi

; 1810 :                         if (owner && owner->GetIFF() != ship->GetIFF()) {

  00455	ff d0		 call	 eax
  00457	e9 73 fd ff ff	 jmp	 $LN159@ResolveSpl
$LN35@ResolveSpl:
  0045c	8b cf		 mov	 ecx, edi
  0045e	ff d2		 call	 edx
  00460	e9 88 fd ff ff	 jmp	 $LN34@ResolveSpl
$LN37@ResolveSpl:
  00465	8b cf		 mov	 ecx, edi

; 1811 :                             if (ship->GetIFF() > 0 || owner->GetIFF() > 1) {

  00467	ff d0		 call	 eax
  00469	e9 a2 fd ff ff	 jmp	 $LN36@ResolveSpl
$LN39@ResolveSpl:
  0046e	8b ce		 mov	 ecx, esi
  00470	ff d0		 call	 eax
  00472	e9 b6 fd ff ff	 jmp	 $LN38@ResolveSpl
?ResolveSplashList@Sim@@QAEXXZ ENDP			; Sim::ResolveSplashList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\starshatter.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\missionevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\missionevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\missionevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\missionevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_skip_time$1$ = -16					; size = 8
_iter$1 = -8						; size = 8
?SkipCutscene@Sim@@QAEXXZ PROC				; Sim::SkipCutscene
; _this$ = ecx

; 1930 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1931 :     Starshatter* stars = Starshatter::GetInstance();

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?instance@Starshatter@@1PAV1@A ; Starshatter::instance
  00008	83 ec 14	 sub	 esp, 20			; 00000014H
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx

; 1932 :     if (stars && stars->InCutscene()) {

  00010	85 c0		 test	 eax, eax
  00012	0f 84 bd 00 00
	00		 je	 $LN11@SkipCutsce
; File d:\programming\starshatter\trunk\stars45\starshatter.h

; 152  :     bool              InCutscene()         const { return cutscene > 0; }

  00018	83 b8 0c a6 00
	00 00		 cmp	 DWORD PTR [eax+42508], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1932 :     if (stars && stars->InCutscene()) {

  0001f	0f 8e b0 00 00
	00		 jle	 $LN11@SkipCutsce

; 1933 :         ListIter<MissionEvent>  iter     = events;

  00025	8d 87 a0 00 00
	00		 lea	 eax, DWORD PTR [edi+160]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0002b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _iter$1[ebp+4], -1
  00032	0f 57 c0	 xorps	 xmm0, xmm0
  00035	89 45 f8	 mov	 DWORD PTR _iter$1[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00038	8d 4d f8	 lea	 ecx, DWORD PTR _iter$1[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1935 :         double                  end_time = 0;

  0003b	f2 0f 11 45 f0	 movsd	 QWORD PTR _skip_time$1$[ebp], xmm0
  00040	32 db		 xor	 bl, bl
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00042	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionEvent@@@@QAEPAVMissionEvent@@XZ ; ListIter<MissionEvent>::next
  00047	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1937 :         while (++iter && !end) {

  00049	74 60		 je	 SHORT $LN40@SkipCutsce
  0004b	0f 1f 44 00 00	 npad	 5
$LL2@SkipCutsce:
  00050	84 db		 test	 bl, bl
  00052	75 57		 jne	 SHORT $LN40@SkipCutsce

; 1938 :             MissionEvent* event = iter.value();

  00054	8d 4d f8	 lea	 ecx, DWORD PTR _iter$1[ebp]
  00057	e8 00 00 00 00	 call	 ?value@?$ListIter@VMissionEvent@@@@QAEPAVMissionEvent@@XZ ; ListIter<MissionEvent>::value
  0005c	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\stars45\missionevent.h

; 124  :     bool                 IsPending()       const { return status == PENDING;  }

  0005e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00061	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1940 :             if (event->IsPending() || event->IsActive()) {

  00063	74 05		 je	 SHORT $LN6@SkipCutsce
; File d:\programming\starshatter\trunk\stars45\missionevent.h

; 125  :     bool                 IsActive()        const { return status == ACTIVE;   }

  00065	83 f8 01	 cmp	 eax, 1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1940 :             if (event->IsPending() || event->IsActive()) {

  00068	75 35		 jne	 SHORT $LN15@SkipCutsce
$LN6@SkipCutsce:

; 1941 :                 if (event->Event() == MissionEvent::END_SCENE ||

  0006a	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0006d	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00070	74 05		 je	 SHORT $LN8@SkipCutsce
  00072	83 f8 08	 cmp	 eax, 8
  00075	75 0c		 jne	 SHORT $LN7@SkipCutsce
$LN8@SkipCutsce:
; File d:\programming\starshatter\trunk\stars45\missionevent.h

; 129  :     double               Time()            const { return time;    }

  00077	f2 0f 10 46 10	 movsd	 xmm0, QWORD PTR [esi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1943 :                     end = true;

  0007c	b3 01		 mov	 bl, 1
; File d:\programming\starshatter\trunk\stars45\missionevent.h

; 129  :     double               Time()            const { return time;    }

  0007e	f2 0f 11 45 f0	 movsd	 QWORD PTR _skip_time$1$[ebp], xmm0
$LN7@SkipCutsce:
  00083	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1947 :                 if (event->Event() == MissionEvent::FIRE_WEAPON) {

  00085	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00088	75 07		 jne	 SHORT $LN9@SkipCutsce

; 1948 :                     event->Skip();

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]
  0008c	ff 50 08	 call	 DWORD PTR [eax+8]

; 1949 :                 }
; 1950 : 
; 1951 :                 else {

  0008f	eb 0e		 jmp	 SHORT $LN15@SkipCutsce
$LN9@SkipCutsce:

; 1952 :                     event->Activate();

  00091	e8 00 00 00 00	 call	 ?Activate@MissionEvent@@QAEXXZ ; MissionEvent::Activate

; 1953 :                     event->Execute(true);

  00096	8b 06		 mov	 eax, DWORD PTR [esi]
  00098	8b ce		 mov	 ecx, esi
  0009a	6a 01		 push	 1
  0009c	ff 50 04	 call	 DWORD PTR [eax+4]
$LN15@SkipCutsce:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0009f	8d 4d f8	 lea	 ecx, DWORD PTR _iter$1[ebp]
  000a2	e8 00 00 00 00	 call	 ?next@?$ListIter@VMissionEvent@@@@QAEPAVMissionEvent@@XZ ; ListIter<MissionEvent>::next
  000a7	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 1937 :         while (++iter && !end) {

  000a9	75 a5		 jne	 SHORT $LL2@SkipCutsce
$LN40@SkipCutsce:

; 1954 :                 }
; 1955 :             }
; 1956 :         }
; 1957 : 
; 1958 :         double skip_time = end_time - MissionClock();

  000ab	8b cf		 mov	 ecx, edi
  000ad	e8 00 00 00 00	 call	 ?MissionClock@Sim@@QBENXZ ; Sim::MissionClock
  000b2	f2 0f 10 4d f0	 movsd	 xmm1, QWORD PTR _skip_time$1$[ebp]
  000b7	f2 0f 5c c8	 subsd	 xmm1, xmm0

; 1959 :         if (skip_time > 0) {

  000bb	66 0f 2f 0d 00
	00 00 00	 comisd	 xmm1, QWORD PTR __real@0000000000000000
  000c3	76 10		 jbe	 SHORT $LN11@SkipCutsce

; 1960 :             Game::SkipGameTime(skip_time);

  000c5	83 ec 08	 sub	 esp, 8
  000c8	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000cd	e8 00 00 00 00	 call	 ?SkipGameTime@Game@@SAXN@Z ; Game::SkipGameTime
  000d2	83 c4 08	 add	 esp, 8
$LN11@SkipCutsce:

; 1961 :         }
; 1962 :     }
; 1963 : }

  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
?SkipCutscene@Sim@@QAEXXZ ENDP				; Sim::SkipCutscene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\instruction.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\instruction.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\instruction.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\instruction.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\mission.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -180						; size = 24
$T3 = -180						; size = 24
$T4 = -156						; size = 24
$T5 = -156						; size = 24
$T6 = -156						; size = 24
$T7 = -156						; size = 24
_elem$GSCopy$1$ = -132					; size = 4
_msn_elem$1$ = -128					; size = 4
_design_path$8 = -124					; size = 8
_design_path$9 = -124					; size = 8
$T10 = -120						; size = 4
$T11 = -120						; size = 4
$T12 = -120						; size = 4
_i$1$ = -116						; size = 4
tv1762 = -116						; size = 4
tv1761 = -116						; size = 4
$T13 = -116						; size = 4
_squadron_index$14 = -116				; size = 4
$T15 = -116						; size = 4
_this$GSCopy$1$ = -112					; size = 4
$T16 = -112						; size = 4
$T17 = -112						; size = 4
_nav$1$ = -112						; size = 4
_num_inst$1$ = -112					; size = 4
_o$1$ = -112						; size = 4
_num_obj$1$ = -112					; size = 4
_hangar$1$ = -112					; size = 4
$T18 = -112						; size = 4
_ammo$19 = -108						; size = 64
$T20 = -44						; size = 24
$T21 = -44						; size = 24
_fuel$22 = -36						; size = 16
_nav_iter$23 = -28					; size = 8
_instr$24 = -28						; size = 8
$T25 = -28						; size = 8
$T26 = -28						; size = 8
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_elem$ = 8						; size = 4
?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z PROC ; Sim::CreateMissionElement
; _this$ = ecx

; 2051 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 4d 90	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00031	8b 5d 08	 mov	 ebx, DWORD PTR _elem$[ebp]

; 2052 :     MissionElement* msn_elem = 0;

  00034	33 ff		 xor	 edi, edi

; 2053 : 
; 2054 :     if (elem->IsSquadron()) {

  00036	8b cb		 mov	 ecx, ebx
  00038	89 9d 7c ff ff
	ff		 mov	 DWORD PTR _elem$GSCopy$1$[ebp], ebx
  0003e	e8 00 00 00 00	 call	 ?IsSquadron@Element@@QBE_NXZ ; Element::IsSquadron
  00043	84 c0		 test	 al, al
  00045	74 1f		 je	 SHORT $LN20@CreateMiss
; File d:\programming\starshatter\trunk\stars45\element.h

; 143  :     Ship*             GetCarrier()               const { return carrier;    }

  00047	8b 43 7c	 mov	 eax, DWORD PTR [ebx+124]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2055 :         if (!elem->GetCarrier() || elem->GetCarrier()->Integrity() < 1)

  0004a	85 c0		 test	 eax, eax
  0004c	74 11		 je	 SHORT $LN21@CreateMiss
  0004e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00056	0f 2f 80 b8 01
	00 00		 comiss	 xmm0, DWORD PTR [eax+440]
  0005d	76 07		 jbe	 SHORT $LN20@CreateMiss
$LN21@CreateMiss:

; 2056 :         return msn_elem;

  0005f	33 c0		 xor	 eax, eax
  00061	e9 da 07 00 00	 jmp	 $LN1@CreateMiss
$LN20@CreateMiss:

; 2057 :     }
; 2058 : 
; 2059 :     if (elem && !elem->IsNetObserver()) {

  00066	85 db		 test	 ebx, ebx
  00068	0f 84 d0 07 00
	00		 je	 $LN11@CreateMiss
  0006e	e8 00 00 00 00	 call	 ?IsNetObserver@Element@@QBE_NXZ ; Element::IsNetObserver
  00073	84 c0		 test	 al, al
  00075	0f 85 c3 07 00
	00		 jne	 $LN11@CreateMiss
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  0007b	68 10 01 00 00	 push	 272			; 00000110H
  00080	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00085	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2060 :         msn_elem = new(__FILE__,__LINE__) MissionElement;

  00088	89 45 8c	 mov	 DWORD PTR $T15[ebp], eax
  0008b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00092	85 c0		 test	 eax, eax
  00094	74 0e		 je	 SHORT $LN40@CreateMiss
  00096	8b c8		 mov	 ecx, eax
  00098	e8 00 00 00 00	 call	 ??0MissionElement@@QAE@XZ ; MissionElement::MissionElement
  0009d	8b f8		 mov	 edi, eax
  0009f	89 45 80	 mov	 DWORD PTR _msn_elem$1$[ebp], eax
  000a2	eb 05		 jmp	 SHORT $LN41@CreateMiss
$LN40@CreateMiss:
  000a4	33 ff		 xor	 edi, edi
  000a6	89 7d 80	 mov	 DWORD PTR _msn_elem$1$[ebp], edi
$LN41@CreateMiss:
  000a9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File d:\programming\starshatter\trunk\stars45\mission.h

; 284  :     void              SetName(const char* n)        { name = n;          }

  000b0	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  000b3	ff 73 2c	 push	 DWORD PTR [ebx+44]
  000b6	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
  000bb	8b 03		 mov	 eax, DWORD PTR [ebx]
  000bd	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  000c0	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Element@@6B@
  000c5	75 05		 jne	 SHORT $LN51@CreateMiss
; File d:\programming\starshatter\trunk\stars45\element.h

; 73   :     virtual int       GetIFF()          const { return iff;              }

  000c7	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000ca	eb 04		 jmp	 SHORT $LN50@CreateMiss
$LN51@CreateMiss:
  000cc	8b cb		 mov	 ecx, ebx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2063 :         msn_elem->SetIFF(elem->GetIFF());

  000ce	ff d2		 call	 edx
$LN50@CreateMiss:
; File d:\programming\starshatter\trunk\stars45\mission.h

; 295  :     void              SetIFF(int iff)               { IFF_code = iff;    }

  000d0	89 47 44	 mov	 DWORD PTR [edi+68], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2066 :         if (elem->IsSquadron() && elem->GetCarrier()) {

  000d3	8b cb		 mov	 ecx, ebx
; File d:\programming\starshatter\trunk\stars45\element.h

; 70   :     int               Type()            const { return type;             }

  000d5	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 297  :     void              SetMissionRole(int r)         { mission_role = r;  }

  000d8	89 47 48	 mov	 DWORD PTR [edi+72], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2066 :         if (elem->IsSquadron() && elem->GetCarrier()) {

  000db	e8 00 00 00 00	 call	 ?IsSquadron@Element@@QBE_NXZ ; Element::IsSquadron
  000e0	84 c0		 test	 al, al
  000e2	0f 84 48 01 00
	00		 je	 $LN23@CreateMiss
; File d:\programming\starshatter\trunk\stars45\element.h

; 143  :     Ship*             GetCarrier()               const { return carrier;    }

  000e8	8b 73 7c	 mov	 esi, DWORD PTR [ebx+124]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2066 :         if (elem->IsSquadron() && elem->GetCarrier()) {

  000eb	85 f6		 test	 esi, esi
  000ed	0f 84 3d 01 00
	00		 je	 $LN23@CreateMiss
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  000f3	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 285  :     void              SetCarrier(const char* c)     { carrier = c;       }

  000f6	50		 push	 eax
  000f7	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  000fa	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
; File d:\programming\starshatter\trunk\stars45\element.h

; 157  :     int               GetCount()                 const { return count;      }

  000ff	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2071 :             msn_elem->SetLocation(carrier->Location().OtherHand());

  00102	8d 4d d4	 lea	 ecx, DWORD PTR $T21[ebp]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 292  :     void              SetCount(int n)               { count = n;         }

  00105	89 47 38	 mov	 DWORD PTR [edi+56], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2071 :             msn_elem->SetLocation(carrier->Location().OtherHand());

  00108	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0010e	0f 10 46 48	 movups	 xmm0, XMMWORD PTR [esi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2071 :             msn_elem->SetLocation(carrier->Location().OtherHand());

  00112	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00113	0f 11 45 d4	 movups	 XMMWORD PTR $T21[ebp], xmm0
  00117	f2 0f 10 46 58	 movsd	 xmm0, QWORD PTR [esi+88]
  0011c	f2 0f 11 45 e4	 movsd	 QWORD PTR $T21[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2071 :             msn_elem->SetLocation(carrier->Location().OtherHand());

  00121	e8 00 00 00 00	 call	 ?OtherHand@Point@@QBE?AU1@XZ ; Point::OtherHand
  00126	50		 push	 eax
  00127	8b cf		 mov	 ecx, edi
  00129	e8 00 00 00 00	 call	 ?SetLocation@MissionElement@@QAEXABUPoint@@@Z ; MissionElement::SetLocation
  0012e	8b 06		 mov	 eax, DWORD PTR [esi]
  00130	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00136	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  0013b	75 08		 jne	 SHORT $LN53@CreateMiss
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0013d	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00143	eb 04		 jmp	 SHORT $LN52@CreateMiss
$LN53@CreateMiss:
  00145	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2073 :             if (carrier->GetRegion())

  00147	ff d2		 call	 edx
$LN52@CreateMiss:
  00149	85 c0		 test	 eax, eax
  0014b	74 26		 je	 SHORT $LN25@CreateMiss
  0014d	8b 06		 mov	 eax, DWORD PTR [esi]
  0014f	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00155	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  0015a	75 08		 jne	 SHORT $LN55@CreateMiss
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0015c	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00162	eb 04		 jmp	 SHORT $LN54@CreateMiss
$LN55@CreateMiss:
  00164	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2074 :             msn_elem->SetRegion(carrier->GetRegion()->Name());

  00166	ff d2		 call	 edx
$LN54@CreateMiss:
; File d:\programming\starshatter\trunk\stars45\mission.h

; 304  :     void              SetRegion(const char* rgn)    { rgn_name = rgn;    }

  00168	ff 70 0c	 push	 DWORD PTR [eax+12]
  0016b	8d 4f 68	 lea	 ecx, DWORD PTR [edi+104]
  0016e	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
$LN25@CreateMiss:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2077 :             Hangar*  hangar = FindSquadron(elem->Name(), squadron_index);

  00173	8b 4d 90	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00176	8d 45 8c	 lea	 eax, DWORD PTR _squadron_index$14[ebp]
  00179	50		 push	 eax
  0017a	ff 73 2c	 push	 DWORD PTR [ebx+44]
  0017d	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _squadron_index$14[ebp], 0
  00184	e8 00 00 00 00	 call	 ?FindSquadron@Sim@@IAEPAVHangar@@PBDAAH@Z ; Sim::FindSquadron
  00189	89 45 90	 mov	 DWORD PTR _hangar$1$[ebp], eax

; 2078 : 
; 2079 :             if (hangar) {

  0018c	85 c0		 test	 eax, eax
  0018e	0f 84 b0 00 00
	00		 je	 $LN24@CreateMiss

; 2080 :                 msn_elem->SetDeadCount(hangar->NumShipsDead(squadron_index));

  00194	8b 75 8c	 mov	 esi, DWORD PTR _squadron_index$14[ebp]
  00197	8b c8		 mov	 ecx, eax
  00199	56		 push	 esi
  0019a	e8 00 00 00 00	 call	 ?NumShipsDead@Hangar@@QBEHH@Z ; Hangar::NumShipsDead

; 2081 :                 msn_elem->SetMaintCount(hangar->NumShipsMaint(squadron_index));

  0019f	8b 4d 90	 mov	 ecx, DWORD PTR _hangar$1$[ebp]
  001a2	56		 push	 esi
; File d:\programming\starshatter\trunk\stars45\mission.h

; 294  :     void              SetDeadCount(int n)           { dead_count = n;    }

  001a3	89 47 40	 mov	 DWORD PTR [edi+64], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2081 :                 msn_elem->SetMaintCount(hangar->NumShipsMaint(squadron_index));

  001a6	e8 00 00 00 00	 call	 ?NumShipsMaint@Hangar@@QBEHH@Z ; Hangar::NumShipsMaint

; 2083 :                 const ShipDesign* design = hangar->SquadronDesign(squadron_index);

  001ab	8b 4d 90	 mov	 ecx, DWORD PTR _hangar$1$[ebp]
  001ae	56		 push	 esi
; File d:\programming\starshatter\trunk\stars45\mission.h

; 293  :     void              SetMaintCount(int n)          { maint_count = n;   }

  001af	89 47 3c	 mov	 DWORD PTR [edi+60], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2083 :                 const ShipDesign* design = hangar->SquadronDesign(squadron_index);

  001b2	e8 00 00 00 00	 call	 ?SquadronDesign@Hangar@@QBEPBVShipDesign@@H@Z ; Hangar::SquadronDesign
; File d:\programming\starshatter\trunk\stars45\mission.h

; 290  :     void              SetDesign(const ShipDesign* d){ design = d;        }

  001b7	89 47 30	 mov	 DWORD PTR [edi+48], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2086 :                 Text design_path = design->path_name;

  001ba	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$9[ebp]
  001bd	83 c0 40	 add	 eax, 64			; 00000040H
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 ??0Text@@QAE@PBD@Z	; Text::Text

; 2087 :                 design_path.setSensitive(false);

  001c6	6a 00		 push	 0
  001c8	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$9[ebp]
  001cb	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  001d2	e8 00 00 00 00	 call	 ?setSensitive@Text@@QAEX_N@Z ; Text::setSensitive

; 2088 : 
; 2089 :                 if (design_path.indexOf("/Mods/Ships") == 0) {

  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PMIPMFJL@?1Mods?1Ships?$AA@
  001dc	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$9[ebp]
  001df	e8 00 00 00 00	 call	 ?indexOf@Text@@QBEHPBD@Z ; Text::indexOf
  001e4	85 c0		 test	 eax, eax
  001e6	75 37		 jne	 SHORT $LN27@CreateMiss

; 2090 :                     design_path = design_path.substring(11, 1000);

  001e8	68 e8 03 00 00	 push	 1000			; 000003e8H
  001ed	6a 0b		 push	 11			; 0000000bH
  001ef	8d 45 e4	 lea	 eax, DWORD PTR $T26[ebp]
  001f2	50		 push	 eax
  001f3	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$9[ebp]
  001f6	e8 00 00 00 00	 call	 ?substring@Text@@QAE?AV1@HH@Z ; Text::substring
  001fb	50		 push	 eax
  001fc	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$9[ebp]
  001ff	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00203	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@ABV0@@Z ; Text::operator=
  00208	8d 4d e4	 lea	 ecx, DWORD PTR $T26[ebp]
  0020b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0020f	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
; File d:\programming\starshatter\trunk\stars45\mission.h

; 288  :     void              SetPath(const char* p)        { path = p;          }

  00214	ff 75 84	 push	 DWORD PTR _design_path$9[ebp]
  00217	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  0021a	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
$LN27@CreateMiss:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2093 :             }

  0021f	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$9[ebp]
  00222	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00229	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text

; 2094 :         }
; 2095 : 
; 2096 :         else {

  0022e	eb 14		 jmp	 SHORT $LN24@CreateMiss
$LN23@CreateMiss:
; File d:\programming\starshatter\trunk\stars45\mission.h

; 287  :     void              SetSquadron(const char* s)    { squadron = s;      }

  00230	ff b3 80 00 00
	00		 push	 DWORD PTR [ebx+128]
  00236	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  00239	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  0023e	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 292  :     void              SetCount(int n)               { count = n;         }

  00241	89 47 38	 mov	 DWORD PTR [edi+56], eax
$LN24@CreateMiss:
; File d:\programming\starshatter\trunk\stars45\element.h

; 137  :     Element*          GetCommander()             const { return commander;  }

  00244	8b 43 74	 mov	 eax, DWORD PTR [ebx+116]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2101 :         if (elem->GetCommander())

  00247	85 c0		 test	 eax, eax
  00249	74 0b		 je	 SHORT $LN28@CreateMiss
; File d:\programming\starshatter\trunk\stars45\mission.h

; 286  :     void              SetCommander(const char* c)   { commander = c;     }

  0024b	ff 70 2c	 push	 DWORD PTR [eax+44]
  0024e	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00251	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
$LN28@CreateMiss:
; File d:\programming\starshatter\trunk\stars45\element.h

; 151  :     CombatGroup*      GetCombatGroup()               { return combat_group; }

  00256	8b 83 88 00 00
	00		 mov	 eax, DWORD PTR [ebx+136]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2107 :         Ship* ship = elem->GetShip(1);

  0025c	8b cb		 mov	 ecx, ebx
; File d:\programming\starshatter\trunk\stars45\mission.h

; 321  :     void              SetCombatGroup(CombatGroup* g) { combat_group = g;    }

  0025e	89 87 c8 00 00
	00		 mov	 DWORD PTR [edi+200], eax
; File d:\programming\starshatter\trunk\stars45\element.h

; 153  :     CombatUnit*       GetCombatUnit()                { return combat_unit;  }

  00264	8b 83 8c 00 00
	00		 mov	 eax, DWORD PTR [ebx+140]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2107 :         Ship* ship = elem->GetShip(1);

  0026a	6a 01		 push	 1
; File d:\programming\starshatter\trunk\stars45\mission.h

; 323  :     void              SetCombatUnit(CombatUnit* u)   { combat_unit = u;     }

  0026c	89 87 cc 00 00
	00		 mov	 DWORD PTR [edi+204], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2107 :         Ship* ship = elem->GetShip(1);

  00272	e8 00 00 00 00	 call	 ?GetShip@Element@@QAEPAVShip@@H@Z ; Element::GetShip
  00277	8b f0		 mov	 esi, eax

; 2108 :         if (ship) {

  00279	85 f6		 test	 esi, esi
  0027b	0f 84 46 01 00
	00		 je	 $LN29@CreateMiss
  00281	8b 06		 mov	 eax, DWORD PTR [esi]
  00283	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00289	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  0028e	75 08		 jne	 SHORT $LN57@CreateMiss
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00290	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00296	eb 04		 jmp	 SHORT $LN56@CreateMiss
$LN57@CreateMiss:
  00298	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2109 :             if (ship->GetRegion())

  0029a	ff d2		 call	 edx
$LN56@CreateMiss:
  0029c	85 c0		 test	 eax, eax
  0029e	74 26		 je	 SHORT $LN30@CreateMiss
  002a0	8b 06		 mov	 eax, DWORD PTR [esi]
  002a2	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  002a8	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  002ad	75 08		 jne	 SHORT $LN59@CreateMiss
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  002af	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  002b5	eb 04		 jmp	 SHORT $LN58@CreateMiss
$LN59@CreateMiss:
  002b7	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2110 :             msn_elem->SetRegion(ship->GetRegion()->Name());

  002b9	ff d2		 call	 edx
$LN58@CreateMiss:
; File d:\programming\starshatter\trunk\stars45\mission.h

; 304  :     void              SetRegion(const char* rgn)    { rgn_name = rgn;    }

  002bb	ff 70 0c	 push	 DWORD PTR [eax+12]
  002be	8d 4f 68	 lea	 ecx, DWORD PTR [edi+104]
  002c1	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
$LN30@CreateMiss:
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  002c6	0f 10 46 48	 movups	 xmm0, XMMWORD PTR [esi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2112 :             msn_elem->SetLocation(ship->Location().OtherHand());

  002ca	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  002d0	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  002d1	0f 11 45 d4	 movups	 XMMWORD PTR $T20[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2112 :             msn_elem->SetLocation(ship->Location().OtherHand());

  002d5	8d 4d d4	 lea	 ecx, DWORD PTR $T20[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  002d8	f2 0f 10 46 58	 movsd	 xmm0, QWORD PTR [esi+88]
  002dd	f2 0f 11 45 e4	 movsd	 QWORD PTR $T20[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2112 :             msn_elem->SetLocation(ship->Location().OtherHand());

  002e2	e8 00 00 00 00	 call	 ?OtherHand@Point@@QBE?AU1@XZ ; Point::OtherHand
  002e7	50		 push	 eax
  002e8	8b cf		 mov	 ecx, edi
  002ea	e8 00 00 00 00	 call	 ?SetLocation@MissionElement@@QAEXABUPoint@@@Z ; MissionElement::SetLocation
; File d:\programming\starshatter\trunk\stars45\ship.h

; 364  :     const ShipDesign* Design()          const    { return design;        }

  002ef	8b 86 00 02 00
	00		 mov	 eax, DWORD PTR [esi+512]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2117 :             msn_elem->SetHoldTime((int) elem->GetHoldTime());

  002f5	8b cb		 mov	 ecx, ebx
; File d:\programming\starshatter\trunk\stars45\mission.h

; 290  :     void              SetDesign(const ShipDesign* d){ design = d;        }

  002f7	89 47 30	 mov	 DWORD PTR [edi+48], eax
; File d:\programming\starshatter\trunk\stars45\element.h

; 74   :     int               Player()          const { return player;           }

  002fa	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 298  :     void              SetPlayer(int p)              { player = p;        }

  002fd	89 47 5c	 mov	 DWORD PTR [edi+92], eax
; File d:\programming\starshatter\trunk\stars45\element.h

; 145  :     int               GetCommandAILevel()        const { return command_ai; }

  00300	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 303  :     void              SetCommandAI(int a)           { command_ai = a;    }

  00303	89 47 60	 mov	 DWORD PTR [edi+96], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2117 :             msn_elem->SetHoldTime((int) elem->GetHoldTime());

  00306	e8 00 00 00 00	 call	 ?GetHoldTime@Element@@QAENXZ ; Element::GetHoldTime
  0030b	f2 0f 2c c0	 cvttsd2si eax, xmm0
; File d:\programming\starshatter\trunk\stars45\mission.h

; 309  :     void              SetHoldTime(int t)            { hold_time = t;     }

  0030f	89 47 54	 mov	 DWORD PTR [edi+84], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2118 :             msn_elem->SetZoneLock(elem->GetZoneLock());

  00312	e8 00 00 00 00	 call	 ?GetZoneLock@Element@@QAE_NXZ ; Element::GetZoneLock
  00317	0f b6 c0	 movzx	 eax, al

; 2119 :             msn_elem->SetHeading(ship->CompassHeading());

  0031a	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\mission.h

; 310  :     void              SetZoneLock(int z)            { zone_lock = z;     }

  0031c	89 47 58	 mov	 DWORD PTR [edi+88], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2119 :             msn_elem->SetHeading(ship->CompassHeading());

  0031f	e8 00 00 00 00	 call	 ?CompassHeading@Ship@@QBENXZ ; Ship::CompassHeading
; File d:\programming\starshatter\trunk\stars45\mission.h

; 307  :     void              SetHeading(double h)          { heading = h;       }

  00324	f2 0f 11 87 c0
	00 00 00	 movsd	 QWORD PTR [edi+192], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2125 :             Text design_path = ship->Design()->path_name;

  0032c	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$8[ebp]
; File d:\programming\starshatter\trunk\stars45\element.h

; 98   :     bool              IsPlayable()      const { return playable;         }

  0032f	8a 83 a1 00 00
	00		 mov	 al, BYTE PTR [ebx+161]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 299  :     void              SetPlayable(bool p)           { playable = p;      }

  00335	88 47 65	 mov	 BYTE PTR [edi+101], al
; File d:\programming\starshatter\trunk\stars45\element.h

; 97   :     bool              IsRogue()         const { return rogue;            }

  00338	8a 83 a0 00 00
	00		 mov	 al, BYTE PTR [ebx+160]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 300  :     void              SetRogue(bool r)              { rogue = r;         }

  0033e	88 47 66	 mov	 BYTE PTR [edi+102], al
; File d:\programming\starshatter\trunk\stars45\element.h

; 78   :     int               IntelLevel()      const { return intel;            }

  00341	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 296  :     void              SetIntelLevel(int i)          { intel = i;         }

  00344	89 47 4c	 mov	 DWORD PTR [edi+76], eax
; File d:\programming\starshatter\trunk\stars45\ship.h

; 364  :     const ShipDesign* Design()          const    { return design;        }

  00347	8b 86 00 02 00
	00		 mov	 eax, DWORD PTR [esi+512]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2125 :             Text design_path = ship->Design()->path_name;

  0034d	83 c0 40	 add	 eax, 64			; 00000040H
  00350	50		 push	 eax
  00351	e8 00 00 00 00	 call	 ??0Text@@QAE@PBD@Z	; Text::Text

; 2126 :             design_path.setSensitive(false);

  00356	6a 00		 push	 0
  00358	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$8[ebp]
  0035b	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00362	e8 00 00 00 00	 call	 ?setSensitive@Text@@QAEX_N@Z ; Text::setSensitive

; 2127 : 
; 2128 :             if (design_path.indexOf("/Mods/Ships") == 0) {

  00367	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PMIPMFJL@?1Mods?1Ships?$AA@
  0036c	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$8[ebp]
  0036f	e8 00 00 00 00	 call	 ?indexOf@Text@@QBEHPBD@Z ; Text::indexOf
  00374	85 c0		 test	 eax, eax
  00376	75 37		 jne	 SHORT $LN31@CreateMiss

; 2129 :                 design_path = design_path.substring(11, 1000);

  00378	68 e8 03 00 00	 push	 1000			; 000003e8H
  0037d	6a 0b		 push	 11			; 0000000bH
  0037f	8d 45 e4	 lea	 eax, DWORD PTR $T25[ebp]
  00382	50		 push	 eax
  00383	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$8[ebp]
  00386	e8 00 00 00 00	 call	 ?substring@Text@@QAE?AV1@HH@Z ; Text::substring
  0038b	50		 push	 eax
  0038c	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$8[ebp]
  0038f	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00393	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@ABV0@@Z ; Text::operator=
  00398	8d 4d e4	 lea	 ecx, DWORD PTR $T25[ebp]
  0039b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0039f	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
; File d:\programming\starshatter\trunk\stars45\mission.h

; 288  :     void              SetPath(const char* p)        { path = p;          }

  003a4	ff 75 84	 push	 DWORD PTR _design_path$8[ebp]
  003a7	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  003aa	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
$LN31@CreateMiss:
; File d:\programming\starshatter\trunk\stars45\ship.h

; 396  :     int               RespawnCount()    const    { return respawns;      }

  003af	8b 86 98 04 00
	00		 mov	 eax, DWORD PTR [esi+1176]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2134 :         }

  003b5	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$8[ebp]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 308  :     void              SetRespawnCount(int r)        { respawns = r;      }

  003b8	89 47 50	 mov	 DWORD PTR [edi+80], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2134 :         }

  003bb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003c2	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
$LN29@CreateMiss:
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  003c7	6a 4c		 push	 76			; 0000004cH
  003c9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003ce	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2136 :         MissionLoad* loadout = new(__FILE__,__LINE__) MissionLoad;

  003d1	89 45 90	 mov	 DWORD PTR $T18[ebp], eax
  003d4	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  003db	85 c0		 test	 eax, eax
  003dd	74 0f		 je	 SHORT $LN42@CreateMiss
  003df	6a 00		 push	 0
  003e1	6a ff		 push	 -1
  003e3	8b c8		 mov	 ecx, eax
  003e5	e8 00 00 00 00	 call	 ??0MissionLoad@@QAE@HPBD@Z ; MissionLoad::MissionLoad
  003ea	8b c8		 mov	 ecx, eax
  003ec	eb 02		 jmp	 SHORT $LN43@CreateMiss
$LN42@CreateMiss:
  003ee	33 c9		 xor	 ecx, ecx
$LN43@CreateMiss:
  003f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 2137 :         CopyMemory(loadout->GetStations(), elem->Loadout(), 16 * sizeof(int));

  003f7	e8 00 00 00 00	 call	 ?GetStations@MissionLoad@@QAEPAHXZ ; MissionLoad::GetStations
  003fc	0f 10 83 a4 00
	00 00		 movups	 xmm0, XMMWORD PTR [ebx+164]

; 2138 : 
; 2139 :         msn_elem->Loadouts().append(loadout);

  00403	51		 push	 ecx
; File d:\programming\starshatter\trunk\stars45\mission.h

; 281  :     List<MissionLoad>&   Loadouts()        { return loadouts;      }

  00404	8d 8f f4 00 00
	00		 lea	 ecx, DWORD PTR [edi+244]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2137 :         CopyMemory(loadout->GetStations(), elem->Loadout(), 16 * sizeof(int));

  0040a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0040d	0f 10 83 b4 00
	00 00		 movups	 xmm0, XMMWORD PTR [ebx+180]
  00414	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00418	0f 10 83 c4 00
	00 00		 movups	 xmm0, XMMWORD PTR [ebx+196]
  0041f	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
  00423	0f 10 83 d4 00
	00 00		 movups	 xmm0, XMMWORD PTR [ebx+212]
  0042a	0f 11 40 30	 movups	 XMMWORD PTR [eax+48], xmm0

; 2138 : 
; 2139 :         msn_elem->Loadouts().append(loadout);

  0042e	e8 00 00 00 00	 call	 ?append@?$List@VMissionLoad@@@@QAEXPBVMissionLoad@@@Z ; List<MissionLoad>::append

; 2140 : 
; 2141 :         int num_obj = elem->NumObjectives();

  00433	8b 43 5c	 mov	 eax, DWORD PTR [ebx+92]

; 2142 :         for (int i = 0; i < num_obj; i++) {

  00436	33 f6		 xor	 esi, esi
  00438	89 45 90	 mov	 DWORD PTR _num_obj$1$[ebp], eax
  0043b	85 c0		 test	 eax, eax
  0043d	7e 5d		 jle	 SHORT $LN3@CreateMiss
  0043f	8d 87 d0 00 00
	00		 lea	 eax, DWORD PTR [edi+208]
  00445	8b 7d 90	 mov	 edi, DWORD PTR _num_obj$1$[ebp]
  00448	89 45 8c	 mov	 DWORD PTR tv1762[ebp], eax
  0044b	0f 1f 44 00 00	 npad	 5
$LL4@CreateMiss:

; 2143 :             Instruction* o     = elem->GetObjective(i);

  00450	56		 push	 esi
  00451	8b cb		 mov	 ecx, ebx
  00453	e8 00 00 00 00	 call	 ?GetObjective@Element@@QAEPAVInstruction@@H@Z ; Element::GetObjective
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00458	68 b0 00 00 00	 push	 176			; 000000b0H
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2143 :             Instruction* o     = elem->GetObjective(i);

  0045d	89 45 90	 mov	 DWORD PTR _o$1$[ebp], eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00460	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00465	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2146 :             instr = new(__FILE__,__LINE__) Instruction(*o);

  00468	89 45 88	 mov	 DWORD PTR $T12[ebp], eax
  0046b	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  00472	85 c0		 test	 eax, eax
  00474	74 0c		 je	 SHORT $LN44@CreateMiss
  00476	ff 75 90	 push	 DWORD PTR _o$1$[ebp]
  00479	8b c8		 mov	 ecx, eax
  0047b	e8 00 00 00 00	 call	 ??0Instruction@@QAE@ABV0@@Z ; Instruction::Instruction
  00480	eb 02		 jmp	 SHORT $LN45@CreateMiss
$LN44@CreateMiss:
  00482	33 c0		 xor	 eax, eax
$LN45@CreateMiss:
  00484	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File d:\programming\starshatter\trunk\stars45\mission.h

; 317  :     void              AddObjective(Instruction* obj) { objectives.append(obj); }

  0048b	8b 4d 8c	 mov	 ecx, DWORD PTR tv1762[ebp]
  0048e	50		 push	 eax
  0048f	e8 00 00 00 00	 call	 ?append@?$List@VInstruction@@@@QAEXPBVInstruction@@@Z ; List<Instruction>::append
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2142 :         for (int i = 0; i < num_obj; i++) {

  00494	46		 inc	 esi
  00495	3b f7		 cmp	 esi, edi
  00497	7c b7		 jl	 SHORT $LL4@CreateMiss
  00499	8b 7d 80	 mov	 edi, DWORD PTR _msn_elem$1$[ebp]
$LN3@CreateMiss:

; 2147 : 
; 2148 :             msn_elem->AddObjective(instr);
; 2149 :         }
; 2150 : 
; 2151 :         int num_inst = elem->NumInstructions();

  0049c	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]

; 2152 :         for (int i = 0; i < num_inst; i++) {

  0049f	33 f6		 xor	 esi, esi
  004a1	89 45 90	 mov	 DWORD PTR _num_inst$1$[ebp], eax
  004a4	85 c0		 test	 eax, eax
  004a6	7e 6c		 jle	 SHORT $LN6@CreateMiss
  004a8	8d 87 dc 00 00
	00		 lea	 eax, DWORD PTR [edi+220]
  004ae	8b 7d 90	 mov	 edi, DWORD PTR _num_inst$1$[ebp]
  004b1	89 45 8c	 mov	 DWORD PTR tv1761[ebp], eax
$LL7@CreateMiss:

; 2153 :             Text instr = elem->GetInstruction(i);

  004b4	56		 push	 esi
  004b5	8d 45 e4	 lea	 eax, DWORD PTR _instr$24[ebp]
  004b8	8b cb		 mov	 ecx, ebx
  004ba	50		 push	 eax
  004bb	e8 00 00 00 00	 call	 ?GetInstruction@Element@@QAE?AVText@@H@Z ; Element::GetInstruction
  004c0	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  004c7	8b 45 e4	 mov	 eax, DWORD PTR _instr$24[ebp]
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  004ca	6a 08		 push	 8
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  004cc	89 45 90	 mov	 DWORD PTR $T16[ebp], eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  004cf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  004d4	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\mission.h

; 318  :     void              AddInstruction(const char* i)  { instructions.append(new(__FILE__,__LINE__) Text(i)); }

  004d7	89 45 88	 mov	 DWORD PTR $T10[ebp], eax
  004da	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  004de	85 c0		 test	 eax, eax
  004e0	74 0c		 je	 SHORT $LN264@CreateMiss
  004e2	ff 75 90	 push	 DWORD PTR $T16[ebp]
  004e5	8b c8		 mov	 ecx, eax
  004e7	e8 00 00 00 00	 call	 ??0Text@@QAE@PBD@Z	; Text::Text
  004ec	eb 02		 jmp	 SHORT $LN265@CreateMiss
$LN264@CreateMiss:
  004ee	33 c0		 xor	 eax, eax
$LN265@CreateMiss:
  004f0	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  004f4	8b 4d 8c	 mov	 ecx, DWORD PTR tv1761[ebp]
  004f7	50		 push	 eax
  004f8	e8 00 00 00 00	 call	 ?append@?$List@VText@@@@QAEXPBVText@@@Z ; List<Text>::append
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2155 :         }

  004fd	8d 4d e4	 lea	 ecx, DWORD PTR _instr$24[ebp]
  00500	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00507	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  0050c	46		 inc	 esi
  0050d	3b f7		 cmp	 esi, edi
  0050f	7c a3		 jl	 SHORT $LL7@CreateMiss
  00511	8b 7d 80	 mov	 edi, DWORD PTR _msn_elem$1$[ebp]
$LN6@CreateMiss:

; 2156 : 
; 2157 :         ListIter<Instruction> nav_iter = elem->GetFlightPlan();

  00514	8b cb		 mov	 ecx, ebx
  00516	e8 00 00 00 00	 call	 ?GetFlightPlan@Element@@QAEAAV?$List@VInstruction@@@@XZ ; Element::GetFlightPlan
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0051b	8d 4d e4	 lea	 ecx, DWORD PTR _nav_iter$23[ebp]

; 75   :    bool     isEmpty() const      { return !items; }
; 76   : 
; 77   :    bool     contains(const T* val) const;
; 78   :    int      count(const T* val)    const;
; 79   :    int      index(const T* val)    const;
; 80   :    T*       find(const T* val)     const;
; 81   : 
; 82   :    void     sort();
; 83   :    void     shuffle();
; 84   : 
; 85   : private:
; 86   :    typedef  T* PTR;
; 87   :    void     qsort(T** a, int lo, int hi);
; 88   :    void     resize(int newsize);
; 89   :    bool     check(int& index) const;
; 90   :    void     swap(T** a, int i, int j);
; 91   : 
; 92   :    int      items;
; 93   :    int      extent;
; 94   :    PTR*     array;
; 95   : 
; 96   :    friend class ListIter<T>;
; 97   : };
; 98   : 
; 99   : // +-------------------------------------------------------------------+
; 100  : 
; 101  : template <class T> class ListIter
; 102  : {
; 103  : public:
; 104  :    ListIter()                       : list(0),      step(-1)      { }
; 105  :    ListIter(const ListIter<T>& i)   : list(i.list), step(i.step)  { }
; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0051e	89 45 e4	 mov	 DWORD PTR _nav_iter$23[ebp], eax
  00521	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _nav_iter$23[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00528	e8 00 00 00 00	 call	 ?next@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::next
  0052d	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2158 :         while (++nav_iter) {

  0052f	0f 84 b9 00 00
	00		 je	 $LN9@CreateMiss
  00535	8b 5d 80	 mov	 ebx, DWORD PTR _msn_elem$1$[ebp]
$LL8@CreateMiss:

; 2159 :             Instruction* nav = nav_iter.value();

  00538	8d 4d e4	 lea	 ecx, DWORD PTR _nav_iter$23[ebp]
  0053b	e8 00 00 00 00	 call	 ?value@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::value
  00540	8b f8		 mov	 edi, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00542	68 b0 00 00 00	 push	 176			; 000000b0H
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2159 :             Instruction* nav = nav_iter.value();

  00547	89 7d 90	 mov	 DWORD PTR _nav$1$[ebp], edi
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  0054a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0054f	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2161 :             Instruction(nav->RegionName(), nav->Location(), nav->Action());

  00552	89 45 8c	 mov	 DWORD PTR $T13[ebp], eax
  00555	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9
  0055c	85 c0		 test	 eax, eax
  0055e	74 23		 je	 SHORT $LN46@CreateMiss
; File d:\programming\starshatter\trunk\stars45\instruction.h

; 128  :     int               Action()          const { return action;     }

  00560	8b 77 70	 mov	 esi, DWORD PTR [edi+112]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2161 :             Instruction(nav->RegionName(), nav->Location(), nav->Action());

  00563	83 ec 18	 sub	 esp, 24			; 00000018H
  00566	8b 4d 90	 mov	 ecx, DWORD PTR _nav$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\text.h

; 130  :    operator const char* () const { return sym; }

  00569	8b 7f 10	 mov	 edi, DWORD PTR [edi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2161 :             Instruction(nav->RegionName(), nav->Location(), nav->Action());

  0056c	54		 push	 esp
  0056d	e8 00 00 00 00	 call	 ?Location@Instruction@@QBE?AUPoint@@XZ ; Instruction::Location
  00572	8b 4d 8c	 mov	 ecx, DWORD PTR $T13[ebp]
  00575	56		 push	 esi
  00576	57		 push	 edi
  00577	e8 00 00 00 00	 call	 ??0Instruction@@QAE@PBDUPoint@@H@Z ; Instruction::Instruction
  0057c	8b 7d 90	 mov	 edi, DWORD PTR _nav$1$[ebp]
  0057f	8b f0		 mov	 esi, eax
  00581	eb 02		 jmp	 SHORT $LN47@CreateMiss
$LN46@CreateMiss:
  00583	33 f6		 xor	 esi, esi
$LN47@CreateMiss:
  00585	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 2165 :             npt->SetTarget(nav->TargetName());

  0058c	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\instruction.h

; 130  :     int               Formation()       const { return formation;  }

  0058e	8b 47 74	 mov	 eax, DWORD PTR [edi+116]

; 137  : 
; 138  :     const char*       TargetName()      const { return tgt_name;   }
; 139  :     const char*       TargetDesc()      const { return tgt_desc;   }
; 140  :     SimObject*        GetTarget();
; 141  : 
; 142  :     void              Evaluate(Ship* s);
; 143  :     const char*       GetShortDescription() const;
; 144  :     const char*       GetDescription()  const;
; 145  : 
; 146  :     // mutators:
; 147  :     void              SetRegion(SimRegion* r)       { region    = r;  }
; 148  :     void              SetLocation(const Point& l);
; 149  :     void              SetAction(int s)              { action    = s;  }
; 150  :     void              SetStatus(int s);
; 151  :     void              SetFormation(int s)           { formation = s;  }

  00591	89 46 74	 mov	 DWORD PTR [esi+116], eax

; 131  :     int               Speed()           const { return speed;      }

  00594	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]

; 152  :     void              SetSpeed(int s)               { speed     = s;  }

  00597	89 46 7c	 mov	 DWORD PTR [esi+124], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2165 :             npt->SetTarget(nav->TargetName());

  0059a	ff b7 80 00 00
	00		 push	 DWORD PTR [edi+128]
  005a0	e8 00 00 00 00	 call	 ?SetTarget@Instruction@@QAEXPBD@Z ; Instruction::SetTarget
; File d:\programming\starshatter\trunk\stars45\instruction.h

; 136  :     double            HoldTime()        const { return hold_time;  }

  005a5	f2 0f 10 87 a8
	00 00 00	 movsd	 xmm0, QWORD PTR [edi+168]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2168 :             npt->SetStatus(nav->Status());

  005ad	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\instruction.h

; 157  :     void              SetHoldTime(double t)         { hold_time = t;  }

  005af	f2 0f 11 86 a8
	00 00 00	 movsd	 QWORD PTR [esi+168], xmm0

; 132  :     int               EMCON()           const { return emcon;      }
; 133  :     int               WeaponsFree()     const { return wep_free;   }
; 134  :     int               Priority()        const { return priority;   }
; 135  :     int               Farcast()         const { return farcast;    }

  005b7	8b 87 a0 00 00
	00		 mov	 eax, DWORD PTR [edi+160]

; 153  :     void              SetEMCON(int e)               { emcon     = e;  }
; 154  :     void              SetWeaponsFree(int f)         { wep_free  = f;  }
; 155  :     void              SetPriority(int p)            { priority  = p;  }
; 156  :     void              SetFarcast(int f)             { farcast   = f;  }

  005bd	89 86 a0 00 00
	00		 mov	 DWORD PTR [esi+160], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2168 :             npt->SetStatus(nav->Status());

  005c3	ff 77 78	 push	 DWORD PTR [edi+120]
  005c6	e8 00 00 00 00	 call	 ?SetStatus@Instruction@@QAEXH@Z ; Instruction::SetStatus

; 2169 : 
; 2170 :             msn_elem->AddNavPoint(npt);

  005cb	6a 00		 push	 0
  005cd	56		 push	 esi
  005ce	8b cb		 mov	 ecx, ebx
  005d0	e8 00 00 00 00	 call	 ?AddNavPoint@MissionElement@@QAEXPAVInstruction@@0@Z ; MissionElement::AddNavPoint
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  005d5	8d 4d e4	 lea	 ecx, DWORD PTR _nav_iter$23[ebp]
  005d8	e8 00 00 00 00	 call	 ?next@?$ListIter@VInstruction@@@@QAEPAVInstruction@@XZ ; ListIter<Instruction>::next
  005dd	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2158 :         while (++nav_iter) {

  005df	0f 85 53 ff ff
	ff		 jne	 $LL8@CreateMiss
  005e5	8b 9d 7c ff ff
	ff		 mov	 ebx, DWORD PTR _elem$GSCopy$1$[ebp]
  005eb	8b 7d 80	 mov	 edi, DWORD PTR _msn_elem$1$[ebp]
$LN9@CreateMiss:

; 2171 :         }
; 2172 : 
; 2173 :         for (int i = 0; i < elem->NumShips(); i++) {

  005ee	33 c0		 xor	 eax, eax
  005f0	39 43 38	 cmp	 DWORD PTR [ebx+56], eax
  005f3	0f 8e 45 02 00
	00		 jle	 $LN11@CreateMiss
  005f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL12@CreateMiss:

; 2174 :             ship = elem->GetShip(i+1);

  00600	40		 inc	 eax
  00601	8b cb		 mov	 ecx, ebx
  00603	50		 push	 eax
  00604	89 45 8c	 mov	 DWORD PTR _i$1$[ebp], eax
  00607	e8 00 00 00 00	 call	 ?GetShip@Element@@QAEPAVShip@@H@Z ; Element::GetShip
  0060c	8b f8		 mov	 edi, eax

; 2175 : 
; 2176 :             if (ship) {

  0060e	85 ff		 test	 edi, edi
  00610	0f 84 19 02 00
	00		 je	 $LN409@CreateMiss
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  00616	68 c0 00 00 00	 push	 192			; 000000c0H
  0061b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00620	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2177 :                 MissionShip* s = new(__FILE__,__LINE__) MissionShip;

  00623	89 45 88	 mov	 DWORD PTR $T11[ebp], eax
  00626	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  0062d	85 c0		 test	 eax, eax
  0062f	74 0e		 je	 SHORT $LN48@CreateMiss
  00631	8b c8		 mov	 ecx, eax
  00633	e8 00 00 00 00	 call	 ??0MissionShip@@QAE@XZ	; MissionShip::MissionShip
  00638	8b d8		 mov	 ebx, eax
  0063a	89 45 90	 mov	 DWORD PTR $T17[ebp], eax
  0063d	eb 05		 jmp	 SHORT $LN49@CreateMiss
$LN48@CreateMiss:
  0063f	33 db		 xor	 ebx, ebx
  00641	89 5d 90	 mov	 DWORD PTR $T17[ebp], ebx
$LN49@CreateMiss:
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  00644	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2177 :                 MissionShip* s = new(__FILE__,__LINE__) MissionShip;

  00647	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File d:\programming\starshatter\trunk\stars45\mission.h

; 419  :     void              SetName(const char* n)        { name = n;          }

  0064e	50		 push	 eax
  0064f	8b cb		 mov	 ecx, ebx
  00651	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
; File d:\programming\starshatter\trunk\stars45\ship.h

; 362  :     const char*       Registry()        const    { return regnum;        }

  00656	8d 87 f0 01 00
	00		 lea	 eax, DWORD PTR [edi+496]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 420  :     void              SetRegNum(const char* n)      { regnum = n;        }

  0065c	50		 push	 eax
  0065d	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00660	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
  00665	8b 07		 mov	 eax, DWORD PTR [edi]
  00667	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  0066c	75 08		 jne	 SHORT $LN61@CreateMiss
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0066e	8b 87 c8 01 00
	00		 mov	 eax, DWORD PTR [edi+456]
  00674	eb 08		 jmp	 SHORT $LN60@CreateMiss
$LN61@CreateMiss:
  00676	8b cf		 mov	 ecx, edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2181 :                 s->SetRegion(ship->GetRegion()->Name());

  00678	ff 90 90 00 00
	00		 call	 DWORD PTR [eax+144]
$LN60@CreateMiss:
; File d:\programming\starshatter\trunk\stars45\mission.h

; 421  :     void              SetRegion(const char* n)      { region = n;        }

  0067e	ff 70 0c	 push	 DWORD PTR [eax+12]
  00681	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  00684	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00689	0f 10 47 48	 movups	 xmm0, XMMWORD PTR [edi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2182 :                 s->SetLocation(ship->Location().OtherHand());

  0068d	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00693	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00694	0f 11 85 64 ff
	ff ff		 movups	 XMMWORD PTR $T5[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2182 :                 s->SetLocation(ship->Location().OtherHand());

  0069b	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  006a1	f2 0f 10 47 58	 movsd	 xmm0, QWORD PTR [edi+88]
  006a6	f2 0f 11 85 74
	ff ff ff	 movsd	 QWORD PTR $T5[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2182 :                 s->SetLocation(ship->Location().OtherHand());

  006ae	e8 00 00 00 00	 call	 ?OtherHand@Point@@QBE?AU1@XZ ; Point::OtherHand
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  006b3	8d 8f a8 00 00
	00		 lea	 ecx, DWORD PTR [edi+168]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  006b9	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  006bd	f2 0f 11 43 20	 movsd	 QWORD PTR [ebx+32], xmm0
  006c2	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  006c7	f2 0f 11 43 28	 movsd	 QWORD PTR [ebx+40], xmm0
  006cc	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  006d1	8d 87 c0 00 00
	00		 lea	 eax, DWORD PTR [edi+192]
  006d7	50		 push	 eax
  006d8	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  006de	f2 0f 11 43 30	 movsd	 QWORD PTR [ebx+48], xmm0
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  006e3	50		 push	 eax
  006e4	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2183 :                 s->SetVelocity(ship->Velocity().OtherHand());

  006e9	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  006ef	50		 push	 eax
  006f0	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  006f6	e8 00 00 00 00	 call	 ?OtherHand@Point@@QBE?AU1@XZ ; Point::OtherHand

; 2186 :                 s->SetHeading(ship->CompassHeading());

  006fb	8b cf		 mov	 ecx, edi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  006fd	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00701	f2 0f 11 43 38	 movsd	 QWORD PTR [ebx+56], xmm0
  00706	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  0070b	f2 0f 11 43 40	 movsd	 QWORD PTR [ebx+64], xmm0
  00710	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  00715	f2 0f 11 43 48	 movsd	 QWORD PTR [ebx+72], xmm0
; File d:\programming\starshatter\trunk\stars45\mission.h

; 425  :     void              SetRespawns(int r)            { respawns = r;      }

  0071a	8b 87 98 04 00
	00		 mov	 eax, DWORD PTR [edi+1176]
  00720	89 43 50	 mov	 DWORD PTR [ebx+80], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2186 :                 s->SetHeading(ship->CompassHeading());

  00723	e8 00 00 00 00	 call	 ?CompassHeading@Ship@@QBENXZ ; Ship::CompassHeading
; File d:\programming\starshatter\trunk\stars45\mission.h

; 426  :     void              SetHeading(double h)          { heading = h;       }

  00728	f2 0f 11 43 58	 movsd	 QWORD PTR [ebx+88], xmm0
  0072d	8b cf		 mov	 ecx, edi
  0072f	f3 0f 10 87 b8
	01 00 00	 movss	 xmm0, DWORD PTR [edi+440]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 129  :     double            Integrity() const { return integrity;  }

  00737	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\mission.h

; 427  :     void              SetIntegrity(double n)        { integrity = n;     }

  0073a	f2 0f 11 43 60	 movsd	 QWORD PTR [ebx+96], xmm0
  0073f	8b 07		 mov	 eax, DWORD PTR [edi]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2189 :                 if (ship->GetDecoy())

  00741	ff 90 24 01 00
	00		 call	 DWORD PTR [eax+292]
  00747	85 c0		 test	 eax, eax
  00749	74 13		 je	 SHORT $LN33@CreateMiss

; 2190 :                 s->SetDecoys(ship->GetDecoy()->Ammo());

  0074b	8b 07		 mov	 eax, DWORD PTR [edi]
  0074d	8b cf		 mov	 ecx, edi
  0074f	ff 90 24 01 00
	00		 call	 DWORD PTR [eax+292]
; File d:\programming\starshatter\trunk\stars45\mission.h

; 428  :     void              SetDecoys(int d)              { decoys = d;        }

  00755	8b 80 8c 02 00
	00		 mov	 eax, DWORD PTR [eax+652]
  0075b	89 43 68	 mov	 DWORD PTR [ebx+104], eax
$LN33@CreateMiss:
  0075e	8b 07		 mov	 eax, DWORD PTR [edi]
  00760	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00765	75 08		 jne	 SHORT $LN67@CreateMiss
; File d:\programming\starshatter\trunk\stars45\ship.h

; 353  :     virtual Weapon*   GetProbeLauncher() const   { return probe;         }

  00767	8b 87 60 03 00
	00		 mov	 eax, DWORD PTR [edi+864]
  0076d	eb 08		 jmp	 SHORT $LN66@CreateMiss
$LN67@CreateMiss:
  0076f	8b cf		 mov	 ecx, edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2192 :                 if (ship->GetProbeLauncher())

  00771	ff 90 bc 01 00
	00		 call	 DWORD PTR [eax+444]
$LN66@CreateMiss:
  00777	85 c0		 test	 eax, eax
  00779	74 22		 je	 SHORT $LN34@CreateMiss
  0077b	8b 07		 mov	 eax, DWORD PTR [edi]
  0077d	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00782	75 08		 jne	 SHORT $LN69@CreateMiss
; File d:\programming\starshatter\trunk\stars45\ship.h

; 353  :     virtual Weapon*   GetProbeLauncher() const   { return probe;         }

  00784	8b 87 60 03 00
	00		 mov	 eax, DWORD PTR [edi+864]
  0078a	eb 08		 jmp	 SHORT $LN68@CreateMiss
$LN69@CreateMiss:
  0078c	8b cf		 mov	 ecx, edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2193 :                 s->SetProbes(ship->GetProbeLauncher()->Ammo());

  0078e	ff 90 bc 01 00
	00		 call	 DWORD PTR [eax+444]
$LN68@CreateMiss:
; File d:\programming\starshatter\trunk\stars45\mission.h

; 429  :     void              SetProbes(int p)              { probes = p;        }

  00794	8b 80 8c 02 00
	00		 mov	 eax, DWORD PTR [eax+652]
  0079a	89 43 6c	 mov	 DWORD PTR [ebx+108], eax
$LN34@CreateMiss:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2199 :                 for (n = 0; n < 16; n++) {

  0079d	33 f6		 xor	 esi, esi
  0079f	90		 npad	 1
$LL15@CreateMiss:
  007a0	8b 07		 mov	 eax, DWORD PTR [edi]
  007a2	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
  007a5	53		 push	 ebx
  007a6	8b cf		 mov	 ecx, edi

; 2200 :                     Weapon* w = ship->GetWeaponByIndex(n+1);

  007a8	ff 90 18 01 00
	00		 call	 DWORD PTR [eax+280]

; 2201 : 
; 2202 :                     if (w)

  007ae	85 c0		 test	 eax, eax
  007b0	74 0c		 je	 SHORT $LN35@CreateMiss

; 2203 :                     ammo[n] = w->Ammo();

  007b2	8b 80 8c 02 00
	00		 mov	 eax, DWORD PTR [eax+652]
  007b8	89 44 b5 94	 mov	 DWORD PTR _ammo$19[ebp+esi*4], eax

; 2204 :                     else

  007bc	eb 08		 jmp	 SHORT $LN13@CreateMiss
$LN35@CreateMiss:

; 2205 :                     ammo[n] = -10;

  007be	c7 44 b5 94 f6
	ff ff ff	 mov	 DWORD PTR _ammo$19[ebp+esi*4], -10 ; fffffff6H
$LN13@CreateMiss:

; 2199 :                 for (n = 0; n < 16; n++) {

  007c6	8b f3		 mov	 esi, ebx
  007c8	83 fe 10	 cmp	 esi, 16			; 00000010H
  007cb	7c d3		 jl	 SHORT $LL15@CreateMiss

; 2206 :                 }
; 2207 : 
; 2208 :                 for (n = 0; n < 4; n++) {

  007cd	33 f6		 xor	 esi, esi
  007cf	90		 npad	 1
$LL18@CreateMiss:

; 2209 :                     if (ship->Reactors().size() > n)

  007d0	39 b7 90 03 00
	00		 cmp	 DWORD PTR [edi+912], esi
  007d6	7e 19		 jle	 SHORT $LN37@CreateMiss

; 2210 :                     fuel[n] = ship->Reactors()[n]->Charge();

  007d8	56		 push	 esi
  007d9	8d 8f 90 03 00
	00		 lea	 ecx, DWORD PTR [edi+912]
  007df	e8 00 00 00 00	 call	 ??A?$List@VPowerSource@@@@QAEAAPAVPowerSource@@H@Z ; List<PowerSource>::operator[]
  007e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  007e6	8b 01		 mov	 eax, DWORD PTR [ecx]
  007e8	ff 50 34	 call	 DWORD PTR [eax+52]
  007eb	89 44 b5 dc	 mov	 DWORD PTR _fuel$22[ebp+esi*4], eax

; 2211 :                     else

  007ef	eb 08		 jmp	 SHORT $LN16@CreateMiss
$LN37@CreateMiss:

; 2212 :                     fuel[n] = -10;

  007f1	c7 44 b5 dc f6
	ff ff ff	 mov	 DWORD PTR _fuel$22[ebp+esi*4], -10 ; fffffff6H
$LN16@CreateMiss:

; 2206 :                 }
; 2207 : 
; 2208 :                 for (n = 0; n < 4; n++) {

  007f9	46		 inc	 esi
  007fa	83 fe 04	 cmp	 esi, 4
  007fd	7c d1		 jl	 SHORT $LL18@CreateMiss

; 2213 :                 }
; 2214 : 
; 2215 :                 s->SetAmmo(ammo);

  007ff	8b 75 90	 mov	 esi, DWORD PTR $T17[ebp]
  00802	8d 45 94	 lea	 eax, DWORD PTR _ammo$19[ebp]
  00805	50		 push	 eax
  00806	8b ce		 mov	 ecx, esi
  00808	e8 00 00 00 00	 call	 ?SetAmmo@MissionShip@@QAEXPBH@Z ; MissionShip::SetAmmo

; 2216 :                 s->SetFuel(fuel);

  0080d	8d 45 dc	 lea	 eax, DWORD PTR _fuel$22[ebp]
  00810	8b ce		 mov	 ecx, esi
  00812	50		 push	 eax
  00813	e8 00 00 00 00	 call	 ?SetFuel@MissionShip@@QAEXPBH@Z ; MissionShip::SetFuel
; File d:\programming\starshatter\trunk\stars45\mission.h

; 282  :     List<MissionShip>&   Ships()           { return ships;         }

  00818	8b 7d 80	 mov	 edi, DWORD PTR _msn_elem$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2218 :                 msn_elem->Ships().append(s);

  0081b	56		 push	 esi
; File d:\programming\starshatter\trunk\stars45\mission.h

; 282  :     List<MissionShip>&   Ships()           { return ships;         }

  0081c	8d 8f 00 01 00
	00		 lea	 ecx, DWORD PTR [edi+256]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2218 :                 msn_elem->Ships().append(s);

  00822	e8 00 00 00 00	 call	 ?append@?$List@VMissionShip@@@@QAEXPBVMissionShip@@@Z ; List<MissionShip>::append
  00827	8b 9d 7c ff ff
	ff		 mov	 ebx, DWORD PTR _elem$GSCopy$1$[ebp]
  0082d	eb 03		 jmp	 SHORT $LN10@CreateMiss
$LN409@CreateMiss:
  0082f	8b 7d 80	 mov	 edi, DWORD PTR _msn_elem$1$[ebp]
$LN10@CreateMiss:

; 2171 :         }
; 2172 : 
; 2173 :         for (int i = 0; i < elem->NumShips(); i++) {

  00832	8b 45 8c	 mov	 eax, DWORD PTR _i$1$[ebp]
  00835	3b 43 38	 cmp	 eax, DWORD PTR [ebx+56]
  00838	0f 8c c2 fd ff
	ff		 jl	 $LL12@CreateMiss
$LN11@CreateMiss:

; 2219 :             }
; 2220 :         }
; 2221 :     }
; 2222 : 
; 2223 :     return msn_elem;

  0083e	8b c7		 mov	 eax, edi
$LN1@CreateMiss:

; 2224 : }

  00840	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00843	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0084a	59		 pop	 ecx
  0084b	5f		 pop	 edi
  0084c	5e		 pop	 esi
  0084d	5b		 pop	 ebx
  0084e	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00851	33 cd		 xor	 ecx, ebp
  00853	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00858	8b e5		 mov	 esp, ebp
  0085a	5d		 pop	 ebp
  0085b	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$0:
  00000	68 0c 08 00 00	 push	 2060			; 0000080cH
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0000a	8b 45 8c	 mov	 eax, DWORD PTR $T15[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	c3		 ret	 0
__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$1:
  00017	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$9[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$2:
  0001f	8d 4d e4	 lea	 ecx, DWORD PTR $T26[ebp]
  00022	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$3:
  00027	8d 4d 84	 lea	 ecx, DWORD PTR _design_path$8[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$4:
  0002f	8d 4d e4	 lea	 ecx, DWORD PTR $T25[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$5:
  00037	68 58 08 00 00	 push	 2136			; 00000858H
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  00041	8b 45 90	 mov	 eax, DWORD PTR $T18[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004d	c3		 ret	 0
__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$6:
  0004e	68 62 08 00 00	 push	 2146			; 00000862H
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  00058	8b 45 88	 mov	 eax, DWORD PTR $T12[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
  00064	c3		 ret	 0
__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$7:
  00065	8d 4d e4	 lea	 ecx, DWORD PTR _instr$24[ebp]
  00068	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$10:
  0006d	68 3e 01 00 00	 push	 318			; 0000013eH
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@OGGMGBIG@d?3?2programming?2starshatter?2trunk@
  00077	8b 45 88	 mov	 eax, DWORD PTR $T10[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	c3		 ret	 0
__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$8:
  00084	68 70 08 00 00	 push	 2160			; 00000870H
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  0008e	8b 45 8c	 mov	 eax, DWORD PTR $T13[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	c3		 ret	 0
__unwindfunclet$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z$9:
  0009b	68 81 08 00 00	 push	 2177			; 00000881H
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  000a5	8b 45 88	 mov	 eax, DWORD PTR $T11[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  000ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b1	c3		 ret	 0
__ehhandler$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z:
  000b2	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000b6	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000b9	8b 8a 48 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-184]
  000bf	33 c8		 xor	 ecx, eax
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  000c9	33 c8		 xor	 ecx, eax
  000cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d0	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z
  000d5	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateMissionElement@Sim@@IAEPAVMissionElement@@PAVElement@@@Z ENDP ; Sim::CreateMissionElement
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\text.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 8
_iter$ = -20						; size = 8
_s_iter$2 = -12						; size = 8
_hangar$1$ = -4						; size = 4
_name$ = 8						; size = 4
_index$ = 12						; size = 4
?FindSquadron@Sim@@IAEPAVHangar@@PBDAAH@Z PROC		; Sim::FindSquadron
; _this$ = ecx

; 2228 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 2230 : 
; 2231 :     ListIter<SimRegion> iter = regions;

  00008	8d 41 58	 lea	 eax, DWORD PTR [ecx+88]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0000b	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _iter$[ebp+4], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2229 :     Hangar* hangar = 0;

  00012	33 f6		 xor	 esi, esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00014	89 45 ec	 mov	 DWORD PTR _iter$[ebp], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2228 : {

  00017	57		 push	 edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00018	8d 4d ec	 lea	 ecx, DWORD PTR _iter$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2229 :     Hangar* hangar = 0;

  0001b	89 75 fc	 mov	 DWORD PTR _hangar$1$[ebp], esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0001e	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  00023	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2232 :     while (++iter && !hangar) {

  00025	0f 84 ec 00 00
	00		 je	 $LN46@FindSquadr
  0002b	0f 1f 44 00 00	 npad	 5
$LL2@FindSquadr:
  00030	85 f6		 test	 esi, esi
  00032	0f 85 df 00 00
	00		 jne	 $LN46@FindSquadr

; 2233 :         SimRegion* rgn = iter.value();

  00038	8d 4d ec	 lea	 ecx, DWORD PTR _iter$[ebp]
  0003b	e8 00 00 00 00	 call	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
; File d:\programming\starshatter\trunk\stars45\sim.h

; 284  :     List<Ship>&          Carriers()   { return carriers;        }

  00040	83 c0 58	 add	 eax, 88			; 00000058H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00043	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _s_iter$2[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  0004a	8d 4d f4	 lea	 ecx, DWORD PTR _s_iter$2[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0004d	89 45 f4	 mov	 DWORD PTR _s_iter$2[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00050	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00055	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2236 :         while (++s_iter && !hangar) {

  00057	0f 84 aa 00 00
	00		 je	 $LN5@FindSquadr
  0005d	0f 1f 00	 npad	 3
$LL4@FindSquadr:
  00060	85 f6		 test	 esi, esi
  00062	0f 85 9f 00 00
	00		 jne	 $LN5@FindSquadr

; 2237 :             Ship*    carrier = s_iter.value();

  00068	8d 4d f4	 lea	 ecx, DWORD PTR _s_iter$2[ebp]
  0006b	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value

; 2240 :             for (int i = 0; i < h->NumSquadrons() && !hangar; i++) {

  00070	33 ff		 xor	 edi, edi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 465  :     Hangar*                 GetHangar()          { return hangar;        }

  00072	8b 98 68 03 00
	00		 mov	 ebx, DWORD PTR [eax+872]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2240 :             for (int i = 0; i < h->NumSquadrons() && !hangar; i++) {

  00078	39 7b 14	 cmp	 DWORD PTR [ebx+20], edi
  0007b	7e 7a		 jle	 SHORT $LN7@FindSquadr
  0007d	0f 1f 00	 npad	 3
$LL8@FindSquadr:
  00080	85 f6		 test	 esi, esi
  00082	75 73		 jne	 SHORT $LN7@FindSquadr

; 2241 :                 if (h->SquadronName(i) == name) {

  00084	57		 push	 edi
  00085	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  00088	8b cb		 mov	 ecx, ebx
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?SquadronName@Hangar@@QBE?AVText@@H@Z ; Hangar::SquadronName
  00090	8b c8		 mov	 ecx, eax
; File d:\programming\starshatter\trunk\foundationex\text.h

; 160  :    if (rep->sensitive)

  00092	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00095	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  00099	74 2c		 je	 SHORT $LN29@FindSquadr

; 161  :       return strcmp(sym, s);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0009e	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL42@FindSquadr:
  000a0	8a 11		 mov	 dl, BYTE PTR [ecx]
  000a2	3a 10		 cmp	 dl, BYTE PTR [eax]
  000a4	75 1a		 jne	 SHORT $LN43@FindSquadr
  000a6	84 d2		 test	 dl, dl
  000a8	74 12		 je	 SHORT $LN44@FindSquadr
  000aa	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  000ad	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  000b0	75 0e		 jne	 SHORT $LN43@FindSquadr
  000b2	83 c1 02	 add	 ecx, 2
  000b5	83 c0 02	 add	 eax, 2
  000b8	84 d2		 test	 dl, dl
  000ba	75 e4		 jne	 SHORT $LL42@FindSquadr
$LN44@FindSquadr:
  000bc	33 f6		 xor	 esi, esi
  000be	eb 16		 jmp	 SHORT $LN30@FindSquadr
$LN43@FindSquadr:
  000c0	1b f6		 sbb	 esi, esi
  000c2	83 ce 01	 or	 esi, 1
  000c5	eb 0f		 jmp	 SHORT $LN30@FindSquadr
$LN29@FindSquadr:

; 162  :    else
; 163  :       return _stricmp(sym, s);

  000c7	ff 75 08	 push	 DWORD PTR _name$[ebp]
  000ca	ff 31		 push	 DWORD PTR [ecx]
  000cc	e8 00 00 00 00	 call	 __stricmp
  000d1	83 c4 08	 add	 esp, 8
  000d4	8b f0		 mov	 esi, eax
$LN30@FindSquadr:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2241 :                 if (h->SquadronName(i) == name) {

  000d6	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  000d9	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
; File d:\programming\starshatter\trunk\foundationex\text.h

; 198  : inline int operator==(const Text& l, const char* r) { return l.compare(r) == 0; }

  000de	85 f6		 test	 esi, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2241 :                 if (h->SquadronName(i) == name) {

  000e0	75 0c		 jne	 SHORT $LN50@FindSquadr

; 2242 :                     hangar = h;
; 2243 :                     index  = i;

  000e2	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  000e5	8b f3		 mov	 esi, ebx
  000e7	89 75 fc	 mov	 DWORD PTR _hangar$1$[ebp], esi
  000ea	89 38		 mov	 DWORD PTR [eax], edi
  000ec	eb 03		 jmp	 SHORT $LN6@FindSquadr
$LN50@FindSquadr:
  000ee	8b 75 fc	 mov	 esi, DWORD PTR _hangar$1$[ebp]
$LN6@FindSquadr:

; 2240 :             for (int i = 0; i < h->NumSquadrons() && !hangar; i++) {

  000f1	47		 inc	 edi
  000f2	3b 7b 14	 cmp	 edi, DWORD PTR [ebx+20]
  000f5	7c 89		 jl	 SHORT $LL8@FindSquadr
$LN7@FindSquadr:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000f7	8d 4d f4	 lea	 ecx, DWORD PTR _s_iter$2[ebp]
  000fa	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  000ff	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2236 :         while (++s_iter && !hangar) {

  00101	0f 85 59 ff ff
	ff		 jne	 $LL4@FindSquadr
$LN5@FindSquadr:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00107	8d 4d ec	 lea	 ecx, DWORD PTR _iter$[ebp]
  0010a	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::next
  0010f	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2232 :     while (++iter && !hangar) {

  00111	0f 85 19 ff ff
	ff		 jne	 $LL2@FindSquadr
$LN46@FindSquadr:

; 2244 :                 }
; 2245 :             }
; 2246 :         }
; 2247 :     }
; 2248 : 
; 2249 :     return hangar;
; 2250 : }

  00117	5f		 pop	 edi
  00118	8b c6		 mov	 eax, esi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 08 00	 ret	 8
?FindSquadron@Sim@@IAEPAVHangar@@PBDAAH@Z ENDP		; Sim::FindSquadron
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
_n$ = 12						; size = 4
_t$ = 16						; size = 4
??0SimRegion@@QAE@PAVSim@@PBDH@Z PROC			; SimRegion::SimRegion
; _this$ = ecx

; 2257 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SimRegion@@QAE@PAVSim@@PBDH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 2255 :     : sim(s), name(n), type(t), orbital_region(0), star_system(0), player_ship(0),

  00029	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	ff 75 0c	 push	 DWORD PTR _n$[ebp]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SimRegion@@6B@
  00038	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003b	e8 00 00 00 00	 call	 ??0Text@@QAE@PBD@Z	; Text::Text
  00040	8b 45 10	 mov	 eax, DWORD PTR _t$[ebp]
  00043	0f 57 c0	 xorps	 xmm0, xmm0
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00050	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00057	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 217  :     Point()                                : x(0),   y(0),   z(0)    { }

  0005e	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
  00062	f2 0f 11 46 30	 movsd	 QWORD PTR [esi+48], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2256 :       grid(0), active(false), current_view(0), sim_time(0), ai_index(0), terrain(0)

  00067	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  0006e	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00075	c6 46 40 00	 mov	 BYTE PTR [esi+64], 0

; 2255 :     : sim(s), name(n), type(t), orbital_region(0), star_system(0), player_ship(0),

  00079	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 2256 :       grid(0), active(false), current_view(0), sim_time(0), ai_index(0), terrain(0)

  00080	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  00087	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  0008e	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  00095	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
  0009c	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  000a3	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  000aa	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  000b1	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
  000b8	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  000bf	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
  000c6	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
  000cd	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  000d4	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  000db	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  000e2	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
  000ec	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  000f6	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  00100	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
  0010a	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  00114	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
  0011e	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  00128	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  00132	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
  0013c	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  00146	c7 86 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+168], 0
  00150	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0
  0015a	c7 86 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+176], 0
  00164	c7 86 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+180], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2257 : {

  0016e	68 00 00 00 00	 push	 OFFSET ??1?$List@VContact@@@@QAE@XZ ; List<Contact>::~List<Contact>
  00173	68 00 00 00 00	 push	 OFFSET ??0?$List@VContact@@@@QAE@XZ ; List<Contact>::List<Contact>
  00178	6a 05		 push	 5
  0017a	6a 0c		 push	 12			; 0000000cH
  0017c	8d 86 b8 00 00
	00		 lea	 eax, DWORD PTR [esi+184]
  00182	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  0018c	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], 0
  00196	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], 0
  001a0	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2258 :     if (sim) {

  001aa	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ad	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], 0
  001b7	c7 86 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+260], 0
  001c1	85 c0		 test	 eax, eax
  001c3	74 06		 je	 SHORT $LN40@SimRegion

; 2259 :         star_system = sim->GetStarSystem();

  001c5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001c8	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN40@SimRegion:

; 2260 :     }
; 2261 : }

  001cb	8b c6		 mov	 eax, esi
  001cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d7	59		 pop	 ecx
  001d8	5e		 pop	 esi
  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00011	e9 00 00 00 00	 jmp	 ??1?$List@VShip@@@@QAE@XZ ; List<Ship>::~List<Ship>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 58	 add	 ecx, 88			; 00000058H
  0001c	e9 00 00 00 00	 jmp	 ??1?$List@VShip@@@@QAE@XZ ; List<Ship>::~List<Ship>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 64	 add	 ecx, 100		; 00000064H
  00027	e9 00 00 00 00	 jmp	 ??1?$List@VShip@@@@QAE@XZ ; List<Ship>::~List<Ship>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 70	 add	 ecx, 112		; 00000070H
  00032	e9 00 00 00 00	 jmp	 ??1?$List@VShip@@@@QAE@XZ ; List<Ship>::~List<Ship>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0003d	e9 00 00 00 00	 jmp	 ??1?$List@VShot@@@@QAE@XZ ; List<Shot>::~List<Shot>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$6:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0004b	e9 00 00 00 00	 jmp	 ??1?$List@VDrone@@@@QAE@XZ ; List<Drone>::~List<Drone>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$7:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00059	e9 00 00 00 00	 jmp	 ??1?$List@VExplosion@@@@QAE@XZ ; List<Explosion>::~List<Explosion>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$8:
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00067	e9 00 00 00 00	 jmp	 ??1?$List@VDebris@@@@QAE@XZ ; List<Debris>::~List<Debris>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PBDH@Z$9:
  0006c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	81 c1 ac 00 00
	00		 add	 ecx, 172		; 000000acH
  00075	e9 00 00 00 00	 jmp	 ??1?$List@VAsteroid@@@@QAE@XZ ; List<Asteroid>::~List<Asteroid>
__ehhandler$??0SimRegion@@QAE@PAVSim@@PBDH@Z:
  0007a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0007e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00081	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00084	33 c8		 xor	 ecx, eax
  00086	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SimRegion@@QAE@PAVSim@@PBDH@Z
  00090	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SimRegion@@QAE@PAVSim@@PBDH@Z ENDP			; SimRegion::SimRegion
; Function compile flags: /Ogtp
;	COMDAT ??_GSimRegion@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSimRegion@@UAEPAXI@Z PROC				; SimRegion::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1SimRegion@@UAE@XZ	; SimRegion::~SimRegion
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 08 01 00 00	 push	 264			; 00000108H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GSimRegion@@UAEPAXI@Z ENDP				; SimRegion::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\starsystem.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\memdebug.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_init_loc$2 = -48					; size = 24
$T3 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
$T5 = 8							; size = 4
_s$ = 8							; size = 4
_r$ = 12						; size = 4
??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z PROC	; SimRegion::SimRegion
; _this$ = ecx

; 2266 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 2264 :     : sim(s), orbital_region(r), type(REAL_SPACE), star_system(0), player_ship(0),

  0002d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]

; 2266 : {

  00030	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00033	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SimRegion@@6B@
  00039	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003c	e8 00 00 00 00	 call	 ??0Text@@QAE@XZ		; Text::Text

; 2264 :     : sim(s), orbital_region(r), type(REAL_SPACE), star_system(0), player_ship(0),

  00041	8b 5d 0c	 mov	 ebx, DWORD PTR _r$[ebp]
  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00055	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0005c	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 217  :     Point()                                : x(0),   y(0),   z(0)    { }

  0005f	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
  00063	f2 0f 11 46 30	 movsd	 QWORD PTR [esi+48], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2265 :       grid(0), active(false), current_view(0), sim_time(0), ai_index(0), terrain(0)

  00068	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  0006f	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00076	c6 46 40 00	 mov	 BYTE PTR [esi+64], 0

; 2264 :     : sim(s), orbital_region(r), type(REAL_SPACE), star_system(0), player_ship(0),

  0007a	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 2265 :       grid(0), active(false), current_view(0), sim_time(0), ai_index(0), terrain(0)

  00081	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  00088	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  0008f	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  00096	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
  0009d	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  000a4	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  000ab	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  000b2	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
  000b9	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  000c0	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
  000c7	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
  000ce	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  000d5	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  000dc	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  000e3	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
  000ed	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  000f7	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  00101	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
  0010b	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  00115	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
  0011f	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  00129	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  00133	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
  0013d	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  00147	c7 86 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+168], 0
  00151	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0
  0015b	c7 86 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+176], 0
  00165	c7 86 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+180], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2266 : {

  0016f	68 00 00 00 00	 push	 OFFSET ??1?$List@VContact@@@@QAE@XZ ; List<Contact>::~List<Contact>
  00174	68 00 00 00 00	 push	 OFFSET ??0?$List@VContact@@@@QAE@XZ ; List<Contact>::List<Contact>
  00179	6a 05		 push	 5
  0017b	6a 0c		 push	 12			; 0000000cH
  0017d	8d 86 b8 00 00
	00		 lea	 eax, DWORD PTR [esi+184]
  00183	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  0018d	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], 0
  00197	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], 0
  001a1	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2266 : {

  001ab	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH

; 2265 :       grid(0), active(false), current_view(0), sim_time(0), ai_index(0), terrain(0)

  001af	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], 0
  001b9	c7 86 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+260], 0

; 2267 :     if (r) {

  001c3	85 db		 test	 ebx, ebx
  001c5	74 09		 je	 SHORT $LN5@SimRegion

; 2268 :         star_system = r->System();

  001c7	8b 83 e8 00 00
	00		 mov	 eax, DWORD PTR [ebx+232]
  001cd	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN5@SimRegion:

; 2269 :     }
; 2270 : 
; 2271 :     if (orbital_region) {

  001d0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001d3	85 c0		 test	 eax, eax
  001d5	0f 84 48 01 00
	00		 je	 $LN6@SimRegion

; 2272 :         name = orbital_region->Name();

  001db	ff 70 08	 push	 DWORD PTR [eax+8]
  001de	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  001e1	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  001e6	68 80 00 00 00	 push	 128			; 00000080H
  001eb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2273 :         grid = new(__FILE__,__LINE__) Grid((int) orbital_region->Radius(),

  001f0	8b d0		 mov	 edx, eax
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  001f2	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2273 :         grid = new(__FILE__,__LINE__) Grid((int) orbital_region->Radius(),

  001f5	89 55 08	 mov	 DWORD PTR $T5[ebp], edx
  001f8	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  001fc	85 d2		 test	 edx, edx
  001fe	74 1b		 je	 SHORT $LN12@SimRegion
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 333  :     double            GridSpace()       const { return grid;          }

  00200	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2273 :         grid = new(__FILE__,__LINE__) Grid((int) orbital_region->Radius(),

  00203	f2 0f 2c 81 00
	01 00 00	 cvttsd2si eax, QWORD PTR [ecx+256]
  0020b	50		 push	 eax
  0020c	f2 0f 2c 41 28	 cvttsd2si eax, QWORD PTR [ecx+40]
  00211	8b ca		 mov	 ecx, edx
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 ??0Grid@@QAE@HH@Z	; Grid::Grid
  00219	eb 02		 jmp	 SHORT $LN13@SimRegion
$LN12@SimRegion:
  0021b	33 c0		 xor	 eax, eax
$LN13@SimRegion:
  0021d	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File d:\programming\starshatter\trunk\stars45\starsystem.h

; 224  :     OrbitalType       Type()         const { return type;       }

  00221	8b 5e 1c	 mov	 ebx, DWORD PTR [esi+28]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2273 :         grid = new(__FILE__,__LINE__) Grid((int) orbital_region->Radius(),

  00224	89 46 38	 mov	 DWORD PTR [esi+56], eax

; 2274 :         (int) orbital_region->GridSpace());
; 2275 : 
; 2276 : 
; 2277 :         if (orbital_region->Type() == Orbital::TERRAIN) {

  00227	83 7b 10 05	 cmp	 DWORD PTR [ebx+16], 5
  0022b	75 40		 jne	 SHORT $LN8@SimRegion
; File d:\programming\starshatter\trunk\foundationex\memdebug.h

; 92   : inline void* __cdecl operator new(unsigned int s, const char*, int) { return ::operator new(s);    }

  0022d	68 70 05 00 00	 push	 1392			; 00000570H
  00232	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00237	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2279 :             terrain = new(__FILE__,__LINE__) Terrain(trgn);

  0023a	89 45 08	 mov	 DWORD PTR $T4[ebp], eax
  0023d	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  00241	85 c0		 test	 eax, eax
  00243	74 17		 je	 SHORT $LN14@SimRegion
  00245	53		 push	 ebx
  00246	8b c8		 mov	 ecx, eax
  00248	e8 00 00 00 00	 call	 ??0Terrain@@QAE@PAVTerrainRegion@@@Z ; Terrain::Terrain
  0024d	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 2280 : 
; 2281 :             type = AIR_SPACE;

  00250	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1
  00257	e9 ed 00 00 00	 jmp	 $LN82@SimRegion
$LN14@SimRegion:

; 2279 :             terrain = new(__FILE__,__LINE__) Terrain(trgn);

  0025c	33 c0		 xor	 eax, eax

; 2280 : 
; 2281 :             type = AIR_SPACE;

  0025e	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1
  00265	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00268	e9 dc 00 00 00	 jmp	 $LN82@SimRegion
$LN8@SimRegion:

; 2282 :         }
; 2283 : 
; 2284 :         else if (orbital_region->Asteroids() > 0) {

  0026d	8b 9b 10 01 00
	00		 mov	 ebx, DWORD PTR [ebx+272]
  00273	85 db		 test	 ebx, ebx
  00275	0f 8e ce 00 00
	00		 jle	 $LN82@SimRegion

; 2285 :             int asteroids = orbital_region->Asteroids();
; 2286 : 
; 2287 :             for (int i = 0; i < asteroids; i++) {

  0027b	33 ff		 xor	 edi, edi
  0027d	85 db		 test	 ebx, ebx
  0027f	0f 8e c4 00 00
	00		 jle	 $LN82@SimRegion
$LL4@SimRegion:

; 2288 :                 Point init_loc((rand()-16384.0f) * 30,

  00285	e8 00 00 00 00	 call	 _rand
  0028a	66 0f 6e c0	 movd	 xmm0, eax
  0028e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00291	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@46800000
  00299	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41f00000
  002a1	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  002a4	f2 0f 11 45 d0	 movsd	 QWORD PTR _init_loc$2[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2288 :                 Point init_loc((rand()-16384.0f) * 30,

  002a9	e8 00 00 00 00	 call	 _rand
  002ae	66 0f 6e c0	 movd	 xmm0, eax
  002b2	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002b5	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@46800000
  002bd	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  002c5	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  002c8	f2 0f 11 45 d8	 movsd	 QWORD PTR _init_loc$2[ebp+8], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2288 :                 Point init_loc((rand()-16384.0f) * 30,

  002cd	e8 00 00 00 00	 call	 _rand

; 2291 :                 sim->CreateAsteroid(init_loc, i, Random(1e7, 1e8), this); 

  002d2	83 ec 10	 sub	 esp, 16			; 00000010H
  002d5	66 0f 6e c0	 movd	 xmm0, eax
  002d9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002dc	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@46800000
  002e4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41f00000
  002ec	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  002ef	f2 0f 11 45 e0	 movsd	 QWORD PTR _init_loc$2[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2291 :                 sim->CreateAsteroid(init_loc, i, Random(1e7, 1e8), this); 

  002f4	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@4197d78400000000416312d000000000
  002fb	0f 11 04 24	 movups	 XMMWORD PTR [esp], xmm0
  002ff	e8 00 00 00 00	 call	 ?Random@@YANNN@Z	; Random
  00304	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00307	8d 45 d0	 lea	 eax, DWORD PTR _init_loc$2[ebp]
  0030a	83 c4 08	 add	 esp, 8
  0030d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00310	56		 push	 esi
  00311	57		 push	 edi
  00312	50		 push	 eax
  00313	e8 00 00 00 00	 call	 ?CreateAsteroid@Sim@@QAEPAVAsteroid@@ABUPoint@@HNPAVSimRegion@@@Z ; Sim::CreateAsteroid
  00318	47		 inc	 edi
  00319	3b fb		 cmp	 edi, ebx
  0031b	0f 8c 64 ff ff
	ff		 jl	 $LL4@SimRegion

; 2292 :             }
; 2293 :         }
; 2294 :     }
; 2295 :     else {

  00321	eb 26		 jmp	 SHORT $LN82@SimRegion
$LN6@SimRegion:

; 2296 :         name = Game::GetText("Unknown");

  00323	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00326	68 00 00 00 00	 push	 OFFSET ??_C@_07NBCGADJA@Unknown?$AA@
  0032b	50		 push	 eax
  0032c	e8 00 00 00 00	 call	 ?GetText@Game@@SA?AVText@@PBD@Z ; Game::GetText
  00331	83 c4 08	 add	 esp, 8
  00334	50		 push	 eax
  00335	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00338	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  0033c	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@ABV0@@Z ; Text::operator=
  00341	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  00344	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
$LN82@SimRegion:

; 2297 :     }
; 2298 : }

  00349	8b c6		 mov	 eax, esi
  0034b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0034e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00355	59		 pop	 ecx
  00356	5f		 pop	 edi
  00357	5e		 pop	 esi
  00358	5b		 pop	 ebx
  00359	8b e5		 mov	 esp, ebp
  0035b	5d		 pop	 ebp
  0035c	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00011	e9 00 00 00 00	 jmp	 ??1?$List@VShip@@@@QAE@XZ ; List<Ship>::~List<Ship>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 58	 add	 ecx, 88			; 00000058H
  0001c	e9 00 00 00 00	 jmp	 ??1?$List@VShip@@@@QAE@XZ ; List<Ship>::~List<Ship>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 64	 add	 ecx, 100		; 00000064H
  00027	e9 00 00 00 00	 jmp	 ??1?$List@VShip@@@@QAE@XZ ; List<Ship>::~List<Ship>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 70	 add	 ecx, 112		; 00000070H
  00032	e9 00 00 00 00	 jmp	 ??1?$List@VShip@@@@QAE@XZ ; List<Ship>::~List<Ship>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0003d	e9 00 00 00 00	 jmp	 ??1?$List@VShot@@@@QAE@XZ ; List<Shot>::~List<Shot>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$6:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0004b	e9 00 00 00 00	 jmp	 ??1?$List@VDrone@@@@QAE@XZ ; List<Drone>::~List<Drone>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$7:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00059	e9 00 00 00 00	 jmp	 ??1?$List@VExplosion@@@@QAE@XZ ; List<Explosion>::~List<Explosion>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$8:
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00067	e9 00 00 00 00	 jmp	 ??1?$List@VDebris@@@@QAE@XZ ; List<Debris>::~List<Debris>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$9:
  0006c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	81 c1 ac 00 00
	00		 add	 ecx, 172		; 000000acH
  00075	e9 00 00 00 00	 jmp	 ??1?$List@VAsteroid@@@@QAE@XZ ; List<Asteroid>::~List<Asteroid>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$10:
  0007a	68 00 00 00 00	 push	 OFFSET ??1?$List@VContact@@@@QAE@XZ ; List<Contact>::~List<Contact>
  0007f	6a 05		 push	 5
  00081	6a 0c		 push	 12			; 0000000cH
  00083	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00086	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00091	c3		 ret	 0
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$11:
  00092	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	81 c1 f4 00 00
	00		 add	 ecx, 244		; 000000f4H
  0009b	e9 00 00 00 00	 jmp	 ??1?$List@VSimRegion@@@@QAE@XZ ; List<SimRegion>::~List<SimRegion>
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$12:
  000a0	68 e1 08 00 00	 push	 2273			; 000008e1H
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  000aa	8b 45 08	 mov	 eax, DWORD PTR $T5[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b6	c3		 ret	 0
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$13:
  000b7	68 e7 08 00 00	 push	 2279			; 000008e7H
  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_07MHJMBJCP@Sim?4cpp?$AA@
  000c1	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cd	c3		 ret	 0
__unwindfunclet$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z$14:
  000ce	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  000d1	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__ehhandler$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z:
  000d6	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000da	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000dd	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  000e0	33 c8		 xor	 ecx, eax
  000e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e7	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z
  000ec	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SimRegion@@QAE@PAVSim@@PAVOrbitalRegion@@@Z ENDP	; SimRegion::SimRegion
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1SimRegion@@UAE@XZ PROC				; SimRegion::~SimRegion
; _this$ = ecx

; 2301 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1SimRegion@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 2302 :     GRAPHIC_DESTROY(grid);

  00027	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  0002a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7SimRegion@@6B@
  00030	85 c9		 test	 ecx, ecx
  00032	74 0c		 je	 SHORT $LN5@SimRegion
  00034	8b 01		 mov	 eax, DWORD PTR [ecx]
  00036	ff 50 44	 call	 DWORD PTR [eax+68]
  00039	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
$LN5@SimRegion:

; 2303 :     delete terrain;

  00040	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]
  00043	85 c9		 test	 ecx, ecx
  00045	74 06		 je	 SHORT $LN7@SimRegion
  00047	8b 01		 mov	 eax, DWORD PTR [ecx]
  00049	6a 01		 push	 1
  0004b	ff 10		 call	 DWORD PTR [eax]
$LN7@SimRegion:

; 2304 :     explosions.destroy();

  0004d	8d 8f 94 00 00
	00		 lea	 ecx, DWORD PTR [edi+148]
  00053	e8 00 00 00 00	 call	 ?destroy@?$List@VExplosion@@@@QAEXXZ ; List<Explosion>::destroy

; 2305 :     shots.destroy();

  00058	8d 4f 7c	 lea	 ecx, DWORD PTR [edi+124]
  0005b	e8 00 00 00 00	 call	 ?destroy@?$List@VShot@@@@QAEXXZ ; List<Shot>::destroy

; 2306 :     ships.destroy();

  00060	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  00063	e8 00 00 00 00	 call	 ?destroy@?$List@VShip@@@@QAEXXZ ; List<Ship>::destroy

; 2307 :     debris.destroy();

  00068	8d 8f a0 00 00
	00		 lea	 ecx, DWORD PTR [edi+160]
  0006e	e8 00 00 00 00	 call	 ?destroy@?$List@VDebris@@@@QAEXXZ ; List<Debris>::destroy

; 2308 :     asteroids.destroy();

  00073	8d 8f ac 00 00
	00		 lea	 ecx, DWORD PTR [edi+172]
  00079	e8 00 00 00 00	 call	 ?destroy@?$List@VAsteroid@@@@QAEXXZ ; List<Asteroid>::destroy

; 2309 :     dead_ships.destroy();

  0007e	8d 4f 70	 lea	 ecx, DWORD PTR [edi+112]
  00081	e8 00 00 00 00	 call	 ?destroy@?$List@VShip@@@@QAEXXZ ; List<Ship>::destroy
  00086	8d b7 b8 00 00
	00		 lea	 esi, DWORD PTR [edi+184]
  0008c	bb 05 00 00 00	 mov	 ebx, 5
$LL4@SimRegion:

; 2310 : 
; 2311 :     for (int i = 0; i < 5; i++)
; 2312 :     track_database[i].destroy();

  00091	8b ce		 mov	 ecx, esi
  00093	e8 00 00 00 00	 call	 ?destroy@?$List@VContact@@@@QAEXXZ ; List<Contact>::destroy
  00098	83 c6 0c	 add	 esi, 12			; 0000000cH
  0009b	83 eb 01	 sub	 ebx, 1
  0009e	75 f1		 jne	 SHORT $LL4@SimRegion
; File d:\programming\starshatter\trunk\foundationex\list.h

; 54   :    ~List()  { delete [] array; }

  000a0	ff b7 fc 00 00
	00		 push	 DWORD PTR [edi+252]
  000a6	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000ab	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2313 : }

  000ae	8d 87 b8 00 00
	00		 lea	 eax, DWORD PTR [edi+184]
  000b4	68 00 00 00 00	 push	 OFFSET ??1?$List@VContact@@@@QAE@XZ ; List<Contact>::~List<Contact>
  000b9	6a 05		 push	 5
  000bb	6a 0c		 push	 12			; 0000000cH
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
; File d:\programming\starshatter\trunk\foundationex\list.h

; 54   :    ~List()  { delete [] array; }

  000c3	ff b7 b4 00 00
	00		 push	 DWORD PTR [edi+180]
  000c9	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000ce	ff b7 a8 00 00
	00		 push	 DWORD PTR [edi+168]
  000d4	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000d9	ff b7 9c 00 00
	00		 push	 DWORD PTR [edi+156]
  000df	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000e4	ff b7 90 00 00
	00		 push	 DWORD PTR [edi+144]
  000ea	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000ef	ff b7 84 00 00
	00		 push	 DWORD PTR [edi+132]
  000f5	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000fa	ff 77 78	 push	 DWORD PTR [edi+120]
  000fd	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00102	ff 77 6c	 push	 DWORD PTR [edi+108]
  00105	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0010a	ff 77 60	 push	 DWORD PTR [edi+96]
  0010d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00112	ff 77 54	 push	 DWORD PTR [edi+84]
  00115	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0011a	83 c4 24	 add	 esp, 36			; 00000024H
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2313 : }

  0011d	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00120	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  00125	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00128	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012f	59		 pop	 ecx
  00130	5f		 pop	 edi
  00131	5e		 pop	 esi
  00132	5b		 pop	 ebx
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1SimRegion@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1SimRegion@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1SimRegion@@UAE@XZ ENDP				; SimRegion::~SimRegion
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_ship$ = 8						; size = 4
?SetPlayerShip@SimRegion@@QAEXPAVShip@@@Z PROC		; SimRegion::SetPlayerShip
; _this$ = ecx

; 2331 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2332 :     // there can only be a player ship when playing the game locally
; 2333 :     if (Starshatter::GetInstance()) {

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?instance@Starshatter@@1PAV1@A, 0 ; Starshatter::instance
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b f1		 mov	 esi, ecx
  0000f	74 55		 je	 SHORT $LN2@SetPlayerS

; 2334 :         int player_index = ships.index(ship);

  00011	8b 7d 08	 mov	 edi, DWORD PTR _ship$[ebp]
  00014	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00017	57		 push	 edi
  00018	e8 00 00 00 00	 call	 ?index@?$List@VShip@@@@QBEHPBVShip@@@Z ; List<Ship>::index
  0001d	8b d8		 mov	 ebx, eax

; 2335 : 
; 2336 :         if (player_index >= 0) {

  0001f	85 db		 test	 ebx, ebx
  00021	78 1d		 js	 SHORT $LN4@SetPlayerS
; File d:\programming\starshatter\trunk\stars45\sim.h

; 158  :     SimRegion*           GetActiveRegion() { return active_region; }

  00023	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2337 :             if (sim->GetActiveRegion() != this)

  00026	39 71 04	 cmp	 DWORD PTR [ecx+4], esi
  00029	74 06		 je	 SHORT $LN6@SetPlayerS

; 2338 :             sim->ActivateRegion(this);

  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?ActivateRegion@Sim@@QAE_NPAVSimRegion@@@Z ; Sim::ActivateRegion
$LN6@SetPlayerS:

; 2339 : 
; 2340 :             AttachPlayerShip(player_index);

  00031	53		 push	 ebx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?AttachPlayerShip@SimRegion@@IAEXH@Z ; SimRegion::AttachPlayerShip

; 2353 : 
; 2354 :         current_view = -1;
; 2355 :         player_ship = 0;
; 2356 :     }
; 2357 : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
$LN4@SetPlayerS:

; 2344 :             Print("SimRegion %s could not set player ship '%s' - not in region\n",

  00040	85 ff		 test	 edi, edi
  00042	74 05		 je	 SHORT $LN9@SetPlayerS
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  00044	83 c7 10	 add	 edi, 16			; 00000010H
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2344 :             Print("SimRegion %s could not set player ship '%s' - not in region\n",

  00047	eb 05		 jmp	 SHORT $LN10@SetPlayerS
$LN9@SetPlayerS:
  00049	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@
$LN10@SetPlayerS:
  0004e	57		 push	 edi
  0004f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@GOGEGHME@SimRegion?5?$CFs?5could?5not?5set?5playe@
  00057	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2353 : 
; 2354 :         current_view = -1;
; 2355 :         player_ship = 0;
; 2356 :     }
; 2357 : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
$LN2@SetPlayerS:

; 2345 :             name.data(), ship ? ship->Name() : "(null)");
; 2346 :         }
; 2347 :     }
; 2348 : 
; 2349 :     // if this is a stand-alone server, set player ship to null
; 2350 :     else {
; 2351 :         if (player_ship)

  00066	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00069	85 c9		 test	 ecx, ecx
  0006b	74 0a		 je	 SHORT $LN11@SetPlayerS

; 2352 :         player_ship->SetControls(0);

  0006d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006f	6a 00		 push	 0
  00071	ff 90 cc 00 00
	00		 call	 DWORD PTR [eax+204]
$LN11@SetPlayerS:

; 2353 : 
; 2354 :         current_view = -1;
; 2355 :         player_ship = 0;
; 2356 :     }
; 2357 : }

  00077	5f		 pop	 edi
  00078	c7 46 48 ff ff
	ff ff		 mov	 DWORD PTR [esi+72], -1
  0007f	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
?SetPlayerShip@SimRegion@@QAEXPAVShip@@@Z ENDP		; SimRegion::SetPlayerShip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\camera.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 24
_index$ = 8						; size = 4
?AttachPlayerShip@SimRegion@@IAEXH@Z PROC		; SimRegion::AttachPlayerShip
; _this$ = ecx

; 2361 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx

; 2362 :     if (player_ship)

  0000c	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 0a		 je	 SHORT $LN8@AttachPlay

; 2363 :     player_ship->SetControls(0);

  00013	8b 01		 mov	 eax, DWORD PTR [ecx]
  00015	6a 00		 push	 0
  00017	ff 90 cc 00 00
	00		 call	 DWORD PTR [eax+204]
$LN8@AttachPlay:

; 2364 : 
; 2365 :     current_view = index;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]

; 2366 :     player_ship  = ships[current_view];

  00020	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00023	50		 push	 eax
  00024	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00027	e8 00 00 00 00	 call	 ??A?$List@VShip@@@@QAEAAPAVShip@@H@Z ; List<Ship>::operator[]
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 2367 : 
; 2368 :     CameraDirector* cam_dir = CameraDirector::GetInstance();

  00031	e8 00 00 00 00	 call	 ?GetInstance@CameraDirector@@SAPAV1@XZ ; CameraDirector::GetInstance

; 2369 :     if (cam_dir)

  00036	85 c0		 test	 eax, eax
  00038	74 0a		 je	 SHORT $LN10@AttachPlay

; 2370 :     cam_dir->SetShip(player_ship);

  0003a	8b 10		 mov	 edx, DWORD PTR [eax]
  0003c	8b c8		 mov	 ecx, eax
  0003e	ff 76 44	 push	 DWORD PTR [esi+68]
  00041	ff 52 28	 call	 DWORD PTR [edx+40]
$LN10@AttachPlay:

; 2371 : 
; 2372 :     if (sim->dust)

  00044	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00047	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0004a	85 c9		 test	 ecx, ecx
  0004c	74 31		 je	 SHORT $LN12@AttachPlay
; File d:\programming\starshatter\trunk\ngenex\camera.h

; 72   :     Point    Pos() const { return pos;    }

  0004e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2373 :     sim->dust->Reset(player_ship->Location());

  00051	8d 54 24 08	 lea	 edx, DWORD PTR $T1[esp+32]
  00055	52		 push	 edx
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00056	f2 0f 10 40 48	 movsd	 xmm0, QWORD PTR [eax+72]
  0005b	f2 0f 11 44 24
	0c		 movsd	 QWORD PTR $T1[esp+36], xmm0
  00061	f2 0f 10 40 50	 movsd	 xmm0, QWORD PTR [eax+80]
  00066	f2 0f 11 44 24
	14		 movsd	 QWORD PTR $T1[esp+44], xmm0
  0006c	f2 0f 10 40 58	 movsd	 xmm0, QWORD PTR [eax+88]
  00071	f2 0f 11 44 24
	1c		 movsd	 QWORD PTR $T1[esp+52], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2373 :     sim->dust->Reset(player_ship->Location());

  00077	8b 01		 mov	 eax, DWORD PTR [ecx]
  00079	ff 90 88 00 00
	00		 call	 DWORD PTR [eax+136]
$LN12@AttachPlay:
; File d:\programming\starshatter\trunk\stars45\sim.h

; 174  :     bool                 IsTestMode()   const { return test_mode;        }

  0007f	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2375 :     if (!sim->IsTestMode())

  00082	80 ba bc 00 00
	00 00		 cmp	 BYTE PTR [edx+188], 0
  00089	75 11		 jne	 SHORT $LN14@AttachPlay

; 2376 :     player_ship->SetControls(sim->ctrl);

  0008b	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0008e	ff b2 b8 00 00
	00		 push	 DWORD PTR [edx+184]
  00094	8b 01		 mov	 eax, DWORD PTR [ecx]
  00096	ff 90 cc 00 00
	00		 call	 DWORD PTR [eax+204]
$LN14@AttachPlay:

; 2377 : 
; 2378 :     MouseController* mouse_con = MouseController::GetInstance();

  0009c	e8 00 00 00 00	 call	 ?GetInstance@MouseController@@SAPAV1@XZ ; MouseController::GetInstance

; 2379 :     if (mouse_con)

  000a1	85 c0		 test	 eax, eax
  000a3	74 09		 je	 SHORT $LN6@AttachPlay

; 2380 :     mouse_con->SetActive(false);

  000a5	8b 10		 mov	 edx, DWORD PTR [eax]
  000a7	8b c8		 mov	 ecx, eax
  000a9	6a 00		 push	 0
  000ab	ff 52 5c	 call	 DWORD PTR [edx+92]
$LN6@AttachPlay:

; 2381 : }

  000ae	5e		 pop	 esi
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
?AttachPlayerShip@SimRegion@@IAEXH@Z ENDP		; SimRegion::AttachPlayerShip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
?NextView@SimRegion@@QAEXXZ PROC			; SimRegion::NextView
; _this$ = ecx

; 2385 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 2386 :     if (ships.size()) {

  00004	83 7e 4c 00	 cmp	 DWORD PTR [esi+76], 0
  00008	74 7b		 je	 SHORT $LN8@NextView

; 2387 :         int original_view = current_view;

  0000a	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  0000d	57		 push	 edi
  0000e	8b f8		 mov	 edi, eax
$LL4@NextView:

; 2388 : 
; 2389 :         do {
; 2390 :             current_view++;

  00010	40		 inc	 eax

; 2391 :             if (current_view >= ships.size()) {

  00011	33 c9		 xor	 ecx, ecx
  00013	3b 46 4c	 cmp	 eax, DWORD PTR [esi+76]
  00016	0f 4d c1	 cmovge	 eax, ecx

; 2392 :                 current_view = 0;
; 2393 :             }
; 2394 :         }
; 2395 :         while (ships[current_view]->Life() == 0 && current_view != original_view);

  00019	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  0001c	50		 push	 eax
  0001d	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00020	e8 00 00 00 00	 call	 ??A?$List@VShip@@@@QAEAAPAVShip@@H@Z ; List<Ship>::operator[]
  00025	0f 57 c9	 xorps	 xmm1, xmm1
  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	f2 0f 10 80 a8
	01 00 00	 movsd	 xmm0, QWORD PTR [eax+424]
  00032	66 0f 2e c1	 ucomisd xmm0, xmm1
  00036	9f		 lahf
  00037	f6 c4 44	 test	 ah, 68			; 00000044H
  0003a	7a 07		 jp	 SHORT $LN7@NextView
  0003c	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  0003f	3b c7		 cmp	 eax, edi
  00041	75 cd		 jne	 SHORT $LL4@NextView
$LN7@NextView:

; 2396 : 
; 2397 :         if (current_view != original_view) {

  00043	39 7e 48	 cmp	 DWORD PTR [esi+72], edi
  00046	5f		 pop	 edi
  00047	74 3c		 je	 SHORT $LN8@NextView

; 2398 :             ClearSelection();

  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?ClearSelection@SimRegion@@QAEXXZ ; SimRegion::ClearSelection

; 2399 : 
; 2400 :             if (!sim->IsTestMode())

  00050	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00053	80 b8 bc 00 00
	00 00		 cmp	 BYTE PTR [eax+188], 0
  0005a	75 0d		 jne	 SHORT $LN9@NextView

; 2401 :             player_ship->SetControls(0);

  0005c	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0005f	6a 00		 push	 0
  00061	8b 01		 mov	 eax, DWORD PTR [ecx]
  00063	ff 90 cc 00 00
	00		 call	 DWORD PTR [eax+204]
$LN9@NextView:

; 2402 : 
; 2403 :             if (player_ship->Rep())

  00069	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0006c	8b 88 bc 01 00
	00		 mov	 ecx, DWORD PTR [eax+444]
  00072	85 c9		 test	 ecx, ecx
  00074	74 05		 je	 SHORT $LN10@NextView

; 2404 :             player_ship->Rep()->Show();

  00076	8b 01		 mov	 eax, DWORD PTR [ecx]
  00078	ff 50 4c	 call	 DWORD PTR [eax+76]
$LN10@NextView:

; 2405 : 
; 2406 :             AttachPlayerShip(current_view);

  0007b	ff 76 48	 push	 DWORD PTR [esi+72]
  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?AttachPlayerShip@SimRegion@@IAEXH@Z ; SimRegion::AttachPlayerShip
$LN8@NextView:

; 2407 :         }
; 2408 :     }
; 2409 : }

  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	c3		 ret	 0
?NextView@SimRegion@@QAEXXZ ENDP			; SimRegion::NextView
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_s$ = 8							; size = 4
?IsSelected@SimRegion@@QAE_NPAVShip@@@Z PROC		; SimRegion::IsSelected
; _this$ = ecx

; 2413 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2414 :     return selection.contains(s);

  00003	83 c1 64	 add	 ecx, 100		; 00000064H

; 2415 : }

  00006	5d		 pop	 ebp

; 2414 :     return selection.contains(s);

  00007	e9 00 00 00 00	 jmp	 ?contains@?$List@VShip@@@@QBE_NPBVShip@@@Z ; List<Ship>::contains
?IsSelected@SimRegion@@QAE_NPAVShip@@@Z ENDP		; SimRegion::IsSelected
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetSelection@SimRegion@@QAE?AV?$ListIter@VShip@@@@XZ PROC ; SimRegion::GetSelection
; _this$ = ecx

; 2419 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2420 :     return selection;

  00006	83 c1 64	 add	 ecx, 100		; 00000064H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00009	89 08		 mov	 DWORD PTR [eax], ecx
  0000b	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2421 : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?GetSelection@SimRegion@@QAE?AV?$ListIter@VShip@@@@XZ ENDP ; SimRegion::GetSelection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_newsel$ = 8						; size = 4
?SetSelection@SimRegion@@QAEXPAVShip@@@Z PROC		; SimRegion::SetSelection
; _this$ = ecx

; 2425 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2426 :     selection.clear();

  00004	8d 71 64	 lea	 esi, DWORD PTR [ecx+100]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?clear@?$List@VShip@@@@QAEXXZ ; List<Ship>::clear

; 2427 :     selection.append(newsel);

  0000e	ff 75 08	 push	 DWORD PTR _newsel$[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?append@?$List@VShip@@@@QAEXPBVShip@@@Z ; List<Ship>::append
  00018	5e		 pop	 esi

; 2428 : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?SetSelection@SimRegion@@QAEXPAVShip@@@Z ENDP		; SimRegion::SetSelection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
?ClearSelection@SimRegion@@QAEXXZ PROC			; SimRegion::ClearSelection
; _this$ = ecx

; 2433 :     selection.clear();

  00000	83 c1 64	 add	 ecx, 100		; 00000064H
  00003	e9 00 00 00 00	 jmp	 ?clear@?$List@VShip@@@@QAEXXZ ; List<Ship>::clear
?ClearSelection@SimRegion@@QAEXXZ ENDP			; SimRegion::ClearSelection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_newsel$ = 8						; size = 4
?AddSelection@SimRegion@@QAEXPAVShip@@@Z PROC		; SimRegion::AddSelection
; _this$ = ecx

; 2438 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2440 :             newsel->GetFlightPhase() <  Ship::ACTIVE ||

  00004	8b 75 08	 mov	 esi, DWORD PTR _newsel$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 3e		 je	 SHORT $LN3@AddSelecti
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00015	75 3b		 jne	 SHORT $LN14@AddSelecti
; File d:\programming\starshatter\trunk\stars45\ship.h

; 182  :     virtual int       GetFlightPhase()           const { return flight_phase; }

  00017	8b 86 10 03 00
	00		 mov	 eax, DWORD PTR [esi+784]
$LN6@AddSelecti:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2440 :             newsel->GetFlightPhase() <  Ship::ACTIVE ||

  0001d	83 f8 05	 cmp	 eax, 5
  00020	7c 2a		 jl	 SHORT $LN3@AddSelecti
  00022	8b 06		 mov	 eax, DWORD PTR [esi]
  00024	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00029	75 31		 jne	 SHORT $LN9@AddSelecti
; File d:\programming\starshatter\trunk\stars45\ship.h

; 182  :     virtual int       GetFlightPhase()           const { return flight_phase; }

  0002b	8b 86 10 03 00
	00		 mov	 eax, DWORD PTR [esi+784]
$LN8@AddSelecti:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2440 :             newsel->GetFlightPhase() <  Ship::ACTIVE ||

  00031	83 f8 07	 cmp	 eax, 7
  00034	7d 16		 jge	 SHORT $LN3@AddSelecti

; 2441 :             newsel->GetFlightPhase() >= Ship::RECOVERY)
; 2442 :     return;
; 2443 : 
; 2444 :     if (!selection.contains(newsel))

  00036	56		 push	 esi
  00037	8d 4f 64	 lea	 ecx, DWORD PTR [edi+100]
  0003a	e8 00 00 00 00	 call	 ?contains@?$List@VShip@@@@QBE_NPBVShip@@@Z ; List<Ship>::contains
  0003f	84 c0		 test	 al, al
  00041	75 09		 jne	 SHORT $LN3@AddSelecti

; 2445 :     selection.append(newsel);

  00043	56		 push	 esi
  00044	8d 4f 64	 lea	 ecx, DWORD PTR [edi+100]
  00047	e8 00 00 00 00	 call	 ?append@?$List@VShip@@@@QAEXPBVShip@@@Z ; List<Ship>::append
$LN3@AddSelecti:
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 2446 : }

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
$LN14@AddSelecti:
  00052	8b ce		 mov	 ecx, esi

; 2440 :             newsel->GetFlightPhase() <  Ship::ACTIVE ||

  00054	ff 90 d4 00 00
	00		 call	 DWORD PTR [eax+212]
  0005a	eb c1		 jmp	 SHORT $LN6@AddSelecti
$LN9@AddSelecti:
  0005c	8b ce		 mov	 ecx, esi
  0005e	ff 90 d4 00 00
	00		 call	 DWORD PTR [eax+212]
  00064	eb cb		 jmp	 SHORT $LN8@AddSelecti
?AddSelection@SimRegion@@QAEXPAVShip@@@Z ENDP		; SimRegion::AddSelection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_a$ = -8						; size = 8
_deb$ = -8						; size = 8
_exp$ = -8						; size = 8
_shot$ = -8						; size = 8
_ship$ = -8						; size = 8
?Activate@SimRegion@@UAEXXZ PROC			; SimRegion::Activate
; _this$ = ecx

; 2452 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx

; 2453 :     if (!sim) return;

  0000c	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00010	0f 84 92 01 00
	00		 je	 $LN1@Activate

; 2454 : 
; 2455 :     ListIter<Ship> ship = ships;

  00016	8d 46 4c	 lea	 eax, DWORD PTR [esi+76]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00019	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _ship$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  00021	8d 4c 24 08	 lea	 ecx, DWORD PTR _ship$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00025	89 44 24 08	 mov	 DWORD PTR _ship$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  00029	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  0002e	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2456 :     while (++ship)

  00030	74 27		 je	 SHORT $LN3@Activate
$LL2@Activate:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00032	8d 4c 24 08	 lea	 ecx, DWORD PTR _ship$[esp+16]
  00036	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2457 :     ship->Activate(sim->scene);

  0003b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0003e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00041	51		 push	 ecx
  00042	8b 10		 mov	 edx, DWORD PTR [eax]
  00044	8b c8		 mov	 ecx, eax
  00046	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0004c	8d 4c 24 08	 lea	 ecx, DWORD PTR _ship$[esp+16]
  00050	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00055	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2456 :     while (++ship)

  00057	75 d9		 jne	 SHORT $LL2@Activate
$LN3@Activate:

; 2458 : 
; 2459 :     ListIter<Shot> shot = shots;

  00059	8d 46 7c	 lea	 eax, DWORD PTR [esi+124]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0005c	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _shot$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  00064	8d 4c 24 08	 lea	 ecx, DWORD PTR _shot$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00068	89 44 24 08	 mov	 DWORD PTR _shot$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  0006c	e8 00 00 00 00	 call	 ?next@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::next
  00071	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2460 :     while (++shot)

  00073	74 27		 je	 SHORT $LN5@Activate
$LL4@Activate:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00075	8d 4c 24 08	 lea	 ecx, DWORD PTR _shot$[esp+16]
  00079	e8 00 00 00 00	 call	 ?value@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2461 :     shot->Activate(sim->scene);

  0007e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00081	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00084	51		 push	 ecx
  00085	8b 10		 mov	 edx, DWORD PTR [eax]
  00087	8b c8		 mov	 ecx, eax
  00089	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0008f	8d 4c 24 08	 lea	 ecx, DWORD PTR _shot$[esp+16]
  00093	e8 00 00 00 00	 call	 ?next@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::next
  00098	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2460 :     while (++shot)

  0009a	75 d9		 jne	 SHORT $LL4@Activate
$LN5@Activate:

; 2462 : 
; 2463 :     ListIter<Explosion> exp = explosions;

  0009c	8d 86 94 00 00
	00		 lea	 eax, DWORD PTR [esi+148]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000a2	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _exp$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  000aa	8d 4c 24 08	 lea	 ecx, DWORD PTR _exp$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000ae	89 44 24 08	 mov	 DWORD PTR _exp$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  000b2	e8 00 00 00 00	 call	 ?next@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::next
  000b7	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2464 :     while (++exp)

  000b9	74 2c		 je	 SHORT $LN7@Activate
  000bb	0f 1f 44 00 00	 npad	 5
$LL6@Activate:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  000c0	8d 4c 24 08	 lea	 ecx, DWORD PTR _exp$[esp+16]
  000c4	e8 00 00 00 00	 call	 ?value@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2465 :     exp->Activate(sim->scene);

  000c9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000cc	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000cf	51		 push	 ecx
  000d0	8b 10		 mov	 edx, DWORD PTR [eax]
  000d2	8b c8		 mov	 ecx, eax
  000d4	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000da	8d 4c 24 08	 lea	 ecx, DWORD PTR _exp$[esp+16]
  000de	e8 00 00 00 00	 call	 ?next@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::next
  000e3	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2464 :     while (++exp)

  000e5	75 d9		 jne	 SHORT $LL6@Activate
$LN7@Activate:

; 2466 : 
; 2467 :     ListIter<Debris> deb = debris;

  000e7	8d 86 a0 00 00
	00		 lea	 eax, DWORD PTR [esi+160]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000ed	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _deb$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  000f5	8d 4c 24 08	 lea	 ecx, DWORD PTR _deb$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000f9	89 44 24 08	 mov	 DWORD PTR _deb$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  000fd	e8 00 00 00 00	 call	 ?next@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::next
  00102	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2468 :     while (++deb)

  00104	74 27		 je	 SHORT $LN9@Activate
$LL8@Activate:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00106	8d 4c 24 08	 lea	 ecx, DWORD PTR _deb$[esp+16]
  0010a	e8 00 00 00 00	 call	 ?value@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2469 :     deb->Activate(sim->scene);

  0010f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00112	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00115	51		 push	 ecx
  00116	8b 10		 mov	 edx, DWORD PTR [eax]
  00118	8b c8		 mov	 ecx, eax
  0011a	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00120	8d 4c 24 08	 lea	 ecx, DWORD PTR _deb$[esp+16]
  00124	e8 00 00 00 00	 call	 ?next@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::next
  00129	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2468 :     while (++deb)

  0012b	75 d9		 jne	 SHORT $LL8@Activate
$LN9@Activate:

; 2470 : 
; 2471 :     ListIter<Asteroid> a = asteroids;

  0012d	8d 86 ac 00 00
	00		 lea	 eax, DWORD PTR [esi+172]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00133	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _a$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  0013b	8d 4c 24 08	 lea	 ecx, DWORD PTR _a$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0013f	89 44 24 08	 mov	 DWORD PTR _a$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  00143	e8 00 00 00 00	 call	 ?next@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::next
  00148	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2472 :     while (++a)

  0014a	74 2b		 je	 SHORT $LN11@Activate
  0014c	0f 1f 40 00	 npad	 4
$LL10@Activate:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00150	8d 4c 24 08	 lea	 ecx, DWORD PTR _a$[esp+16]
  00154	e8 00 00 00 00	 call	 ?value@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2473 :     a->Activate(sim->scene);

  00159	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0015c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0015f	51		 push	 ecx
  00160	8b 10		 mov	 edx, DWORD PTR [eax]
  00162	8b c8		 mov	 ecx, eax
  00164	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0016a	8d 4c 24 08	 lea	 ecx, DWORD PTR _a$[esp+16]
  0016e	e8 00 00 00 00	 call	 ?next@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::next
  00173	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2472 :     while (++a)

  00175	75 d9		 jne	 SHORT $LL10@Activate
$LN11@Activate:

; 2474 : 
; 2475 :     if (grid)

  00177	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0017a	85 c0		 test	 eax, eax
  0017c	74 0c		 je	 SHORT $LN13@Activate

; 2476 :     sim->scene.AddGraphic(grid);

  0017e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00181	50		 push	 eax
  00182	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00185	e8 00 00 00 00	 call	 ?AddGraphic@Scene@@QAEXPAVGraphic@@@Z ; Scene::AddGraphic
$LN13@Activate:

; 2477 : 
; 2478 :     if (terrain)

  0018a	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  0018d	85 c9		 test	 ecx, ecx
  0018f	74 0c		 je	 SHORT $LN26@Activate

; 2479 :     terrain->Activate(sim->scene);

  00191	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00194	8b 11		 mov	 edx, DWORD PTR [ecx]
  00196	83 c0 0c	 add	 eax, 12			; 0000000cH
  00199	50		 push	 eax
  0019a	ff 52 04	 call	 DWORD PTR [edx+4]
$LN26@Activate:

; 2480 : 
; 2481 :     player_ship = 0;

  0019d	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 2482 :     active      = true;

  001a4	c6 46 40 01	 mov	 BYTE PTR [esi+64], 1
$LN1@Activate:

; 2483 : }

  001a8	5e		 pop	 esi
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c3		 ret	 0
?Activate@SimRegion@@UAEXXZ ENDP			; SimRegion::Activate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_a$ = -8						; size = 8
_deb$ = -8						; size = 8
_exp$ = -8						; size = 8
_shot$ = -8						; size = 8
_ship$ = -8						; size = 8
?Deactivate@SimRegion@@UAEXXZ PROC			; SimRegion::Deactivate
; _this$ = ecx

; 2489 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	57		 push	 edi

; 2490 :     if (!sim) return;

  0000d	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00011	0f 84 ab 01 00
	00		 je	 $LN13@Deactivate

; 2491 : 
; 2492 :     ListIter<Ship> ship = ships;

  00017	8d 46 4c	 lea	 eax, DWORD PTR [esi+76]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0001a	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _ship$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  00022	8d 4c 24 08	 lea	 ecx, DWORD PTR _ship$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00026	89 44 24 08	 mov	 DWORD PTR _ship$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  0002a	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  0002f	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2493 :     while (++ship)

  00031	74 27		 je	 SHORT $LN3@Deactivate
$LL2@Deactivate:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00033	8d 4c 24 08	 lea	 ecx, DWORD PTR _ship$[esp+16]
  00037	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2494 :     ship->Deactivate(sim->scene);

  0003c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0003f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	8b c8		 mov	 ecx, eax
  00047	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0004d	8d 4c 24 08	 lea	 ecx, DWORD PTR _ship$[esp+16]
  00051	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00056	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2493 :     while (++ship)

  00058	75 d9		 jne	 SHORT $LL2@Deactivate
$LN3@Deactivate:

; 2495 : 
; 2496 :     ListIter<Shot> shot = shots;

  0005a	8d 46 7c	 lea	 eax, DWORD PTR [esi+124]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0005d	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _shot$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  00065	8d 4c 24 08	 lea	 ecx, DWORD PTR _shot$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00069	89 44 24 08	 mov	 DWORD PTR _shot$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  0006d	e8 00 00 00 00	 call	 ?next@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::next
  00072	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2497 :     while (++shot)

  00074	74 27		 je	 SHORT $LN5@Deactivate
$LL4@Deactivate:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00076	8d 4c 24 08	 lea	 ecx, DWORD PTR _shot$[esp+16]
  0007a	e8 00 00 00 00	 call	 ?value@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2498 :     shot->Deactivate(sim->scene);

  0007f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00082	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00085	51		 push	 ecx
  00086	8b 10		 mov	 edx, DWORD PTR [eax]
  00088	8b c8		 mov	 ecx, eax
  0008a	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00090	8d 4c 24 08	 lea	 ecx, DWORD PTR _shot$[esp+16]
  00094	e8 00 00 00 00	 call	 ?next@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::next
  00099	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2497 :     while (++shot)

  0009b	75 d9		 jne	 SHORT $LL4@Deactivate
$LN5@Deactivate:

; 2499 : 
; 2500 :     ListIter<Explosion> exp = explosions;

  0009d	8d 86 94 00 00
	00		 lea	 eax, DWORD PTR [esi+148]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000a3	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _exp$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  000ab	8d 4c 24 08	 lea	 ecx, DWORD PTR _exp$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000af	89 44 24 08	 mov	 DWORD PTR _exp$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  000b3	e8 00 00 00 00	 call	 ?next@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::next
  000b8	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2501 :     while (++exp)

  000ba	74 2b		 je	 SHORT $LN7@Deactivate
  000bc	0f 1f 40 00	 npad	 4
$LL6@Deactivate:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  000c0	8d 4c 24 08	 lea	 ecx, DWORD PTR _exp$[esp+16]
  000c4	e8 00 00 00 00	 call	 ?value@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2502 :     exp->Deactivate(sim->scene);

  000c9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000cc	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000cf	51		 push	 ecx
  000d0	8b 10		 mov	 edx, DWORD PTR [eax]
  000d2	8b c8		 mov	 ecx, eax
  000d4	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000da	8d 4c 24 08	 lea	 ecx, DWORD PTR _exp$[esp+16]
  000de	e8 00 00 00 00	 call	 ?next@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::next
  000e3	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2501 :     while (++exp)

  000e5	75 d9		 jne	 SHORT $LL6@Deactivate
$LN7@Deactivate:

; 2503 : 
; 2504 :     ListIter<Debris> deb = debris;

  000e7	8d 86 a0 00 00
	00		 lea	 eax, DWORD PTR [esi+160]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000ed	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _deb$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  000f5	8d 4c 24 08	 lea	 ecx, DWORD PTR _deb$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000f9	89 44 24 08	 mov	 DWORD PTR _deb$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  000fd	e8 00 00 00 00	 call	 ?next@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::next
  00102	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2505 :     while (++deb)

  00104	74 27		 je	 SHORT $LN9@Deactivate
$LL8@Deactivate:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00106	8d 4c 24 08	 lea	 ecx, DWORD PTR _deb$[esp+16]
  0010a	e8 00 00 00 00	 call	 ?value@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2506 :     deb->Deactivate(sim->scene);

  0010f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00112	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00115	51		 push	 ecx
  00116	8b 10		 mov	 edx, DWORD PTR [eax]
  00118	8b c8		 mov	 ecx, eax
  0011a	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00120	8d 4c 24 08	 lea	 ecx, DWORD PTR _deb$[esp+16]
  00124	e8 00 00 00 00	 call	 ?next@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::next
  00129	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2505 :     while (++deb)

  0012b	75 d9		 jne	 SHORT $LL8@Deactivate
$LN9@Deactivate:

; 2507 : 
; 2508 :     ListIter<Asteroid> a = asteroids;

  0012d	8d 86 ac 00 00
	00		 lea	 eax, DWORD PTR [esi+172]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00133	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _a$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  0013b	8d 4c 24 08	 lea	 ecx, DWORD PTR _a$[esp+16]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0013f	89 44 24 08	 mov	 DWORD PTR _a$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  00143	e8 00 00 00 00	 call	 ?next@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::next
  00148	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2509 :     while (++a)

  0014a	74 2b		 je	 SHORT $LN11@Deactivate
  0014c	0f 1f 40 00	 npad	 4
$LL10@Deactivate:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00150	8d 4c 24 08	 lea	 ecx, DWORD PTR _a$[esp+16]
  00154	e8 00 00 00 00	 call	 ?value@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2510 :     a->Deactivate(sim->scene);

  00159	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0015c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0015f	51		 push	 ecx
  00160	8b 10		 mov	 edx, DWORD PTR [eax]
  00162	8b c8		 mov	 ecx, eax
  00164	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0016a	8d 4c 24 08	 lea	 ecx, DWORD PTR _a$[esp+16]
  0016e	e8 00 00 00 00	 call	 ?next@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::next
  00173	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2509 :     while (++a)

  00175	75 d9		 jne	 SHORT $LL10@Deactivate
$LN11@Deactivate:

; 2511 : 
; 2512 :     if (grid)

  00177	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0017a	85 c0		 test	 eax, eax
  0017c	74 0c		 je	 SHORT $LN16@Deactivate

; 2513 :     sim->scene.DelGraphic(grid);

  0017e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00181	50		 push	 eax
  00182	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00185	e8 00 00 00 00	 call	 ?DelGraphic@Scene@@QAEXPAVGraphic@@@Z ; Scene::DelGraphic
$LN16@Deactivate:

; 2514 : 
; 2515 :     if (terrain)

  0018a	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  0018d	85 c9		 test	 ecx, ecx
  0018f	74 0c		 je	 SHORT $LN29@Deactivate

; 2516 :     terrain->Deactivate(sim->scene);

  00191	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00194	8b 11		 mov	 edx, DWORD PTR [ecx]
  00196	83 c0 0c	 add	 eax, 12			; 0000000cH
  00199	50		 push	 eax
  0019a	ff 52 08	 call	 DWORD PTR [edx+8]
$LN29@Deactivate:

; 2517 : 
; 2518 :     player_ship = 0;

  0019d	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  001a4	bf 05 00 00 00	 mov	 edi, 5

; 2519 :     active      = false;

  001a9	c6 46 40 00	 mov	 BYTE PTR [esi+64], 0
  001ad	81 c6 b8 00 00
	00		 add	 esi, 184		; 000000b8H
$LL14@Deactivate:

; 2520 : 
; 2521 :     for (int i = 0; i < 5; i++)
; 2522 :     track_database[i].destroy();

  001b3	8b ce		 mov	 ecx, esi
  001b5	e8 00 00 00 00	 call	 ?destroy@?$List@VContact@@@@QAEXXZ ; List<Contact>::destroy
  001ba	83 c6 0c	 add	 esi, 12			; 0000000cH
  001bd	83 ef 01	 sub	 edi, 1
  001c0	75 f1		 jne	 SHORT $LL14@Deactivate
$LN13@Deactivate:

; 2523 : }

  001c2	5f		 pop	 edi
  001c3	5e		 pop	 esi
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
?Deactivate@SimRegion@@UAEXXZ ENDP			; SimRegion::Deactivate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\cameradirector.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\cameradirector.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_max_frame$1$ = -80					; size = 8
$T1 = -80						; size = 12
_ref$ = -64						; size = 24
$T2 = -24						; size = 24
_secs$ = 8						; size = 8
?ExecFrame@SimRegion@@UAEXN@Z PROC			; SimRegion::ExecFrame
; _this$ = ecx

; 2529 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f0	 and	 esp, -16		; fffffff0H
  00006	83 ec 58	 sub	 esp, 88			; 00000058H
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	57		 push	 edi

; 2530 :     if (!sim) return;

  0000d	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00011	0f 84 c3 01 00
	00		 je	 $LN10@ExecFrame

; 2531 : 
; 2532 :     double seconds    = secs;
; 2533 : 
; 2534 :     // DON'T REALLY KNOW WHAT PURPOSE THIS SERVES....
; 2535 :     if (!active) {

  00017	80 7e 40 00	 cmp	 BYTE PTR [esi+64], 0
  0001b	75 53		 jne	 SHORT $LN4@ExecFrame

; 2536 :         double max_frame  = 3 * Game::GetMaxFrameLength();

  0001d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?max_frame_length@Game@@1NA
  00025	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4008000000000000
  0002d	f2 0f 11 44 24
	10		 movsd	 QWORD PTR _max_frame$1$[esp+96], xmm0

; 2537 :         long   new_time   = Game::GameTime();

  00033	e8 00 00 00 00	 call	 ?GameTime@Game@@SAKXZ	; Game::GameTime

; 2538 :         double delta      = new_time - sim_time;

  00038	2b 86 00 01 00
	00		 sub	 eax, DWORD PTR [esi+256]

; 2539 :         seconds    = delta / 1000.0;
; 2540 : 
; 2541 :         if (seconds > max_frame)

  0003e	f2 0f 10 4c 24
	10		 movsd	 xmm1, QWORD PTR _max_frame$1$[esp+96]
  00044	66 0f 6e c0	 movd	 xmm0, eax
  00048	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0004c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004f	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00058	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  00060	66 0f 2f c1	 comisd	 xmm0, xmm1
  00064	f2 0f 11 45 08	 movsd	 QWORD PTR _secs$[ebp], xmm0
  00069	76 05		 jbe	 SHORT $LN4@ExecFrame

; 2542 :         seconds = max_frame;

  0006b	f2 0f 11 4d 08	 movsd	 QWORD PTR _secs$[ebp], xmm1
$LN4@ExecFrame:

; 2543 :     }
; 2544 : 
; 2545 :     sim_time = Game::GameTime();

  00070	e8 00 00 00 00	 call	 ?GameTime@Game@@SAKXZ	; Game::GameTime
  00075	89 86 00 01 00
	00		 mov	 DWORD PTR [esi+256], eax

; 2546 : 
; 2547 :     if (orbital_region)

  0007b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0007e	85 c0		 test	 eax, eax
  00080	74 12		 je	 SHORT $LN5@ExecFrame
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00082	0f 10 40 60	 movups	 xmm0, XMMWORD PTR [eax+96]
  00086	f2 0f 10 50 70	 movsd	 xmm2, QWORD PTR [eax+112]

; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }
; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }
; 229  :     Point operator- ()               const { return Point(-x, -y, -z);          }
; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }
; 231  :     Point operator/ (double s)       const { return Point(x/s, y/s, z/s);       }
; 232  :     double operator*(const Point& p) const { return (x*p.x + y*p.y + z*p.z);    }
; 233  :     Point operator* (const Matrix& m) const;
; 234  : 
; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  0008b	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
  0008f	f2 0f 11 56 30	 movsd	 QWORD PTR [esi+48], xmm2
$LN5@ExecFrame:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2550 :     CameraDirector* cam_dir = CameraDirector::GetInstance();

  00094	e8 00 00 00 00	 call	 ?GetInstance@CameraDirector@@SAPAV1@XZ ; CameraDirector::GetInstance

; 2554 :     if (active && cam_dir) {

  00099	80 7e 40 00	 cmp	 BYTE PTR [esi+64], 0
  0009d	0f 57 c0	 xorps	 xmm0, xmm0
  000a0	8b f8		 mov	 edi, eax
  000a2	0f 29 44 24 20	 movaps	 XMMWORD PTR _ref$[esp+96], xmm0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 217  :     Point()                                : x(0),   y(0),   z(0)    { }

  000a7	f2 0f 11 44 24
	30		 movsd	 QWORD PTR _ref$[esp+112], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2554 :     if (active && cam_dir) {

  000ad	74 43		 je	 SHORT $LN6@ExecFrame
  000af	85 ff		 test	 edi, edi
  000b1	74 3f		 je	 SHORT $LN6@ExecFrame
  000b3	8b 07		 mov	 eax, DWORD PTR [edi]
  000b5	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7CameraDirector@@6B@
  000ba	0f 85 22 01 00
	00		 jne	 $LN50@ExecFrame
; File d:\programming\starshatter\trunk\stars45\cameradirector.h

; 98   :     virtual Camera*   GetCamera()                { return &camera; }

  000c0	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
$LN12@ExecFrame:
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  000c3	f2 0f 10 50 08	 movsd	 xmm2, QWORD PTR [eax+8]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2556 :         UpdateSky(seconds, ref);

  000c8	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  000ca	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  000cf	f2 0f 10 48 18	 movsd	 xmm1, QWORD PTR [eax+24]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2556 :         UpdateSky(seconds, ref);

  000d4	8d 44 24 20	 lea	 eax, DWORD PTR _ref$[esp+96]
  000d8	66 0f 14 d0	 unpcklpd xmm2, xmm0
  000dc	0f 29 54 24 20	 movaps	 XMMWORD PTR _ref$[esp+96], xmm2
  000e1	f2 0f 10 55 08	 movsd	 xmm2, QWORD PTR _secs$[ebp]
  000e6	50		 push	 eax
  000e7	66 0f d6 4c 24
	34		 movq	 QWORD PTR _ref$[esp+116], xmm1
  000ed	e8 00 00 00 00	 call	 ?UpdateSky@SimRegion@@IAEXNABUPoint@@@Z ; SimRegion::UpdateSky
$LN6@ExecFrame:

; 2557 :     }
; 2558 : 
; 2559 :     if (terrain)

  000f2	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  000f5	85 c9		 test	 ecx, ecx
  000f7	74 12		 je	 SHORT $LN14@ExecFrame

; 2560 :     terrain->ExecFrame(seconds);

  000f9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000fb	83 ec 08	 sub	 esp, 8
  000fe	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _secs$[ebp]
  00103	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00108	ff 50 18	 call	 DWORD PTR [eax+24]
$LN14@ExecFrame:

; 2561 : 
; 2562 :     UpdateTracks(seconds);

  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ?UpdateTracks@SimRegion@@IAEXN@Z ; SimRegion::UpdateTracks

; 2563 :     UpdateShips(seconds);

  00112	f2 0f 10 4d 08	 movsd	 xmm1, QWORD PTR _secs$[ebp]
  00117	8b ce		 mov	 ecx, esi
  00119	e8 00 00 00 00	 call	 ?UpdateShips@SimRegion@@IAEXN@Z ; SimRegion::UpdateShips

; 2564 :     UpdateShots(seconds);

  0011e	f2 0f 10 4d 08	 movsd	 xmm1, QWORD PTR _secs$[ebp]
  00123	8b ce		 mov	 ecx, esi
  00125	e8 00 00 00 00	 call	 ?UpdateShots@SimRegion@@IAEXN@Z ; SimRegion::UpdateShots

; 2565 :     UpdateExplosions(seconds);

  0012a	f2 0f 10 4d 08	 movsd	 xmm1, QWORD PTR _secs$[ebp]
  0012f	8b ce		 mov	 ecx, esi
  00131	e8 00 00 00 00	 call	 ?UpdateExplosions@SimRegion@@IAEXN@Z ; SimRegion::UpdateExplosions

; 2566 : 
; 2567 :     if (!Game::Paused()) {

  00136	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?paused@Game@@1_NA, 0 ; Game::paused
  0013d	75 29		 jne	 SHORT $LN8@ExecFrame

; 2568 :         DamageShips();

  0013f	8b ce		 mov	 ecx, esi
  00141	e8 00 00 00 00	 call	 ?DamageShips@SimRegion@@IAEXXZ ; SimRegion::DamageShips

; 2569 :         DockShips();

  00146	8b ce		 mov	 ecx, esi
  00148	e8 00 00 00 00	 call	 ?DockShips@SimRegion@@IAEXXZ ; SimRegion::DockShips

; 2570 : 
; 2571 :         if (active) {

  0014d	80 7e 40 00	 cmp	 BYTE PTR [esi+64], 0
  00151	74 0e		 je	 SHORT $LN9@ExecFrame

; 2572 :             CollideShips();

  00153	8b ce		 mov	 ecx, esi
  00155	e8 00 00 00 00	 call	 ?CollideShips@SimRegion@@IAEXXZ ; SimRegion::CollideShips

; 2573 :             CrashShips();

  0015a	8b ce		 mov	 ecx, esi
  0015c	e8 00 00 00 00	 call	 ?CrashShips@SimRegion@@IAEXXZ ; SimRegion::CrashShips
$LN9@ExecFrame:

; 2574 :         }
; 2575 : 
; 2576 :         DestroyShips();

  00161	8b ce		 mov	 ecx, esi
  00163	e8 00 00 00 00	 call	 ?DestroyShips@SimRegion@@IAEXXZ ; SimRegion::DestroyShips
$LN8@ExecFrame:

; 2577 :     }
; 2578 : 
; 2579 :     if (active && cam_dir && player_ship) {

  00168	80 7e 40 00	 cmp	 BYTE PTR [esi+64], 0
  0016c	74 6c		 je	 SHORT $LN10@ExecFrame
  0016e	85 ff		 test	 edi, edi
  00170	74 68		 je	 SHORT $LN10@ExecFrame
  00172	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00175	85 c9		 test	 ecx, ecx
  00177	74 61		 je	 SHORT $LN10@ExecFrame
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  00179	8d 81 c0 00 00
	00		 lea	 eax, DWORD PTR [ecx+192]
  0017f	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  00185	50		 push	 eax
  00186	8d 44 24 4c	 lea	 eax, DWORD PTR $T2[esp+100]
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
  00190	f2 0f 10 44 24
	48		 movsd	 xmm0, QWORD PTR $T2[esp+96]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00196	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0019a	8b 07		 mov	 eax, DWORD PTR [edi]

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0019c	f3 0f 11 44 24
	10		 movss	 DWORD PTR $T1[esp+96], xmm0
  001a2	f2 0f 10 44 24
	50		 movsd	 xmm0, QWORD PTR $T2[esp+104]

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  001a8	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  001ac	f3 0f 11 44 24
	14		 movss	 DWORD PTR $T1[esp+100], xmm0
  001b2	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR $T2[esp+112]

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  001b8	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  001bc	f3 0f 11 44 24
	18		 movss	 DWORD PTR $T1[esp+104], xmm0
  001c2	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7CameraDirector@@6B@
  001c7	75 25		 jne	 SHORT $LN17@ExecFrame
; File d:\programming\starshatter\trunk\stars45\cameradirector.h

; 98   :     virtual Camera*   GetCamera()                { return &camera; }

  001c9	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
$LN16@ExecFrame:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2580 :         Sound::SetListener(*(cam_dir->GetCamera()), player_ship->Velocity());

  001cc	8d 4c 24 10	 lea	 ecx, DWORD PTR $T1[esp+96]
  001d0	51		 push	 ecx
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 ?SetListener@Sound@@SAXABVCamera@@ABUVec3@@@Z ; Sound::SetListener
  001d7	83 c4 08	 add	 esp, 8
$LN10@ExecFrame:

; 2581 :     }
; 2582 : }

  001da	5f		 pop	 edi
  001db	5e		 pop	 esi
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c2 08 00	 ret	 8
$LN50@ExecFrame:

; 2555 :         ref = cam_dir->GetCamera()->Pos();

  001e2	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  001e5	8b cf		 mov	 ecx, edi
  001e7	ff d0		 call	 eax
  001e9	e9 d5 fe ff ff	 jmp	 $LN12@ExecFrame
$LN17@ExecFrame:

; 2580 :         Sound::SetListener(*(cam_dir->GetCamera()), player_ship->Velocity());

  001ee	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  001f1	8b cf		 mov	 ecx, edi
  001f3	ff d0		 call	 eax
  001f5	eb d5		 jmp	 SHORT $LN16@ExecFrame
?ExecFrame@SimRegion@@UAEXN@Z ENDP			; SimRegion::ExecFrame
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_show$ = 8						; size = 4
?ShowGrid@SimRegion@@QAEXH@Z PROC			; SimRegion::ShowGrid
; _this$ = ecx

; 2588 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2589 :     if (grid) {

  00003	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  00006	85 c9		 test	 ecx, ecx
  00008	74 26		 je	 SHORT $LN8@ShowGrid

; 2590 :         if (show)

  0000a	83 7d 08 00	 cmp	 DWORD PTR _show$[ebp], 0
  0000e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00010	74 0f		 je	 SHORT $LN3@ShowGrid
  00012	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Grid@@6B@
  00017	75 1b		 jne	 SHORT $LN14@ShowGrid
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 115  :     virtual void      Show()               { hidden = false; }

  00019	c6 41 38 00	 mov	 BYTE PTR [ecx+56], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2595 : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN3@ShowGrid:
  00021	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Grid@@6B@
  00026	75 13		 jne	 SHORT $LN9@ShowGrid
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 114  :     virtual void      Hide()               { hidden = true;  }

  00028	c6 41 38 01	 mov	 BYTE PTR [ecx+56], 1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2595 : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN8@ShowGrid:
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN14@ShowGrid:

; 2591 :         grid->Show();

  00034	ff 50 4c	 call	 DWORD PTR [eax+76]

; 2595 : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN9@ShowGrid:

; 2592 :         else
; 2593 :         grid->Hide();

  0003b	ff 50 48	 call	 DWORD PTR [eax+72]
  0003e	eb f0		 jmp	 SHORT $LN8@ShowGrid
?ShowGrid@SimRegion@@QAEXH@Z ENDP			; SimRegion::ShowGrid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\camera.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T1 = -44						; size = 24
_a$ = -20						; size = 8
_seconds$1$ = -12					; size = 8
_ref$ = 8						; size = 4
?UpdateSky@SimRegion@@IAEXNABUPoint@@@Z PROC		; SimRegion::UpdateSky
; _this$ = ecx
; _seconds$ = xmm2l

; 2601 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	0f 28 c2	 movaps	 xmm0, xmm2
  0000d	f2 0f 11 45 f4	 movsd	 QWORD PTR _seconds$1$[ebp], xmm0

; 2602 :     Dust* dust = sim->dust;

  00012	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00015	8b 70 50	 mov	 esi, DWORD PTR [eax+80]

; 2603 : 
; 2604 :     if (dust) {

  00018	85 f6		 test	 esi, esi
  0001a	0f 84 8d 00 00
	00		 je	 $LN19@UpdateSky

; 2605 :         if (orbital_region && orbital_region->Type() == Orbital::TERRAIN) {

  00020	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00023	85 c0		 test	 eax, eax
  00025	74 0f		 je	 SHORT $LN5@UpdateSky
  00027	83 78 10 05	 cmp	 DWORD PTR [eax+16], 5
  0002b	75 09		 jne	 SHORT $LN5@UpdateSky

; 2606 :             dust->Hide();

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
  0002f	8b ce		 mov	 ecx, esi
  00031	ff 50 48	 call	 DWORD PTR [eax+72]

; 2607 :         }
; 2608 :         else {

  00034	eb 72		 jmp	 SHORT $LN43@UpdateSky
$LN5@UpdateSky:

; 2609 :             dust->Show();

  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	8b ce		 mov	 ecx, esi
  0003a	ff 50 4c	 call	 DWORD PTR [eax+76]
  0003d	ff 75 08	 push	 DWORD PTR _ref$[ebp]

; 2610 : 
; 2611 :             dust->ExecFrame(seconds, ref);

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b ce		 mov	 ecx, esi
  00044	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _seconds$1$[ebp]
  00049	83 ec 08	 sub	 esp, 8
  0004c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00051	ff 90 8c 00 00
	00		 call	 DWORD PTR [eax+140]

; 2613 :             if (player_ship && dust->Hidden()) {

  00057	83 7f 44 00	 cmp	 DWORD PTR [edi+68], 0
  0005b	74 4b		 je	 SHORT $LN43@UpdateSky
  0005d	8b 06		 mov	 eax, DWORD PTR [esi]
  0005f	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Dust@@6B@
  00064	0f 85 96 00 00
	00		 jne	 $LN44@UpdateSky
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 111  :     virtual int       Hidden()       const { return hidden;  }

  0006a	0f b6 46 38	 movzx	 eax, BYTE PTR [esi+56]
$LN15@UpdateSky:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2613 :             if (player_ship && dust->Hidden()) {

  0006e	85 c0		 test	 eax, eax
  00070	74 36		 je	 SHORT $LN43@UpdateSky
; File d:\programming\starshatter\trunk\ngenex\camera.h

; 72   :     Point    Pos() const { return pos;    }

  00072	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2614 :                 dust->Reset(player_ship->Location());

  00075	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00078	51		 push	 ecx
  00079	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0007b	f2 0f 10 40 48	 movsd	 xmm0, QWORD PTR [eax+72]
  00080	f2 0f 11 45 d4	 movsd	 QWORD PTR $T1[ebp], xmm0
  00085	f2 0f 10 40 50	 movsd	 xmm0, QWORD PTR [eax+80]
  0008a	f2 0f 11 45 dc	 movsd	 QWORD PTR $T1[ebp+8], xmm0
  0008f	f2 0f 10 40 58	 movsd	 xmm0, QWORD PTR [eax+88]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2614 :                 dust->Reset(player_ship->Location());

  00094	8b 06		 mov	 eax, DWORD PTR [esi]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00096	f2 0f 11 45 e4	 movsd	 QWORD PTR $T1[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2614 :                 dust->Reset(player_ship->Location());

  0009b	ff 90 88 00 00
	00		 call	 DWORD PTR [eax+136]

; 2615 :                 dust->Show();

  000a1	8b 06		 mov	 eax, DWORD PTR [esi]
  000a3	8b ce		 mov	 ecx, esi
  000a5	ff 50 4c	 call	 DWORD PTR [eax+76]
$LN43@UpdateSky:
  000a8	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _seconds$1$[ebp]
$LN19@UpdateSky:

; 2616 :             }
; 2617 :         }
; 2618 :     }
; 2619 : 
; 2620 :     ListIter<Asteroid> a = asteroids;

  000ad	8d 87 ac 00 00
	00		 lea	 eax, DWORD PTR [edi+172]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000b3	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _a$[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  000ba	8d 4d ec	 lea	 ecx, DWORD PTR _a$[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000bd	89 45 ec	 mov	 DWORD PTR _a$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  000c0	e8 00 00 00 00	 call	 ?next@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::next
  000c5	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2621 :     while (++a) {

  000c7	74 2f		 je	 SHORT $LN3@UpdateSky
  000c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@UpdateSky:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  000d0	8d 4d ec	 lea	 ecx, DWORD PTR _a$[ebp]
  000d3	e8 00 00 00 00	 call	 ?value@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2622 :         a->ExecFrame(seconds);

  000d8	83 ec 08	 sub	 esp, 8
  000db	8b c8		 mov	 ecx, eax
  000dd	8b 10		 mov	 edx, DWORD PTR [eax]
  000df	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000e4	ff 52 04	 call	 DWORD PTR [edx+4]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000e7	8d 4d ec	 lea	 ecx, DWORD PTR _a$[ebp]
  000ea	e8 00 00 00 00	 call	 ?next@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::next
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2621 :     while (++a) {

  000ef	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _seconds$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000f4	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2621 :     while (++a) {

  000f6	75 d8		 jne	 SHORT $LL2@UpdateSky
$LN3@UpdateSky:

; 2623 :     }
; 2624 : }

  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
$LN44@UpdateSky:
  00100	8b ce		 mov	 ecx, esi

; 2613 :             if (player_ship && dust->Hidden()) {

  00102	ff 50 3c	 call	 DWORD PTR [eax+60]
  00105	e9 64 ff ff ff	 jmp	 $LN15@UpdateSky
?UpdateSky@SimRegion@@IAEXNABUPoint@@@Z ENDP		; SimRegion::UpdateSky
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_seconds$1$ = -16					; size = 8
_ship_iter$ = -8					; size = 8
?UpdateShips@SimRegion@@IAEXN@Z PROC			; SimRegion::UpdateShips
; _this$ = ecx
; _seconds$ = xmm1l

; 2630 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	0f 28 c1	 movaps	 xmm0, xmm1
  0000c	57		 push	 edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  0000d	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2630 : {

  00010	f2 0f 11 45 f0	 movsd	 QWORD PTR _seconds$1$[ebp], xmm0

; 2631 :     int ship_index = 0;

  00015	33 ff		 xor	 edi, edi

; 2632 :     if (ai_index > ships.size())

  00017	8b 86 04 01 00
	00		 mov	 eax, DWORD PTR [esi+260]
  0001d	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0001f	7e 06		 jle	 SHORT $LN4@UpdateShip

; 2633 :     ai_index = 0;

  00021	89 be 04 01 00
	00		 mov	 DWORD PTR [esi+260], edi
$LN4@UpdateShip:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00027	89 4d f8	 mov	 DWORD PTR _ship_iter$[ebp], ecx

; 108  :    int operator++() { return next() != 0; }

  0002a	8d 4d f8	 lea	 ecx, DWORD PTR _ship_iter$[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0002d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ship_iter$[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00034	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00039	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2638 :     while (++ship_iter) {

  0003b	74 49		 je	 SHORT $LN25@UpdateShip
  0003d	0f 1f 00	 npad	 3
$LL2@UpdateShip:

; 2639 :         ship = ship_iter.value();

  00040	8d 4d f8	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
  00043	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value
  00048	8b c8		 mov	 ecx, eax

; 2640 :         
; 2641 :         if (ship_index == ai_index || ship == player_ship)

  0004a	3b be 04 01 00
	00		 cmp	 edi, DWORD PTR [esi+260]
  00050	74 0e		 je	 SHORT $LN7@UpdateShip
  00052	3b 4e 44	 cmp	 ecx, DWORD PTR [esi+68]
  00055	74 09		 je	 SHORT $LN7@UpdateShip
; File d:\programming\starshatter\trunk\stars45\ship.h

; 178  :     void              SetAIMode(int n)                 { ai_mode = (BYTE) n; }

  00057	c6 81 14 04 00
	00 01		 mov	 BYTE PTR [ecx+1044], 1
  0005e	eb 07		 jmp	 SHORT $LN6@UpdateShip
$LN7@UpdateShip:
  00060	c6 81 14 04 00
	00 02		 mov	 BYTE PTR [ecx+1044], 2
$LN6@UpdateShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2646 :         ship->ExecFrame(seconds);

  00067	8b 01		 mov	 eax, DWORD PTR [ecx]
  00069	83 ec 08	 sub	 esp, 8
  0006c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00071	ff 50 04	 call	 DWORD PTR [eax+4]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00074	8d 4d f8	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2647 :         ship_index++;

  00077	47		 inc	 edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00078	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2638 :     while (++ship_iter) {

  0007d	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _seconds$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00082	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2638 :     while (++ship_iter) {

  00084	75 ba		 jne	 SHORT $LL2@UpdateShip
$LN25@UpdateShip:

; 2648 :     }
; 2649 : 
; 2650 :     ai_index++;

  00086	ff 86 04 01 00
	00		 inc	 DWORD PTR [esi+260]

; 2651 : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?UpdateShips@SimRegion@@IAEXN@Z ENDP			; SimRegion::UpdateShips
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_seconds$1$ = -16					; size = 8
_shot_iter$ = -8					; size = 8
?UpdateShots@SimRegion@@IAEXN@Z PROC			; SimRegion::UpdateShots
; _this$ = ecx
; _seconds$ = xmm1l

; 2657 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	f2 0f 11 4d f0	 movsd	 QWORD PTR _seconds$1$[ebp], xmm1
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0000f	8d 4d f8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00012	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _shot_iter$[ebp+4], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2658 :     ListIter<Shot> shot_iter = shots;

  00019	8d 47 7c	 lea	 eax, DWORD PTR [edi+124]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0001c	89 45 f8	 mov	 DWORD PTR _shot_iter$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  0001f	e8 00 00 00 00	 call	 ?next@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::next
  00024	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2659 :     while (++shot_iter) {

  00026	0f 84 c0 00 00
	00		 je	 $LN3@UpdateShot
  0002c	0f 1f 40 00	 npad	 4
$LL2@UpdateShot:

; 2660 :         Shot* shot = shot_iter.value();

  00030	8d 4d f8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]
  00033	e8 00 00 00 00	 call	 ?value@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::value
  00038	8b f0		 mov	 esi, eax

; 2661 :         shot->ExecFrame(seconds);

  0003a	83 ec 08	 sub	 esp, 8
  0003d	8b ce		 mov	 ecx, esi
  0003f	8b 16		 mov	 edx, DWORD PTR [esi]
  00041	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00046	ff 52 04	 call	 DWORD PTR [edx+4]

; 2662 : 
; 2663 :         if (shot->Design()->flak) {

  00049	8b 8e 20 02 00
	00		 mov	 ecx, DWORD PTR [esi+544]
  0004f	80 79 22 00	 cmp	 BYTE PTR [ecx+34], 0
  00053	74 3d		 je	 SHORT $LN5@UpdateShot

; 2666 :             if (shot->Life() < 0.02 || seeker && seeker->Overshot()) {

  00055	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  0005d	66 0f 2f 86 a8
	01 00 00	 comisd	 xmm0, QWORD PTR [esi+424]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 139  :     Director*         GetDirector() const { return dir;      }

  00065	8b 8e c4 01 00
	00		 mov	 ecx, DWORD PTR [esi+452]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2666 :             if (shot->Life() < 0.02 || seeker && seeker->Overshot()) {

  0006b	77 0d		 ja	 SHORT $LN6@UpdateShot
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 21		 je	 SHORT $LN5@UpdateShot
  00071	e8 00 00 00 00	 call	 ?Overshot@SeekerAI@@UAE_NXZ ; SeekerAI::Overshot
  00076	84 c0		 test	 al, al
  00078	74 18		 je	 SHORT $LN5@UpdateShot
$LN6@UpdateShot:

; 2667 :                 shot->SetFuse(0.001); // set lifetime to ~zero

  0007a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3f50624dd2f1a9fc
  00082	8b ce		 mov	 ecx, esi
  00084	e8 00 00 00 00	 call	 ?SetFuse@Shot@@QAEXN@Z	; Shot::SetFuse

; 2668 :                 sim->CreateSplashDamage(shot);

  00089	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0008c	56		 push	 esi
  0008d	e8 00 00 00 00	 call	 ?CreateSplashDamage@Sim@@QAEXPAVShot@@@Z ; Sim::CreateSplashDamage
$LN5@UpdateShot:

; 2669 :             }
; 2670 :         }
; 2671 :         
; 2672 :         if (shot->Life() < 0.01) {  // died of old age

  00092	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  0009a	66 0f 2f 86 a8
	01 00 00	 comisd	 xmm0, QWORD PTR [esi+424]
  000a2	76 33		 jbe	 SHORT $LN10@UpdateShot

; 2673 :             NetUtil::SendWepDestroy(shot);

  000a4	8b ce		 mov	 ecx, esi
  000a6	e8 00 00 00 00	 call	 ?SendWepDestroy@NetUtil@@SAXPAVShot@@@Z ; NetUtil::SendWepDestroy

; 2674 : 
; 2675 :             if (shot->IsDrone())

  000ab	8b 06		 mov	 eax, DWORD PTR [esi]
  000ad	8b ce		 mov	 ecx, esi
  000af	8b 80 c4 00 00
	00		 mov	 eax, DWORD PTR [eax+196]
  000b5	ff d0		 call	 eax
  000b7	84 c0		 test	 al, al
  000b9	74 0c		 je	 SHORT $LN8@UpdateShot

; 2676 :             drones.remove((Drone*) shot);

  000bb	56		 push	 esi
  000bc	8d 8f 88 00 00
	00		 lea	 ecx, DWORD PTR [edi+136]
  000c2	e8 00 00 00 00	 call	 ?remove@?$List@VDrone@@@@QAEPAVDrone@@PBV2@@Z ; List<Drone>::remove
$LN8@UpdateShot:

; 2677 : 
; 2678 :             shot_iter.removeItem();

  000c7	8d 4d f8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]
  000ca	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::removeItem

; 2679 :             delete shot;

  000cf	8b 06		 mov	 eax, DWORD PTR [esi]
  000d1	8b ce		 mov	 ecx, esi
  000d3	6a 01		 push	 1
  000d5	ff 10		 call	 DWORD PTR [eax]
$LN10@UpdateShot:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000d7	8d 4d f8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]
  000da	e8 00 00 00 00	 call	 ?next@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::next
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2659 :     while (++shot_iter) {

  000df	f2 0f 10 4d f0	 movsd	 xmm1, QWORD PTR _seconds$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000e4	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2659 :     while (++shot_iter) {

  000e6	0f 85 44 ff ff
	ff		 jne	 $LL2@UpdateShot
$LN3@UpdateShot:

; 2680 :             shot = 0;
; 2681 :         }
; 2682 :     }
; 2683 : }

  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
?UpdateShots@SimRegion@@IAEXN@Z ENDP			; SimRegion::UpdateShots
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_seconds$1$ = -16					; size = 8
_debris_iter$ = -8					; size = 8
_exp_iter$ = -8						; size = 8
?UpdateExplosions@SimRegion@@IAEXN@Z PROC		; SimRegion::UpdateExplosions
; _this$ = ecx
; _seconds$ = xmm1l

; 2689 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0000a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _exp_iter$[ebp+4], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2689 : {

  00011	0f 28 c1	 movaps	 xmm0, xmm1
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00014	8d 4d f8	 lea	 ecx, DWORD PTR _exp_iter$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2689 : {

  00017	f2 0f 11 45 f0	 movsd	 QWORD PTR _seconds$1$[ebp], xmm0

; 2690 :     ListIter<Explosion> exp_iter = explosions;

  0001c	8d 87 94 00 00
	00		 lea	 eax, DWORD PTR [edi+148]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00022	89 45 f8	 mov	 DWORD PTR _exp_iter$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00025	e8 00 00 00 00	 call	 ?next@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::next
  0002a	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2691 :     while (++exp_iter) {

  0002c	74 4e		 je	 SHORT $LN3@UpdateExpl
  0002e	66 90		 npad	 2
$LL2@UpdateExpl:

; 2692 :         Explosion* exp = exp_iter.value();

  00030	8d 4d f8	 lea	 ecx, DWORD PTR _exp_iter$[ebp]
  00033	e8 00 00 00 00	 call	 ?value@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::value
  00038	8b f0		 mov	 esi, eax

; 2693 :         exp->ExecFrame(seconds);

  0003a	83 ec 08	 sub	 esp, 8
  0003d	8b ce		 mov	 ecx, esi
  0003f	8b 16		 mov	 edx, DWORD PTR [esi]
  00041	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00046	ff 52 04	 call	 DWORD PTR [edx+4]

; 2694 : 
; 2695 :         if (exp->Life() < 0.01) {  // died of old age

  00049	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00051	66 0f 2f 86 a8
	01 00 00	 comisd	 xmm0, QWORD PTR [esi+424]
  00059	76 10		 jbe	 SHORT $LN9@UpdateExpl

; 2696 :             exp_iter.removeItem();

  0005b	8d 4d f8	 lea	 ecx, DWORD PTR _exp_iter$[ebp]
  0005e	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::removeItem

; 2697 :             delete exp;

  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b ce		 mov	 ecx, esi
  00067	6a 01		 push	 1
  00069	ff 10		 call	 DWORD PTR [eax]
$LN9@UpdateExpl:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0006b	8d 4d f8	 lea	 ecx, DWORD PTR _exp_iter$[ebp]
  0006e	e8 00 00 00 00	 call	 ?next@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::next
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2691 :     while (++exp_iter) {

  00073	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _seconds$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00078	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2691 :     while (++exp_iter) {

  0007a	75 b4		 jne	 SHORT $LL2@UpdateExpl
$LN3@UpdateExpl:

; 2698 :         }
; 2699 :     }
; 2700 : 
; 2701 :     ListIter<Debris> debris_iter = debris;

  0007c	8d 87 a0 00 00
	00		 lea	 eax, DWORD PTR [edi+160]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _debris_iter$[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00089	8d 4d f8	 lea	 ecx, DWORD PTR _debris_iter$[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0008c	89 45 f8	 mov	 DWORD PTR _debris_iter$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  0008f	e8 00 00 00 00	 call	 ?next@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::next
  00094	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2702 :     while (++debris_iter) {

  00096	74 4c		 je	 SHORT $LN5@UpdateExpl
$LL4@UpdateExpl:

; 2703 :         Debris* d = debris_iter.value();

  00098	8d 4d f8	 lea	 ecx, DWORD PTR _debris_iter$[ebp]
  0009b	e8 00 00 00 00	 call	 ?value@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::value
  000a0	8b f0		 mov	 esi, eax

; 2704 :         d->ExecFrame(seconds);

  000a2	83 ec 08	 sub	 esp, 8
  000a5	8b ce		 mov	 ecx, esi
  000a7	8b 16		 mov	 edx, DWORD PTR [esi]
  000a9	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000ae	ff 52 04	 call	 DWORD PTR [edx+4]

; 2705 : 
; 2706 :         if (d->Life() < 0.01) {  // died of old age

  000b1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  000b9	66 0f 2f 86 a8
	01 00 00	 comisd	 xmm0, QWORD PTR [esi+424]
  000c1	76 10		 jbe	 SHORT $LN11@UpdateExpl

; 2707 :             debris_iter.removeItem();

  000c3	8d 4d f8	 lea	 ecx, DWORD PTR _debris_iter$[ebp]
  000c6	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::removeItem

; 2708 :             delete d;

  000cb	8b 06		 mov	 eax, DWORD PTR [esi]
  000cd	8b ce		 mov	 ecx, esi
  000cf	6a 01		 push	 1
  000d1	ff 10		 call	 DWORD PTR [eax]
$LN11@UpdateExpl:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000d3	8d 4d f8	 lea	 ecx, DWORD PTR _debris_iter$[ebp]
  000d6	e8 00 00 00 00	 call	 ?next@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::next
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2702 :     while (++debris_iter) {

  000db	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _seconds$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000e0	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2702 :     while (++debris_iter) {

  000e2	75 b4		 jne	 SHORT $LL4@UpdateExpl
$LN5@UpdateExpl:

; 2709 :         }
; 2710 :     }
; 2711 : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
?UpdateExplosions@SimRegion@@IAEXN@Z ENDP		; SimRegion::UpdateExplosions
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\shot.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\shot.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\shot.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\element.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\shot.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\shot.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\drone.h
; File d:\programming\starshatter\trunk\stars45\shot.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\shot.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\shot.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T1 = -144						; size = 24
$T2 = -144						; size = 24
_impact$ = -120						; size = 24
$T3 = -96						; size = 24
$T4 = -96						; size = 24
_a_iter$5 = -72						; size = 8
_drone_iter$6 = -64					; size = 8
_ship_iter$7 = -56					; size = 8
tv1403 = -48						; size = 4
tv1388 = -44						; size = 4
tv1389 = -40						; size = 4
_debris_iter$8 = -36					; size = 8
_director$9 = -28					; size = 4
_shot_iter$ = -24					; size = 8
tv1418 = -16						; size = 4
_cmdr_stats$1$ = -16					; size = 4
_cmdr_stats$1$ = -12					; size = 4
_elem$1$ = -12						; size = 4
_killer$1$ = -12					; size = 4
_this$1$ = -8						; size = 4
_owner_name$1$ = -4					; size = 4
?DamageShips@SimRegion@@IAEXXZ PROC			; SimRegion::DamageShips
; _this$ = ecx

; 2719 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx

; 2720 :     if (ships.size() == 0 || shots.size() == 0)

  0000c	83 7b 4c 00	 cmp	 DWORD PTR [ebx+76], 0
  00010	56		 push	 esi
  00011	57		 push	 edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  00012	8d 7b 4c	 lea	 edi, DWORD PTR [ebx+76]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2719 : {

  00015	89 5d f8	 mov	 DWORD PTR _this$1$[ebp], ebx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  00018	89 7d d0	 mov	 DWORD PTR tv1403[ebp], edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2720 :     if (ships.size() == 0 || shots.size() == 0)

  0001b	0f 84 d7 06 00
	00		 je	 $LN13@DamageShip
  00021	83 7b 7c 00	 cmp	 DWORD PTR [ebx+124], 0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  00025	8d 43 7c	 lea	 eax, DWORD PTR [ebx+124]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2720 :     if (ships.size() == 0 || shots.size() == 0)

  00028	0f 84 ca 06 00
	00		 je	 $LN13@DamageShip
  0002e	0f 57 c0	 xorps	 xmm0, xmm0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00031	89 45 e8	 mov	 DWORD PTR _shot_iter$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00034	8d 4d e8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 217  :     Point()                                : x(0),   y(0),   z(0)    { }

  00037	f2 0f 11 45 98	 movsd	 QWORD PTR _impact$[ebp+16], xmm0
  0003c	0f 11 45 88	 movups	 XMMWORD PTR _impact$[ebp], xmm0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00040	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _shot_iter$[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00047	e8 00 00 00 00	 call	 ?next@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::next
  0004c	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2727 :     while (++shot_iter) {

  0004e	0f 84 a4 06 00
	00		 je	 $LN13@DamageShip
  00054	8d 83 a0 00 00
	00		 lea	 eax, DWORD PTR [ebx+160]
  0005a	89 45 d8	 mov	 DWORD PTR tv1389[ebp], eax
  0005d	8d 83 ac 00 00
	00		 lea	 eax, DWORD PTR [ebx+172]
  00063	89 45 d4	 mov	 DWORD PTR tv1388[ebp], eax
$LL2@DamageShip:

; 2728 :         Shot*       shot  = shot_iter.value();

  00066	8d 4d e8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]
  00069	e8 00 00 00 00	 call	 ?value@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::value
  0006e	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\stars45\shot.h

; 76   :     const Ship*       Owner()        const { return owner;      }

  00070	8b 9e f0 01 00
	00		 mov	 ebx, DWORD PTR [esi+496]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2732 :         if (owner)

  00076	85 db		 test	 ebx, ebx
  00078	74 08		 je	 SHORT $LN14@DamageShip
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  0007a	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
  0007d	89 45 fc	 mov	 DWORD PTR _owner_name$1$[ebp], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2734 :         else

  00080	eb 07		 jmp	 SHORT $LN15@DamageShip
$LN14@DamageShip:

; 2735 :         owner_name = "[KIA]";

  00082	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _owner_name$1$[ebp], OFFSET ??_C@_05JPAGBMGJ@?$FLKIA?$FN?$AA@
$LN15@DamageShip:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00089	89 7d c8	 mov	 DWORD PTR _ship_iter$7[ebp], edi
  0008c	c7 45 cc ff ff
	ff ff		 mov	 DWORD PTR _ship_iter$7[ebp+4], -1
$LL4@DamageShip:

; 108  :    int operator++() { return next() != 0; }

  00093	8d 4d c8	 lea	 ecx, DWORD PTR _ship_iter$7[ebp]
  00096	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  0009b	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2739 :         while (shot && ++ship_iter) {

  0009d	0f 84 1e 03 00
	00		 je	 $LN5@DamageShip

; 2740 :             Ship* ship = ship_iter.value();

  000a3	8d 4d c8	 lea	 ecx, DWORD PTR _ship_iter$7[ebp]
  000a6	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value
  000ab	8b f8		 mov	 edi, eax

; 2741 :             int   hit  = ship->HitBy(shot, impact);

  000ad	8d 45 88	 lea	 eax, DWORD PTR _impact$[ebp]
  000b0	50		 push	 eax
  000b1	56		 push	 esi
  000b2	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000b4	8b 91 90 01 00
	00		 mov	 edx, DWORD PTR [ecx+400]
  000ba	8b cf		 mov	 ecx, edi
  000bc	ff d2		 call	 edx

; 2742 : 
; 2743 :             if (hit) {

  000be	85 c0		 test	 eax, eax
  000c0	74 d1		 je	 SHORT $LL4@DamageShip

; 2744 :                 // recon imager:
; 2745 :                 if (shot->Damage() < 0) {

  000c2	8b ce		 mov	 ecx, esi
  000c4	e8 00 00 00 00	 call	 ?Damage@Shot@@QBENXZ	; Shot::Damage
  000c9	0f 57 c9	 xorps	 xmm1, xmm1
  000cc	66 0f 2f c8	 comisd	 xmm1, xmm0
  000d0	76 23		 jbe	 SHORT $LN17@DamageShip

; 2746 :                     ShipStats* shooter = ShipStats::Find(owner_name);

  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _owner_name$1$[ebp]
  000d5	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find

; 2747 :                     if (shooter) {

  000da	85 c0		 test	 eax, eax
  000dc	0f 84 43 02 00
	00		 je	 $LN21@DamageShip

; 2748 :                         shooter->AddEvent(SimEvent::SCAN_TARGET, ship->Name());

  000e2	51		 push	 ecx
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  000e3	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2748 :                         shooter->AddEvent(SimEvent::SCAN_TARGET, ship->Name());

  000e6	51		 push	 ecx
  000e7	6a 13		 push	 19			; 00000013H
  000e9	8b c8		 mov	 ecx, eax
  000eb	e8 00 00 00 00	 call	 ?AddEvent@ShipStats@@QAEPAVSimEvent@@HPBD0@Z ; ShipStats::AddEvent

; 2749 :                     }
; 2750 :                 }

  000f0	e9 30 02 00 00	 jmp	 $LN21@DamageShip
$LN17@DamageShip:

; 2751 : 
; 2752 :                 // live round:
; 2753 :                 else if (shot->Damage() > 0) {

  000f5	8b ce		 mov	 ecx, esi
  000f7	e8 00 00 00 00	 call	 ?Damage@Shot@@QBENXZ	; Shot::Damage
  000fc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00104	0f 86 1b 02 00
	00		 jbe	 $LN21@DamageShip
; File d:\programming\starshatter\trunk\stars45\ship.h

; 236  :     bool              InTransition()       const { return transition_type != TRANSITION_NONE;         }

  0010a	83 bf 60 04 00
	00 00		 cmp	 DWORD PTR [edi+1120], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2754 :                     int ship_destroyed = (!ship->InTransition() && ship->Integrity() < 1.0f);

  00111	0f 85 0e 02 00
	00		 jne	 $LN21@DamageShip
  00117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011f	0f 2f 87 b8 01
	00 00		 comiss	 xmm0, DWORD PTR [edi+440]
  00126	0f 86 f9 01 00
	00		 jbe	 $LN21@DamageShip
  0012c	8b 06		 mov	 eax, DWORD PTR [esi]
  0012e	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [eax+208]
  00134	3d 00 00 00 00	 cmp	 eax, OFFSET ?IsMissile@Shot@@UBE_NXZ ; Shot::IsMissile
  00139	0f 85 c0 05 00
	00		 jne	 $LN276@DamageShip
; File d:\programming\starshatter\trunk\stars45\shot.h

; 85   :     virtual bool      IsMissile()    const { return !primary;   }

  0013f	80 be 0c 02 00
	00 00		 cmp	 BYTE PTR [esi+524], 0
  00146	0f 94 c0	 sete	 al
$LN81@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2758 :                         NetUtil::SendObjKill(ship, owner, shot->IsMissile() ? NetObjKill::KILL_SECONDARY : NetObjKill::KILL_PRIMARY);

  00149	33 c9		 xor	 ecx, ecx
  0014b	8b d3		 mov	 edx, ebx
  0014d	84 c0		 test	 al, al
  0014f	6a 00		 push	 0
  00151	0f 95 c1	 setne	 cl
  00154	41		 inc	 ecx
  00155	51		 push	 ecx
  00156	8b cf		 mov	 ecx, edi
  00158	e8 00 00 00 00	 call	 ?SendObjKill@NetUtil@@SAXPAVShip@@PBV2@HH@Z ; NetUtil::SendObjKill

; 2759 :                         Director* director;
; 2760 :                         
; 2761 :                         Print("    %s Killed %s (%s)\n", owner_name, ship->Name(), FormatGameTime());

  0015d	e8 00 00 00 00	 call	 ?FormatGameTime@@YAPBDXZ ; FormatGameTime
  00162	50		 push	 eax
  00163	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00166	50		 push	 eax
  00167	ff 75 fc	 push	 DWORD PTR _owner_name$1$[ebp]
  0016a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IBFIGKOO@?5?5?5?5?$CFs?5Killed?5?$CFs?5?$CI?$CFs?$CJ?6?$AA@
  0016f	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00174	83 c4 18	 add	 esp, 24			; 00000018H

; 2762 : 
; 2763 :                         if (owner)

  00177	85 db		 test	 ebx, ebx
  00179	74 0b		 je	 SHORT $LN270@DamageShip
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 139  :     Director*         GetDirector() const { return dir;      }

  0017b	8b 8b c4 01 00
	00		 mov	 ecx, DWORD PTR [ebx+452]
  00181	89 4d e4	 mov	 DWORD PTR _director$9[ebp], ecx
  00184	eb 03		 jmp	 SHORT $LN22@DamageShip
$LN270@DamageShip:
  00186	8b 4d e4	 mov	 ecx, DWORD PTR _director$9[ebp]
$LN22@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2767 :                         if (director && director->Type() > SteerAI::SEEKER && director->Type() < SteerAI::GROUND) {

  00189	85 c9		 test	 ecx, ecx
  0018b	74 24		 je	 SHORT $LN23@DamageShip
  0018d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0018f	ff 50 04	 call	 DWORD PTR [eax+4]
  00192	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00197	7e 18		 jle	 SHORT $LN23@DamageShip
  00199	8b 4d e4	 mov	 ecx, DWORD PTR _director$9[ebp]
  0019c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0019e	ff 50 04	 call	 DWORD PTR [eax+4]
  001a1	3d eb 03 00 00	 cmp	 eax, 1003		; 000003ebH
  001a6	7d 09		 jge	 SHORT $LN23@DamageShip

; 2768 :                             ShipAI* shipAI = (ShipAI*) director;
; 2769 :                             shipAI->Splash(ship);

  001a8	8b 4d e4	 mov	 ecx, DWORD PTR _director$9[ebp]
  001ab	57		 push	 edi
  001ac	e8 00 00 00 00	 call	 ?Splash@ShipAI@@UAEXPBVShip@@@Z ; ShipAI::Splash
$LN23@DamageShip:

; 2770 :                         }
; 2771 : 
; 2772 :                         // record the kill
; 2773 :                         ShipStats* killer = ShipStats::Find(owner_name);

  001b1	8b 4d fc	 mov	 ecx, DWORD PTR _owner_name$1$[ebp]
  001b4	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find
  001b9	89 45 f4	 mov	 DWORD PTR _killer$1$[ebp], eax

; 2774 :                         if (killer) {

  001bc	85 c0		 test	 eax, eax
  001be	74 34		 je	 SHORT $LN26@DamageShip
  001c0	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001c2	8b 91 d0 00 00
	00		 mov	 edx, DWORD PTR [ecx+208]
  001c8	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?IsMissile@Shot@@UBE_NXZ ; Shot::IsMissile
  001ce	0f 85 34 05 00
	00		 jne	 $LN88@DamageShip
; File d:\programming\starshatter\trunk\stars45\shot.h

; 85   :     virtual bool      IsMissile()    const { return !primary;   }

  001d4	80 be 0c 02 00
	00 00		 cmp	 BYTE PTR [esi+524], 0
  001db	0f 94 c1	 sete	 cl
$LN87@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2776 :                             killer->AddEvent(SimEvent::MISSILE_KILL, ship->Name());

  001de	51		 push	 ecx
  001df	84 c9		 test	 cl, cl
  001e1	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  001e4	51		 push	 ecx
  001e5	8b c8		 mov	 ecx, eax
  001e7	74 04		 je	 SHORT $LN25@DamageShip
  001e9	6a 11		 push	 17			; 00000011H

; 2777 :                             else

  001eb	eb 02		 jmp	 SHORT $LN272@DamageShip
$LN25@DamageShip:

; 2778 :                             killer->AddEvent(SimEvent::GUNS_KILL, ship->Name());

  001ed	6a 10		 push	 16			; 00000010H
$LN272@DamageShip:
  001ef	e8 00 00 00 00	 call	 ?AddEvent@ShipStats@@QAEPAVSimEvent@@HPBD0@Z ; ShipStats::AddEvent
$LN26@DamageShip:

; 2781 :                         if (owner && owner->GetIFF() != ship->GetIFF()) {

  001f4	85 db		 test	 ebx, ebx
  001f6	0f 84 09 01 00
	00		 je	 $LN36@DamageShip
  001fc	8b 03		 mov	 eax, DWORD PTR [ebx]
  001fe	8b 80 98 01 00
	00		 mov	 eax, DWORD PTR [eax+408]
  00204	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  00209	0f 85 07 05 00
	00		 jne	 $LN90@DamageShip
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  0020f	8b 83 04 03 00
	00		 mov	 eax, DWORD PTR [ebx+772]
$LN273@DamageShip:
  00215	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00217	89 45 f0	 mov	 DWORD PTR tv1418[ebp], eax
  0021a	8b 91 98 01 00
	00		 mov	 edx, DWORD PTR [ecx+408]
  00220	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  00226	0f 85 f3 04 00
	00		 jne	 $LN92@DamageShip
  0022c	8b 87 04 03 00
	00		 mov	 eax, DWORD PTR [edi+772]
$LN91@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2781 :                         if (owner && owner->GetIFF() != ship->GetIFF()) {

  00232	39 45 f0	 cmp	 DWORD PTR tv1418[ebp], eax
  00235	0f 84 ca 00 00
	00		 je	 $LN36@DamageShip
  0023b	8b 07		 mov	 eax, DWORD PTR [edi]
  0023d	8b 80 98 01 00
	00		 mov	 eax, DWORD PTR [eax+408]
  00243	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  00248	0f 85 da 04 00
	00		 jne	 $LN94@DamageShip
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  0024e	8b 87 04 03 00
	00		 mov	 eax, DWORD PTR [edi+772]
$LN93@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2782 :                             if (ship->GetIFF() > 0 || owner->GetIFF() > 1) {

  00254	85 c0		 test	 eax, eax
  00256	7f 22		 jg	 SHORT $LN29@DamageShip
  00258	8b 03		 mov	 eax, DWORD PTR [ebx]
  0025a	8b 80 98 01 00
	00		 mov	 eax, DWORD PTR [eax+408]
  00260	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  00265	0f 85 c6 04 00
	00		 jne	 $LN96@DamageShip
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  0026b	8b 83 04 03 00
	00		 mov	 eax, DWORD PTR [ebx+772]
$LN95@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2782 :                             if (ship->GetIFF() > 0 || owner->GetIFF() > 1) {

  00271	83 f8 01	 cmp	 eax, 1
  00274	0f 8e 8b 00 00
	00		 jle	 $LN36@DamageShip
$LN29@DamageShip:

; 2783 :                                 killer->AddPoints(ship->Value());

  0027a	8b cf		 mov	 ecx, edi
  0027c	e8 00 00 00 00	 call	 ?Value@Ship@@QBEHXZ	; Ship::Value
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 155  :     void           AddPoints(int p)        { points += p;          }

  00281	8b 4d f4	 mov	 ecx, DWORD PTR _killer$1$[ebp]
  00284	01 41 58	 add	 DWORD PTR [ecx+88], eax
; File d:\programming\starshatter\trunk\stars45\ship.h

; 420  :     Element*                GetElement()      const { return element; }

  00287	8b 83 e8 03 00
	00		 mov	 eax, DWORD PTR [ebx+1000]
  0028d	89 45 f4	 mov	 DWORD PTR _elem$1$[ebp], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2786 :                                 if (elem) {

  00290	85 c0		 test	 eax, eax
  00292	74 71		 je	 SHORT $LN36@DamageShip

; 2787 :                                     if (owner->GetElementIndex() > 1) {

  00294	8b cb		 mov	 ecx, ebx
  00296	e8 00 00 00 00	 call	 ?GetElementIndex@Ship@@QBEHXZ ; Ship::GetElementIndex
  0029b	83 f8 01	 cmp	 eax, 1
  0029e	7e 2f		 jle	 SHORT $LN33@DamageShip

; 2788 :                                         Ship* s = elem->GetShip(1);

  002a0	8b 4d f4	 mov	 ecx, DWORD PTR _elem$1$[ebp]
  002a3	6a 01		 push	 1
  002a5	e8 00 00 00 00	 call	 ?GetShip@Element@@QAEPAVShip@@H@Z ; Element::GetShip

; 2789 : 
; 2790 :                                         if (s) {

  002aa	85 c0		 test	 eax, eax
  002ac	74 21		 je	 SHORT $LN33@DamageShip
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  002ae	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2791 :                                             ShipStats* cmdr_stats = ShipStats::Find(s->Name());

  002b1	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find
  002b6	89 45 f0	 mov	 DWORD PTR _cmdr_stats$1$[ebp], eax

; 2792 :                                             if (cmdr_stats) {

  002b9	85 c0		 test	 eax, eax
  002bb	74 12		 je	 SHORT $LN33@DamageShip

; 2793 :                                                 cmdr_stats->AddCommandPoints(ship->Value()/2);

  002bd	8b cf		 mov	 ecx, edi
  002bf	e8 00 00 00 00	 call	 ?Value@Ship@@QBEHXZ	; Ship::Value
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 156  :     void           AddCommandPoints(int p) { cmd_points += p;      }

  002c4	8b 4d f0	 mov	 ecx, DWORD PTR _cmdr_stats$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2793 :                                                 cmdr_stats->AddCommandPoints(ship->Value()/2);

  002c7	99		 cdq
  002c8	2b c2		 sub	 eax, edx
  002ca	d1 f8		 sar	 eax, 1
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 156  :     void           AddCommandPoints(int p) { cmd_points += p;      }

  002cc	01 41 5c	 add	 DWORD PTR [ecx+92], eax
$LN33@DamageShip:
; File d:\programming\starshatter\trunk\stars45\element.h

; 137  :     Element*          GetCommander()             const { return commander;  }

  002cf	8b 45 f4	 mov	 eax, DWORD PTR _elem$1$[ebp]
  002d2	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2799 :                                     if (cmdr) {

  002d5	85 c9		 test	 ecx, ecx
  002d7	74 2c		 je	 SHORT $LN36@DamageShip

; 2800 :                                         Ship* s = cmdr->GetShip(1);

  002d9	6a 01		 push	 1
  002db	e8 00 00 00 00	 call	 ?GetShip@Element@@QAEPAVShip@@H@Z ; Element::GetShip

; 2801 : 
; 2802 :                                         if (s) {

  002e0	85 c0		 test	 eax, eax
  002e2	74 21		 je	 SHORT $LN36@DamageShip
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  002e4	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2803 :                                             ShipStats* cmdr_stats = ShipStats::Find(s->Name());

  002e7	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find
  002ec	89 45 f4	 mov	 DWORD PTR _cmdr_stats$1$[ebp], eax

; 2804 :                                             if (cmdr_stats) {

  002ef	85 c0		 test	 eax, eax
  002f1	74 12		 je	 SHORT $LN36@DamageShip

; 2805 :                                                 cmdr_stats->AddCommandPoints(ship->Value()/2);

  002f3	8b cf		 mov	 ecx, edi
  002f5	e8 00 00 00 00	 call	 ?Value@Ship@@QBEHXZ	; Ship::Value
  002fa	99		 cdq
  002fb	2b c2		 sub	 eax, edx
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 156  :     void           AddCommandPoints(int p) { cmd_points += p;      }

  002fd	8b 55 f4	 mov	 edx, DWORD PTR _cmdr_stats$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2805 :                                                 cmdr_stats->AddCommandPoints(ship->Value()/2);

  00300	d1 f8		 sar	 eax, 1
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 156  :     void           AddCommandPoints(int p) { cmd_points += p;      }

  00302	01 42 5c	 add	 DWORD PTR [edx+92], eax
$LN36@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2813 :                         ShipStats* killee = ShipStats::Find(ship->Name());

  00305	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00308	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find

; 2814 :                         if (killee)

  0030d	85 c0		 test	 eax, eax
  0030f	74 0d		 je	 SHORT $LN37@DamageShip

; 2815 :                         killee->AddEvent(SimEvent::DESTROYED, owner_name);

  00311	51		 push	 ecx
  00312	ff 75 fc	 push	 DWORD PTR _owner_name$1$[ebp]
  00315	8b c8		 mov	 ecx, eax
  00317	6a 07		 push	 7
  00319	e8 00 00 00 00	 call	 ?AddEvent@ShipStats@@QAEPAVSimEvent@@HPBD0@Z ; ShipStats::AddEvent
$LN37@DamageShip:

; 2816 : 
; 2817 :                         ship->DeathSpiral();

  0031e	8b cf		 mov	 ecx, edi
  00320	e8 00 00 00 00	 call	 ?DeathSpiral@Ship@@QAEXXZ ; Ship::DeathSpiral
$LN21@DamageShip:
  00325	8b 06		 mov	 eax, DWORD PTR [esi]
  00327	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [eax+216]
  0032d	3d 00 00 00 00	 cmp	 eax, OFFSET ?IsBeam@Shot@@UBE_NXZ ; Shot::IsBeam
  00332	0f 85 02 04 00
	00		 jne	 $LN98@DamageShip
; File d:\programming\starshatter\trunk\stars45\shot.h

; 87   :     virtual bool      IsBeam()       const { return beam;       }

  00338	8a 86 0d 02 00
	00		 mov	 al, BYTE PTR [esi+525]
$LN97@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2822 :                 if (!shot->IsBeam()) {

  0033e	84 c0		 test	 al, al
  00340	74 3c		 je	 SHORT $LN266@DamageShip

; 2828 :                         stats->AddMissileHit();
; 2829 :                     }
; 2830 : 
; 2831 :                     NetUtil::SendWepDestroy(shot);
; 2832 : 
; 2833 :                     if (shot->IsDrone())
; 2834 :                     drones.remove((Drone*) shot);
; 2835 : 
; 2836 :                     shot_iter.removeItem();
; 2837 :                     delete shot;
; 2838 :                     shot = 0;
; 2839 :                 }
; 2840 :                 else if (!shot->HitTarget()) {

  00342	80 be 0f 02 00
	00 00		 cmp	 BYTE PTR [esi+527], 0
  00349	0f 85 44 fd ff
	ff		 jne	 $LL4@DamageShip
; File d:\programming\starshatter\trunk\stars45\shot.h

; 92   :     void              SetHitTarget(bool h) { hit_target = h;    }

  0034f	c6 86 0f 02 00
	00 01		 mov	 BYTE PTR [esi+527], 1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2843 :                     if (owner) {

  00356	85 db		 test	 ebx, ebx
  00358	0f 84 35 fd ff
	ff		 je	 $LL4@DamageShip

; 2844 :                         ShipStats* stats = ShipStats::Find(owner_name);

  0035e	8b 4d fc	 mov	 ecx, DWORD PTR _owner_name$1$[ebp]
  00361	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find

; 2845 :                         if (shot->Design()->primary)

  00366	8b 8e 20 02 00
	00		 mov	 ecx, DWORD PTR [esi+544]
  0036c	80 79 1e 00	 cmp	 BYTE PTR [ecx+30], 0
  00370	0f 84 1d fd ff
	ff		 je	 $LL4@DamageShip
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 152  :     void           AddGunHit()             { gun_hits++;           }

  00376	ff 40 4c	 inc	 DWORD PTR [eax+76]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2739 :         while (shot && ++ship_iter) {

  00379	e9 15 fd ff ff	 jmp	 $LL4@DamageShip
$LN266@DamageShip:

; 2823 :                     if (owner) {

  0037e	85 db		 test	 ebx, ebx
  00380	0f 84 5a 01 00
	00		 je	 $LN56@DamageShip

; 2824 :                         ShipStats* stats = ShipStats::Find(owner_name);

  00386	8b 4d fc	 mov	 ecx, DWORD PTR _owner_name$1$[ebp]
  00389	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find

; 2825 :                         if (shot->Design()->primary)

  0038e	8b 8e 20 02 00
	00		 mov	 ecx, DWORD PTR [esi+544]
  00394	8b f8		 mov	 edi, eax
  00396	80 79 1e 00	 cmp	 BYTE PTR [ecx+30], 0
  0039a	74 08		 je	 SHORT $LN41@DamageShip
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 152  :     void           AddGunHit()             { gun_hits++;           }

  0039c	ff 47 4c	 inc	 DWORD PTR [edi+76]
  0039f	e9 3c 01 00 00	 jmp	 $LN56@DamageShip
$LN41@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2827 :                         else if (shot->Damage() > 0)

  003a4	8b ce		 mov	 ecx, esi
  003a6	e8 00 00 00 00	 call	 ?Damage@Shot@@QBENXZ	; Shot::Damage
  003ab	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  003b3	0f 86 27 01 00
	00		 jbe	 $LN56@DamageShip
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 154  :     void           AddMissileHit()         { missile_hits++;       }

  003b9	ff 47 54	 inc	 DWORD PTR [edi+84]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2853 :         if (shot && shot->Design()->target_type & Ship::DRONE) {

  003bc	e9 1f 01 00 00	 jmp	 $LN56@DamageShip
$LN5@DamageShip:
  003c1	8b 86 20 02 00
	00		 mov	 eax, DWORD PTR [esi+544]
  003c7	f6 40 34 01	 test	 BYTE PTR [eax+52], 1
  003cb	0f 84 47 01 00
	00		 je	 $LN7@DamageShip

; 2854 :             ListIter<Drone> drone_iter = drones;

  003d1	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  003d4	05 88 00 00 00	 add	 eax, 136		; 00000088H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  003d9	c7 45 c4 ff ff
	ff ff		 mov	 DWORD PTR _drone_iter$6[ebp+4], -1
  003e0	89 45 c0	 mov	 DWORD PTR _drone_iter$6[ebp], eax
$LL6@DamageShip:

; 108  :    int operator++() { return next() != 0; }

  003e3	8d 4d c0	 lea	 ecx, DWORD PTR _drone_iter$6[ebp]
  003e6	e8 00 00 00 00	 call	 ?next@?$ListIter@VDrone@@@@QAEPAVDrone@@XZ ; ListIter<Drone>::next
  003eb	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2855 :             while (shot && ++drone_iter) {

  003ed	0f 84 25 01 00
	00		 je	 $LN7@DamageShip

; 2856 :                 Drone* d = drone_iter.value();

  003f3	8d 4d c0	 lea	 ecx, DWORD PTR _drone_iter$6[ebp]
  003f6	e8 00 00 00 00	 call	 ?value@?$ListIter@VDrone@@@@QAEPAVDrone@@XZ ; ListIter<Drone>::value
  003fb	8b f8		 mov	 edi, eax

; 2857 : 
; 2858 :                 if (d == shot || d->Owner() == owner)

  003fd	3b fe		 cmp	 edi, esi
  003ff	74 e2		 je	 SHORT $LL6@DamageShip
  00401	39 9f f0 01 00
	00		 cmp	 DWORD PTR [edi+496], ebx
  00407	74 da		 je	 SHORT $LL6@DamageShip

; 2859 :                 continue;
; 2860 : 
; 2861 :                 int hit = d->HitBy(shot, impact);

  00409	8d 45 88	 lea	 eax, DWORD PTR _impact$[ebp]
  0040c	8b cf		 mov	 ecx, edi
  0040e	50		 push	 eax
  0040f	8b 07		 mov	 eax, DWORD PTR [edi]
  00411	56		 push	 esi
  00412	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]

; 2862 :                 if (hit) {

  00418	85 c0		 test	 eax, eax
  0041a	74 c7		 je	 SHORT $LL6@DamageShip

; 2863 :                     int destroyed = (d->Integrity() < 1.0f);

  0041c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00424	33 c0		 xor	 eax, eax
  00426	0f 2f 87 b8 01
	00 00		 comiss	 xmm0, DWORD PTR [edi+440]
  0042d	0f 97 c0	 seta	 al

; 2864 : 
; 2865 :                     // then mark the drone for deletion:
; 2866 :                     if (destroyed) {

  00430	85 c0		 test	 eax, eax
  00432	74 6b		 je	 SHORT $LN52@DamageShip

; 2867 :                         NetUtil::SendWepDestroy(d);

  00434	8b cf		 mov	 ecx, edi
  00436	e8 00 00 00 00	 call	 ?SendWepDestroy@NetUtil@@SAXPAVShot@@@Z ; NetUtil::SendWepDestroy
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  0043b	8d 87 c0 00 00
	00		 lea	 eax, DWORD PTR [edi+192]
  00441	50		 push	 eax
  00442	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00448	50		 push	 eax
  00449	8d 8f a8 00 00
	00		 lea	 ecx, DWORD PTR [edi+168]
  0044f	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2868 :                         sim->CreateExplosion(d->Location(), d->Velocity(), 21, 1.0f, 1.0f, this);

  00454	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00457	0f 10 47 48	 movups	 xmm0, XMMWORD PTR [edi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2868 :                         sim->CreateExplosion(d->Location(), d->Velocity(), 21, 1.0f, 1.0f, this);

  0045b	51		 push	 ecx
  0045c	6a 00		 push	 0
  0045e	50		 push	 eax
  0045f	83 ec 08	 sub	 esp, 8
  00462	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00468	0f 11 45 a0	 movups	 XMMWORD PTR $T4[ebp], xmm0
  0046c	f2 0f 10 47 58	 movsd	 xmm0, QWORD PTR [edi+88]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2868 :                         sim->CreateExplosion(d->Location(), d->Velocity(), 21, 1.0f, 1.0f, this);

  00471	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00479	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00480	6a 15		 push	 21			; 00000015H
  00482	51		 push	 ecx
  00483	8d 4d a0	 lea	 ecx, DWORD PTR $T4[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00486	f2 0f 11 45 b0	 movsd	 QWORD PTR $T4[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2868 :                         sim->CreateExplosion(d->Location(), d->Velocity(), 21, 1.0f, 1.0f, this);

  0048b	51		 push	 ecx
  0048c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0048f	e8 00 00 00 00	 call	 ?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z ; Sim::CreateExplosion
  00494	0f 57 c0	 xorps	 xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\drone.h

; 83   :     void        SetLife(int seconds) { life = seconds; }

  00497	f2 0f 11 87 a8
	01 00 00	 movsd	 QWORD PTR [edi+424], xmm0
$LN52@DamageShip:
  0049f	8b 06		 mov	 eax, DWORD PTR [esi]
  004a1	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [eax+216]
  004a7	3d 00 00 00 00	 cmp	 eax, OFFSET ?IsBeam@Shot@@UBE_NXZ ; Shot::IsBeam
  004ac	0f 85 91 02 00
	00		 jne	 $LN102@DamageShip
; File d:\programming\starshatter\trunk\stars45\shot.h

; 87   :     virtual bool      IsBeam()       const { return beam;       }

  004b2	8a 86 0d 02 00
	00		 mov	 al, BYTE PTR [esi+525]
$LN101@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2873 :                     if (!shot->IsBeam()) {

  004b8	84 c0		 test	 al, al
  004ba	0f 85 23 ff ff
	ff		 jne	 $LL6@DamageShip

; 2874 :                         if (owner) {

  004c0	85 db		 test	 ebx, ebx
  004c2	74 1c		 je	 SHORT $LN56@DamageShip

; 2875 :                             ShipStats* stats = ShipStats::Find(owner_name);

  004c4	8b 4d fc	 mov	 ecx, DWORD PTR _owner_name$1$[ebp]
  004c7	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find

; 2876 :                             if (shot->Design()->primary)

  004cc	8b 8e 20 02 00
	00		 mov	 ecx, DWORD PTR [esi+544]
  004d2	80 79 1e 00	 cmp	 BYTE PTR [ecx+30], 0
  004d6	74 05		 je	 SHORT $LN55@DamageShip
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 152  :     void           AddGunHit()             { gun_hits++;           }

  004d8	ff 40 4c	 inc	 DWORD PTR [eax+76]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2878 :                             else

  004db	eb 03		 jmp	 SHORT $LN56@DamageShip
$LN55@DamageShip:
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 154  :     void           AddMissileHit()         { missile_hits++;       }

  004dd	ff 40 54	 inc	 DWORD PTR [eax+84]
$LN56@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2882 :                         NetUtil::SendWepDestroy(shot);

  004e0	8b ce		 mov	 ecx, esi
  004e2	e8 00 00 00 00	 call	 ?SendWepDestroy@NetUtil@@SAXPAVShot@@@Z ; NetUtil::SendWepDestroy

; 2883 : 
; 2884 :                         if (shot->IsDrone())

  004e7	8b 06		 mov	 eax, DWORD PTR [esi]
  004e9	8b ce		 mov	 ecx, esi
  004eb	8b 80 c4 00 00
	00		 mov	 eax, DWORD PTR [eax+196]
  004f1	ff d0		 call	 eax
  004f3	84 c0		 test	 al, al
  004f5	74 0f		 je	 SHORT $LN57@DamageShip

; 2885 :                         drones.remove((Drone*) shot);

  004f7	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  004fa	56		 push	 esi
  004fb	8d 89 88 00 00
	00		 lea	 ecx, DWORD PTR [ecx+136]
  00501	e8 00 00 00 00	 call	 ?remove@?$List@VDrone@@@@QAEPAVDrone@@PBV2@@Z ; List<Drone>::remove
$LN57@DamageShip:

; 2886 :                         
; 2887 :                         shot_iter.removeItem();

  00506	8d 4d e8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]
  00509	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::removeItem

; 2888 :                         delete shot;

  0050e	8b 06		 mov	 eax, DWORD PTR [esi]
  00510	8b ce		 mov	 ecx, esi
  00512	6a 01		 push	 1
  00514	ff 10		 call	 DWORD PTR [eax]

; 2889 :                         shot = 0;

  00516	33 f6		 xor	 esi, esi
$LN7@DamageShip:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00518	8b 45 d8	 mov	 eax, DWORD PTR tv1389[ebp]
  0051b	89 45 dc	 mov	 DWORD PTR _debris_iter$8[ebp], eax
  0051e	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _debris_iter$8[ebp+4], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2897 :         while (shot && ++debris_iter) {

  00525	85 f6		 test	 esi, esi
  00527	0f 84 32 01 00
	00		 je	 $LN9@DamageShip
  0052d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4049000000000000
$LL8@DamageShip:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00535	8d 4d dc	 lea	 ecx, DWORD PTR _debris_iter$8[ebp]
  00538	e8 00 00 00 00	 call	 ?next@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::next
  0053d	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2897 :         while (shot && ++debris_iter) {

  0053f	0f 84 1a 01 00
	00		 je	 $LN9@DamageShip

; 2898 :             Debris* d = debris_iter.value();

  00545	8d 4d dc	 lea	 ecx, DWORD PTR _debris_iter$8[ebp]
  00548	e8 00 00 00 00	 call	 ?value@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::value
  0054d	8b f8		 mov	 edi, eax
  0054f	f3 0f 10 87 b0
	01 00 00	 movss	 xmm0, DWORD PTR [edi+432]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 127  :     double            Radius()    const { return radius;     }

  00557	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2900 :             if (d->Radius() < 50)

  0055a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0055e	77 d5		 ja	 SHORT $LL8@DamageShip

; 2901 :             continue;
; 2902 : 
; 2903 :             int hit = d->HitBy(shot, impact);

  00560	8d 45 88	 lea	 eax, DWORD PTR _impact$[ebp]
  00563	8b cf		 mov	 ecx, edi
  00565	50		 push	 eax
  00566	8b 07		 mov	 eax, DWORD PTR [edi]
  00568	56		 push	 esi
  00569	ff 90 b8 00 00
	00		 call	 DWORD PTR [eax+184]

; 2904 :             if (hit) {

  0056f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4049000000000000
  00577	85 c0		 test	 eax, eax
  00579	74 ba		 je	 SHORT $LL8@DamageShip

; 2905 :                 int destroyed = (d->Integrity() < 1.0f);

  0057b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00583	33 c0		 xor	 eax, eax
  00585	0f 2f 87 b8 01
	00 00		 comiss	 xmm0, DWORD PTR [edi+440]
  0058c	0f 97 c0	 seta	 al

; 2906 : 
; 2907 :                 // then delete the debris:
; 2908 :                 if (destroyed) {

  0058f	85 c0		 test	 eax, eax
  00591	74 6b		 je	 SHORT $LN271@DamageShip
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  00593	8d 87 c0 00 00
	00		 lea	 eax, DWORD PTR [edi+192]
  00599	50		 push	 eax
  0059a	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  005a0	50		 push	 eax
  005a1	8d 8f a8 00 00
	00		 lea	 ecx, DWORD PTR [edi+168]
  005a7	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2909 :                     sim->CreateExplosion(d->Location(), d->Velocity(), Explosion::LARGE_EXPLOSION, 1.0f, 1.0f, this);

  005ac	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  005af	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  005b5	0f 10 47 48	 movups	 xmm0, XMMWORD PTR [edi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2909 :                     sim->CreateExplosion(d->Location(), d->Velocity(), Explosion::LARGE_EXPLOSION, 1.0f, 1.0f, this);

  005b9	51		 push	 ecx
  005ba	6a 00		 push	 0
  005bc	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  005bf	53		 push	 ebx
  005c0	83 ec 08	 sub	 esp, 8
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  005c3	0f 11 45 a0	 movups	 XMMWORD PTR $T3[ebp], xmm0
  005c7	f2 0f 10 47 58	 movsd	 xmm0, QWORD PTR [edi+88]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2909 :                     sim->CreateExplosion(d->Location(), d->Velocity(), Explosion::LARGE_EXPLOSION, 1.0f, 1.0f, this);

  005cc	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  005d4	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  005db	6a 0b		 push	 11			; 0000000bH
  005dd	50		 push	 eax
  005de	8d 45 a0	 lea	 eax, DWORD PTR $T3[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  005e1	f2 0f 11 45 b0	 movsd	 QWORD PTR $T3[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2909 :                     sim->CreateExplosion(d->Location(), d->Velocity(), Explosion::LARGE_EXPLOSION, 1.0f, 1.0f, this);

  005e6	50		 push	 eax
  005e7	e8 00 00 00 00	 call	 ?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z ; Sim::CreateExplosion

; 2910 :                     debris_iter.removeItem();

  005ec	8d 4d dc	 lea	 ecx, DWORD PTR _debris_iter$8[ebp]
  005ef	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::removeItem

; 2911 :                     delete d;

  005f4	8b 07		 mov	 eax, DWORD PTR [edi]
  005f6	8b cf		 mov	 ecx, edi
  005f8	6a 01		 push	 1
  005fa	ff 10		 call	 DWORD PTR [eax]
  005fc	eb 03		 jmp	 SHORT $LN73@DamageShip
$LN271@DamageShip:
  005fe	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN73@DamageShip:
  00601	8b 06		 mov	 eax, DWORD PTR [esi]
  00603	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [eax+216]
  00609	3d 00 00 00 00	 cmp	 eax, OFFSET ?IsBeam@Shot@@UBE_NXZ ; Shot::IsBeam
  0060e	0f 85 38 01 00
	00		 jne	 $LN106@DamageShip
; File d:\programming\starshatter\trunk\stars45\shot.h

; 87   :     virtual bool      IsBeam()       const { return beam;       }

  00614	8a 86 0d 02 00
	00		 mov	 al, BYTE PTR [esi+525]
$LN105@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2915 :                 if (!shot->IsBeam()) {

  0061a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4049000000000000
  00622	84 c0		 test	 al, al
  00624	0f 85 0b ff ff
	ff		 jne	 $LL8@DamageShip

; 2916 :                     NetUtil::SendWepDestroy(shot);

  0062a	8b ce		 mov	 ecx, esi
  0062c	e8 00 00 00 00	 call	 ?SendWepDestroy@NetUtil@@SAXPAVShot@@@Z ; NetUtil::SendWepDestroy

; 2917 :                     if (shot->IsDrone())

  00631	8b 06		 mov	 eax, DWORD PTR [esi]
  00633	8b ce		 mov	 ecx, esi
  00635	8b 80 c4 00 00
	00		 mov	 eax, DWORD PTR [eax+196]
  0063b	ff d0		 call	 eax
  0063d	84 c0		 test	 al, al
  0063f	74 0c		 je	 SHORT $LN62@DamageShip

; 2918 :                     drones.remove((Drone*) shot);

  00641	56		 push	 esi
  00642	8d 8b 88 00 00
	00		 lea	 ecx, DWORD PTR [ebx+136]
  00648	e8 00 00 00 00	 call	 ?remove@?$List@VDrone@@@@QAEPAVDrone@@PBV2@@Z ; List<Drone>::remove
$LN62@DamageShip:

; 2919 :                     
; 2920 :                     shot_iter.removeItem();

  0064d	8d 4d e8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]
  00650	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::removeItem

; 2921 :                     delete shot;

  00655	8b 06		 mov	 eax, DWORD PTR [esi]
  00657	8b ce		 mov	 ecx, esi
  00659	6a 01		 push	 1
  0065b	ff 10		 call	 DWORD PTR [eax]

; 2922 :                     shot = 0;

  0065d	33 f6		 xor	 esi, esi
$LN9@DamageShip:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0065f	8b 45 d4	 mov	 eax, DWORD PTR tv1388[ebp]
  00662	89 45 b8	 mov	 DWORD PTR _a_iter$5[ebp], eax
  00665	c7 45 bc ff ff
	ff ff		 mov	 DWORD PTR _a_iter$5[ebp+4], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2929 :         while (shot && ++a_iter) {

  0066c	85 f6		 test	 esi, esi
  0066e	74 75		 je	 SHORT $LN11@DamageShip
$LL10@DamageShip:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00670	8d 4d b8	 lea	 ecx, DWORD PTR _a_iter$5[ebp]
  00673	e8 00 00 00 00	 call	 ?next@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::next
  00678	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2929 :         while (shot && ++a_iter) {

  0067a	74 69		 je	 SHORT $LN11@DamageShip

; 2930 :             Asteroid* a = a_iter.value();

  0067c	8d 4d b8	 lea	 ecx, DWORD PTR _a_iter$5[ebp]
  0067f	e8 00 00 00 00	 call	 ?value@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::value

; 2931 : 
; 2932 :             int hit = a->HitBy(shot, impact);

  00684	8d 4d 88	 lea	 ecx, DWORD PTR _impact$[ebp]
  00687	51		 push	 ecx
  00688	56		 push	 esi
  00689	8b 08		 mov	 ecx, DWORD PTR [eax]
  0068b	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  00691	8b c8		 mov	 ecx, eax
  00693	ff d2		 call	 edx

; 2933 :             if (hit) {

  00695	85 c0		 test	 eax, eax
  00697	74 d7		 je	 SHORT $LL10@DamageShip
  00699	8b 06		 mov	 eax, DWORD PTR [esi]
  0069b	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [eax+216]
  006a1	3d 00 00 00 00	 cmp	 eax, OFFSET ?IsBeam@Shot@@UBE_NXZ ; Shot::IsBeam
  006a6	0f 85 a9 00 00
	00		 jne	 $LN110@DamageShip
; File d:\programming\starshatter\trunk\stars45\shot.h

; 87   :     virtual bool      IsBeam()       const { return beam;       }

  006ac	8a 86 0d 02 00
	00		 mov	 al, BYTE PTR [esi+525]
$LN109@DamageShip:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2934 :                 if (!shot->IsBeam()) {

  006b2	84 c0		 test	 al, al
  006b4	75 ba		 jne	 SHORT $LL10@DamageShip

; 2935 :                     if (shot->IsDrone())

  006b6	8b 06		 mov	 eax, DWORD PTR [esi]
  006b8	8b ce		 mov	 ecx, esi
  006ba	8b 80 c4 00 00
	00		 mov	 eax, DWORD PTR [eax+196]
  006c0	ff d0		 call	 eax
  006c2	84 c0		 test	 al, al
  006c4	74 0f		 je	 SHORT $LN65@DamageShip

; 2936 :                     drones.remove((Drone*) shot);

  006c6	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  006c9	56		 push	 esi
  006ca	8d 89 88 00 00
	00		 lea	 ecx, DWORD PTR [ecx+136]
  006d0	e8 00 00 00 00	 call	 ?remove@?$List@VDrone@@@@QAEPAVDrone@@PBV2@@Z ; List<Drone>::remove
$LN65@DamageShip:

; 2937 :                     
; 2938 :                     shot_iter.removeItem();

  006d5	8d 4d e8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]
  006d8	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::removeItem

; 2939 :                     delete shot;

  006dd	8b 06		 mov	 eax, DWORD PTR [esi]
  006df	8b ce		 mov	 ecx, esi
  006e1	6a 01		 push	 1
  006e3	ff 10		 call	 DWORD PTR [eax]
$LN11@DamageShip:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  006e5	8d 4d e8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]
  006e8	e8 00 00 00 00	 call	 ?next@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::next
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2727 :     while (++shot_iter) {

  006ed	8b 7d d0	 mov	 edi, DWORD PTR tv1403[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  006f0	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2727 :     while (++shot_iter) {

  006f2	0f 85 6e f9 ff
	ff		 jne	 $LL2@DamageShip
$LN13@DamageShip:

; 2940 :                     shot = 0;
; 2941 :                 }
; 2942 :             }
; 2943 :         }
; 2944 :     }
; 2945 : }

  006f8	5f		 pop	 edi
  006f9	5e		 pop	 esi
  006fa	5b		 pop	 ebx
  006fb	8b e5		 mov	 esp, ebp
  006fd	5d		 pop	 ebp
  006fe	c3		 ret	 0
$LN276@DamageShip:
  006ff	8b ce		 mov	 ecx, esi

; 2758 :                         NetUtil::SendObjKill(ship, owner, shot->IsMissile() ? NetObjKill::KILL_SECONDARY : NetObjKill::KILL_PRIMARY);

  00701	ff d0		 call	 eax
  00703	e9 41 fa ff ff	 jmp	 $LN81@DamageShip
$LN88@DamageShip:
  00708	8b ce		 mov	 ecx, esi

; 2775 :                             if (shot->IsMissile())

  0070a	ff d2		 call	 edx
  0070c	8a c8		 mov	 cl, al
  0070e	8b 45 f4	 mov	 eax, DWORD PTR _killer$1$[ebp]
  00711	e9 c8 fa ff ff	 jmp	 $LN87@DamageShip
$LN90@DamageShip:
  00716	8b cb		 mov	 ecx, ebx

; 2781 :                         if (owner && owner->GetIFF() != ship->GetIFF()) {

  00718	ff d0		 call	 eax
  0071a	e9 f6 fa ff ff	 jmp	 $LN273@DamageShip
$LN92@DamageShip:
  0071f	8b cf		 mov	 ecx, edi
  00721	ff d2		 call	 edx
  00723	e9 0a fb ff ff	 jmp	 $LN91@DamageShip
$LN94@DamageShip:
  00728	8b cf		 mov	 ecx, edi

; 2782 :                             if (ship->GetIFF() > 0 || owner->GetIFF() > 1) {

  0072a	ff d0		 call	 eax
  0072c	e9 23 fb ff ff	 jmp	 $LN93@DamageShip
$LN96@DamageShip:
  00731	8b cb		 mov	 ecx, ebx
  00733	ff d0		 call	 eax
  00735	e9 37 fb ff ff	 jmp	 $LN95@DamageShip
$LN98@DamageShip:
  0073a	8b ce		 mov	 ecx, esi

; 2822 :                 if (!shot->IsBeam()) {

  0073c	ff d0		 call	 eax
  0073e	e9 fb fb ff ff	 jmp	 $LN97@DamageShip
$LN102@DamageShip:
  00743	8b ce		 mov	 ecx, esi

; 2873 :                     if (!shot->IsBeam()) {

  00745	ff d0		 call	 eax
  00747	e9 6c fd ff ff	 jmp	 $LN101@DamageShip
$LN106@DamageShip:
  0074c	8b ce		 mov	 ecx, esi

; 2915 :                 if (!shot->IsBeam()) {

  0074e	ff d0		 call	 eax
  00750	e9 c5 fe ff ff	 jmp	 $LN105@DamageShip
$LN110@DamageShip:
  00755	8b ce		 mov	 ecx, esi

; 2934 :                 if (!shot->IsBeam()) {

  00757	ff d0		 call	 eax
  00759	e9 54 ff ff ff	 jmp	 $LN109@DamageShip
?DamageShips@SimRegion@@IAEXXZ ENDP			; SimRegion::DamageShips
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simevent.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -272						; size = 8
$T3 = -264						; size = 8
$T4 = -256						; size = 24
$T5 = -256						; size = 24
$T6 = -228						; size = 12
$T7 = -216						; size = 12
$T8 = -204						; size = 12
$T9 = -192						; size = 12
$T10 = -180						; size = 12
$T11 = -168						; size = 24
$T12 = -168						; size = 24
$T13 = -168						; size = 24
$T14 = -168						; size = 24
tv1999 = -140						; size = 4
$T15 = -136						; size = 24
$T16 = -136						; size = 24
$T17 = -136						; size = 24
$T18 = -136						; size = 24
$T19 = -136						; size = 24
$T20 = -136						; size = 24
_a_iter$21 = -112					; size = 8
_targ_iter$22 = -104					; size = 8
_debris_iter$23 = -96					; size = 8
_hull_damage$1$ = -88					; size = 8
_dvs$1$ = -88						; size = 8
_old_integrity$1$ = -80					; size = 8
_iz$1$ = -76						; size = 4
_iz$1$ = -76						; size = 4
_ix$1$ = -76						; size = 4
_ix$1$ = -68						; size = 4
_iz$1$ = -68						; size = 4
_iy$1$ = -64						; size = 4
_iy$1$ = -64						; size = 4
_s_index$1$ = -60					; size = 4
_kill_list$ = -56					; size = 12
_killed$ = -44						; size = 8
_ship_iter$ = -44					; size = 8
_this$1$ = -36						; size = 4
_dvt$1$ = -32						; size = 8
_iy$1$ = -28						; size = 4
_iy$1$ = -28						; size = 4
_iy$1$ = -28						; size = 4
tv1988 = -28						; size = 4
_iz$1$ = -24						; size = 4
_t_index$1$ = -24					; size = 4
_ix$1$ = -20						; size = 4
_d$1$ = -20						; size = 4
tv2008 = -20						; size = 4
tv2002 = -20						; size = 4
_ix$1$ = -16						; size = 4
_ix$1$ = -16						; size = 4
_iz$1$ = -16						; size = 4
_a$1$ = -16						; size = 4
tv1989 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CollideShips@SimRegion@@IAEXXZ PROC			; SimRegion::CollideShips
; _this$ = ecx

; 2951 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CollideShips@SimRegion@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b c1		 mov	 eax, ecx
  0002d	89 45 dc	 mov	 DWORD PTR _this$1$[ebp], eax

; 2952 :     if (ships.size() < 2 && debris.size() < 1)

  00030	83 78 4c 02	 cmp	 DWORD PTR [eax+76], 2
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  00034	8d 78 4c	 lea	 edi, DWORD PTR [eax+76]
  00037	89 bd 74 ff ff
	ff		 mov	 DWORD PTR tv1999[ebp], edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2952 :     if (ships.size() < 2 && debris.size() < 1)

  0003d	7d 0d		 jge	 SHORT $LN12@CollideShi
  0003f	83 b8 a0 00 00
	00 01		 cmp	 DWORD PTR [eax+160], 1
  00046	0f 8c 02 0b 00
	00		 jl	 $LN309@CollideShi
$LN12@CollideShi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  0004c	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _kill_list$[ebp], 0
  00053	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _kill_list$[ebp+4], 0
  0005a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _kill_list$[ebp+8], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2955 :     List<Ship> kill_list;

  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00068	8d 4d d4	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2957 :     int s_index = 0;

  0006b	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _s_index$1$[ebp], 0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00072	89 7d d4	 mov	 DWORD PTR _ship_iter$[ebp], edi
  00075	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _ship_iter$[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  0007c	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00081	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2960 :     while (++ship_iter) {

  00083	0f 84 86 0a 00
	00		 je	 $LN3@CollideShi
  00089	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@CollideShi:

; 2961 :         Ship* ship = ship_iter.value();

  00090	8d 4d d4	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
  00093	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value
  00098	8b d8		 mov	 ebx, eax
; File d:\programming\starshatter\trunk\stars45\ship.h

; 236  :     bool              InTransition()       const { return transition_type != TRANSITION_NONE;         }

  0009a	83 bb 60 04 00
	00 00		 cmp	 DWORD PTR [ebx+1120], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2965 :                 ship->MissionClock() < 10000          ||

  000a1	0f 85 58 0a 00
	00		 jne	 $LN14@CollideShi
  000a7	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000a9	8b 81 d4 00 00
	00		 mov	 eax, DWORD PTR [ecx+212]
  000af	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetFlightPhase@Ship@@UBEHXZ ; Ship::GetFlightPhase
  000b4	75 08		 jne	 SHORT $LN52@CollideShi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 182  :     virtual int       GetFlightPhase()           const { return flight_phase; }

  000b6	8b 83 10 03 00
	00		 mov	 eax, DWORD PTR [ebx+784]
  000bc	eb 04		 jmp	 SHORT $LN51@CollideShi
$LN52@CollideShi:
  000be	8b cb		 mov	 ecx, ebx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2965 :                 ship->MissionClock() < 10000          ||

  000c0	ff d0		 call	 eax
$LN51@CollideShi:
  000c2	83 f8 05	 cmp	 eax, 5
  000c5	0f 8c 34 0a 00
	00		 jl	 $LN14@CollideShi
  000cb	8b cb		 mov	 ecx, ebx
  000cd	e8 00 00 00 00	 call	 ?MissionClock@Ship@@QBEKXZ ; Ship::MissionClock
  000d2	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  000d7	0f 82 22 0a 00
	00		 jb	 $LN14@CollideShi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 184  :     bool              IsNetObserver()            const { return net_observer_mode; }

  000dd	8a 83 17 04 00
	00		 mov	 al, BYTE PTR [ebx+1047]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2965 :                 ship->MissionClock() < 10000          ||

  000e3	84 c0		 test	 al, al
  000e5	0f 85 14 0a 00
	00		 jne	 $LN14@CollideShi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000eb	8d 4d 98	 lea	 ecx, DWORD PTR _targ_iter$22[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000ee	89 7d 98	 mov	 DWORD PTR _targ_iter$22[ebp], edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2969 :         int t_index = 0;

  000f1	33 f6		 xor	 esi, esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  000f3	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _targ_iter$22[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  000fa	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  000ff	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2971 :         while (++targ_iter) {

  00101	0f 84 ee 04 00
	00		 je	 $LN5@CollideShi
$LL4@CollideShi:

; 2972 :             Ship* targ = targ_iter.value();

  00107	8d 4d 98	 lea	 ecx, DWORD PTR _targ_iter$22[ebp]
  0010a	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value

; 2973 : 
; 2974 :             if (t_index++ <= s_index) continue;

  0010f	8b ce		 mov	 ecx, esi
  00111	8b f8		 mov	 edi, eax
  00113	46		 inc	 esi
  00114	89 75 e8	 mov	 DWORD PTR _t_index$1$[ebp], esi
  00117	3b 4d c4	 cmp	 ecx, DWORD PTR _s_index$1$[ebp]
  0011a	0f 8e c5 04 00
	00		 jle	 $LN32@CollideShi

; 2975 : 
; 2976 :             if (targ == ship) continue;

  00120	3b fb		 cmp	 edi, ebx
  00122	0f 84 bd 04 00
	00		 je	 $LN32@CollideShi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 236  :     bool              InTransition()       const { return transition_type != TRANSITION_NONE;         }

  00128	83 bf 60 04 00
	00 00		 cmp	 DWORD PTR [edi+1120], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2980 :                     targ->MissionClock() < 10000          ||

  0012f	0f 85 b0 04 00
	00		 jne	 $LN32@CollideShi
  00135	8b 07		 mov	 eax, DWORD PTR [edi]
  00137	8b 80 d4 00 00
	00		 mov	 eax, DWORD PTR [eax+212]
  0013d	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetFlightPhase@Ship@@UBEHXZ ; Ship::GetFlightPhase
  00142	75 08		 jne	 SHORT $LN54@CollideShi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 182  :     virtual int       GetFlightPhase()           const { return flight_phase; }

  00144	8b 87 10 03 00
	00		 mov	 eax, DWORD PTR [edi+784]
  0014a	eb 04		 jmp	 SHORT $LN53@CollideShi
$LN54@CollideShi:
  0014c	8b cf		 mov	 ecx, edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2980 :                     targ->MissionClock() < 10000          ||

  0014e	ff d0		 call	 eax
$LN53@CollideShi:
  00150	83 f8 05	 cmp	 eax, 5
  00153	0f 8c 8c 04 00
	00		 jl	 $LN32@CollideShi
  00159	8b cf		 mov	 ecx, edi
  0015b	e8 00 00 00 00	 call	 ?MissionClock@Ship@@QBEKXZ ; Ship::MissionClock
  00160	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  00165	0f 82 7a 04 00
	00		 jb	 $LN32@CollideShi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 184  :     bool              IsNetObserver()            const { return net_observer_mode; }

  0016b	8a 87 17 04 00
	00		 mov	 al, BYTE PTR [edi+1047]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2980 :                     targ->MissionClock() < 10000          ||

  00171	84 c0		 test	 al, al
  00173	0f 85 6c 04 00
	00		 jne	 $LN32@CollideShi

; 2981 :                     targ->IsNetObserver())
; 2982 :             continue;
; 2983 : 
; 2984 :             // ignore AI fighter collisions:
; 2985 :             if (ship->IsDropship()     &&
; 2986 :                     ship != player_ship    &&
; 2987 :                     targ->IsDropship()     &&

  00179	8b cb		 mov	 ecx, ebx
  0017b	e8 00 00 00 00	 call	 ?IsDropship@Ship@@QBE_NXZ ; Ship::IsDropship
  00180	84 c0		 test	 al, al
  00182	74 1d		 je	 SHORT $LN19@CollideShi
  00184	8b 45 dc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00187	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  0018a	3b da		 cmp	 ebx, edx
  0018c	74 13		 je	 SHORT $LN19@CollideShi
  0018e	8b cf		 mov	 ecx, edi
  00190	e8 00 00 00 00	 call	 ?IsDropship@Ship@@QBE_NXZ ; Ship::IsDropship
  00195	84 c0		 test	 al, al
  00197	74 08		 je	 SHORT $LN19@CollideShi
  00199	3b fa		 cmp	 edi, edx
  0019b	0f 85 44 04 00
	00		 jne	 $LN32@CollideShi
$LN19@CollideShi:

; 2988 :                     targ != player_ship)
; 2989 :             continue;
; 2990 : 
; 2991 :             // don't collide with own runway!
; 2992 :             if (ship->IsAirborne() && ship->GetCarrier() == targ)

  001a1	8b cb		 mov	 ecx, ebx
  001a3	e8 00 00 00 00	 call	 ?IsAirborne@Ship@@QBE_NXZ ; Ship::IsAirborne
  001a8	84 c0		 test	 al, al
  001aa	74 0c		 je	 SHORT $LN20@CollideShi
  001ac	39 bb 2c 04 00
	00		 cmp	 DWORD PTR [ebx+1068], edi
  001b2	0f 84 2d 04 00
	00		 je	 $LN32@CollideShi
$LN20@CollideShi:

; 2993 :             continue;
; 2994 :             if (targ->IsAirborne() && targ->GetCarrier() == ship)

  001b8	8b cf		 mov	 ecx, edi
  001ba	e8 00 00 00 00	 call	 ?IsAirborne@Ship@@QBE_NXZ ; Ship::IsAirborne
  001bf	84 c0		 test	 al, al
  001c1	74 0c		 je	 SHORT $LN21@CollideShi
  001c3	39 9f 2c 04 00
	00		 cmp	 DWORD PTR [edi+1068], ebx
  001c9	0f 84 16 04 00
	00		 je	 $LN32@CollideShi
$LN21@CollideShi:
  001cf	8b 03		 mov	 eax, DWORD PTR [ebx]
  001d1	8b cb		 mov	 ecx, ebx
  001d3	57		 push	 edi

; 2995 :             continue;
; 2996 : 
; 2997 :             // impact:
; 2998 :             if (ship->CollidesWith(*targ)) {

  001d4	ff 50 50	 call	 DWORD PTR [eax+80]
  001d7	85 c0		 test	 eax, eax
  001d9	0f 84 06 04 00
	00		 je	 $LN32@CollideShi

; 2999 :                 Vec3 tv1 = targ->Velocity();

  001df	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T20[ebp]
  001e5	8b cf		 mov	 ecx, edi
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 ?Velocity@Physical@@QBE?AUPoint@@XZ ; Physical::Velocity

; 3000 :                 Vec3 sv1 = ship->Velocity();

  001ed	8b cb		 mov	 ecx, ebx
  001ef	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  001f3	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001f7	f3 0f 11 45 b4	 movss	 DWORD PTR _ix$1$[ebp], xmm0
  001fc	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00201	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00205	f3 0f 11 45 e4	 movss	 DWORD PTR _iy$1$[ebp], xmm0
  0020a	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3000 :                 Vec3 sv1 = ship->Velocity();

  0020f	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T19[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00215	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3000 :                 Vec3 sv1 = ship->Velocity();

  00219	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  0021a	f3 0f 11 45 f0	 movss	 DWORD PTR _iz$1$[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3000 :                 Vec3 sv1 = ship->Velocity();

  0021f	e8 00 00 00 00	 call	 ?Velocity@Physical@@QBE?AUPoint@@XZ ; Physical::Velocity

; 3002 :                 Physical::SemiElasticCollision(*ship, *targ);

  00224	57		 push	 edi
  00225	53		 push	 ebx
  00226	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  0022a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0022e	f3 0f 11 45 ec	 movss	 DWORD PTR _ix$1$[ebp], xmm0
  00233	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00238	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0023c	f3 0f 11 45 c0	 movss	 DWORD PTR _iy$1$[ebp], xmm0
  00241	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  00246	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0024a	f3 0f 11 45 bc	 movss	 DWORD PTR _iz$1$[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3002 :                 Physical::SemiElasticCollision(*ship, *targ);

  0024f	e8 00 00 00 00	 call	 ?SemiElasticCollision@Physical@@SAXAAV1@0@Z ; Physical::SemiElasticCollision
  00254	83 c4 08	 add	 esp, 8

; 3003 : 
; 3004 :                 Vec3 tv2 = targ->Velocity();

  00257	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T18[ebp]
  0025d	8b cf		 mov	 ecx, edi
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 ?Velocity@Physical@@QBE?AUPoint@@XZ ; Physical::Velocity
  00265	8b f0		 mov	 esi, eax

; 3005 :                 Vec3 sv2 = ship->Velocity();

  00267	8b cb		 mov	 ecx, ebx
  00269	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ?Velocity@Physical@@QBE?AUPoint@@XZ ; Physical::Velocity

; 3007 :                 double dvs = (sv2-sv1).length();

  00275	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0027b	f2 0f 10 10	 movsd	 xmm2, QWORD PTR [eax]
  0027f	f2 0f 10 48 08	 movsd	 xmm1, QWORD PTR [eax+8]
  00284	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00289	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  0028d	66 0f 5a c9	 cvtpd2ps xmm1, xmm1

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  00291	f3 0f 5c 55 ec	 subss	 xmm2, DWORD PTR _ix$1$[ebp]
  00296	f3 0f 5c 4d c0	 subss	 xmm1, DWORD PTR _iy$1$[ebp]

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  0029b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0029f	f3 0f 11 95 4c
	ff ff ff	 movss	 DWORD PTR $T10[ebp], xmm2

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  002a7	f3 0f 5c 45 bc	 subss	 xmm0, DWORD PTR _iz$1$[ebp]

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  002ac	f3 0f 11 8d 50
	ff ff ff	 movss	 DWORD PTR $T10[ebp+4], xmm1
  002b4	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR $T10[ebp+8], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3007 :                 double dvs = (sv2-sv1).length();

  002bc	e8 00 00 00 00	 call	 ?length@Vec3@@QBEMXZ	; Vec3::length
  002c1	f2 0f 10 16	 movsd	 xmm2, QWORD PTR [esi]

; 3008 :                 double dvt = (tv2-tv1).length();

  002c5	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  002cb	f2 0f 10 4e 08	 movsd	 xmm1, QWORD PTR [esi+8]
  002d0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  002d4	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3007 :                 double dvs = (sv2-sv1).length();

  002d8	f2 0f 11 45 a8	 movsd	 QWORD PTR _dvs$1$[ebp], xmm0
  002dd	f2 0f 10 46 10	 movsd	 xmm0, QWORD PTR [esi+16]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  002e2	f3 0f 5c 55 b4	 subss	 xmm2, DWORD PTR _ix$1$[ebp]
  002e7	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  002eb	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  002ef	f3 0f 5c 4d e4	 subss	 xmm1, DWORD PTR _iy$1$[ebp]
  002f4	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _iz$1$[ebp]

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  002f9	f3 0f 11 95 40
	ff ff ff	 movss	 DWORD PTR $T9[ebp], xmm2
  00301	f3 0f 11 8d 44
	ff ff ff	 movss	 DWORD PTR $T9[ebp+4], xmm1
  00309	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR $T9[ebp+8], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3008 :                 double dvt = (tv2-tv1).length();

  00311	e8 00 00 00 00	 call	 ?length@Vec3@@QBEMXZ	; Vec3::length

; 3009 : 
; 3010 :                 if (dvs > 20) dvs *= dvs;

  00316	f2 0f 10 55 a8	 movsd	 xmm2, QWORD PTR _dvs$1$[ebp]
  0031b	0f 57 c9	 xorps	 xmm1, xmm1
  0031e	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@4034000000000000
  00326	66 0f 2f d3	 comisd	 xmm2, xmm3
  0032a	f3 0f 5a c8	 cvtss2sd xmm1, xmm0
  0032e	f2 0f 11 4d e0	 movsd	 QWORD PTR _dvt$1$[ebp], xmm1
  00333	76 0c		 jbe	 SHORT $LN23@CollideShi
  00335	0f 28 c2	 movaps	 xmm0, xmm2
  00338	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  0033c	f2 0f 11 55 a8	 movsd	 QWORD PTR _dvs$1$[ebp], xmm2
$LN23@CollideShi:

; 3011 :                 if (dvt > 20) dvt *= dvt;

  00341	66 0f 2f cb	 comisd	 xmm1, xmm3
  00345	76 0c		 jbe	 SHORT $LN24@CollideShi
  00347	0f 28 c1	 movaps	 xmm0, xmm1
  0034a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0034e	f2 0f 11 45 e0	 movsd	 QWORD PTR _dvt$1$[ebp], xmm0
$LN24@CollideShi:

; 3012 : 
; 3013 :                 if (!NetGame::IsNetGameClient()) {

  00353	e8 00 00 00 00	 call	 ?IsNetGameClient@NetGame@@SA_NXZ ; NetGame::IsNetGameClient
  00358	84 c0		 test	 al, al
  0035a	0f 85 b8 00 00
	00		 jne	 $LN25@CollideShi

; 3015 :                     ship->InflictDamage(dvs);

  00360	f3 0f 10 83 b8
	01 00 00	 movss	 xmm0, DWORD PTR [ebx+440]
  00368	83 ec 18	 sub	 esp, 24			; 00000018H
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 129  :     double            Integrity() const { return integrity;  }

  0036b	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3015 :                     ship->InflictDamage(dvs);

  0036e	8b c4		 mov	 eax, esp
  00370	8b cb		 mov	 ecx, ebx
  00372	6a 03		 push	 3
  00374	6a 00		 push	 0
  00376	83 ec 08	 sub	 esp, 8
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 129  :     double            Integrity() const { return integrity;  }

  00379	f2 0f 11 45 b0	 movsd	 QWORD PTR _old_integrity$1$[ebp], xmm0
  0037e	0f 57 c0	 xorps	 xmm0, xmm0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00381	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00384	f2 0f 11 40 10	 movsd	 QWORD PTR [eax+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3015 :                     ship->InflictDamage(dvs);

  00389	8b 03		 mov	 eax, DWORD PTR [ebx]
  0038b	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR _dvs$1$[ebp]
  00390	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00395	8b 80 6c 01 00
	00		 mov	 eax, DWORD PTR [eax+364]
  0039b	ff d0		 call	 eax
  0039d	f3 0f 10 83 b8
	01 00 00	 movss	 xmm0, DWORD PTR [ebx+440]
  003a5	dd d8		 fstp	 ST(0)

; 3016 :                     double hull_damage = old_integrity - ship->Integrity();

  003a7	f2 0f 10 4d b0	 movsd	 xmm1, QWORD PTR _old_integrity$1$[ebp]

; 3017 :                     NetUtil::SendObjDamage(ship, hull_damage);

  003ac	33 d2		 xor	 edx, edx
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 129  :     double            Integrity() const { return integrity;  }

  003ae	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3017 :                     NetUtil::SendObjDamage(ship, hull_damage);

  003b1	8b cb		 mov	 ecx, ebx
  003b3	f2 0f 5c c8	 subsd	 xmm1, xmm0
  003b7	e8 00 00 00 00	 call	 ?SendObjDamage@NetUtil@@SAXPAVSimObject@@NPAVShot@@@Z ; NetUtil::SendObjDamage
  003bc	f3 0f 10 87 b8
	01 00 00	 movss	 xmm0, DWORD PTR [edi+440]

; 3020 :                     targ->InflictDamage(dvt);

  003c4	83 ec 18	 sub	 esp, 24			; 00000018H
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 129  :     double            Integrity() const { return integrity;  }

  003c7	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3020 :                     targ->InflictDamage(dvt);

  003ca	8b c4		 mov	 eax, esp
  003cc	8b cf		 mov	 ecx, edi
  003ce	6a 03		 push	 3
  003d0	6a 00		 push	 0
  003d2	83 ec 08	 sub	 esp, 8
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 129  :     double            Integrity() const { return integrity;  }

  003d5	f2 0f 11 45 a8	 movsd	 QWORD PTR _hull_damage$1$[ebp], xmm0
  003da	0f 57 c0	 xorps	 xmm0, xmm0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  003dd	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  003e0	f2 0f 11 40 10	 movsd	 QWORD PTR [eax+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3020 :                     targ->InflictDamage(dvt);

  003e5	8b 07		 mov	 eax, DWORD PTR [edi]
  003e7	f2 0f 10 45 e0	 movsd	 xmm0, QWORD PTR _dvt$1$[ebp]
  003ec	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003f1	8b 80 6c 01 00
	00		 mov	 eax, DWORD PTR [eax+364]
  003f7	ff d0		 call	 eax
  003f9	f3 0f 10 87 b8
	01 00 00	 movss	 xmm0, DWORD PTR [edi+440]

; 3022 :                     NetUtil::SendObjDamage(targ, hull_damage);

  00401	33 d2		 xor	 edx, edx
  00403	f2 0f 10 4d a8	 movsd	 xmm1, QWORD PTR _hull_damage$1$[ebp]
  00408	8b cf		 mov	 ecx, edi
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 129  :     double            Integrity() const { return integrity;  }

  0040a	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3020 :                     targ->InflictDamage(dvt);

  0040d	dd d8		 fstp	 ST(0)

; 3021 :                     hull_damage = old_integrity - targ->Integrity();

  0040f	f2 0f 5c c8	 subsd	 xmm1, xmm0

; 3022 :                     NetUtil::SendObjDamage(targ, hull_damage);

  00413	e8 00 00 00 00	 call	 ?SendObjDamage@NetUtil@@SAXPAVSimObject@@NPAVShot@@@Z ; NetUtil::SendObjDamage
$LN25@CollideShi:

; 3023 :                 }
; 3024 : 
; 3025 :                 // then delete the ship:
; 3026 :                 if (targ->Integrity() < 1.0f) {

  00418	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00420	0f 2f 87 b8 01
	00 00		 comiss	 xmm0, DWORD PTR [edi+440]
  00427	0f 86 d8 00 00
	00		 jbe	 $LN27@CollideShi

; 3027 :                     NetUtil::SendObjKill(targ, ship, NetObjKill::KILL_COLLISION);

  0042d	6a 00		 push	 0
  0042f	6a 03		 push	 3
  00431	8b d3		 mov	 edx, ebx
  00433	8b cf		 mov	 ecx, edi
  00435	e8 00 00 00 00	 call	 ?SendObjKill@NetUtil@@SAXPAVShip@@PBV2@HH@Z ; NetUtil::SendObjKill
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  0043a	8d 73 10	 lea	 esi, DWORD PTR [ebx+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3028 :                     Print("   ship %s died in collision with %s (%s)\n", targ->Name(), ship->Name(), FormatGameTime());

  0043d	e8 00 00 00 00	 call	 ?FormatGameTime@@YAPBDXZ ; FormatGameTime
  00442	50		 push	 eax
  00443	56		 push	 esi
  00444	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00447	50		 push	 eax
  00448	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@IBPHLHIK@?5?5?5ship?5?$CFs?5died?5in?5collision?5wit@
  0044d	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00452	83 c4 18	 add	 esp, 24			; 00000018H

; 3029 :                     if (!kill_list.contains(targ)) {

  00455	8d 4d c8	 lea	 ecx, DWORD PTR _kill_list$[ebp]
  00458	57		 push	 edi
  00459	e8 00 00 00 00	 call	 ?contains@?$List@VShip@@@@QBE_NPBVShip@@@Z ; List<Ship>::contains
  0045e	84 c0		 test	 al, al
  00460	0f 85 97 00 00
	00		 jne	 $LN335@CollideShi

; 3030 :                         ShipStats* r = ShipStats::Find(targ->Name());

  00466	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00469	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find

; 3031 :                         if (r) r->AddEvent(SimEvent::COLLIDE, ship->Name());

  0046e	85 c0		 test	 eax, eax
  00470	74 0b		 je	 SHORT $LN28@CollideShi
  00472	51		 push	 ecx
  00473	56		 push	 esi
  00474	6a 06		 push	 6
  00476	8b c8		 mov	 ecx, eax
  00478	e8 00 00 00 00	 call	 ?AddEvent@ShipStats@@QAEPAVSimEvent@@HPBD0@Z ; ShipStats::AddEvent
$LN28@CollideShi:
  0047d	8b 07		 mov	 eax, DWORD PTR [edi]
  0047f	8b 80 98 01 00
	00		 mov	 eax, DWORD PTR [eax+408]
  00485	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  0048a	75 08		 jne	 SHORT $LN58@CollideShi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  0048c	8b 87 04 03 00
	00		 mov	 eax, DWORD PTR [edi+772]
  00492	eb 04		 jmp	 SHORT $LN57@CollideShi
$LN58@CollideShi:
  00494	8b cf		 mov	 ecx, edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3033 :                         if (targ->GetIFF() > 0 && ship->GetIFF() != targ->GetIFF()) {

  00496	ff d0		 call	 eax
$LN57@CollideShi:
  00498	85 c0		 test	 eax, eax
  0049a	7e 56		 jle	 SHORT $LN30@CollideShi
  0049c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0049e	8b 80 98 01 00
	00		 mov	 eax, DWORD PTR [eax+408]
  004a4	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  004a9	75 08		 jne	 SHORT $LN60@CollideShi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  004ab	8b 83 04 03 00
	00		 mov	 eax, DWORD PTR [ebx+772]
  004b1	eb 04		 jmp	 SHORT $LN342@CollideShi
$LN60@CollideShi:
  004b3	8b cb		 mov	 ecx, ebx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3033 :                         if (targ->GetIFF() > 0 && ship->GetIFF() != targ->GetIFF()) {

  004b5	ff d0		 call	 eax
$LN342@CollideShi:
  004b7	8b 0f		 mov	 ecx, DWORD PTR [edi]
  004b9	89 45 ec	 mov	 DWORD PTR tv2008[ebp], eax
  004bc	8b 91 98 01 00
	00		 mov	 edx, DWORD PTR [ecx+408]
  004c2	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  004c8	75 08		 jne	 SHORT $LN62@CollideShi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  004ca	8b 87 04 03 00
	00		 mov	 eax, DWORD PTR [edi+772]
  004d0	eb 04		 jmp	 SHORT $LN61@CollideShi
$LN62@CollideShi:
  004d2	8b cf		 mov	 ecx, edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3033 :                         if (targ->GetIFF() > 0 && ship->GetIFF() != targ->GetIFF()) {

  004d4	ff d2		 call	 edx
$LN61@CollideShi:
  004d6	39 45 ec	 cmp	 DWORD PTR tv2008[ebp], eax
  004d9	74 17		 je	 SHORT $LN30@CollideShi

; 3034 :                             r = ShipStats::Find(ship->Name());

  004db	8b ce		 mov	 ecx, esi
  004dd	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find
  004e2	8b d0		 mov	 edx, eax

; 3035 :                             if (r) r->AddPoints(targ->Value());

  004e4	85 d2		 test	 edx, edx
  004e6	74 0a		 je	 SHORT $LN30@CollideShi
  004e8	8b cf		 mov	 ecx, edi
  004ea	e8 00 00 00 00	 call	 ?Value@Ship@@QBEHXZ	; Ship::Value
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 155  :     void           AddPoints(int p)        { points += p;          }

  004ef	01 42 58	 add	 DWORD PTR [edx+88], eax
$LN30@CollideShi:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3038 :                         kill_list.insert(targ);

  004f2	6a 00		 push	 0
  004f4	57		 push	 edi
  004f5	8d 4d c8	 lea	 ecx, DWORD PTR _kill_list$[ebp]
  004f8	e8 00 00 00 00	 call	 ?insert@?$List@VShip@@@@QAEXPBVShip@@H@Z ; List<Ship>::insert
$LN335@CollideShi:
  004fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
$LN27@CollideShi:

; 3039 :                     }
; 3040 :                 }
; 3041 : 
; 3042 :                 if (ship->Integrity() < 1.0f) {

  00505	0f 2f 83 b8 01
	00 00		 comiss	 xmm0, DWORD PTR [ebx+440]
  0050c	0f 86 d0 00 00
	00		 jbe	 $LN340@CollideShi

; 3043 :                     NetUtil::SendObjKill(ship, targ, NetObjKill::KILL_COLLISION);

  00512	6a 00		 push	 0
  00514	6a 03		 push	 3
  00516	8b d7		 mov	 edx, edi
  00518	8b cb		 mov	 ecx, ebx
  0051a	e8 00 00 00 00	 call	 ?SendObjKill@NetUtil@@SAXPAVShip@@PBV2@HH@Z ; NetUtil::SendObjKill
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  0051f	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3044 :                     Print("   ship %s died in collision with %s (%s)\n", ship->Name(), targ->Name(), FormatGameTime());

  00522	e8 00 00 00 00	 call	 ?FormatGameTime@@YAPBDXZ ; FormatGameTime
  00527	50		 push	 eax
  00528	56		 push	 esi
  00529	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
  0052c	50		 push	 eax
  0052d	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@IBPHLHIK@?5?5?5ship?5?$CFs?5died?5in?5collision?5wit@
  00532	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00537	83 c4 18	 add	 esp, 24			; 00000018H

; 3045 :                     if (!kill_list.contains(ship)) {

  0053a	8d 4d c8	 lea	 ecx, DWORD PTR _kill_list$[ebp]
  0053d	53		 push	 ebx
  0053e	e8 00 00 00 00	 call	 ?contains@?$List@VShip@@@@QBE_NPBVShip@@@Z ; List<Ship>::contains
  00543	84 c0		 test	 al, al
  00545	0f 85 97 00 00
	00		 jne	 $LN340@CollideShi

; 3046 :                         ShipStats* r = ShipStats::Find(ship->Name());

  0054b	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  0054e	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find

; 3047 :                         if (r) r->AddEvent(SimEvent::COLLIDE, targ->Name());

  00553	85 c0		 test	 eax, eax
  00555	74 0b		 je	 SHORT $LN33@CollideShi
  00557	51		 push	 ecx
  00558	56		 push	 esi
  00559	6a 06		 push	 6
  0055b	8b c8		 mov	 ecx, eax
  0055d	e8 00 00 00 00	 call	 ?AddEvent@ShipStats@@QAEPAVSimEvent@@HPBD0@Z ; ShipStats::AddEvent
$LN33@CollideShi:
  00562	8b 03		 mov	 eax, DWORD PTR [ebx]
  00564	8b 80 98 01 00
	00		 mov	 eax, DWORD PTR [eax+408]
  0056a	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  0056f	75 08		 jne	 SHORT $LN64@CollideShi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  00571	8b 83 04 03 00
	00		 mov	 eax, DWORD PTR [ebx+772]
  00577	eb 04		 jmp	 SHORT $LN63@CollideShi
$LN64@CollideShi:
  00579	8b cb		 mov	 ecx, ebx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3049 :                         if (ship->GetIFF() > 0 && ship->GetIFF() != targ->GetIFF()) {

  0057b	ff d0		 call	 eax
$LN63@CollideShi:
  0057d	85 c0		 test	 eax, eax
  0057f	7e 56		 jle	 SHORT $LN35@CollideShi
  00581	8b 03		 mov	 eax, DWORD PTR [ebx]
  00583	8b 80 98 01 00
	00		 mov	 eax, DWORD PTR [eax+408]
  00589	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  0058e	75 08		 jne	 SHORT $LN66@CollideShi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  00590	8b 83 04 03 00
	00		 mov	 eax, DWORD PTR [ebx+772]
  00596	eb 04		 jmp	 SHORT $LN343@CollideShi
$LN66@CollideShi:
  00598	8b cb		 mov	 ecx, ebx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3049 :                         if (ship->GetIFF() > 0 && ship->GetIFF() != targ->GetIFF()) {

  0059a	ff d0		 call	 eax
$LN343@CollideShi:
  0059c	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0059e	89 45 ec	 mov	 DWORD PTR tv2002[ebp], eax
  005a1	8b 91 98 01 00
	00		 mov	 edx, DWORD PTR [ecx+408]
  005a7	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?GetIFF@Ship@@UBEHXZ ; Ship::GetIFF
  005ad	75 08		 jne	 SHORT $LN68@CollideShi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  005af	8b 87 04 03 00
	00		 mov	 eax, DWORD PTR [edi+772]
  005b5	eb 04		 jmp	 SHORT $LN67@CollideShi
$LN68@CollideShi:
  005b7	8b cf		 mov	 ecx, edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3049 :                         if (ship->GetIFF() > 0 && ship->GetIFF() != targ->GetIFF()) {

  005b9	ff d2		 call	 edx
$LN67@CollideShi:
  005bb	39 45 ec	 cmp	 DWORD PTR tv2002[ebp], eax
  005be	74 17		 je	 SHORT $LN35@CollideShi

; 3050 :                             r = ShipStats::Find(targ->Name());

  005c0	8b ce		 mov	 ecx, esi
  005c2	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find
  005c7	8b d0		 mov	 edx, eax

; 3051 :                             if (r) r->AddPoints(ship->Value());

  005c9	85 d2		 test	 edx, edx
  005cb	74 0a		 je	 SHORT $LN35@CollideShi
  005cd	8b cb		 mov	 ecx, ebx
  005cf	e8 00 00 00 00	 call	 ?Value@Ship@@QBEHXZ	; Ship::Value
; File d:\programming\starshatter\trunk\stars45\simevent.h

; 155  :     void           AddPoints(int p)        { points += p;          }

  005d4	01 42 58	 add	 DWORD PTR [edx+88], eax
$LN35@CollideShi:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3054 :                         kill_list.insert(ship);

  005d7	6a 00		 push	 0
  005d9	53		 push	 ebx
  005da	8d 4d c8	 lea	 ecx, DWORD PTR _kill_list$[ebp]
  005dd	e8 00 00 00 00	 call	 ?insert@?$List@VShip@@@@QAEXPBVShip@@H@Z ; List<Ship>::insert
$LN340@CollideShi:
  005e2	8b 75 e8	 mov	 esi, DWORD PTR _t_index$1$[ebp]
$LN32@CollideShi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  005e5	8d 4d 98	 lea	 ecx, DWORD PTR _targ_iter$22[ebp]
  005e8	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  005ed	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2971 :         while (++targ_iter) {

  005ef	0f 85 12 fb ff
	ff		 jne	 $LL4@CollideShi
$LN5@CollideShi:

; 3060 :         ListIter<Debris> debris_iter = debris;

  005f5	8b 45 dc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  005f8	8d 4d a0	 lea	 ecx, DWORD PTR _debris_iter$23[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3060 :         ListIter<Debris> debris_iter = debris;

  005fb	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00600	c7 45 a4 ff ff
	ff ff		 mov	 DWORD PTR _debris_iter$23[ebp+4], -1
  00607	89 45 a0	 mov	 DWORD PTR _debris_iter$23[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  0060a	e8 00 00 00 00	 call	 ?next@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::next
  0060f	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3061 :         while (++debris_iter) {

  00611	0f 84 1d 03 00
	00		 je	 $LN7@CollideShi
  00617	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4049000000000000
  0061f	90		 npad	 1
$LL6@CollideShi:

; 3062 :             Debris* d = debris_iter.value();

  00620	8d 4d a0	 lea	 ecx, DWORD PTR _debris_iter$23[ebp]
  00623	e8 00 00 00 00	 call	 ?value@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::value
  00628	8b f0		 mov	 esi, eax
  0062a	89 75 ec	 mov	 DWORD PTR _d$1$[ebp], esi
  0062d	f3 0f 10 86 b0
	01 00 00	 movss	 xmm0, DWORD PTR [esi+432]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 127  :     double            Radius()    const { return radius;     }

  00635	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3064 :             if (d->Radius() < 50)

  00638	66 0f 2f c8	 comisd	 xmm1, xmm0
  0063c	0f 87 e2 02 00
	00		 ja	 $LN41@CollideShi

; 3065 :             continue;
; 3066 : 
; 3067 :             if (ship->CollidesWith(*d)) {

  00642	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00644	56		 push	 esi
  00645	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00648	8b cb		 mov	 ecx, ebx
  0064a	ff d0		 call	 eax
  0064c	85 c0		 test	 eax, eax
  0064e	0f 84 c8 02 00
	00		 je	 $LN338@CollideShi
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  00654	8d 86 c0 00 00
	00		 lea	 eax, DWORD PTR [esi+192]
  0065a	50		 push	 eax
  0065b	89 45 f0	 mov	 DWORD PTR tv1989[ebp], eax
  0065e	8d 8e a8 00 00
	00		 lea	 ecx, DWORD PTR [esi+168]
  00664	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  0066a	89 4d e4	 mov	 DWORD PTR tv1988[ebp], ecx
  0066d	50		 push	 eax
  0066e	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
  00673	8d b3 c0 00 00
	00		 lea	 esi, DWORD PTR [ebx+192]
  00679	56		 push	 esi
  0067a	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00680	50		 push	 eax
  00681	8d 8b a8 00 00
	00		 lea	 ecx, DWORD PTR [ebx+168]
  00687	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3071 :                 Physical::SemiElasticCollision(*ship, *d);

  0068c	ff 75 ec	 push	 DWORD PTR _d$1$[ebp]
  0068f	53		 push	 ebx
  00690	e8 00 00 00 00	 call	 ?SemiElasticCollision@Physical@@SAXAAV1@0@Z ; Physical::SemiElasticCollision
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  00695	8b 4d e4	 mov	 ecx, DWORD PTR tv1988[ebp]
  00698	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3071 :                 Physical::SemiElasticCollision(*ship, *d);

  0069e	83 c4 08	 add	 esp, 8
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  006a1	ff 75 f0	 push	 DWORD PTR tv1989[ebp]
  006a4	50		 push	 eax
  006a5	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
  006aa	f2 0f 10 85 00
	ff ff ff	 movsd	 xmm0, QWORD PTR $T5[ebp]
  006b2	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  006b8	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  006bc	56		 push	 esi
  006bd	50		 push	 eax
  006be	8d 8b a8 00 00
	00		 lea	 ecx, DWORD PTR [ebx+168]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  006c4	f3 0f 11 45 bc	 movss	 DWORD PTR _ix$1$[ebp], xmm0
  006c9	f2 0f 10 85 08
	ff ff ff	 movsd	 xmm0, QWORD PTR $T5[ebp+8]
  006d1	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  006d5	f3 0f 11 45 c0	 movss	 DWORD PTR _iy$1$[ebp], xmm0
  006da	f2 0f 10 85 10
	ff ff ff	 movsd	 xmm0, QWORD PTR $T5[ebp+16]
  006e2	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  006e6	f3 0f 11 45 e8	 movss	 DWORD PTR _iz$1$[ebp], xmm0
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  006eb	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
  006f0	f2 0f 10 85 00
	ff ff ff	 movsd	 xmm0, QWORD PTR $T4[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  006f8	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  006fc	f3 0f 11 45 f0	 movss	 DWORD PTR _ix$1$[ebp], xmm0
  00701	f2 0f 10 85 08
	ff ff ff	 movsd	 xmm0, QWORD PTR $T4[ebp+8]
  00709	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0070d	f3 0f 11 45 e4	 movss	 DWORD PTR _iy$1$[ebp], xmm0
  00712	f2 0f 10 85 10
	ff ff ff	 movsd	 xmm0, QWORD PTR $T4[ebp+16]
  0071a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0071e	f3 0f 11 45 b4	 movss	 DWORD PTR _iz$1$[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3076 :                 if (!NetGame::IsNetGameClient()) {

  00723	e8 00 00 00 00	 call	 ?IsNetGameClient@NetGame@@SA_NXZ ; NetGame::IsNetGameClient
  00728	84 c0		 test	 al, al
  0072a	0f 85 90 00 00
	00		 jne	 $LN38@CollideShi

; 3077 :                     ship->InflictDamage((sv2-sv1).length());

  00730	f2 0f 10 8d 58
	ff ff ff	 movsd	 xmm1, QWORD PTR $T13[ebp]
  00738	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0073e	f2 0f 10 95 60
	ff ff ff	 movsd	 xmm2, QWORD PTR $T13[ebp+8]
  00746	83 ec 18	 sub	 esp, 24			; 00000018H
  00749	f2 0f 10 9d 68
	ff ff ff	 movsd	 xmm3, QWORD PTR $T13[ebp+16]
  00751	8b c4		 mov	 eax, esp
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  00753	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3077 :                     ship->InflictDamage((sv2-sv1).length());

  00757	6a 03		 push	 3
  00759	6a 00		 push	 0
  0075b	0f 57 c0	 xorps	 xmm0, xmm0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  0075e	66 0f 5a d2	 cvtpd2ps xmm2, xmm2

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00762	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00765	f2 0f 11 40 10	 movsd	 QWORD PTR [eax+16], xmm0

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  0076a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _ix$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3077 :                     ship->InflictDamage((sv2-sv1).length());

  0076f	8b 33		 mov	 esi, DWORD PTR [ebx]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  00771	f3 0f 5c c1	 subss	 xmm0, xmm1
  00775	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _iy$1$[ebp]
  0077a	66 0f 5a db	 cvtpd2ps xmm3, xmm3
  0077e	f3 0f 5c ca	 subss	 xmm1, xmm2
  00782	f3 0f 10 55 b4	 movss	 xmm2, DWORD PTR _iz$1$[ebp]
  00787	f3 0f 5c d3	 subss	 xmm2, xmm3

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0078b	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR $T8[ebp], xmm0
  00793	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T8[ebp+4], xmm1
  0079b	f3 0f 11 95 3c
	ff ff ff	 movss	 DWORD PTR $T8[ebp+8], xmm2
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3077 :                     ship->InflictDamage((sv2-sv1).length());

  007a3	e8 00 00 00 00	 call	 ?length@Vec3@@QBEMXZ	; Vec3::length
  007a8	8b 86 6c 01 00
	00		 mov	 eax, DWORD PTR [esi+364]
  007ae	83 ec 08	 sub	 esp, 8
  007b1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  007b5	8b cb		 mov	 ecx, ebx
  007b7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  007bc	ff d0		 call	 eax
  007be	dd d8		 fstp	 ST(0)
$LN38@CollideShi:
  007c0	f2 0f 10 8d 78
	ff ff ff	 movsd	 xmm1, QWORD PTR $T17[ebp]
  007c8	f2 0f 10 55 80	 movsd	 xmm2, QWORD PTR $T17[ebp+8]
  007cd	f2 0f 10 5d 88	 movsd	 xmm3, QWORD PTR $T17[ebp+16]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  007d2	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _ix$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3080 :                 d->InflictDamage((tv2-tv1).length());

  007d7	8b 7d ec	 mov	 edi, DWORD PTR _d$1$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  007da	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3080 :                 d->InflictDamage((tv2-tv1).length());

  007de	6a 00		 push	 0
  007e0	51		 push	 ecx
  007e1	8b 37		 mov	 esi, DWORD PTR [edi]
  007e3	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  007e9	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  007ed	f3 0f 5c c1	 subss	 xmm0, xmm1
  007f1	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _iy$1$[ebp]
  007f6	66 0f 5a db	 cvtpd2ps xmm3, xmm3
  007fa	f3 0f 5c ca	 subss	 xmm1, xmm2
  007fe	f3 0f 10 55 e8	 movss	 xmm2, DWORD PTR _iz$1$[ebp]
  00803	f3 0f 5c d3	 subss	 xmm2, xmm3

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  00807	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR $T7[ebp], xmm0
  0080f	f3 0f 11 8d 2c
	ff ff ff	 movss	 DWORD PTR $T7[ebp+4], xmm1
  00817	f3 0f 11 95 30
	ff ff ff	 movss	 DWORD PTR $T7[ebp+8], xmm2
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3080 :                 d->InflictDamage((tv2-tv1).length());

  0081f	e8 00 00 00 00	 call	 ?length@Vec3@@QBEMXZ	; Vec3::length
  00824	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00828	51		 push	 ecx
  00829	8b cf		 mov	 ecx, edi
  0082b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00830	ff 56 54	 call	 DWORD PTR [esi+84]

; 3081 : 
; 3082 :                 // then delete the debris:
; 3083 :                 if (d->Integrity() < 1.0f) {

  00833	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0083b	0f 2f 87 b8 01
	00 00		 comiss	 xmm0, DWORD PTR [edi+440]
  00842	76 77		 jbe	 SHORT $LN49@CollideShi
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  00844	8d 87 c0 00 00
	00		 lea	 eax, DWORD PTR [edi+192]
  0084a	50		 push	 eax
  0084b	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  00851	50		 push	 eax
  00852	8d 8f a8 00 00
	00		 lea	 ecx, DWORD PTR [edi+168]
  00858	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3084 :                     sim->CreateExplosion(d->Location(), d->Velocity(), Explosion::LARGE_EXPLOSION, 1.0f, 1.0f, this);

  0085d	8b 45 dc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00860	0f 10 47 48	 movups	 xmm0, XMMWORD PTR [edi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3084 :                     sim->CreateExplosion(d->Location(), d->Velocity(), Explosion::LARGE_EXPLOSION, 1.0f, 1.0f, this);

  00864	51		 push	 ecx
  00865	6a 00		 push	 0
  00867	50		 push	 eax
  00868	83 ec 08	 sub	 esp, 8
  0086b	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00871	0f 11 85 78 ff
	ff ff		 movups	 XMMWORD PTR $T16[ebp], xmm0
  00878	f2 0f 10 47 58	 movsd	 xmm0, QWORD PTR [edi+88]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3084 :                     sim->CreateExplosion(d->Location(), d->Velocity(), Explosion::LARGE_EXPLOSION, 1.0f, 1.0f, this);

  0087d	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00885	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0088c	6a 0b		 push	 11			; 0000000bH
  0088e	51		 push	 ecx
  0088f	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00895	f2 0f 11 45 88	 movsd	 QWORD PTR $T16[ebp+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3084 :                     sim->CreateExplosion(d->Location(), d->Velocity(), Explosion::LARGE_EXPLOSION, 1.0f, 1.0f, this);

  0089a	51		 push	 ecx
  0089b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0089e	e8 00 00 00 00	 call	 ?CreateExplosion@Sim@@QAEPAVExplosion@@ABUPoint@@0HMMPAVSimRegion@@PAVSimObject@@PAVSystem@@@Z ; Sim::CreateExplosion

; 3085 :                     debris_iter.removeItem();

  008a3	8d 4d a0	 lea	 ecx, DWORD PTR _debris_iter$23[ebp]
  008a6	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::removeItem

; 3086 :                     delete d;

  008ab	8b 07		 mov	 eax, DWORD PTR [edi]
  008ad	8b cf		 mov	 ecx, edi
  008af	6a 01		 push	 1
  008b1	ff 10		 call	 DWORD PTR [eax]
  008b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
$LN49@CollideShi:

; 3087 :                 }
; 3088 : 
; 3089 :                 if (ship->Integrity() < 1.0f) {

  008bb	0f 2f 83 b8 01
	00 00		 comiss	 xmm0, DWORD PTR [ebx+440]
  008c2	76 58		 jbe	 SHORT $LN338@CollideShi

; 3090 :                     if (!kill_list.contains(ship)) {

  008c4	53		 push	 ebx
  008c5	8d 4d c8	 lea	 ecx, DWORD PTR _kill_list$[ebp]
  008c8	e8 00 00 00 00	 call	 ?contains@?$List@VShip@@@@QBE_NPBVShip@@@Z ; List<Ship>::contains
  008cd	84 c0		 test	 al, al
  008cf	75 4b		 jne	 SHORT $LN338@CollideShi
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  008d1	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3091 :                         ShipStats* r = ShipStats::Find(ship->Name());

  008d4	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find
  008d9	8b f0		 mov	 esi, eax

; 3092 :                         if (r) r->AddEvent(SimEvent::COLLIDE, Game::GetText("DEBRIS"));

  008db	85 f6		 test	 esi, esi
  008dd	74 32		 je	 SHORT $LN42@CollideShi
  008df	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  008e5	68 00 00 00 00	 push	 OFFSET ??_C@_06CAKIJOOM@DEBRIS?$AA@
  008ea	50		 push	 eax
  008eb	e8 00 00 00 00	 call	 ?GetText@Game@@SA?AVText@@PBD@Z ; Game::GetText
  008f0	83 c4 04	 add	 esp, 4
  008f3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  008f7	8b ce		 mov	 ecx, esi
  008f9	ff 30		 push	 DWORD PTR [eax]
  008fb	6a 06		 push	 6
  008fd	e8 00 00 00 00	 call	 ?AddEvent@ShipStats@@QAEPAVSimEvent@@HPBD0@Z ; ShipStats::AddEvent
  00902	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00908	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0090c	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
$LN42@CollideShi:

; 3093 : 
; 3094 :                         kill_list.insert(ship);

  00911	6a 00		 push	 0
  00913	53		 push	 ebx
  00914	8d 4d c8	 lea	 ecx, DWORD PTR _kill_list$[ebp]
  00917	e8 00 00 00 00	 call	 ?insert@?$List@VShip@@@@QAEXPBVShip@@H@Z ; List<Ship>::insert
$LN338@CollideShi:
  0091c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4049000000000000
$LN41@CollideShi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00924	8d 4d a0	 lea	 ecx, DWORD PTR _debris_iter$23[ebp]
  00927	e8 00 00 00 00	 call	 ?next@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::next
  0092c	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3061 :         while (++debris_iter) {

  0092e	0f 85 ec fc ff
	ff		 jne	 $LL6@CollideShi
$LN7@CollideShi:

; 3100 :         ListIter<Asteroid> a_iter = asteroids;

  00934	8b 45 dc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00937	8d 4d 90	 lea	 ecx, DWORD PTR _a_iter$21[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3100 :         ListIter<Asteroid> a_iter = asteroids;

  0093a	05 ac 00 00 00	 add	 eax, 172		; 000000acH
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0093f	c7 45 94 ff ff
	ff ff		 mov	 DWORD PTR _a_iter$21[ebp+4], -1
  00946	89 45 90	 mov	 DWORD PTR _a_iter$21[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00949	e8 00 00 00 00	 call	 ?next@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::next
  0094e	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3101 :         while (++a_iter) {

  00950	0f 84 a0 01 00
	00		 je	 $LN9@CollideShi
$LL8@CollideShi:

; 3102 :             Asteroid* a = a_iter.value();

  00956	8d 4d 90	 lea	 ecx, DWORD PTR _a_iter$21[ebp]
  00959	e8 00 00 00 00	 call	 ?value@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::value
  0095e	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00960	50		 push	 eax
  00961	89 45 f0	 mov	 DWORD PTR _a$1$[ebp], eax
  00964	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00967	8b cb		 mov	 ecx, ebx

; 3103 : 
; 3104 :             if (ship->CollidesWith(*a)) {

  00969	ff d2		 call	 edx
  0096b	85 c0		 test	 eax, eax
  0096d	0f 84 73 01 00
	00		 je	 $LN46@CollideShi
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  00973	8d b3 c0 00 00
	00		 lea	 esi, DWORD PTR [ebx+192]
  00979	56		 push	 esi
  0097a	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00980	50		 push	 eax
  00981	8d 8b a8 00 00
	00		 lea	 ecx, DWORD PTR [ebx+168]
  00987	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3106 :                 Physical::SemiElasticCollision(*ship, *a);

  0098c	ff 75 f0	 push	 DWORD PTR _a$1$[ebp]
  0098f	53		 push	 ebx
  00990	e8 00 00 00 00	 call	 ?SemiElasticCollision@Physical@@SAXAAV1@0@Z ; Physical::SemiElasticCollision
  00995	83 c4 08	 add	 esp, 8
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  00998	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  0099e	8d 8b a8 00 00
	00		 lea	 ecx, DWORD PTR [ebx+168]
  009a4	56		 push	 esi
  009a5	50		 push	 eax
  009a6	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
  009ab	f2 0f 10 85 78
	ff ff ff	 movsd	 xmm0, QWORD PTR $T15[ebp]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  009b3	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  009b7	f3 0f 11 45 f0	 movss	 DWORD PTR _ix$1$[ebp], xmm0
  009bc	f2 0f 10 45 80	 movsd	 xmm0, QWORD PTR $T15[ebp+8]
  009c1	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  009c5	f3 0f 11 45 e4	 movss	 DWORD PTR _iy$1$[ebp], xmm0
  009ca	f2 0f 10 45 88	 movsd	 xmm0, QWORD PTR $T15[ebp+16]
  009cf	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  009d3	f3 0f 11 45 b4	 movss	 DWORD PTR _iz$1$[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3109 :                 if (!NetGame::IsNetGameClient()) {

  009d8	e8 00 00 00 00	 call	 ?IsNetGameClient@NetGame@@SA_NXZ ; NetGame::IsNetGameClient
  009dd	84 c0		 test	 al, al
  009df	0f 85 98 00 00
	00		 jne	 $LN44@CollideShi

; 3110 :                     ship->InflictDamage((sv2-sv1).length() * 10);

  009e5	f2 0f 10 8d 58
	ff ff ff	 movsd	 xmm1, QWORD PTR $T11[ebp]
  009ed	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  009f3	f2 0f 10 95 60
	ff ff ff	 movsd	 xmm2, QWORD PTR $T11[ebp+8]
  009fb	83 ec 18	 sub	 esp, 24			; 00000018H
  009fe	f2 0f 10 9d 68
	ff ff ff	 movsd	 xmm3, QWORD PTR $T11[ebp+16]
  00a06	8b c4		 mov	 eax, esp
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  00a08	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3110 :                     ship->InflictDamage((sv2-sv1).length() * 10);

  00a0c	6a 03		 push	 3
  00a0e	6a 00		 push	 0
  00a10	0f 57 c0	 xorps	 xmm0, xmm0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  00a13	66 0f 5a d2	 cvtpd2ps xmm2, xmm2

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00a17	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00a1a	f2 0f 11 40 10	 movsd	 QWORD PTR [eax+16], xmm0

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  00a1f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _ix$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3110 :                     ship->InflictDamage((sv2-sv1).length() * 10);

  00a24	8b 33		 mov	 esi, DWORD PTR [ebx]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  00a26	f3 0f 5c c1	 subss	 xmm0, xmm1
  00a2a	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _iy$1$[ebp]
  00a2f	66 0f 5a db	 cvtpd2ps xmm3, xmm3
  00a33	f3 0f 5c ca	 subss	 xmm1, xmm2
  00a37	f3 0f 10 55 b4	 movss	 xmm2, DWORD PTR _iz$1$[ebp]
  00a3c	f3 0f 5c d3	 subss	 xmm2, xmm3

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  00a40	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR $T6[ebp], xmm0
  00a48	f3 0f 11 8d 20
	ff ff ff	 movss	 DWORD PTR $T6[ebp+4], xmm1
  00a50	f3 0f 11 95 24
	ff ff ff	 movss	 DWORD PTR $T6[ebp+8], xmm2
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3110 :                     ship->InflictDamage((sv2-sv1).length() * 10);

  00a58	e8 00 00 00 00	 call	 ?length@Vec3@@QBEMXZ	; Vec3::length
  00a5d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41200000
  00a65	83 ec 08	 sub	 esp, 8
  00a68	8b 86 6c 01 00
	00		 mov	 eax, DWORD PTR [esi+364]
  00a6e	8b cb		 mov	 ecx, ebx
  00a70	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a74	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00a79	ff d0		 call	 eax
  00a7b	dd d8		 fstp	 ST(0)
$LN44@CollideShi:

; 3111 :                 }
; 3112 : 
; 3113 :                 if (ship->Integrity() < 1.0f) {

  00a7d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a85	0f 2f 83 b8 01
	00 00		 comiss	 xmm0, DWORD PTR [ebx+440]
  00a8c	76 58		 jbe	 SHORT $LN46@CollideShi

; 3114 :                     if (!kill_list.contains(ship)) {

  00a8e	53		 push	 ebx
  00a8f	8d 4d c8	 lea	 ecx, DWORD PTR _kill_list$[ebp]
  00a92	e8 00 00 00 00	 call	 ?contains@?$List@VShip@@@@QBE_NPBVShip@@@Z ; List<Ship>::contains
  00a97	84 c0		 test	 al, al
  00a99	75 4b		 jne	 SHORT $LN46@CollideShi
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  00a9b	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3115 :                         ShipStats* r = ShipStats::Find(ship->Name());

  00a9e	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find
  00aa3	8b f0		 mov	 esi, eax

; 3116 :                         if (r) r->AddEvent(SimEvent::COLLIDE, Game::GetText("ASTEROID"));

  00aa5	85 f6		 test	 esi, esi
  00aa7	74 32		 je	 SHORT $LN47@CollideShi
  00aa9	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00aaf	68 00 00 00 00	 push	 OFFSET ??_C@_08OJEDLGMF@ASTEROID?$AA@
  00ab4	50		 push	 eax
  00ab5	e8 00 00 00 00	 call	 ?GetText@Game@@SA?AVText@@PBD@Z ; Game::GetText
  00aba	83 c4 04	 add	 esp, 4
  00abd	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00ac1	8b ce		 mov	 ecx, esi
  00ac3	ff 30		 push	 DWORD PTR [eax]
  00ac5	6a 06		 push	 6
  00ac7	e8 00 00 00 00	 call	 ?AddEvent@ShipStats@@QAEPAVSimEvent@@HPBD0@Z ; ShipStats::AddEvent
  00acc	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00ad2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00ad6	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
$LN47@CollideShi:

; 3117 : 
; 3118 :                         kill_list.insert(ship);

  00adb	6a 00		 push	 0
  00add	53		 push	 ebx
  00ade	8d 4d c8	 lea	 ecx, DWORD PTR _kill_list$[ebp]
  00ae1	e8 00 00 00 00	 call	 ?insert@?$List@VShip@@@@QAEXPBVShip@@H@Z ; List<Ship>::insert
$LN46@CollideShi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00ae6	8d 4d 90	 lea	 ecx, DWORD PTR _a_iter$21[ebp]
  00ae9	e8 00 00 00 00	 call	 ?next@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::next
  00aee	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3101 :         while (++a_iter) {

  00af0	0f 85 60 fe ff
	ff		 jne	 $LL8@CollideShi
$LN9@CollideShi:

; 3119 :                     }
; 3120 :                 }
; 3121 :             }
; 3122 :         }
; 3123 : 
; 3124 :         s_index++;

  00af6	ff 45 c4	 inc	 DWORD PTR _s_index$1$[ebp]
  00af9	8b bd 74 ff ff
	ff		 mov	 edi, DWORD PTR tv1999[ebp]
$LN14@CollideShi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00aff	8d 4d d4	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
  00b02	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00b07	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 2960 :     while (++ship_iter) {

  00b09	0f 85 81 f5 ff
	ff		 jne	 $LL2@CollideShi
$LN3@CollideShi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00b0f	8d 45 c8	 lea	 eax, DWORD PTR _kill_list$[ebp]
  00b12	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _killed$[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00b19	8d 4d d4	 lea	 ecx, DWORD PTR _killed$[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00b1c	89 45 d4	 mov	 DWORD PTR _killed$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00b1f	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00b24	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3128 :     while (++killed) {

  00b26	74 1b		 je	 SHORT $LN11@CollideShi
$LL10@CollideShi:

; 3129 :         Ship* kill = killed.value();

  00b28	8d 4d d4	 lea	 ecx, DWORD PTR _killed$[ebp]
  00b2b	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value

; 3130 :         kill->DeathSpiral();

  00b30	8b c8		 mov	 ecx, eax
  00b32	e8 00 00 00 00	 call	 ?DeathSpiral@Ship@@QAEXXZ ; Ship::DeathSpiral
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00b37	8d 4d d4	 lea	 ecx, DWORD PTR _killed$[ebp]
  00b3a	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00b3f	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3128 :     while (++killed) {

  00b41	75 e5		 jne	 SHORT $LL10@CollideShi
$LN11@CollideShi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 54   :    ~List()  { delete [] array; }

  00b43	ff 75 d0	 push	 DWORD PTR _kill_list$[ebp+8]
  00b46	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00b4b	83 c4 04	 add	 esp, 4
$LN309@CollideShi:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3132 : }

  00b4e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00b51	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b58	59		 pop	 ecx
  00b59	5f		 pop	 edi
  00b5a	5e		 pop	 esi
  00b5b	5b		 pop	 ebx
  00b5c	8b e5		 mov	 esp, ebp
  00b5e	5d		 pop	 ebp
  00b5f	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CollideShips@SimRegion@@IAEXXZ$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR _kill_list$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$List@VShip@@@@QAE@XZ ; List<Ship>::~List<Ship>
__unwindfunclet$?CollideShips@SimRegion@@IAEXXZ$1:
  00008	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CollideShips@SimRegion@@IAEXXZ$2:
  00013	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__ehhandler$?CollideShips@SimRegion@@IAEXXZ:
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 8a ec fe ff
	ff		 mov	 ecx, DWORD PTR [edx-276]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CollideShips@SimRegion@@IAEXXZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CollideShips@SimRegion@@IAEXXZ ENDP			; SimRegion::CollideShips
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\shot.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_shot_iter$ = -8					; size = 8
_ship_iter$ = -8					; size = 8
?CrashShips@SimRegion@@IAEXXZ PROC			; SimRegion::CrashShips
; _this$ = ecx

; 3138 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 3139 :     if (type != AIR_SPACE || NetGame::IsNetGameClient())

  0000b	83 7b 14 01	 cmp	 DWORD PTR [ebx+20], 1
  0000f	0f 85 0e 02 00
	00		 jne	 $LN7@CrashShips
  00015	e8 00 00 00 00	 call	 ?IsNetGameClient@NetGame@@SA_NXZ ; NetGame::IsNetGameClient
  0001a	84 c0		 test	 al, al
  0001c	0f 85 01 02 00
	00		 jne	 $LN7@CrashShips

; 3140 :     return;
; 3141 : 
; 3142 :     ListIter<Ship> ship_iter = ships;

  00022	8d 43 4c	 lea	 eax, DWORD PTR [ebx+76]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00025	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ship_iter$[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  0002c	8d 4d f8	 lea	 ecx, DWORD PTR _ship_iter$[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0002f	89 45 f8	 mov	 DWORD PTR _ship_iter$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00032	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00037	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3143 :     while (++ship_iter) {

  00039	0f 84 25 01 00
	00		 je	 $LN3@CrashShips
  0003f	90		 npad	 1
$LL2@CrashShips:

; 3144 :         Ship* ship = ship_iter.value();

  00040	8d 4d f8	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
  00043	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value
  00048	8b f8		 mov	 edi, eax

; 3148 :                 ship->Class() != Ship::LCA &&

  0004a	8b cf		 mov	 ecx, edi
  0004c	e8 00 00 00 00	 call	 ?IsGroundUnit@Ship@@QBE_NXZ ; Ship::IsGroundUnit
  00051	84 c0		 test	 al, al
  00053	0f 85 fb 00 00
	00		 jne	 $LN11@CrashShips
; File d:\programming\starshatter\trunk\stars45\ship.h

; 236  :     bool              InTransition()       const { return transition_type != TRANSITION_NONE;         }

  00059	83 bf 60 04 00
	00 00		 cmp	 DWORD PTR [edi+1120], 0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3148 :                 ship->Class() != Ship::LCA &&

  00060	0f 85 ee 00 00
	00		 jne	 $LN11@CrashShips
  00066	e8 00 00 00 00	 call	 ?Class@Ship@@QBE?AW4CLASSIFICATION@1@XZ ; Ship::Class
  0006b	83 f8 08	 cmp	 eax, 8
  0006e	0f 84 e0 00 00
	00		 je	 $LN11@CrashShips
  00074	f3 0f 10 87 b0
	01 00 00	 movss	 xmm0, DWORD PTR [edi+432]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 127  :     double            Radius()    const { return radius;     }

  0007c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0007f	f2 0f 11 45 f0	 movsd	 QWORD PTR $T1[ebp], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3148 :                 ship->Class() != Ship::LCA &&

  00084	e8 00 00 00 00	 call	 ?AltitudeAGL@Ship@@QBENXZ ; Ship::AltitudeAGL
  00089	f2 0f 10 4d f0	 movsd	 xmm1, QWORD PTR $T1[ebp]
  0008e	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00096	66 0f 2f c8	 comisd	 xmm1, xmm0
  0009a	0f 86 b4 00 00
	00		 jbe	 $LN11@CrashShips
  000a0	8b 07		 mov	 eax, DWORD PTR [edi]
  000a2	8b 80 d4 00 00
	00		 mov	 eax, DWORD PTR [eax+212]
  000a8	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetFlightPhase@Ship@@UBEHXZ ; Ship::GetFlightPhase
  000ad	0f 85 77 01 00
	00		 jne	 $LN59@CrashShips
; File d:\programming\starshatter\trunk\stars45\ship.h

; 182  :     virtual int       GetFlightPhase()           const { return flight_phase; }

  000b3	8b 87 10 03 00
	00		 mov	 eax, DWORD PTR [edi+784]
$LN20@CrashShips:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3150 :             if (ship->GetFlightPhase() == Ship::ACTIVE || ship->GetFlightPhase() == Ship::APPROACH) {

  000b9	83 f8 05	 cmp	 eax, 5
  000bc	74 1e		 je	 SHORT $LN10@CrashShips
  000be	8b 07		 mov	 eax, DWORD PTR [edi]
  000c0	8b 80 d4 00 00
	00		 mov	 eax, DWORD PTR [eax+212]
  000c6	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetFlightPhase@Ship@@UBEHXZ ; Ship::GetFlightPhase
  000cb	0f 85 62 01 00
	00		 jne	 $LN23@CrashShips
; File d:\programming\starshatter\trunk\stars45\ship.h

; 182  :     virtual int       GetFlightPhase()           const { return flight_phase; }

  000d1	8b 87 10 03 00
	00		 mov	 eax, DWORD PTR [edi+784]
$LN22@CrashShips:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3150 :             if (ship->GetFlightPhase() == Ship::ACTIVE || ship->GetFlightPhase() == Ship::APPROACH) {

  000d7	83 f8 06	 cmp	 eax, 6
  000da	75 78		 jne	 SHORT $LN11@CrashShips
$LN10@CrashShips:

; 3151 :                 ship->InflictDamage(1e6);

  000dc	83 ec 18	 sub	 esp, 24			; 00000018H
  000df	0f 57 c0	 xorps	 xmm0, xmm0
  000e2	8b c4		 mov	 eax, esp
  000e4	8b cf		 mov	 ecx, edi
  000e6	6a 03		 push	 3
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  000e8	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3151 :                 ship->InflictDamage(1e6);

  000eb	6a 00		 push	 0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  000ed	f2 0f 11 40 10	 movsd	 QWORD PTR [eax+16], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3151 :                 ship->InflictDamage(1e6);

  000f2	83 ec 08	 sub	 esp, 8
  000f5	8b 07		 mov	 eax, DWORD PTR [edi]
  000f7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@412e848000000000
  000ff	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00104	8b 80 6c 01 00
	00		 mov	 eax, DWORD PTR [eax+364]
  0010a	ff d0		 call	 eax

; 3152 : 
; 3153 :                 if (ship->Integrity() < 1.0f) {

  0010c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00114	dd d8		 fstp	 ST(0)
  00116	0f 2f 87 b8 01
	00 00		 comiss	 xmm0, DWORD PTR [edi+440]
  0011d	76 35		 jbe	 SHORT $LN11@CrashShips
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  0011f	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3154 :                     Print("    ship destroyed by crash: %s (%s)\n", ship->Name(), FormatGameTime());

  00122	e8 00 00 00 00	 call	 ?FormatGameTime@@YAPBDXZ ; FormatGameTime
  00127	50		 push	 eax
  00128	56		 push	 esi
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@GLNEEKDA@?5?5?5?5ship?5destroyed?5by?5crash?3?5?$CFs?5@
  0012e	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00133	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3155 :                     ShipStats* r = ShipStats::Find(ship->Name());

  00136	8b ce		 mov	 ecx, esi
  00138	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find

; 3156 :                     if (r) r->AddEvent(SimEvent::CRASH);

  0013d	85 c0		 test	 eax, eax
  0013f	74 0c		 je	 SHORT $LN12@CrashShips
  00141	51		 push	 ecx
  00142	6a 00		 push	 0
  00144	6a 05		 push	 5
  00146	8b c8		 mov	 ecx, eax
  00148	e8 00 00 00 00	 call	 ?AddEvent@ShipStats@@QAEPAVSimEvent@@HPBD0@Z ; ShipStats::AddEvent
$LN12@CrashShips:

; 3157 : 
; 3158 :                     ship->DeathSpiral();

  0014d	8b cf		 mov	 ecx, edi
  0014f	e8 00 00 00 00	 call	 ?DeathSpiral@Ship@@QAEXXZ ; Ship::DeathSpiral
$LN11@CrashShips:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00154	8d 4d f8	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
  00157	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  0015c	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3143 :     while (++ship_iter) {

  0015e	0f 85 dc fe ff
	ff		 jne	 $LL2@CrashShips
$LN3@CrashShips:

; 3159 :                 }
; 3160 :             }
; 3161 :         }
; 3162 :     }
; 3163 : 
; 3164 :     ListIter<Shot> shot_iter = shots;

  00164	8d 43 7c	 lea	 eax, DWORD PTR [ebx+124]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00167	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _shot_iter$[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  0016e	8d 4d f8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00171	89 45 f8	 mov	 DWORD PTR _shot_iter$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  00174	e8 00 00 00 00	 call	 ?next@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::next
  00179	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3165 :     while (++shot_iter) {

  0017b	0f 84 a2 00 00
	00		 je	 $LN7@CrashShips
$LL4@CrashShips:

; 3166 :         Shot* shot = shot_iter.value();

  00181	8d 4d f8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]
  00184	e8 00 00 00 00	 call	 ?value@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::value
  00189	8b f0		 mov	 esi, eax
  0018b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0018d	8b 81 d8 00 00
	00		 mov	 eax, DWORD PTR [ecx+216]
  00193	3d 00 00 00 00	 cmp	 eax, OFFSET ?IsBeam@Shot@@UBE_NXZ ; Shot::IsBeam
  00198	0f 85 9e 00 00
	00		 jne	 $LN25@CrashShips
; File d:\programming\starshatter\trunk\stars45\shot.h

; 87   :     virtual bool      IsBeam()       const { return beam;       }

  0019e	8a 86 0d 02 00
	00		 mov	 al, BYTE PTR [esi+525]
$LN24@CrashShips:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3168 :         if (shot->IsBeam() || shot->IsDecoy())

  001a4	84 c0		 test	 al, al
  001a6	75 6b		 jne	 SHORT $LN18@CrashShips
  001a8	8b 06		 mov	 eax, DWORD PTR [esi]
  001aa	8b ce		 mov	 ecx, esi
  001ac	8b 80 c8 00 00
	00		 mov	 eax, DWORD PTR [eax+200]
  001b2	ff d0		 call	 eax
  001b4	84 c0		 test	 al, al
  001b6	75 5b		 jne	 SHORT $LN18@CrashShips

; 3169 :         continue;
; 3170 : 
; 3171 :         if (shot->AltitudeMSL() < 5e3 &&

  001b8	8b ce		 mov	 ecx, esi
  001ba	e8 00 00 00 00	 call	 ?AltitudeMSL@Shot@@QBENXZ ; Shot::AltitudeMSL
  001bf	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40b3880000000000
  001c7	66 0f 2f c8	 comisd	 xmm1, xmm0
  001cb	76 46		 jbe	 SHORT $LN18@CrashShips
  001cd	e8 00 00 00 00	 call	 ?AltitudeAGL@Shot@@QBENXZ ; Shot::AltitudeAGL
  001d2	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4014000000000000
  001da	66 0f 2f c8	 comisd	 xmm1, xmm0
  001de	76 33		 jbe	 SHORT $LN18@CrashShips

; 3172 :                 shot->AltitudeAGL() < 5) {
; 3173 : 
; 3174 :             // shot hit the ground, destroy it:
; 3175 :             NetUtil::SendWepDestroy(shot);

  001e0	8b ce		 mov	 ecx, esi
  001e2	e8 00 00 00 00	 call	 ?SendWepDestroy@NetUtil@@SAXPAVShot@@@Z ; NetUtil::SendWepDestroy

; 3176 : 
; 3177 :             if (shot->IsDrone())

  001e7	8b 06		 mov	 eax, DWORD PTR [esi]
  001e9	8b ce		 mov	 ecx, esi
  001eb	8b 80 c4 00 00
	00		 mov	 eax, DWORD PTR [eax+196]
  001f1	ff d0		 call	 eax
  001f3	84 c0		 test	 al, al
  001f5	74 0c		 je	 SHORT $LN16@CrashShips

; 3178 :             drones.remove((Drone*) shot);

  001f7	56		 push	 esi
  001f8	8d 8b 88 00 00
	00		 lea	 ecx, DWORD PTR [ebx+136]
  001fe	e8 00 00 00 00	 call	 ?remove@?$List@VDrone@@@@QAEPAVDrone@@PBV2@@Z ; List<Drone>::remove
$LN16@CrashShips:

; 3179 : 
; 3180 :             shot_iter.removeItem();

  00203	8d 4d f8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]
  00206	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::removeItem

; 3181 :             delete shot;

  0020b	8b 06		 mov	 eax, DWORD PTR [esi]
  0020d	8b ce		 mov	 ecx, esi
  0020f	6a 01		 push	 1
  00211	ff 10		 call	 DWORD PTR [eax]
$LN18@CrashShips:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00213	8d 4d f8	 lea	 ecx, DWORD PTR _shot_iter$[ebp]
  00216	e8 00 00 00 00	 call	 ?next@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::next
  0021b	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3165 :     while (++shot_iter) {

  0021d	0f 85 5e ff ff
	ff		 jne	 $LL4@CrashShips
$LN7@CrashShips:

; 3182 :         }
; 3183 :     }
; 3184 : }

  00223	5f		 pop	 edi
  00224	5e		 pop	 esi
  00225	5b		 pop	 ebx
  00226	8b e5		 mov	 esp, ebp
  00228	5d		 pop	 ebp
  00229	c3		 ret	 0
$LN59@CrashShips:
  0022a	8b cf		 mov	 ecx, edi

; 3150 :             if (ship->GetFlightPhase() == Ship::ACTIVE || ship->GetFlightPhase() == Ship::APPROACH) {

  0022c	ff d0		 call	 eax
  0022e	e9 86 fe ff ff	 jmp	 $LN20@CrashShips
$LN23@CrashShips:
  00233	8b cf		 mov	 ecx, edi
  00235	ff d0		 call	 eax
  00237	e9 9b fe ff ff	 jmp	 $LN22@CrashShips
$LN25@CrashShips:
  0023c	8b ce		 mov	 ecx, esi

; 3168 :         if (shot->IsBeam() || shot->IsDecoy())

  0023e	ff d0		 call	 eax
  00240	e9 5f ff ff ff	 jmp	 $LN24@CrashShips
?CrashShips@SimRegion@@IAEXXZ ENDP			; SimRegion::CrashShips
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_ship_iter$ = -8					; size = 8
?DestroyShips@SimRegion@@IAEXXZ PROC			; SimRegion::DestroyShips
; _this$ = ecx

; 3190 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0000a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ship_iter$[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00011	8d 4d f8	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3191 :     ListIter<Ship> ship_iter = ships;

  00014	8d 47 4c	 lea	 eax, DWORD PTR [edi+76]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00017	89 45 f8	 mov	 DWORD PTR _ship_iter$[ebp], eax

; 108  :    int operator++() { return next() != 0; }

  0001a	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  0001f	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3192 :     while (++ship_iter) {

  00021	74 2f		 je	 SHORT $LN3@DestroyShi
$LL2@DestroyShi:

; 3193 :         Ship*    ship = ship_iter.value();

  00023	8d 4d f8	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
  00026	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value
  0002b	8b f0		 mov	 esi, eax
; File d:\programming\starshatter\trunk\stars45\ship.h

; 235  :     bool              IsDead()             const { return transition_type == TRANSITION_DEAD;         }

  0002d	83 be 60 04 00
	00 06		 cmp	 DWORD PTR [esi+1120], 6
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3195 :         if (ship->IsDead()) {

  00034	75 10		 jne	 SHORT $LN4@DestroyShi

; 3196 :             // must use the iterator to remove the current
; 3197 :             // item from the container:
; 3198 :             ship_iter.removeItem();

  00036	8d 4d f8	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
  00039	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::removeItem

; 3199 :             DestroyShip(ship);

  0003e	56		 push	 esi
  0003f	8b cf		 mov	 ecx, edi
  00041	e8 00 00 00 00	 call	 ?DestroyShip@SimRegion@@IAEXPAVShip@@@Z ; SimRegion::DestroyShip
$LN4@DestroyShi:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00046	8d 4d f8	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
  00049	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  0004e	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3192 :     while (++ship_iter) {

  00050	75 d1		 jne	 SHORT $LL2@DestroyShi
$LN3@DestroyShi:

; 3200 :         }
; 3201 :     }
; 3202 : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?DestroyShips@SimRegion@@IAEXXZ ENDP			; SimRegion::DestroyShips
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File d:\programming\starshatter\trunk\stars45\ship.h
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File d:\programming\starshatter\trunk\stars45\ship.h
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\sim.h
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
$T2 = -220						; size = 24
_spawn_loc$3 = -196					; size = 24
$T4 = -196						; size = 24
_rgn_name$ = -168					; size = 8
_ship_design$1$ = -160					; size = 4
_cmd_ai$1$ = -156					; size = 4
_spawn$1$ = -156					; size = 4
_respawn$1$ = -151					; size = 1
_player_destroyed$1$ = -150				; size = 1
_observe$1$ = -149					; size = 1
_ship_reg$ = -148					; size = 64
_ship_name$ = -84					; size = 64
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_ship$ = 8						; size = 4
?DestroyShip@SimRegion@@IAEXPAVShip@@@Z PROC		; SimRegion::DestroyShip
; _this$ = ecx

; 3208 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DestroyShip@SimRegion@@IAEXPAVShip@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	8b 75 08	 mov	 esi, DWORD PTR _ship$[ebp]

; 3209 :     if (!ship) return;

  00033	85 f6		 test	 esi, esi
  00035	0f 84 82 03 00
	00		 je	 $LN1@DestroyShi

; 3210 : 
; 3211 :     Ship*    spawn = 0;
; 3212 : 
; 3213 :     ships.remove(ship);

  0003b	56		 push	 esi
  0003c	8d 4b 4c	 lea	 ecx, DWORD PTR [ebx+76]
  0003f	e8 00 00 00 00	 call	 ?remove@?$List@VShip@@@@QAEPAVShip@@PBV2@@Z ; List<Ship>::remove

; 3214 :     carriers.remove(ship);

  00044	56		 push	 esi
  00045	8d 4b 58	 lea	 ecx, DWORD PTR [ebx+88]
  00048	e8 00 00 00 00	 call	 ?remove@?$List@VShip@@@@QAEPAVShip@@PBV2@@Z ; List<Ship>::remove

; 3215 :     selection.remove(ship);

  0004d	56		 push	 esi
  0004e	8d 4b 64	 lea	 ecx, DWORD PTR [ebx+100]
  00051	e8 00 00 00 00	 call	 ?remove@?$List@VShip@@@@QAEPAVShip@@PBV2@@Z ; List<Ship>::remove

; 3216 : 
; 3217 :     Text rgn_name;

  00056	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _rgn_name$[ebp]
  0005c	e8 00 00 00 00	 call	 ??0Text@@QAE@XZ		; Text::Text
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00068	8b 06		 mov	 eax, DWORD PTR [esi]
  0006a	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  0006f	75 08		 jne	 SHORT $LN29@DestroyShi
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00071	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00077	eb 08		 jmp	 SHORT $LN28@DestroyShi
$LN29@DestroyShi:
  00079	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3218 :     if (ship->GetRegion())

  0007b	ff 90 90 00 00
	00		 call	 DWORD PTR [eax+144]
$LN28@DestroyShi:
  00081	85 c0		 test	 eax, eax
  00083	74 27		 je	 SHORT $LN3@DestroyShi
  00085	8b 06		 mov	 eax, DWORD PTR [esi]
  00087	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  0008c	75 08		 jne	 SHORT $LN31@DestroyShi
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0008e	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00094	eb 08		 jmp	 SHORT $LN30@DestroyShi
$LN31@DestroyShi:
  00096	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3219 :     rgn_name = ship->GetRegion()->Name();

  00098	ff 90 90 00 00
	00		 call	 DWORD PTR [eax+144]
$LN30@DestroyShi:
  0009e	ff 70 0c	 push	 DWORD PTR [eax+12]
  000a1	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _rgn_name$[ebp]
  000a7	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@PBD@Z	; Text::operator=
$LN3@DestroyShi:

; 3221 :     bool player_destroyed = (player_ship == ship);

  000ac	39 73 44	 cmp	 DWORD PTR [ebx+68], esi
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  000af	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 124  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(

  000b2	50		 push	 eax
  000b3	8d 45 ac	 lea	 eax, DWORD PTR _ship_name$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3221 :     bool player_destroyed = (player_ship == ship);

  000b6	0f 94 85 6a ff
	ff ff		 sete	 BYTE PTR _player_destroyed$1$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 124  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(

  000bd	6a 40		 push	 64			; 00000040H
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 _strcpy_s
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File d:\programming\starshatter\trunk\stars45\ship.h

; 362  :     const char*       Registry()        const    { return regnum;        }

  000c8	8d 86 f0 01 00
	00		 lea	 eax, DWORD PTR [esi+496]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 124  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(

  000ce	50		 push	 eax
  000cf	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _ship_reg$[ebp]
  000d5	6a 40		 push	 64			; 00000040H
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _strcpy_s
; File d:\programming\starshatter\trunk\stars45\ship.h

; 364  :     const ShipDesign* Design()          const    { return design;        }

  000dd	8b 86 00 02 00
	00		 mov	 eax, DWORD PTR [esi+512]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 124  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(

  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH
; File d:\programming\starshatter\trunk\stars45\ship.h

; 364  :     const ShipDesign* Design()          const    { return design;        }

  000e6	89 85 60 ff ff
	ff		 mov	 DWORD PTR _ship_design$1$[ebp], eax
  000ec	8b 06		 mov	 eax, DWORD PTR [esi]
  000ee	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  000f3	75 08		 jne	 SHORT $LN33@DestroyShi

; 290  : 
; 291  :     List<Shot>&       GetThreatList();
; 292  :     void              AddThreat(Shot* s);
; 293  :     void              DropThreat(Shot* s);
; 294  : 
; 295  :     virtual bool         Update(SimObject* obj);
; 296  :     virtual const char*  GetObserverName() const { return name; }
; 297  : 
; 298  :     virtual int       GetMissileEta(int index) const;
; 299  :     virtual void      SetMissileEta(int id, int eta);
; 300  : 
; 301  :     virtual WeaponDesign*   GetPrimaryDesign()      const;
; 302  :     virtual WeaponDesign*   GetSecondaryDesign()    const;
; 303  : 
; 304  :     virtual void      SetTarget(SimObject* t, System* sub=0, bool from_net=false);
; 305  :     virtual SimObject* GetTarget()      const    { return target;     }
; 306  :     virtual System*   GetSubTarget()    const    { return subtarget;  }
; 307  :     virtual void      CycleSubTarget(int dir=1);
; 308  :     virtual void      DropTarget();
; 309  :     virtual void      LockTarget(int  type=SimObject::SIM_SHIP,
; 310  :     bool closest=false,
; 311  :     bool hostile=false);
; 312  :     virtual void      LockTarget(SimObject* candidate);
; 313  :     virtual bool      IsTracking(SimObject* tgt);
; 314  :     virtual bool      GetTrigger(int i) const;
; 315  :     virtual void      SetTrigger(int i);
; 316  : 
; 317  :     Ship*             GetWard()         const    { return ward;          }
; 318  :     void              SetWard(Ship* s);
; 319  : 
; 320  :     // SHIELD SYSTEMS:
; 321  :     virtual double    InflictDamage(double damage,
; 322  :     Shot*  shot        = 0,
; 323  :     int    hit_type    = 3,
; 324  :     Point  hull_impact = Point(0,0,0));
; 325  :     
; 326  :     virtual double    InflictSystemDamage(double damage, Shot* shot, Point impact);
; 327  : 
; 328  :     virtual void      InflictNetDamage(double damage, Shot* shot=0);
; 329  :     virtual void      InflictNetSystemDamage(System* system, double damage, BYTE type);
; 330  :     virtual void      SetNetSystemStatus(System* system, int status, int power, int reactor, double avail);
; 331  :     virtual void      SetIntegrity(float n)      { integrity = n;        }
; 332  : 
; 333  :     virtual void      Destroy();
; 334  :     virtual int       ShieldStrength()  const;
; 335  :     virtual int       HullStrength()    const;
; 336  :     virtual int       HitBy(Shot* shot, Point& impact);
; 337  :     virtual int       CollidesWith(Physical& o);
; 338  : 
; 339  :     // SENSORS AND VISIBILITY:
; 340  :     virtual int       GetContactID()    const    { return contact_id;    }
; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  000f5	8b be 04 03 00
	00		 mov	 edi, DWORD PTR [esi+772]
  000fb	eb 0a		 jmp	 SHORT $LN32@DestroyShi
$LN33@DestroyShi:
  000fd	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3229 :     int         ship_iff    = ship->GetIFF();

  000ff	ff 90 98 01 00
	00		 call	 DWORD PTR [eax+408]
  00105	8b f8		 mov	 edi, eax
$LN32@DestroyShi:
; File d:\programming\starshatter\trunk\stars45\sim.h

; 174  :     bool                 IsTestMode()   const { return test_mode;        }

  00107	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
; File d:\programming\starshatter\trunk\stars45\ship.h

; 181  :     int               GetCommandAILevel()        const { return command_ai_level; }

  0010a	0f b6 86 15 04
	00 00		 movzx	 eax, BYTE PTR [esi+1045]
  00111	89 85 64 ff ff
	ff		 mov	 DWORD PTR _cmd_ai$1$[ebp], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3231 :     bool        respawn     = sim->IsTestMode() && !ship->IsGroundUnit();

  00117	80 ba bc 00 00
	00 00		 cmp	 BYTE PTR [edx+188], 0
  0011e	74 0f		 je	 SHORT $LN22@DestroyShi
  00120	8b ce		 mov	 ecx, esi
  00122	e8 00 00 00 00	 call	 ?IsGroundUnit@Ship@@QBE_NXZ ; Ship::IsGroundUnit
  00127	84 c0		 test	 al, al
  00129	75 04		 jne	 SHORT $LN22@DestroyShi
  0012b	b0 01		 mov	 al, 1
  0012d	eb 0a		 jmp	 SHORT $LN100@DestroyShi
$LN22@DestroyShi:

; 3232 :     bool        observe     = false;
; 3233 : 
; 3234 :     if (!respawn)
; 3235 :     respawn = ship->RespawnCount() > 0;

  0012f	83 be 98 04 00
	00 00		 cmp	 DWORD PTR [esi+1176], 0
  00136	0f 9f c0	 setg	 al
$LN100@DestroyShi:

; 3236 : 
; 3237 :     if (sim->netgame) {

  00139	8b 8a c4 00 00
	00		 mov	 ecx, DWORD PTR [edx+196]
  0013f	88 85 69 ff ff
	ff		 mov	 BYTE PTR _respawn$1$[ebp], al
  00145	c6 85 6b ff ff
	ff 00		 mov	 BYTE PTR _observe$1$[ebp], 0
  0014c	85 c9		 test	 ecx, ecx
  0014e	0f 84 cb 00 00
	00		 je	 $LN6@DestroyShi

; 3238 :         if (!respawn)

  00154	84 c0		 test	 al, al
  00156	75 14		 jne	 SHORT $LN9@DestroyShi

; 3239 :         observe = player_destroyed;

  00158	8a 95 6a ff ff
	ff		 mov	 dl, BYTE PTR _player_destroyed$1$[ebp]
  0015e	88 95 6b ff ff
	ff		 mov	 BYTE PTR _observe$1$[ebp], dl

; 3240 :     }
; 3241 : 
; 3242 :     if (respawn || observe) {

  00164	84 d2		 test	 dl, dl
  00166	0f 84 1f 02 00
	00		 je	 $LN18@DestroyShi
$LN9@DestroyShi:

; 3243 :         if (!sim->netgame || !respawn)

  0016c	85 c9		 test	 ecx, ecx
  0016e	74 04		 je	 SHORT $LN11@DestroyShi
  00170	84 c0		 test	 al, al
  00172	75 4b		 jne	 SHORT $LN10@DestroyShi
$LN11@DestroyShi:

; 3244 :         ship->SetRespawnLoc(RandomPoint() * 2);

  00174	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0017a	50		 push	 eax
  0017b	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 ?RandomPoint@@YA?AUPoint@@XZ ; RandomPoint
  00187	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@4000000000000000
  0018f	83 c4 04	 add	 esp, 4
  00192	8b c8		 mov	 ecx, eax
  00194	e8 00 00 00 00	 call	 ??DPoint@@QBE?AU0@N@Z	; Point::operator*
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  00199	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0019d	f2 0f 11 86 80
	04 00 00	 movsd	 QWORD PTR [esi+1152], xmm0
  001a5	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  001aa	f2 0f 11 86 88
	04 00 00	 movsd	 QWORD PTR [esi+1160], xmm0
  001b2	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  001b7	f2 0f 11 86 90
	04 00 00	 movsd	 QWORD PTR [esi+1168], xmm0
$LN10@DestroyShi:

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  001bf	0f 10 86 80 04
	00 00		 movups	 xmm0, XMMWORD PTR [esi+1152]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3248 :         if (ship->IsAirborne() && spawn_loc.z < 5e3)

  001c6	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  001c8	f2 0f 10 8e 90
	04 00 00	 movsd	 xmm1, QWORD PTR [esi+1168]
  001d0	0f 11 85 3c ff
	ff ff		 movups	 XMMWORD PTR _spawn_loc$3[ebp], xmm0
  001d7	f2 0f 11 8d 4c
	ff ff ff	 movsd	 QWORD PTR _spawn_loc$3[ebp+16], xmm1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3248 :         if (ship->IsAirborne() && spawn_loc.z < 5e3)

  001df	e8 00 00 00 00	 call	 ?IsAirborne@Ship@@QBE_NXZ ; Ship::IsAirborne
  001e4	84 c0		 test	 al, al
  001e6	74 2a		 je	 SHORT $LN12@DestroyShi
  001e8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40b3880000000000
  001f0	66 0f 2f c1	 comisd	 xmm0, xmm1
  001f4	76 1c		 jbe	 SHORT $LN12@DestroyShi

; 3249 :         spawn_loc.z = Random(8e3, 10e3);

  001f6	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@40c388000000000040bf400000000000
  001fd	83 ec 10	 sub	 esp, 16			; 00000010H
  00200	0f 11 04 24	 movups	 XMMWORD PTR [esp], xmm0
  00204	e8 00 00 00 00	 call	 ?Random@@YANNN@Z	; Random
  00209	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR _spawn_loc$3[ebp+16]
  0020f	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@DestroyShi:

; 3251 :         spawn = sim->CreateShip(ship_name, ship_reg, ship_design, rgn_name, spawn_loc, ship_iff, cmd_ai, observe ? 0 : ship->GetLoadout());

  00212	80 bd 6b ff ff
	ff 00		 cmp	 BYTE PTR _observe$1$[ebp], 0
  00219	74 32		 je	 SHORT $LN24@DestroyShi
  0021b	33 c0		 xor	 eax, eax
  0021d	eb 47		 jmp	 SHORT $LN34@DestroyShi
$LN6@DestroyShi:

; 3240 :     }
; 3241 : 
; 3242 :     if (respawn || observe) {

  0021f	84 c0		 test	 al, al
  00221	0f 85 45 ff ff
	ff		 jne	 $LN9@DestroyShi

; 3272 :     }
; 3273 :     else {
; 3274 :         // close mission, return to menu:
; 3275 :         if (player_destroyed) {

  00227	38 85 6a ff ff
	ff		 cmp	 BYTE PTR _player_destroyed$1$[ebp], al
  0022d	0f 84 58 01 00
	00		 je	 $LN18@DestroyShi

; 3276 :             Starshatter* stars = Starshatter::GetInstance();

  00233	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?instance@Starshatter@@1PAV1@A ; Starshatter::instance

; 3277 :             if (stars)

  00239	85 c9		 test	 ecx, ecx
  0023b	0f 84 4a 01 00
	00		 je	 $LN18@DestroyShi

; 3278 :             stars->SetGameMode(Starshatter::PLAN_MODE);

  00241	6a 04		 push	 4
  00243	e8 00 00 00 00	 call	 ?SetGameMode@Starshatter@@QAEXH@Z ; Starshatter::SetGameMode
  00248	e9 3e 01 00 00	 jmp	 $LN18@DestroyShi
$LN24@DestroyShi:
  0024d	8b 06		 mov	 eax, DWORD PTR [esi]
  0024f	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00254	75 08		 jne	 SHORT $LN35@DestroyShi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 289  :     virtual int*      GetLoadout()               { return loadout; }

  00256	8b 86 c8 04 00
	00		 mov	 eax, DWORD PTR [esi+1224]
  0025c	eb 08		 jmp	 SHORT $LN34@DestroyShi
$LN35@DestroyShi:
  0025e	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3251 :         spawn = sim->CreateShip(ship_name, ship_reg, ship_design, rgn_name, spawn_loc, ship_iff, cmd_ai, observe ? 0 : ship->GetLoadout());

  00260	ff 90 30 01 00
	00		 call	 DWORD PTR [eax+304]
$LN34@DestroyShi:
  00266	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00269	50		 push	 eax
  0026a	ff b5 64 ff ff
	ff		 push	 DWORD PTR _cmd_ai$1$[ebp]
  00270	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _spawn_loc$3[ebp]
  00276	57		 push	 edi
  00277	50		 push	 eax
  00278	ff b5 58 ff ff
	ff		 push	 DWORD PTR _rgn_name$[ebp]
  0027e	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _ship_reg$[ebp]
  00284	ff b5 60 ff ff
	ff		 push	 DWORD PTR _ship_design$1$[ebp]
  0028a	50		 push	 eax
  0028b	8d 45 ac	 lea	 eax, DWORD PTR _ship_name$[ebp]
  0028e	50		 push	 eax
  0028f	e8 00 00 00 00	 call	 ?CreateShip@Sim@@QAEPAVShip@@PBD0PAVShipDesign@@0ABUPoint@@HHPBH@Z ; Sim::CreateShip

; 3252 :         spawn->SetRespawnCount(ship->RespawnCount() - 1);

  00294	8b 8e 98 04 00
	00		 mov	 ecx, DWORD PTR [esi+1176]
  0029a	8b f8		 mov	 edi, eax
; File d:\programming\starshatter\trunk\stars45\ship.h

; 185  :     void              SetNetObserver(bool n)           { net_observer_mode = n;    }

  0029c	8a 85 6b ff ff
	ff		 mov	 al, BYTE PTR _observe$1$[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3252 :         spawn->SetRespawnCount(ship->RespawnCount() - 1);

  002a2	49		 dec	 ecx
  002a3	89 bd 64 ff ff
	ff		 mov	 DWORD PTR _spawn$1$[ebp], edi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 397  :     void              SetRespawnCount(int r)     { respawns = r;         }

  002a9	89 8f 98 04 00
	00		 mov	 DWORD PTR [edi+1176], ecx

; 185  :     void              SetNetObserver(bool n)           { net_observer_mode = n;    }

  002af	88 87 17 04 00
	00		 mov	 BYTE PTR [edi+1047], al
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3255 :         if (sim->netgame && respawn)

  002b5	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  002b8	83 b9 c4 00 00
	00 00		 cmp	 DWORD PTR [ecx+196], 0
  002bf	74 32		 je	 SHORT $LN13@DestroyShi
  002c1	80 bd 69 ff ff
	ff 00		 cmp	 BYTE PTR _respawn$1$[ebp], 0
  002c8	74 29		 je	 SHORT $LN13@DestroyShi
  002ca	8b 06		 mov	 eax, DWORD PTR [esi]
  002cc	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  002d1	75 08		 jne	 SHORT $LN37@DestroyShi
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 86   :     virtual DWORD        GetObjID()                 const { return objid;   }

  002d3	8b 86 d8 01 00
	00		 mov	 eax, DWORD PTR [esi+472]
  002d9	eb 08		 jmp	 SHORT $LN36@DestroyShi
$LN37@DestroyShi:
  002db	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3256 :         sim->netgame->Respawn(ship->GetObjID(), spawn);

  002dd	ff 90 ac 00 00
	00		 call	 DWORD PTR [eax+172]
$LN36@DestroyShi:
  002e3	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  002e6	57		 push	 edi
  002e7	50		 push	 eax
  002e8	8b 89 c4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+196]
  002ee	8b 11		 mov	 edx, DWORD PTR [ecx]
  002f0	ff 52 40	 call	 DWORD PTR [edx+64]
$LN13@DestroyShi:

; 3257 : 
; 3258 :         int n = strlen(ship_name); 

  002f3	8d 7d ac	 lea	 edi, DWORD PTR _ship_name$[ebp]
  002f6	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  002f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL97@DestroyShi:
  00300	8a 07		 mov	 al, BYTE PTR [edi]
  00302	47		 inc	 edi
  00303	84 c0		 test	 al, al
  00305	75 f9		 jne	 SHORT $LL97@DestroyShi
  00307	2b f9		 sub	 edi, ecx

; 3259 :         if (n > 2) {

  00309	83 ff 02	 cmp	 edi, 2
  0030c	7e 26		 jle	 SHORT $LN15@DestroyShi

; 3260 :             if (ship_name[n-2] == ' ' && isdigit(ship_name[n-1]))

  0030e	80 7c 3d aa 20	 cmp	 BYTE PTR _ship_name$[ebp+edi-2], 32 ; 00000020H
  00313	75 1f		 jne	 SHORT $LN15@DestroyShi
  00315	0f be 44 3d ab	 movsx	 eax, BYTE PTR _ship_name$[ebp+edi-1]
  0031a	50		 push	 eax
  0031b	e8 00 00 00 00	 call	 _isdigit
  00320	83 c4 04	 add	 esp, 4
  00323	85 c0		 test	 eax, eax
  00325	74 0d		 je	 SHORT $LN15@DestroyShi

; 3261 :                 ship_name[n-2] = 0;

  00327	83 c7 fe	 add	 edi, -2			; fffffffeH
  0032a	83 ff 40	 cmp	 edi, 64			; 00000040H
  0032d	73 2f		 jae	 SHORT $LN26@DestroyShi
  0032f	c6 44 3d ac 00	 mov	 BYTE PTR _ship_name$[ebp+edi], 0
$LN15@DestroyShi:

; 3262 :         }
; 3263 : 
; 3264 :         Element* elem = sim->FindElement(ship_name);

  00334	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00337	8d 45 ac	 lea	 eax, DWORD PTR _ship_name$[ebp]
  0033a	50		 push	 eax
  0033b	e8 00 00 00 00	 call	 ?FindElement@Sim@@QAEPAVElement@@PBD@Z ; Sim::FindElement
  00340	8b d0		 mov	 edx, eax

; 3265 :         if (elem)

  00342	85 d2		 test	 edx, edx
  00344	74 1d		 je	 SHORT $LN16@DestroyShi

; 3266 :         elem->AddShip(spawn, ship->GetOrigElementIndex());

  00346	8b ce		 mov	 ecx, esi
  00348	e8 00 00 00 00	 call	 ?GetOrigElementIndex@Ship@@QBEHXZ ; Ship::GetOrigElementIndex
  0034d	8b bd 64 ff ff
	ff		 mov	 edi, DWORD PTR _spawn$1$[ebp]
  00353	8b ca		 mov	 ecx, edx
  00355	50		 push	 eax
  00356	57		 push	 edi
  00357	e8 00 00 00 00	 call	 ?AddShip@Element@@QAEHPAVShip@@H@Z ; Element::AddShip

; 3267 :         else

  0035c	eb 1c		 jmp	 SHORT $LN17@DestroyShi
$LN26@DestroyShi:

; 3261 :                 ship_name[n-2] = 0;

  0035e	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN101@DestroyShi:
$LN16@DestroyShi:

; 3268 :         Print("Warning: No Element found for '%s' on respawn.\n", ship_name);

  00363	8d 45 ac	 lea	 eax, DWORD PTR _ship_name$[ebp]
  00366	50		 push	 eax
  00367	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@FMJBEPL@Warning?3?5No?5Element?5found?5for?5?8?$CF@
  0036c	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00371	8b bd 64 ff ff
	ff		 mov	 edi, DWORD PTR _spawn$1$[ebp]
  00377	83 c4 08	 add	 esp, 8
$LN17@DestroyShi:

; 3269 : 
; 3270 :         if (player_destroyed)

  0037a	80 bd 6a ff ff
	ff 00		 cmp	 BYTE PTR _player_destroyed$1$[ebp], 0
  00381	74 08		 je	 SHORT $LN18@DestroyShi

; 3271 :         SetPlayerShip(spawn);

  00383	57		 push	 edi
  00384	8b cb		 mov	 ecx, ebx
  00386	e8 00 00 00 00	 call	 ?SetPlayerShip@SimRegion@@QAEXPAVShip@@@Z ; SimRegion::SetPlayerShip
$LN18@DestroyShi:

; 3279 :         }
; 3280 :     }
; 3281 : 
; 3282 :     sim->ProcessEventTrigger(MissionEvent::TRIGGER_DESTROYED, 0, ship->Name());

  0038b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0038e	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00391	6a 00		 push	 0
  00393	50		 push	 eax
  00394	6a 00		 push	 0
  00396	6a 02		 push	 2
  00398	e8 00 00 00 00	 call	 ?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z ; Sim::ProcessEventTrigger

; 3283 : 
; 3284 :     dead_ships.insert(ship);

  0039d	6a 00		 push	 0
  0039f	56		 push	 esi
  003a0	8d 4b 70	 lea	 ecx, DWORD PTR [ebx+112]
  003a3	e8 00 00 00 00	 call	 ?insert@?$List@VShip@@@@QAEXPBVShip@@H@Z ; List<Ship>::insert

; 3285 :     ship->Destroy();

  003a8	8b 06		 mov	 eax, DWORD PTR [esi]
  003aa	8b ce		 mov	 ecx, esi
  003ac	ff 90 84 01 00
	00		 call	 DWORD PTR [eax+388]

; 3286 : }

  003b2	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _rgn_name$[ebp]
  003b8	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
$LN1@DestroyShi:
  003bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003c7	59		 pop	 ecx
  003c8	5f		 pop	 edi
  003c9	5e		 pop	 esi
  003ca	5b		 pop	 ebx
  003cb	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ce	33 cd		 xor	 ecx, ebp
  003d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003d5	8b e5		 mov	 esp, ebp
  003d7	5d		 pop	 ebp
  003d8	c2 04 00	 ret	 4
$LN99@DestroyShi:
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DestroyShip@SimRegion@@IAEXPAVShip@@@Z$0:
  00000	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _rgn_name$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__ehhandler$?DestroyShip@SimRegion@@IAEXPAVShip@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 20 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-224]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DestroyShip@SimRegion@@IAEXPAVShip@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DestroyShip@SimRegion@@IAEXPAVShip@@@Z ENDP		; SimRegion::DestroyShip
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_ship$ = 8						; size = 4
_carrier$ = 12						; size = 4
_deck$ = 16						; size = 4
?NetDockShip@SimRegion@@IAEXPAVShip@@0PAVFlightDeck@@@Z PROC ; SimRegion::NetDockShip
; _this$dead$ = ecx

; 3292 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3293 :     if (!ship || !carrier || !deck) return;

  00003	8b 55 08	 mov	 edx, DWORD PTR _ship$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 13		 je	 SHORT $LN3@NetDockShi
  0000a	83 7d 0c 00	 cmp	 DWORD PTR _carrier$[ebp], 0
  0000e	74 0d		 je	 SHORT $LN3@NetDockShi
  00010	8b 4d 10	 mov	 ecx, DWORD PTR _deck$[ebp]
  00013	85 c9		 test	 ecx, ecx
  00015	74 06		 je	 SHORT $LN3@NetDockShi

; 3294 : 
; 3295 :     deck->Dock(ship);

  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	52		 push	 edx
  0001a	ff 50 68	 call	 DWORD PTR [eax+104]
$LN3@NetDockShi:

; 3296 : }

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
?NetDockShip@SimRegion@@IAEXPAVShip@@0PAVFlightDeck@@@Z ENDP ; SimRegion::NetDockShip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_ship_iter$1 = -16					; size = 8
_test$1$ = -8						; size = 4
_ship_name$ = 8						; size = 4
?FindShip@SimRegion@@QAEPAVShip@@PBD@Z PROC		; SimRegion::FindShip
; _this$ = ecx

; 3302 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3303 :     Ship* ship = 0;
; 3304 : 
; 3305 :     if (ship_name && *ship_name) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _ship_name$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	33 db		 xor	 ebx, ebx
  0000d	57		 push	 edi
  0000e	85 c0		 test	 eax, eax
  00010	74 7b		 je	 SHORT $LN26@FindShip
  00012	38 18		 cmp	 BYTE PTR [eax], bl
  00014	74 77		 je	 SHORT $LN26@FindShip

; 3306 :         int   name_len = strlen(ship_name);

  00016	8b f8		 mov	 edi, eax
  00018	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  0001b	0f 1f 44 00 00	 npad	 5
$LL22@FindShip:
  00020	8a 07		 mov	 al, BYTE PTR [edi]
  00022	47		 inc	 edi
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL22@FindShip

; 3307 : 
; 3308 :         ListIter<Ship> ship_iter = ships;

  00027	8d 41 4c	 lea	 eax, DWORD PTR [ecx+76]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0002a	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _ship_iter$1[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00031	8d 4d f0	 lea	 ecx, DWORD PTR _ship_iter$1[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00034	89 45 f0	 mov	 DWORD PTR _ship_iter$1[ebp], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3306 :         int   name_len = strlen(ship_name);

  00037	2b fa		 sub	 edi, edx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00039	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  0003e	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3309 :         while (++ship_iter && !ship) {

  00040	74 4b		 je	 SHORT $LN26@FindShip
$LL2@FindShip:
  00042	85 db		 test	 ebx, ebx
  00044	75 47		 jne	 SHORT $LN26@FindShip

; 3310 :             Ship* test = ship_iter.value();

  00046	8d 4d f0	 lea	 ecx, DWORD PTR _ship_iter$1[ebp]
  00049	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value

; 3311 :             if (!strncmp(test->Name(), ship_name, name_len)) {

  0004e	57		 push	 edi
  0004f	ff 75 08	 push	 DWORD PTR _ship_name$[ebp]
  00052	89 45 f8	 mov	 DWORD PTR _test$1$[ebp], eax
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  00055	8d 70 10	 lea	 esi, DWORD PTR [eax+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3311 :             if (!strncmp(test->Name(), ship_name, name_len)) {

  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 _strncmp
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	85 c0		 test	 eax, eax
  00063	75 1c		 jne	 SHORT $LN5@FindShip

; 3312 :                 int test_len = strlen(test->Name());

  00065	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL23@FindShip:
  00068	8a 06		 mov	 al, BYTE PTR [esi]
  0006a	46		 inc	 esi
  0006b	84 c0		 test	 al, al
  0006d	75 f9		 jne	 SHORT $LL23@FindShip

; 3313 : 
; 3314 :                 // The only fuzzy match is for element indices.
; 3315 :                 // The desired name "Alpha" matches "Alpha 1" and "Alpha 2"
; 3316 :                 // but not "Alpha-Centauri"
; 3317 : 
; 3318 :                 if (test_len > name_len && test->Name()[name_len] != ' ')

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _test$1$[ebp]
  00072	2b f1		 sub	 esi, ecx
  00074	3b f7		 cmp	 esi, edi
  00076	7e 07		 jle	 SHORT $LN6@FindShip
  00078	80 7c 38 10 20	 cmp	 BYTE PTR [eax+edi+16], 32 ; 00000020H
  0007d	75 02		 jne	 SHORT $LN5@FindShip
$LN6@FindShip:

; 3319 :                 continue;
; 3320 : 
; 3321 :                 ship = test;

  0007f	8b d8		 mov	 ebx, eax
$LN5@FindShip:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00081	8d 4d f0	 lea	 ecx, DWORD PTR _ship_iter$1[ebp]
  00084	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00089	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3309 :         while (++ship_iter && !ship) {

  0008b	75 b5		 jne	 SHORT $LL2@FindShip
$LN26@FindShip:

; 3322 :             }
; 3323 :         }
; 3324 :     }
; 3325 : 
; 3326 :     return ship;
; 3327 : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	8b c3		 mov	 eax, ebx
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?FindShip@SimRegion@@QAEPAVShip@@PBD@Z ENDP		; SimRegion::FindShip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_ship_iter$ = -8					; size = 8
_objid$ = 8						; size = 4
?FindShipByObjID@SimRegion@@UAEPAVShip@@K@Z PROC	; SimRegion::FindShipByObjID
; _this$ = ecx

; 3331 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 3333 : 
; 3334 :     ListIter<Ship> ship_iter = ships;

  0000b	8d 41 4c	 lea	 eax, DWORD PTR [ecx+76]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0000e	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR _ship_iter$[esp+24], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3331 : {

  00016	57		 push	 edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00017	8d 4c 24 10	 lea	 ecx, DWORD PTR _ship_iter$[esp+24]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0001b	89 44 24 10	 mov	 DWORD PTR _ship_iter$[esp+24], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3332 :     Ship* ship = 0;

  0001f	33 f6		 xor	 esi, esi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00021	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00026	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3335 :     while (++ship_iter && !ship) {

  00028	74 3c		 je	 SHORT $LN17@FindShipBy
  0002a	8b 5d 08	 mov	 ebx, DWORD PTR _objid$[ebp]
  0002d	0f 1f 00	 npad	 3
$LL2@FindShipBy:
  00030	85 f6		 test	 esi, esi
  00032	75 32		 jne	 SHORT $LN17@FindShipBy

; 3336 :         Ship* test = ship_iter.value();

  00034	8d 4c 24 10	 lea	 ecx, DWORD PTR _ship_iter$[esp+24]
  00038	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value
  0003d	8b f8		 mov	 edi, eax
  0003f	8b 07		 mov	 eax, DWORD PTR [edi]
  00041	8b 80 ac 00 00
	00		 mov	 eax, DWORD PTR [eax+172]
  00047	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetObjID@SimObject@@UBEKXZ ; SimObject::GetObjID
  0004c	75 23		 jne	 SHORT $LN19@FindShipBy
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 86   :     virtual DWORD        GetObjID()                 const { return objid;   }

  0004e	8b 87 d8 01 00
	00		 mov	 eax, DWORD PTR [edi+472]
$LN6@FindShipBy:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3337 :         if (test->GetObjID() == objid)

  00054	3b c3		 cmp	 eax, ebx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00056	8d 4c 24 10	 lea	 ecx, DWORD PTR _ship_iter$[esp+24]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3337 :         if (test->GetObjID() == objid)

  0005a	0f 44 f7	 cmove	 esi, edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0005d	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00062	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3335 :     while (++ship_iter && !ship) {

  00064	75 ca		 jne	 SHORT $LL2@FindShipBy
$LN17@FindShipBy:

; 3338 :         ship = test;
; 3339 :     }
; 3340 : 
; 3341 :     return ship;
; 3342 : }

  00066	5f		 pop	 edi
  00067	8b c6		 mov	 eax, esi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
$LN19@FindShipBy:
  00071	8b cf		 mov	 ecx, edi

; 3337 :         if (test->GetObjID() == objid)

  00073	ff d0		 call	 eax
  00075	eb dd		 jmp	 SHORT $LN6@FindShipBy
?FindShipByObjID@SimRegion@@UAEPAVShip@@K@Z ENDP	; SimRegion::FindShipByObjID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
_drone_iter$1 = -8					; size = 8
_shot_iter$ = -8					; size = 8
_objid$ = 8						; size = 4
?FindShotByObjID@SimRegion@@UAEPAVShot@@K@Z PROC	; SimRegion::FindShotByObjID
; _this$ = ecx

; 3346 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	8b c1		 mov	 eax, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0000b	c7 44 24 08 ff
	ff ff ff	 mov	 DWORD PTR _shot_iter$[esp+16], -1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3346 : {

  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	89 44 24 08	 mov	 DWORD PTR _this$1$[esp+20], eax
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00019	8d 4c 24 0c	 lea	 ecx, DWORD PTR _shot_iter$[esp+20]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3349 :     ListIter<Shot> shot_iter = shots;

  0001d	83 c0 7c	 add	 eax, 124		; 0000007cH
  00020	33 f6		 xor	 esi, esi
  00022	57		 push	 edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00023	89 44 24 10	 mov	 DWORD PTR _shot_iter$[esp+24], eax

; 108  :    int operator++() { return next() != 0; }

  00027	e8 00 00 00 00	 call	 ?next@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::next
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3350 :     while (++shot_iter && !shot) {

  0002c	8b 5d 08	 mov	 ebx, DWORD PTR _objid$[ebp]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0002f	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3350 :     while (++shot_iter && !shot) {

  00031	74 42		 je	 SHORT $LN32@FindShotBy
$LL2@FindShotBy:
  00033	85 f6		 test	 esi, esi
  00035	0f 85 92 00 00
	00		 jne	 $LN33@FindShotBy

; 3351 :         Shot* test = shot_iter.value();

  0003b	8d 4c 24 10	 lea	 ecx, DWORD PTR _shot_iter$[esp+24]
  0003f	e8 00 00 00 00	 call	 ?value@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::value
  00044	8b f8		 mov	 edi, eax
  00046	8b 07		 mov	 eax, DWORD PTR [edi]
  00048	8b 80 ac 00 00
	00		 mov	 eax, DWORD PTR [eax+172]
  0004e	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetObjID@SimObject@@UBEKXZ ; SimObject::GetObjID
  00053	0f 85 7f 00 00
	00		 jne	 $LN37@FindShotBy
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 86   :     virtual DWORD        GetObjID()                 const { return objid;   }

  00059	8b 87 d8 01 00
	00		 mov	 eax, DWORD PTR [edi+472]
$LN10@FindShotBy:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3352 :         if (test->GetObjID() == objid)

  0005f	3b c3		 cmp	 eax, ebx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00061	8d 4c 24 10	 lea	 ecx, DWORD PTR _shot_iter$[esp+24]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3352 :         if (test->GetObjID() == objid)

  00065	0f 44 f7	 cmove	 esi, edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00068	e8 00 00 00 00	 call	 ?next@?$ListIter@VShot@@@@QAEPAVShot@@XZ ; ListIter<Shot>::next
  0006d	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3350 :     while (++shot_iter && !shot) {

  0006f	75 c2		 jne	 SHORT $LL2@FindShotBy

; 3353 :         shot = test;
; 3354 :     }
; 3355 : 
; 3356 :     if (!shot) {

  00071	85 f6		 test	 esi, esi
  00073	75 58		 jne	 SHORT $LN33@FindShotBy
$LN32@FindShotBy:

; 3357 :         ListIter<Drone> drone_iter = drones;

  00075	8b 44 24 0c	 mov	 eax, DWORD PTR _this$1$[esp+24]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00079	8d 4c 24 10	 lea	 ecx, DWORD PTR _drone_iter$1[esp+24]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3357 :         ListIter<Drone> drone_iter = drones;

  0007d	05 88 00 00 00	 add	 eax, 136		; 00000088H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00082	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _drone_iter$1[esp+28], -1
  0008a	89 44 24 10	 mov	 DWORD PTR _drone_iter$1[esp+24], eax

; 108  :    int operator++() { return next() != 0; }

  0008e	e8 00 00 00 00	 call	 ?next@?$ListIter@VDrone@@@@QAEPAVDrone@@XZ ; ListIter<Drone>::next
  00093	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3358 :         while (++drone_iter && !shot) {

  00095	74 36		 je	 SHORT $LN33@FindShotBy
$LL4@FindShotBy:
  00097	85 f6		 test	 esi, esi
  00099	75 32		 jne	 SHORT $LN33@FindShotBy

; 3359 :             Drone* test = drone_iter.value();

  0009b	8d 4c 24 10	 lea	 ecx, DWORD PTR _drone_iter$1[esp+24]
  0009f	e8 00 00 00 00	 call	 ?value@?$ListIter@VDrone@@@@QAEPAVDrone@@XZ ; ListIter<Drone>::value
  000a4	8b f8		 mov	 edi, eax
  000a6	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000a8	8b 81 ac 00 00
	00		 mov	 eax, DWORD PTR [ecx+172]
  000ae	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetObjID@SimObject@@UBEKXZ ; SimObject::GetObjID
  000b3	75 29		 jne	 SHORT $LN13@FindShotBy
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 86   :     virtual DWORD        GetObjID()                 const { return objid;   }

  000b5	8b 87 d8 01 00
	00		 mov	 eax, DWORD PTR [edi+472]
$LN12@FindShotBy:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3360 :             if (test->GetObjID() == objid)

  000bb	3b c3		 cmp	 eax, ebx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000bd	8d 4c 24 10	 lea	 ecx, DWORD PTR _drone_iter$1[esp+24]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3360 :             if (test->GetObjID() == objid)

  000c1	0f 44 f7	 cmove	 esi, edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000c4	e8 00 00 00 00	 call	 ?next@?$ListIter@VDrone@@@@QAEPAVDrone@@XZ ; ListIter<Drone>::next
  000c9	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3358 :         while (++drone_iter && !shot) {

  000cb	75 ca		 jne	 SHORT $LL4@FindShotBy
$LN33@FindShotBy:

; 3361 :             shot = test;
; 3362 :         }
; 3363 :     }
; 3364 : 
; 3365 :     return shot;
; 3366 : }

  000cd	5f		 pop	 edi
  000ce	8b c6		 mov	 eax, esi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
$LN37@FindShotBy:
  000d8	8b cf		 mov	 ecx, edi

; 3352 :         if (test->GetObjID() == objid)

  000da	ff d0		 call	 eax
  000dc	eb 81		 jmp	 SHORT $LN10@FindShotBy
$LN13@FindShotBy:
  000de	8b cf		 mov	 ecx, edi

; 3360 :             if (test->GetObjID() == objid)

  000e0	ff d0		 call	 eax
  000e2	eb d7		 jmp	 SHORT $LN12@FindShotBy
?FindShotByObjID@SimRegion@@UAEPAVShot@@K@Z ENDP	; SimRegion::FindShotByObjID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_ship_iter$ = -52					; size = 8
_this$GSCopy$1$ = -44					; size = 4
_ship_name$1 = -40					; size = 33
__$ArrayPad$ = -4					; size = 4
?DockShips@SimRegion@@IAEXXZ PROC			; SimRegion::DockShips
; _this$ = ecx

; 3372 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b f9		 mov	 edi, ecx

; 3373 :     if (ships.size() == 0)

  00015	83 7f 4c 00	 cmp	 DWORD PTR [edi+76], 0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  00019	8d 47 4c	 lea	 eax, DWORD PTR [edi+76]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3372 : {

  0001c	89 7d d4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi

; 3373 :     if (ships.size() == 0)

  0001f	0f 84 2b 01 00
	00		 je	 $LN3@DockShips
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00025	8d 4d cc	 lea	 ecx, DWORD PTR _ship_iter$[ebp]

; 75   :    bool     isEmpty() const      { return !items; }
; 76   : 
; 77   :    bool     contains(const T* val) const;
; 78   :    int      count(const T* val)    const;
; 79   :    int      index(const T* val)    const;
; 80   :    T*       find(const T* val)     const;
; 81   : 
; 82   :    void     sort();
; 83   :    void     shuffle();
; 84   : 
; 85   : private:
; 86   :    typedef  T* PTR;
; 87   :    void     qsort(T** a, int lo, int hi);
; 88   :    void     resize(int newsize);
; 89   :    bool     check(int& index) const;
; 90   :    void     swap(T** a, int i, int j);
; 91   : 
; 92   :    int      items;
; 93   :    int      extent;
; 94   :    PTR*     array;
; 95   : 
; 96   :    friend class ListIter<T>;
; 97   : };
; 98   : 
; 99   : // +-------------------------------------------------------------------+
; 100  : 
; 101  : template <class T> class ListIter
; 102  : {
; 103  : public:
; 104  :    ListIter()                       : list(0),      step(-1)      { }
; 105  :    ListIter(const ListIter<T>& i)   : list(i.list), step(i.step)  { }
; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00028	89 45 cc	 mov	 DWORD PTR _ship_iter$[ebp], eax
  0002b	c7 45 d0 ff ff
	ff ff		 mov	 DWORD PTR _ship_iter$[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  00032	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00037	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3377 :     while (++ship_iter) {

  00039	0f 84 11 01 00
	00		 je	 $LN3@DockShips
  0003f	90		 npad	 1
$LL2@DockShips:

; 3378 :         Ship* ship   = ship_iter.value();

  00040	8d 4d cc	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
  00043	e8 00 00 00 00	 call	 ?value@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::value
  00048	8b f0		 mov	 esi, eax
  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	8b 80 d4 00 00
	00		 mov	 eax, DWORD PTR [eax+212]
  00052	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetFlightPhase@Ship@@UBEHXZ ; Ship::GetFlightPhase
  00057	0f 85 04 01 00
	00		 jne	 $LN54@DockShips
; File d:\programming\starshatter\trunk\stars45\ship.h

; 182  :     virtual int       GetFlightPhase()           const { return flight_phase; }

  0005d	8b 86 10 03 00
	00		 mov	 eax, DWORD PTR [esi+784]
$LN15@DockShips:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3379 :         int   docked = (ship->GetFlightPhase() == Ship::DOCKED);

  00063	85 c0		 test	 eax, eax

; 3380 : 
; 3381 :         if (docked) {

  00065	0f 85 d5 00 00
	00		 jne	 $LN13@DockShips

; 3382 :             sim->ProcessEventTrigger(MissionEvent::TRIGGER_DOCK, 0, ship->Name());

  0006b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  0006e	8d 5e 10	 lea	 ebx, DWORD PTR [esi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3382 :             sim->ProcessEventTrigger(MissionEvent::TRIGGER_DOCK, 0, ship->Name());

  00071	50		 push	 eax
  00072	53		 push	 ebx
  00073	50		 push	 eax
  00074	6a 05		 push	 5
  00076	e8 00 00 00 00	 call	 ?ProcessEventTrigger@Sim@@QAEXHHPBDH@Z ; Sim::ProcessEventTrigger
; File d:\programming\starshatter\trunk\stars45\ship.h

; 210  :     Ship*             GetCarrier()       const { return carrier;       }

  0007b	8b be 2c 04 00
	00		 mov	 edi, DWORD PTR [esi+1068]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3387 :             if (carrier) {

  00081	85 ff		 test	 edi, edi
  00083	74 41		 je	 SHORT $LN10@DockShips

; 3388 :                 ShipStats* s = ShipStats::Find(ship->Name());

  00085	8b cb		 mov	 ecx, ebx
  00087	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find
  0008c	8b d0		 mov	 edx, eax

; 3389 :                 if (s) {

  0008e	85 d2		 test	 edx, edx
  00090	74 1d		 je	 SHORT $LN9@DockShips

; 3390 :                     if (ship->IsAirborne())

  00092	8b ce		 mov	 ecx, esi
  00094	e8 00 00 00 00	 call	 ?IsAirborne@Ship@@QBE_NXZ ; Ship::IsAirborne

; 3391 :                     s->AddEvent(SimEvent::LAND, carrier->Name());

  00099	51		 push	 ecx
  0009a	84 c0		 test	 al, al
  0009c	8b ca		 mov	 ecx, edx
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  0009e	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3391 :                     s->AddEvent(SimEvent::LAND, carrier->Name());

  000a1	50		 push	 eax
  000a2	74 04		 je	 SHORT $LN8@DockShips
  000a4	6a 03		 push	 3

; 3392 :                     else

  000a6	eb 02		 jmp	 SHORT $LN53@DockShips
$LN8@DockShips:

; 3393 :                     s->AddEvent(SimEvent::DOCK, carrier->Name());

  000a8	6a 02		 push	 2
$LN53@DockShips:
  000aa	e8 00 00 00 00	 call	 ?AddEvent@ShipStats@@QAEPAVSimEvent@@HPBD0@Z ; ShipStats::AddEvent
$LN9@DockShips:
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  000af	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3396 :                 ShipStats* c = ShipStats::Find(carrier->Name());

  000b2	e8 00 00 00 00	 call	 ?Find@ShipStats@@SAPAV1@PBD@Z ; ShipStats::Find

; 3397 :                 if (c) c->AddEvent(SimEvent::RECOVER_SHIP, ship->Name());

  000b7	85 c0		 test	 eax, eax
  000b9	74 0b		 je	 SHORT $LN10@DockShips
  000bb	51		 push	 ecx
  000bc	53		 push	 ebx
  000bd	6a 0c		 push	 12			; 0000000cH
  000bf	8b c8		 mov	 ecx, eax
  000c1	e8 00 00 00 00	 call	 ?AddEvent@ShipStats@@QAEPAVSimEvent@@HPBD0@Z ; ShipStats::AddEvent
$LN10@DockShips:

; 3401 :             int  player_docked = (player_ship == ship);

  000c6	8b 45 d4	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  000c9	33 db		 xor	 ebx, ebx
  000cb	39 70 44	 cmp	 DWORD PTR [eax+68], esi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 124  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(

  000ce	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  000d1	50		 push	 eax
  000d2	8d 45 d8	 lea	 eax, DWORD PTR _ship_name$1[ebp]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3401 :             int  player_docked = (player_ship == ship);

  000d5	0f 94 c3	 sete	 bl
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 124  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(

  000d8	6a 21		 push	 33			; 00000021H
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _strcpy_s
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3405 :             selection.remove(ship);

  000e0	8b 4d d4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 124  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(

  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3405 :             selection.remove(ship);

  000e6	56		 push	 esi
  000e7	8d 49 64	 lea	 ecx, DWORD PTR [ecx+100]
  000ea	e8 00 00 00 00	 call	 ?remove@?$List@VShip@@@@QAEPAVShip@@PBV2@@Z ; List<Ship>::remove

; 3406 :             dead_ships.insert(ship_iter.removeItem());

  000ef	6a 00		 push	 0
  000f1	8d 4d cc	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
  000f4	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::removeItem
  000f9	8b 4d d4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000fc	50		 push	 eax
  000fd	8d 49 70	 lea	 ecx, DWORD PTR [ecx+112]
  00100	e8 00 00 00 00	 call	 ?insert@?$List@VShip@@@@QAEXPBVShip@@H@Z ; List<Ship>::insert

; 3407 :             ship->Destroy();

  00105	8b 06		 mov	 eax, DWORD PTR [esi]
  00107	8b ce		 mov	 ecx, esi
  00109	ff 90 84 01 00
	00		 call	 DWORD PTR [eax+388]

; 3408 : 
; 3409 :             if (player_docked) {

  0010f	85 db		 test	 ebx, ebx
  00111	74 11		 je	 SHORT $LN12@DockShips

; 3410 :                 // close mission, return to menu:
; 3411 :                 Starshatter* stars = Starshatter::GetInstance();

  00113	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?instance@Starshatter@@1PAV1@A ; Starshatter::instance

; 3412 :                 if (stars)

  00119	85 c9		 test	 ecx, ecx
  0011b	74 07		 je	 SHORT $LN12@DockShips

; 3413 :                 stars->SetGameMode(Starshatter::PLAN_MODE);

  0011d	6a 04		 push	 4
  0011f	e8 00 00 00 00	 call	 ?SetGameMode@Starshatter@@QAEXH@Z ; Starshatter::SetGameMode
$LN12@DockShips:

; 3414 :             }
; 3415 : 
; 3416 :             if (carrier)

  00124	85 ff		 test	 edi, edi
  00126	74 15		 je	 SHORT $LN52@DockShips
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 102  :     const char*       Name()      const { return name;       }

  00128	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3417 :             Print("    %s Docked with %s\n", ship_name, carrier->Name());

  0012b	50		 push	 eax
  0012c	8d 45 d8	 lea	 eax, DWORD PTR _ship_name$1[ebp]
  0012f	50		 push	 eax
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CIBPJMDL@?5?5?5?5?$CFs?5Docked?5with?5?$CFs?6?$AA@
  00135	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  0013a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@DockShips:
  0013d	8b 7d d4	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN13@DockShips:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00140	8d 4d cc	 lea	 ecx, DWORD PTR _ship_iter$[ebp]
  00143	e8 00 00 00 00	 call	 ?next@?$ListIter@VShip@@@@QAEPAVShip@@XZ ; ListIter<Ship>::next
  00148	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3377 :     while (++ship_iter) {

  0014a	0f 85 f0 fe ff
	ff		 jne	 $LL2@DockShips
$LN3@DockShips:

; 3418 :         }
; 3419 :     }
; 3420 : }

  00150	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	33 cd		 xor	 ecx, ebp
  00157	5b		 pop	 ebx
  00158	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c3		 ret	 0
$LN54@DockShips:
  00161	8b ce		 mov	 ecx, esi

; 3379 :         int   docked = (ship->GetFlightPhase() == Ship::DOCKED);

  00163	ff d0		 call	 eax
  00165	e9 f9 fe ff ff	 jmp	 $LN15@DockShips
?DockShips@SimRegion@@IAEXXZ ENDP			; SimRegion::DockShips
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_ship$ = 8						; size = 4
?InsertObject@SimRegion@@UAEXPAVShip@@@Z PROC		; SimRegion::InsertObject
; _this$ = ecx

; 3426 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3427 :     if (!ship) return;

  00004	8b 75 08	 mov	 esi, DWORD PTR _ship$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	0f 84 9c 00 00
	00		 je	 $LN15@InsertObje
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	53		 push	 ebx
  00015	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  0001b	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  00020	0f 85 8e 00 00
	00		 jne	 $LN20@InsertObje
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00026	8b 9e c8 01 00
	00		 mov	 ebx, DWORD PTR [esi+456]
$LN9@InsertObje:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3431 :     if (orig != this) {

  0002c	3b df		 cmp	 ebx, edi
  0002e	74 7d		 je	 SHORT $LN19@InsertObje

; 3432 :         if (orig != 0) {

  00030	85 db		 test	 ebx, ebx
  00032	74 32		 je	 SHORT $LN4@InsertObje

; 3433 :             if (orig->active)

  00034	80 7b 40 00	 cmp	 BYTE PTR [ebx+64], 0
  00038	74 11		 je	 SHORT $LN11@InsertObje

; 3434 :             ship->Deactivate(sim->scene);

  0003a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0003d	8b ce		 mov	 ecx, esi
  0003f	8b 16		 mov	 edx, DWORD PTR [esi]
  00041	83 c0 0c	 add	 eax, 12			; 0000000cH
  00044	50		 push	 eax
  00045	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]
$LN11@InsertObje:

; 3435 : 
; 3436 :             orig->ships.remove(ship);

  0004b	56		 push	 esi
  0004c	8d 4b 4c	 lea	 ecx, DWORD PTR [ebx+76]
  0004f	e8 00 00 00 00	 call	 ?remove@?$List@VShip@@@@QAEPAVShip@@PBV2@@Z ; List<Ship>::remove

; 3437 :             orig->carriers.remove(ship);

  00054	56		 push	 esi
  00055	8d 4b 58	 lea	 ecx, DWORD PTR [ebx+88]
  00058	e8 00 00 00 00	 call	 ?remove@?$List@VShip@@@@QAEPAVShip@@PBV2@@Z ; List<Ship>::remove

; 3438 :             orig->selection.remove(ship);

  0005d	56		 push	 esi
  0005e	8d 4b 64	 lea	 ecx, DWORD PTR [ebx+100]
  00061	e8 00 00 00 00	 call	 ?remove@?$List@VShip@@@@QAEPAVShip@@PBV2@@Z ; List<Ship>::remove
$LN4@InsertObje:

; 3439 :         }
; 3440 : 
; 3441 :         ships.append(ship);

  00066	56		 push	 esi
  00067	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  0006a	e8 00 00 00 00	 call	 ?append@?$List@VShip@@@@QAEXPBVShip@@@Z ; List<Ship>::append

; 3442 : 
; 3443 :         if (ship->NumFlightDecks())

  0006f	8b ce		 mov	 ecx, esi
  00071	e8 00 00 00 00	 call	 ?NumFlightDecks@Ship@@QBEHXZ ; Ship::NumFlightDecks
  00076	85 c0		 test	 eax, eax
  00078	74 09		 je	 SHORT $LN6@InsertObje

; 3444 :         carriers.append(ship);

  0007a	56		 push	 esi
  0007b	8d 4f 58	 lea	 ecx, DWORD PTR [edi+88]
  0007e	e8 00 00 00 00	 call	 ?append@?$List@VShip@@@@QAEXPBVShip@@@Z ; List<Ship>::append
$LN6@InsertObje:

; 3445 : 
; 3446 :         TranslateObject(ship);

  00083	56		 push	 esi
  00084	8b cf		 mov	 ecx, edi
  00086	e8 00 00 00 00	 call	 ?TranslateObject@SimRegion@@IAEXPAVSimObject@@@Z ; SimRegion::TranslateObject

; 3447 :         ship->SetRegion(this);

  0008b	8b 06		 mov	 eax, DWORD PTR [esi]
  0008d	8b ce		 mov	 ecx, esi
  0008f	57		 push	 edi
  00090	ff 90 94 00 00
	00		 call	 DWORD PTR [eax+148]

; 3448 :         
; 3449 :         if (active)

  00096	80 7f 40 00	 cmp	 BYTE PTR [edi+64], 0
  0009a	74 11		 je	 SHORT $LN19@InsertObje

; 3450 :         ship->Activate(sim->scene);

  0009c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0009f	8b ce		 mov	 ecx, esi
  000a1	8b 16		 mov	 edx, DWORD PTR [esi]
  000a3	83 c0 0c	 add	 eax, 12			; 0000000cH
  000a6	50		 push	 eax
  000a7	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]
$LN19@InsertObje:
  000ad	5b		 pop	 ebx
$LN15@InsertObje:
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi

; 3451 :     }
; 3452 : }

  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
$LN20@InsertObje:
  000b4	8b ce		 mov	 ecx, esi

; 3428 : 
; 3429 :     SimRegion* orig = ship->GetRegion();

  000b6	ff d0		 call	 eax
  000b8	8b d8		 mov	 ebx, eax
  000ba	e9 6d ff ff ff	 jmp	 $LN9@InsertObje
?InsertObject@SimRegion@@UAEXPAVShip@@@Z ENDP		; SimRegion::InsertObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_shot$ = 8						; size = 4
?InsertObject@SimRegion@@UAEXPAVShot@@@Z PROC		; SimRegion::InsertObject
; _this$ = ecx

; 3456 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3457 :     if (!shot) return;

  00004	8b 75 08	 mov	 esi, DWORD PTR _shot$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 7f		 je	 SHORT $LN12@InsertObje
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00016	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  0001b	75 76		 jne	 SHORT $LN18@InsertObje
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0001d	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
$LN8@InsertObje:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3461 :     if (orig != this) {

  00023	3b c7		 cmp	 eax, edi
  00025	74 66		 je	 SHORT $LN12@InsertObje

; 3462 :         if (orig != 0)

  00027	85 c0		 test	 eax, eax
  00029	74 09		 je	 SHORT $LN4@InsertObje

; 3463 :         orig->shots.remove(shot);

  0002b	56		 push	 esi
  0002c	8d 48 7c	 lea	 ecx, DWORD PTR [eax+124]
  0002f	e8 00 00 00 00	 call	 ?remove@?$List@VShot@@@@QAEPAVShot@@PBV2@@Z ; List<Shot>::remove
$LN4@InsertObje:

; 3464 : 
; 3465 :         shots.append(shot);

  00034	56		 push	 esi
  00035	8d 4f 7c	 lea	 ecx, DWORD PTR [edi+124]
  00038	e8 00 00 00 00	 call	 ?append@?$List@VShot@@@@QAEXPBVShot@@@Z ; List<Shot>::append

; 3466 :         if (shot->IsDrone())

  0003d	8b 06		 mov	 eax, DWORD PTR [esi]
  0003f	8b ce		 mov	 ecx, esi
  00041	8b 80 c4 00 00
	00		 mov	 eax, DWORD PTR [eax+196]
  00047	ff d0		 call	 eax
  00049	84 c0		 test	 al, al
  0004b	74 0c		 je	 SHORT $LN5@InsertObje

; 3467 :         drones.append((Drone*) shot);

  0004d	56		 push	 esi
  0004e	8d 8f 88 00 00
	00		 lea	 ecx, DWORD PTR [edi+136]
  00054	e8 00 00 00 00	 call	 ?append@?$List@VDrone@@@@QAEXPBVDrone@@@Z ; List<Drone>::append
$LN5@InsertObje:

; 3468 : 
; 3469 :         TranslateObject(shot);

  00059	56		 push	 esi
  0005a	8b cf		 mov	 ecx, edi
  0005c	e8 00 00 00 00	 call	 ?TranslateObject@SimRegion@@IAEXPAVSimObject@@@Z ; SimRegion::TranslateObject
  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [eax+148]
  00069	3d 00 00 00 00	 cmp	 eax, OFFSET ?SetRegion@SimObject@@UAEXPAVSimRegion@@@Z ; SimObject::SetRegion
  0006e	75 29		 jne	 SHORT $LN11@InsertObje
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 77   :     virtual void         SetRegion(SimRegion* rgn)        { region = rgn;  }

  00070	89 be c8 01 00
	00		 mov	 DWORD PTR [esi+456], edi
$LN10@InsertObje:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3472 :         if (active)

  00076	80 7f 40 00	 cmp	 BYTE PTR [edi+64], 0
  0007a	74 11		 je	 SHORT $LN12@InsertObje

; 3473 :         shot->Activate(sim->scene);

  0007c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0007f	8b ce		 mov	 ecx, esi
  00081	8b 16		 mov	 edx, DWORD PTR [esi]
  00083	83 c0 0c	 add	 eax, 12			; 0000000cH
  00086	50		 push	 eax
  00087	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]
$LN12@InsertObje:
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi

; 3474 :     }
; 3475 : }

  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
$LN18@InsertObje:
  00093	8b ce		 mov	 ecx, esi

; 3458 : 
; 3459 :     SimRegion* orig = shot->GetRegion();

  00095	ff d0		 call	 eax
  00097	eb 8a		 jmp	 SHORT $LN8@InsertObje
$LN11@InsertObje:
  00099	57		 push	 edi
  0009a	8b ce		 mov	 ecx, esi

; 3470 :         shot->SetRegion(this);

  0009c	ff d0		 call	 eax
  0009e	eb d6		 jmp	 SHORT $LN10@InsertObje
?InsertObject@SimRegion@@UAEXPAVShot@@@Z ENDP		; SimRegion::InsertObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_exp$ = 8						; size = 4
?InsertObject@SimRegion@@UAEXPAVExplosion@@@Z PROC	; SimRegion::InsertObject
; _this$ = ecx

; 3479 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3480 :     if (!exp) return;

  00004	8b 75 08	 mov	 esi, DWORD PTR _exp$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 69		 je	 SHORT $LN11@InsertObje
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00016	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  0001b	75 60		 jne	 SHORT $LN17@InsertObje
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0001d	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
$LN7@InsertObje:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3484 :     if (orig != this) {

  00023	3b c7		 cmp	 eax, edi
  00025	74 50		 je	 SHORT $LN11@InsertObje

; 3485 :         if (orig != 0)

  00027	85 c0		 test	 eax, eax
  00029	74 0c		 je	 SHORT $LN4@InsertObje

; 3486 :         orig->explosions.remove(exp);

  0002b	56		 push	 esi
  0002c	8d 88 94 00 00
	00		 lea	 ecx, DWORD PTR [eax+148]
  00032	e8 00 00 00 00	 call	 ?remove@?$List@VExplosion@@@@QAEPAVExplosion@@PBV2@@Z ; List<Explosion>::remove
$LN4@InsertObje:

; 3487 : 
; 3488 :         explosions.append(exp);

  00037	56		 push	 esi
  00038	8d 8f 94 00 00
	00		 lea	 ecx, DWORD PTR [edi+148]
  0003e	e8 00 00 00 00	 call	 ?append@?$List@VExplosion@@@@QAEXPBVExplosion@@@Z ; List<Explosion>::append

; 3489 :         TranslateObject(exp);

  00043	56		 push	 esi
  00044	8b cf		 mov	 ecx, edi
  00046	e8 00 00 00 00	 call	 ?TranslateObject@SimRegion@@IAEXPAVSimObject@@@Z ; SimRegion::TranslateObject
  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [eax+148]
  00053	3d 00 00 00 00	 cmp	 eax, OFFSET ?SetRegion@SimObject@@UAEXPAVSimRegion@@@Z ; SimObject::SetRegion
  00058	75 29		 jne	 SHORT $LN10@InsertObje
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 77   :     virtual void         SetRegion(SimRegion* rgn)        { region = rgn;  }

  0005a	89 be c8 01 00
	00		 mov	 DWORD PTR [esi+456], edi
$LN9@InsertObje:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3492 :         if (active)

  00060	80 7f 40 00	 cmp	 BYTE PTR [edi+64], 0
  00064	74 11		 je	 SHORT $LN11@InsertObje

; 3493 :         exp->Activate(sim->scene);

  00066	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00069	8b ce		 mov	 ecx, esi
  0006b	8b 16		 mov	 edx, DWORD PTR [esi]
  0006d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00070	50		 push	 eax
  00071	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]
$LN11@InsertObje:
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi

; 3494 :     }
; 3495 : }

  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
$LN17@InsertObje:
  0007d	8b ce		 mov	 ecx, esi

; 3481 : 
; 3482 :     SimRegion* orig = exp->GetRegion();

  0007f	ff d0		 call	 eax
  00081	eb a0		 jmp	 SHORT $LN7@InsertObje
$LN10@InsertObje:
  00083	57		 push	 edi
  00084	8b ce		 mov	 ecx, esi

; 3490 :         exp->SetRegion(this);

  00086	ff d0		 call	 eax
  00088	eb d6		 jmp	 SHORT $LN9@InsertObje
?InsertObject@SimRegion@@UAEXPAVExplosion@@@Z ENDP	; SimRegion::InsertObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_d$ = 8							; size = 4
?InsertObject@SimRegion@@UAEXPAVDebris@@@Z PROC		; SimRegion::InsertObject
; _this$ = ecx

; 3499 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3500 :     if (!d) return;

  00004	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 69		 je	 SHORT $LN11@InsertObje
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00016	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  0001b	75 60		 jne	 SHORT $LN17@InsertObje
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0001d	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
$LN7@InsertObje:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3504 :     if (orig != this) {

  00023	3b c7		 cmp	 eax, edi
  00025	74 50		 je	 SHORT $LN11@InsertObje

; 3505 :         if (orig != 0)

  00027	85 c0		 test	 eax, eax
  00029	74 0c		 je	 SHORT $LN4@InsertObje

; 3506 :         orig->debris.remove(d);

  0002b	56		 push	 esi
  0002c	8d 88 a0 00 00
	00		 lea	 ecx, DWORD PTR [eax+160]
  00032	e8 00 00 00 00	 call	 ?remove@?$List@VDebris@@@@QAEPAVDebris@@PBV2@@Z ; List<Debris>::remove
$LN4@InsertObje:

; 3507 : 
; 3508 :         debris.append(d);

  00037	56		 push	 esi
  00038	8d 8f a0 00 00
	00		 lea	 ecx, DWORD PTR [edi+160]
  0003e	e8 00 00 00 00	 call	 ?append@?$List@VDebris@@@@QAEXPBVDebris@@@Z ; List<Debris>::append

; 3509 :         TranslateObject(d);

  00043	56		 push	 esi
  00044	8b cf		 mov	 ecx, edi
  00046	e8 00 00 00 00	 call	 ?TranslateObject@SimRegion@@IAEXPAVSimObject@@@Z ; SimRegion::TranslateObject
  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [eax+148]
  00053	3d 00 00 00 00	 cmp	 eax, OFFSET ?SetRegion@SimObject@@UAEXPAVSimRegion@@@Z ; SimObject::SetRegion
  00058	75 29		 jne	 SHORT $LN10@InsertObje
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 77   :     virtual void         SetRegion(SimRegion* rgn)        { region = rgn;  }

  0005a	89 be c8 01 00
	00		 mov	 DWORD PTR [esi+456], edi
$LN9@InsertObje:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3512 :         if (active)

  00060	80 7f 40 00	 cmp	 BYTE PTR [edi+64], 0
  00064	74 11		 je	 SHORT $LN11@InsertObje

; 3513 :         d->Activate(sim->scene);

  00066	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00069	8b ce		 mov	 ecx, esi
  0006b	8b 16		 mov	 edx, DWORD PTR [esi]
  0006d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00070	50		 push	 eax
  00071	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]
$LN11@InsertObje:
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi

; 3514 :     }
; 3515 : }

  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
$LN17@InsertObje:
  0007d	8b ce		 mov	 ecx, esi

; 3501 : 
; 3502 :     SimRegion* orig = d->GetRegion();

  0007f	ff d0		 call	 eax
  00081	eb a0		 jmp	 SHORT $LN7@InsertObje
$LN10@InsertObje:
  00083	57		 push	 edi
  00084	8b ce		 mov	 ecx, esi

; 3510 :         d->SetRegion(this);

  00086	ff d0		 call	 eax
  00088	eb d6		 jmp	 SHORT $LN9@InsertObje
?InsertObject@SimRegion@@UAEXPAVDebris@@@Z ENDP		; SimRegion::InsertObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_a$ = 8							; size = 4
?InsertObject@SimRegion@@UAEXPAVAsteroid@@@Z PROC	; SimRegion::InsertObject
; _this$ = ecx

; 3519 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3520 :     if (!a) return;

  00004	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 5d		 je	 SHORT $LN11@InsertObje
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Asteroid@@6B@
  00015	75 5a		 jne	 SHORT $LN17@InsertObje
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00017	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
$LN7@InsertObje:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3524 :     if (orig != this) {

  0001d	3b c7		 cmp	 eax, edi
  0001f	74 4a		 je	 SHORT $LN11@InsertObje

; 3525 :         if (orig != 0)

  00021	85 c0		 test	 eax, eax
  00023	74 0c		 je	 SHORT $LN4@InsertObje

; 3526 :         orig->asteroids.remove(a);

  00025	56		 push	 esi
  00026	8d 88 ac 00 00
	00		 lea	 ecx, DWORD PTR [eax+172]
  0002c	e8 00 00 00 00	 call	 ?remove@?$List@VAsteroid@@@@QAEPAVAsteroid@@PBV2@@Z ; List<Asteroid>::remove
$LN4@InsertObje:

; 3527 : 
; 3528 :         asteroids.append(a);

  00031	56		 push	 esi
  00032	8d 8f ac 00 00
	00		 lea	 ecx, DWORD PTR [edi+172]
  00038	e8 00 00 00 00	 call	 ?append@?$List@VAsteroid@@@@QAEXPBVAsteroid@@@Z ; List<Asteroid>::append

; 3529 :         TranslateObject(a);

  0003d	56		 push	 esi
  0003e	8b cf		 mov	 ecx, edi
  00040	e8 00 00 00 00	 call	 ?TranslateObject@SimRegion@@IAEXPAVSimObject@@@Z ; SimRegion::TranslateObject
  00045	8b 06		 mov	 eax, DWORD PTR [esi]
  00047	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Asteroid@@6B@
  0004c	75 2d		 jne	 SHORT $LN10@InsertObje
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 77   :     virtual void         SetRegion(SimRegion* rgn)        { region = rgn;  }

  0004e	89 be c8 01 00
	00		 mov	 DWORD PTR [esi+456], edi
$LN9@InsertObje:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3532 :         if (active)

  00054	80 7f 40 00	 cmp	 BYTE PTR [edi+64], 0
  00058	74 11		 je	 SHORT $LN11@InsertObje

; 3533 :         a->Activate(sim->scene);

  0005a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0005d	8b ce		 mov	 ecx, esi
  0005f	8b 16		 mov	 edx, DWORD PTR [esi]
  00061	83 c0 0c	 add	 eax, 12			; 0000000cH
  00064	50		 push	 eax
  00065	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]
$LN11@InsertObje:
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi

; 3534 :     }
; 3535 : }

  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
$LN17@InsertObje:
  00071	8b ce		 mov	 ecx, esi

; 3521 : 
; 3522 :     SimRegion* orig = a->GetRegion();

  00073	ff 90 90 00 00
	00		 call	 DWORD PTR [eax+144]
  00079	eb a2		 jmp	 SHORT $LN7@InsertObje
$LN10@InsertObje:
  0007b	57		 push	 edi
  0007c	8b ce		 mov	 ecx, esi

; 3530 :         a->SetRegion(this);

  0007e	ff 90 94 00 00
	00		 call	 DWORD PTR [eax+148]
  00084	eb ce		 jmp	 SHORT $LN9@InsertObje
?InsertObject@SimRegion@@UAEXPAVAsteroid@@@Z ENDP	; SimRegion::InsertObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_delta$1 = -24						; size = 24
_object$ = 8						; size = 4
?TranslateObject@SimRegion@@IAEXPAVSimObject@@@Z PROC	; SimRegion::TranslateObject
; _this$ = ecx

; 3541 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 3542 :     if (orbital_region)

  0000d	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00010	85 c0		 test	 eax, eax
  00012	74 12		 je	 SHORT $LN2@TranslateO
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00014	0f 10 40 60	 movups	 xmm0, XMMWORD PTR [eax+96]
  00018	f2 0f 10 50 70	 movsd	 xmm2, QWORD PTR [eax+112]

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  0001d	0f 11 47 20	 movups	 XMMWORD PTR [edi+32], xmm0
  00021	f2 0f 11 57 30	 movsd	 QWORD PTR [edi+48], xmm2
$LN2@TranslateO:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3545 :     if (object) {

  00026	8b 75 08	 mov	 esi, DWORD PTR _object$[ebp]
  00029	85 f6		 test	 esi, esi
  0002b	74 5c		 je	 SHORT $LN4@TranslateO
  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
  0002f	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00035	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  0003a	75 55		 jne	 SHORT $LN34@TranslateO
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0003c	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
$LN6@TranslateO:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3547 :         if (orig) {

  00042	85 c0		 test	 eax, eax
  00044	74 43		 je	 SHORT $LN4@TranslateO
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00046	f2 0f 10 4f 20	 movsd	 xmm1, QWORD PTR [edi+32]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3550 :             object->TranslateBy(delta);

  0004b	8d 4c 24 08	 lea	 ecx, DWORD PTR _delta$1[esp+32]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  0004f	f2 0f 5c 48 20	 subsd	 xmm1, QWORD PTR [eax+32]

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00054	f2 0f 10 57 28	 movsd	 xmm2, QWORD PTR [edi+40]
  00059	f2 0f 10 47 30	 movsd	 xmm0, QWORD PTR [edi+48]

; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  0005e	f2 0f 5c 50 28	 subsd	 xmm2, QWORD PTR [eax+40]
  00063	f2 0f 5c 40 30	 subsd	 xmm0, QWORD PTR [eax+48]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3550 :             object->TranslateBy(delta);

  00068	8b 06		 mov	 eax, DWORD PTR [esi]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 244  :     Point    OtherHand()             const { return Point(-x, z, y); }

  0006a	0f 57 0d 00 00
	00 00		 xorps	 xmm1, QWORD PTR __xmm@80000000000000008000000000000000
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3550 :             object->TranslateBy(delta);

  00071	51		 push	 ecx
  00072	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  00074	f2 0f 11 4c 24
	0c		 movsd	 QWORD PTR _delta$1[esp+36], xmm1
  0007a	f2 0f 11 44 24
	14		 movsd	 QWORD PTR _delta$1[esp+44], xmm0
  00080	f2 0f 11 54 24
	1c		 movsd	 QWORD PTR _delta$1[esp+52], xmm2
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3550 :             object->TranslateBy(delta);

  00086	ff 50 20	 call	 DWORD PTR [eax+32]
$LN4@TranslateO:

; 3551 :         }
; 3552 :     }
; 3553 : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
$LN34@TranslateO:
  00091	8b ce		 mov	 ecx, esi

; 3546 :         SimRegion* orig = object->GetRegion();

  00093	ff d0		 call	 eax
  00095	eb ab		 jmp	 SHORT $LN6@TranslateO
?TranslateObject@SimRegion@@IAEXPAVSimObject@@@Z ENDP	; SimRegion::TranslateObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??__Fempty@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@YAXXZ
text$yd	SEGMENT
??__Fempty@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@YAXXZ PROC ; `SimRegion::TrackList'::`2'::`dynamic atexit destructor for 'empty'', COMDAT

; 54   :    ~List()  { delete [] array; }

  00000	ff 35 08 00 00
	00		 push	 DWORD PTR ?empty@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@4V3@A+8
  00006	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
??__Fempty@?1??TrackList@SimRegion@@QAEAAV?$List@VContact@@@@H@Z@YAXXZ ENDP ; `SimRegion::TrackList'::`2'::`dynamic atexit destructor for 'empty''
text$yd	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\contact.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_c_life$1$ = -24					; size = 8
_track_iter$1 = -16					; size = 8
tv281 = -8						; size = 4
tv278 = -4						; size = 4
?UpdateTracks@SimRegion@@IAEXN@Z PROC			; SimRegion::UpdateTracks
; _this$ = ecx
; _seconds$dead$ = xmm1l

; 3569 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi

; 3570 :     for (int i = 0; i < 5; i++) {

  0000a	be 05 00 00 00	 mov	 esi, 5
  0000f	57		 push	 edi
  00010	8d 83 b8 00 00
	00		 lea	 eax, DWORD PTR [ebx+184]
  00016	89 75 f8	 mov	 DWORD PTR tv281[ebp], esi
  00019	89 45 fc	 mov	 DWORD PTR tv278[ebp], eax
  0001c	0f 1f 40 00	 npad	 4
$LL4@UpdateTrac:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00020	8d 4d f0	 lea	 ecx, DWORD PTR _track_iter$1[ebp]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00023	89 45 f0	 mov	 DWORD PTR _track_iter$1[ebp], eax
  00026	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _track_iter$1[ebp+4], -1

; 108  :    int operator++() { return next() != 0; }

  0002d	e8 00 00 00 00	 call	 ?next@?$ListIter@VContact@@@@QAEPAVContact@@XZ ; ListIter<Contact>::next
  00032	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3573 :         while (++track_iter) {

  00034	0f 84 b8 00 00
	00		 je	 $LN2@UpdateTrac
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL5@UpdateTrac:

; 3574 :             Contact* t        = track_iter.value();

  00040	8d 4d f0	 lea	 ecx, DWORD PTR _track_iter$1[ebp]
  00043	e8 00 00 00 00	 call	 ?value@?$ListIter@VContact@@@@QAEPAVContact@@XZ ; ListIter<Contact>::value
  00048	8b f8		 mov	 edi, eax
  0004a	0f 57 c9	 xorps	 xmm1, xmm1

; 3575 :             Ship*    c_ship   = t->GetShip();
; 3576 :             Shot*    c_shot   = t->GetShot();
; 3577 :             double   c_life   = 0;

  0004d	f2 0f 11 4d e8	 movsd	 QWORD PTR _c_life$1$[ebp], xmm1
; File d:\programming\starshatter\trunk\stars45\contact.h

; 66   :     Ship*    GetShip()   const { return ship;  }

  00052	8b 77 10	 mov	 esi, DWORD PTR [edi+16]

; 67   :     Shot*    GetShot()   const { return shot;  }

  00055	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3579 :             if (c_ship) {

  00058	85 f6		 test	 esi, esi
  0005a	74 3a		 je	 SHORT $LN7@UpdateTrac
  0005c	8b 06		 mov	 eax, DWORD PTR [esi]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 130  :     double            Life()      const { return life;       }

  0005e	f2 0f 10 86 a8
	01 00 00	 movsd	 xmm0, QWORD PTR [esi+424]
  00066	f2 0f 11 45 e8	 movsd	 QWORD PTR _c_life$1$[ebp], xmm0
  0006b	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  00071	3d 00 00 00 00	 cmp	 eax, OFFSET ?GetRegion@SimObject@@UBEPAVSimRegion@@XZ ; SimObject::GetRegion
  00076	0f 85 92 00 00
	00		 jne	 $LN43@UpdateTrac
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  0007c	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
$LN18@UpdateTrac:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3583 :                 if (c_ship->GetRegion() != this || c_ship->IsNetObserver())

  00082	3b c3		 cmp	 eax, ebx
  00084	75 09		 jne	 SHORT $LN10@UpdateTrac
  00086	80 be 17 04 00
	00 00		 cmp	 BYTE PTR [esi+1047], 0
  0008d	74 18		 je	 SHORT $LN11@UpdateTrac
$LN10@UpdateTrac:

; 3584 :                 c_life = 0;

  0008f	f2 0f 11 4d e8	 movsd	 QWORD PTR _c_life$1$[ebp], xmm1

; 3585 :             }

  00094	eb 11		 jmp	 SHORT $LN11@UpdateTrac
$LN7@UpdateTrac:

; 3586 : 
; 3587 :             else if (c_shot)

  00096	85 c0		 test	 eax, eax
  00098	74 0d		 je	 SHORT $LN11@UpdateTrac
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 130  :     double            Life()      const { return life;       }

  0009a	f2 0f 10 80 a8
	01 00 00	 movsd	 xmm0, QWORD PTR [eax+424]
  000a2	f2 0f 11 45 e8	 movsd	 QWORD PTR _c_life$1$[ebp], xmm0
$LN11@UpdateTrac:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3590 :             if (t->Age() < 0 || c_life == 0) {

  000a7	8b cf		 mov	 ecx, edi
  000a9	e8 00 00 00 00	 call	 ?Age@Contact@@QBENXZ	; Contact::Age
  000ae	0f 57 c9	 xorps	 xmm1, xmm1
  000b1	66 0f 2f c8	 comisd	 xmm1, xmm0
  000b5	77 18		 ja	 SHORT $LN14@UpdateTrac
  000b7	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _c_life$1$[ebp]
  000bc	66 0f 2e c1	 ucomisd xmm0, xmm1
  000c0	9f		 lahf
  000c1	f6 c4 44	 test	 ah, 68			; 00000044H
  000c4	7b 09		 jnp	 SHORT $LN14@UpdateTrac

; 3593 :             }
; 3594 : 
; 3595 :             else {
; 3596 :                 t->Reset();

  000c6	8b cf		 mov	 ecx, edi
  000c8	e8 00 00 00 00	 call	 ?Reset@Contact@@QAEXXZ	; Contact::Reset
  000cd	eb 10		 jmp	 SHORT $LN16@UpdateTrac
$LN14@UpdateTrac:

; 3591 :                 track_iter.removeItem();

  000cf	8d 4d f0	 lea	 ecx, DWORD PTR _track_iter$1[ebp]
  000d2	e8 00 00 00 00	 call	 ?removeItem@?$ListIter@VContact@@@@QAEPAVContact@@XZ ; ListIter<Contact>::removeItem

; 3592 :                 delete t;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b cf		 mov	 ecx, edi
  000db	6a 01		 push	 1
  000dd	ff 10		 call	 DWORD PTR [eax]
$LN16@UpdateTrac:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000df	8d 4d f0	 lea	 ecx, DWORD PTR _track_iter$1[ebp]
  000e2	e8 00 00 00 00	 call	 ?next@?$ListIter@VContact@@@@QAEPAVContact@@XZ ; ListIter<Contact>::next
  000e7	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3573 :         while (++track_iter) {

  000e9	0f 85 51 ff ff
	ff		 jne	 $LL5@UpdateTrac
  000ef	8b 75 f8	 mov	 esi, DWORD PTR tv281[ebp]
$LN2@UpdateTrac:

; 3570 :     for (int i = 0; i < 5; i++) {

  000f2	8b 45 fc	 mov	 eax, DWORD PTR tv278[ebp]
  000f5	83 c0 0c	 add	 eax, 12			; 0000000cH
  000f8	83 ee 01	 sub	 esi, 1
  000fb	89 45 fc	 mov	 DWORD PTR tv278[ebp], eax
  000fe	89 75 f8	 mov	 DWORD PTR tv281[ebp], esi
  00101	0f 85 19 ff ff
	ff		 jne	 $LL4@UpdateTrac

; 3597 :             }
; 3598 :         }
; 3599 :     }
; 3600 : }

  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
$LN43@UpdateTrac:
  0010e	8b ce		 mov	 ecx, esi

; 3583 :                 if (c_ship->GetRegion() != this || c_ship->IsNetObserver())

  00110	ff d0		 call	 eax
  00112	0f 57 c9	 xorps	 xmm1, xmm1
  00115	e9 68 ff ff ff	 jmp	 $LN18@UpdateTrac
?UpdateTracks@SimRegion@@IAEXN@Z ENDP			; SimRegion::UpdateTracks
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\camera.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
tv326 = -8						; size = 4
tv322 = -4						; size = 4
?CanTimeSkip@SimRegion@@QBE_NXZ PROC			; SimRegion::CanTimeSkip
; _this$ = ecx

; 3606 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	8b c1		 mov	 eax, ecx

; 3607 :     bool ok = false;

  0000b	32 c9		 xor	 cl, cl
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 3608 : 
; 3609 :     if (player_ship) {

  00010	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00014	89 44 24 0c	 mov	 DWORD PTR _this$1$[esp+24], eax
  00018	0f 84 f3 00 00
	00		 je	 $LN47@CanTimeSki

; 3610 :         ok = true;
; 3611 : 
; 3612 :         for (int i = 0; ok && i < ships.size(); i++) {

  0001e	33 ff		 xor	 edi, edi
  00020	b3 01		 mov	 bl, 1
  00022	83 c0 4c	 add	 eax, 76			; 0000004cH
  00025	89 44 24 14	 mov	 DWORD PTR tv322[esp+24], eax
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@CanTimeSki:
  00030	3b 38		 cmp	 edi, DWORD PTR [eax]
  00032	0f 8d d0 00 00
	00		 jge	 $LN46@CanTimeSki

; 3613 :             Ship* s = ships[i];

  00038	57		 push	 edi
  00039	8b c8		 mov	 ecx, eax
  0003b	e8 00 00 00 00	 call	 ??A?$List@VShip@@@@QBEPAVShip@@H@Z ; List<Ship>::operator[]
  00040	8b f0		 mov	 esi, eax

; 3615 :             if (s != player_ship && s->GetIFF() && s->GetIFF() != player_ship->GetIFF()) {

  00042	8b 44 24 0c	 mov	 eax, DWORD PTR _this$1$[esp+24]
  00046	3b 70 44	 cmp	 esi, DWORD PTR [eax+68]
  00049	0f 84 ac 00 00
	00		 je	 $LN2@CanTimeSki
  0004f	8b 06		 mov	 eax, DWORD PTR [esi]
  00051	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00056	0f 85 be 00 00
	00		 jne	 $LN50@CanTimeSki
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  0005c	8b 86 04 03 00
	00		 mov	 eax, DWORD PTR [esi+772]
$LN10@CanTimeSki:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3615 :             if (s != player_ship && s->GetIFF() && s->GetIFF() != player_ship->GetIFF()) {

  00062	85 c0		 test	 eax, eax
  00064	0f 84 91 00 00
	00		 je	 $LN2@CanTimeSki
  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00071	0f 85 b0 00 00
	00		 jne	 $LN13@CanTimeSki
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  00077	8b 86 04 03 00
	00		 mov	 eax, DWORD PTR [esi+772]
$LN48@CanTimeSki:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3615 :             if (s != player_ship && s->GetIFF() && s->GetIFF() != player_ship->GetIFF()) {

  0007d	8b 54 24 0c	 mov	 edx, DWORD PTR _this$1$[esp+24]
  00081	89 44 24 10	 mov	 DWORD PTR tv326[esp+24], eax
  00085	8b 4a 44	 mov	 ecx, DWORD PTR [edx+68]
  00088	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008a	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  0008f	0f 85 9f 00 00
	00		 jne	 $LN15@CanTimeSki
; File d:\programming\starshatter\trunk\stars45\ship.h

; 341  :     virtual int       GetIFF()          const    { return IFF_code;      }

  00095	8b 81 04 03 00
	00		 mov	 eax, DWORD PTR [ecx+772]
$LN14@CanTimeSki:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3615 :             if (s != player_ship && s->GetIFF() && s->GetIFF() != player_ship->GetIFF()) {

  0009b	39 44 24 10	 cmp	 DWORD PTR tv326[esp+24], eax
  0009f	74 5a		 je	 SHORT $LN2@CanTimeSki
; File d:\programming\starshatter\trunk\ngenex\camera.h

; 72   :     Point    Pos() const { return pos;    }

  000a1	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  000a4	f2 0f 10 56 48	 movsd	 xmm2, QWORD PTR [esi+72]
  000a9	f2 0f 10 46 50	 movsd	 xmm0, QWORD PTR [esi+80]
  000ae	f2 0f 10 4e 58	 movsd	 xmm1, QWORD PTR [esi+88]

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }
; 221  : 
; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }
; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }
; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  000b3	f2 0f 5c 40 50	 subsd	 xmm0, QWORD PTR [eax+80]
  000b8	f2 0f 5c 50 48	 subsd	 xmm2, QWORD PTR [eax+72]
  000bd	f2 0f 5c 48 58	 subsd	 xmm1, QWORD PTR [eax+88]

; 229  :     Point operator- ()               const { return Point(-x, -y, -z);          }
; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }
; 231  :     Point operator/ (double s)       const { return Point(x/s, y/s, z/s);       }
; 232  :     double operator*(const Point& p) const { return (x*p.x + y*p.y + z*p.z);    }
; 233  :     Point operator* (const Matrix& m) const;
; 234  : 
; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }
; 236  :     Point& operator+=(const Point& p)      { x+=p.x; y+=p.y; z+=p.z; return *this; }
; 237  :     Point& operator-=(const Point& p)      { x-=p.x; y-=p.y; z-=p.z; return *this; }
; 238  :     Point& operator*=(double s)            { x*=s;   y*=s;   z*=s;   return *this; }
; 239  :     Point& operator/=(double s)            { x/=s;   y/=s;   z/=s;   return *this; }
; 240  : 
; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  000c2	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  000c6	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  000ca	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  000ce	f2 0f 58 c2	 addsd	 xmm0, xmm2
  000d2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000d6	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3618 :                 if (s->IsStarship())

  000db	8b ce		 mov	 ecx, esi
  000dd	e8 00 00 00 00	 call	 ?IsStarship@Ship@@QBE_NXZ ; Ship::IsStarship
  000e2	84 c0		 test	 al, al
  000e4	74 0a		 je	 SHORT $LN7@CanTimeSki

; 3619 :                 ok = dist > 60e3;

  000e6	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40ed4c0000000000

; 3620 :                 else

  000ee	eb 08		 jmp	 SHORT $LN49@CanTimeSki
$LN7@CanTimeSki:

; 3621 :                 ok = dist > 30e3;

  000f0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40dd4c0000000000
$LN49@CanTimeSki:
  000f8	0f 97 c3	 seta	 bl
$LN2@CanTimeSki:

; 3610 :         ok = true;
; 3611 : 
; 3612 :         for (int i = 0; ok && i < ships.size(); i++) {

  000fb	8b 44 24 14	 mov	 eax, DWORD PTR tv322[esp+24]
  000ff	47		 inc	 edi
  00100	84 db		 test	 bl, bl
  00102	0f 85 28 ff ff
	ff		 jne	 $LL4@CanTimeSki
$LN46@CanTimeSki:

; 3622 :             }
; 3623 :         }
; 3624 :     }
; 3625 : 
; 3626 :     return ok;

  00108	8a c3		 mov	 al, bl

; 3627 : }

  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c3		 ret	 0
$LN47@CanTimeSki:
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	8a c1		 mov	 al, cl
  00115	5b		 pop	 ebx
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
$LN50@CanTimeSki:
  0011a	8b ce		 mov	 ecx, esi

; 3615 :             if (s != player_ship && s->GetIFF() && s->GetIFF() != player_ship->GetIFF()) {

  0011c	ff 90 98 01 00
	00		 call	 DWORD PTR [eax+408]
  00122	e9 3b ff ff ff	 jmp	 $LN10@CanTimeSki
$LN13@CanTimeSki:
  00127	8b ce		 mov	 ecx, esi
  00129	ff 90 98 01 00
	00		 call	 DWORD PTR [eax+408]
  0012f	e9 49 ff ff ff	 jmp	 $LN48@CanTimeSki
$LN15@CanTimeSki:
  00134	ff 90 98 01 00
	00		 call	 DWORD PTR [eax+408]
  0013a	8b 54 24 0c	 mov	 edx, DWORD PTR _this$1$[esp+24]
  0013e	e9 58 ff ff ff	 jmp	 $LN14@CanTimeSki
?CanTimeSkip@SimRegion@@QBE_NXZ ENDP			; SimRegion::CanTimeSkip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\flightdeck.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_j$1$ = -200						; size = 4
_ward$1$ = -200						; size = 4
_this$1$ = -196						; size = 4
_trans$1$ = -192					; size = 8
_delta$3$ = -192					; size = 8
_flight_decks$1$ = -192					; size = 4
_inbound$1$ = -192					; size = 4
$T1 = -168						; size = 24
$T2 = -168						; size = 24
$T3 = -168						; size = 24
$T4 = -168						; size = 24
$T5 = -168						; size = 24
$T6 = -168						; size = 24
_speed$1$ = -144					; size = 8
_ship$1$ = -144						; size = 4
_i$1$ = -132						; size = 4
_seconds$1$ = -128					; size = 8
_dist$7 = -120						; size = 8
_space$8 = -120						; size = 8
_contact$9 = -112					; size = 8
$T10 = -104						; size = 24
_ward_heading$11 = -104					; size = 24
_delta$12 = -104					; size = 24
_dest$13 = -80						; size = 24
_unit$14 = -48						; size = 24
_trans$2$ = -16						; size = 8
_trans$3$ = -8						; size = 8
?ResolveTimeSkip@SimRegion@@QAEXN@Z PROC		; SimRegion::ResolveTimeSkip
; _this$ = ecx
; _seconds$ = xmm1l

; 3633 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f0	 and	 esp, -16		; fffffff0H
  00006	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  0000c	8b c1		 mov	 eax, ecx
  0000e	f2 0f 11 4c 24
	48		 movsd	 QWORD PTR _seconds$1$[esp+200], xmm1
  00014	89 44 24 04	 mov	 DWORD PTR _this$1$[esp+200], eax

; 3634 :     for (int i = 0; i < ships.size(); i++) {

  00018	33 c9		 xor	 ecx, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  0001a	83 c0 4c	 add	 eax, 76			; 0000004cH
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3634 :     for (int i = 0; i < ships.size(); i++) {

  0001d	89 4c 24 44	 mov	 DWORD PTR _i$1$[esp+200], ecx
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	39 08		 cmp	 DWORD PTR [eax], ecx
  00025	0f 8e 3d 07 00
	00		 jle	 $LN3@ResolveTim
  0002b	0f 1f 44 00 00	 npad	 5
$LL4@ResolveTim:

; 3635 :         Ship* ship = ships[i];

  00030	51		 push	 ecx
  00031	8b c8		 mov	 ecx, eax
  00033	e8 00 00 00 00	 call	 ??A?$List@VShip@@@@QAEAAPAVShip@@H@Z ; List<Ship>::operator[]

; 3639 :         ship->ExecSystems(seconds);

  00038	f2 0f 10 4c 24
	50		 movsd	 xmm1, QWORD PTR _seconds$1$[esp+208]
  0003e	8b 30		 mov	 esi, DWORD PTR [eax]
  00040	8b ce		 mov	 ecx, esi
  00042	89 74 24 40	 mov	 DWORD PTR _ship$1$[esp+208], esi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 317  :     Ship*             GetWard()         const    { return ward;          }

  00046	8b 86 1c 03 00
	00		 mov	 eax, DWORD PTR [esi+796]
  0004c	89 44 24 08	 mov	 DWORD PTR _ward$1$[esp+208], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3639 :         ship->ExecSystems(seconds);

  00050	e8 00 00 00 00	 call	 ?ExecSystems@Ship@@QAEXN@Z ; Ship::ExecSystems

; 3640 :         ship->ExecMaintFrame(seconds);

  00055	f2 0f 10 4c 24
	50		 movsd	 xmm1, QWORD PTR _seconds$1$[esp+208]
  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?ExecMaintFrame@Ship@@QAEXN@Z ; Ship::ExecMaintFrame

; 3641 : 
; 3642 :         ship->ClearTrack();

  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?ClearTrack@Ship@@QAEXXZ ; Ship::ClearTrack

; 3643 :         ListIter<Contact> contact = ship->ContactList();

  00069	8b ce		 mov	 ecx, esi
  0006b	e8 00 00 00 00	 call	 ?ContactList@Ship@@QAEAAV?$List@VContact@@@@XZ ; Ship::ContactList
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00070	8d 4c 24 60	 lea	 ecx, DWORD PTR _contact$9[esp+208]

; 75   :    bool     isEmpty() const      { return !items; }
; 76   : 
; 77   :    bool     contains(const T* val) const;
; 78   :    int      count(const T* val)    const;
; 79   :    int      index(const T* val)    const;
; 80   :    T*       find(const T* val)     const;
; 81   : 
; 82   :    void     sort();
; 83   :    void     shuffle();
; 84   : 
; 85   : private:
; 86   :    typedef  T* PTR;
; 87   :    void     qsort(T** a, int lo, int hi);
; 88   :    void     resize(int newsize);
; 89   :    bool     check(int& index) const;
; 90   :    void     swap(T** a, int i, int j);
; 91   : 
; 92   :    int      items;
; 93   :    int      extent;
; 94   :    PTR*     array;
; 95   : 
; 96   :    friend class ListIter<T>;
; 97   : };
; 98   : 
; 99   : // +-------------------------------------------------------------------+
; 100  : 
; 101  : template <class T> class ListIter
; 102  : {
; 103  : public:
; 104  :    ListIter()                       : list(0),      step(-1)      { }
; 105  :    ListIter(const ListIter<T>& i)   : list(i.list), step(i.step)  { }
; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00074	89 44 24 60	 mov	 DWORD PTR _contact$9[esp+208], eax
  00078	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR _contact$9[esp+212], -1

; 108  :    int operator++() { return next() != 0; }

  00080	e8 00 00 00 00	 call	 ?next@?$ListIter@VContact@@@@QAEPAVContact@@XZ ; ListIter<Contact>::next
  00085	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3644 :         while (++contact)

  00087	74 24		 je	 SHORT $LN6@ResolveTim
  00089	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@ResolveTim:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 110  :    T*  operator->() { return value();     }

  00090	8d 4c 24 60	 lea	 ecx, DWORD PTR _contact$9[esp+208]
  00094	e8 00 00 00 00	 call	 ?value@?$ListIter@VContact@@@@QAEPAVContact@@XZ ; ListIter<Contact>::value
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3645 :         contact->ClearTrack();

  00099	8b c8		 mov	 ecx, eax
  0009b	e8 00 00 00 00	 call	 ?ClearTrack@Contact@@QAEXXZ ; Contact::ClearTrack
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000a0	8d 4c 24 60	 lea	 ecx, DWORD PTR _contact$9[esp+208]
  000a4	e8 00 00 00 00	 call	 ?next@?$ListIter@VContact@@@@QAEPAVContact@@XZ ; ListIter<Contact>::next
  000a9	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3644 :         while (++contact)

  000ab	75 e3		 jne	 SHORT $LL5@ResolveTim
$LN6@ResolveTim:

; 3646 : 
; 3647 :         if (ship->IsStatic())

  000ad	8b ce		 mov	 ecx, esi
  000af	e8 00 00 00 00	 call	 ?IsStatic@Ship@@QBE_NXZ	; Ship::IsStatic
  000b4	84 c0		 test	 al, al
  000b6	0f 85 94 06 00
	00		 jne	 $LN2@ResolveTim
; File d:\programming\starshatter\trunk\stars45\ship.h

; 214  :     InboundSlot*      GetInbound()      const { return inbound;       }

  000bc	8b 86 34 04 00
	00		 mov	 eax, DWORD PTR [esi+1076]
  000c2	89 44 24 10	 mov	 DWORD PTR _inbound$1$[esp+208], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3652 :         if (inbound) {

  000c6	85 c0		 test	 eax, eax
  000c8	74 49		 je	 SHORT $LN14@ResolveTim

; 3653 :             if (inbound->Cleared()) {

  000ca	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  000ce	0f 84 7c 06 00
	00		 je	 $LN2@ResolveTim
; File d:\programming\starshatter\trunk\stars45\flightdeck.h

; 79   :     FlightDeck*       GetDeck()      { return deck;     }

  000d4	8b 78 14	 mov	 edi, DWORD PTR [eax+20]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3656 :                 if (deck) {

  000d7	85 ff		 test	 edi, edi
  000d9	0f 84 71 06 00
	00		 je	 $LN2@ResolveTim

; 3657 :                     ship->SetCarrier((Ship*) deck->GetCarrier(), deck);

  000df	57		 push	 edi
  000e0	ff b7 c8 00 00
	00		 push	 DWORD PTR [edi+200]
  000e6	8b ce		 mov	 ecx, esi
  000e8	e8 00 00 00 00	 call	 ?SetCarrier@Ship@@QAEXPAV1@PAVFlightDeck@@@Z ; Ship::SetCarrier

; 3658 :                     ship->SetFlightPhase(Ship::DOCKED);

  000ed	8b 06		 mov	 eax, DWORD PTR [esi]
  000ef	8b ce		 mov	 ecx, esi
  000f1	6a 00		 push	 0
  000f3	ff 90 d8 00 00
	00		 call	 DWORD PTR [eax+216]

; 3659 :                     ship->Stow();

  000f9	8b ce		 mov	 ecx, esi
  000fb	e8 00 00 00 00	 call	 ?Stow@Ship@@QAEXXZ	; Ship::Stow
  00100	8b 4c 24 10	 mov	 ecx, DWORD PTR _inbound$1$[esp+208]

; 3660 :                     deck->Clear(inbound->Index());

  00104	8b 07		 mov	 eax, DWORD PTR [edi]
  00106	ff 71 1c	 push	 DWORD PTR [ecx+28]
  00109	8b cf		 mov	 ecx, edi
  0010b	ff 50 58	 call	 DWORD PTR [eax+88]

; 3661 :                 }
; 3662 :             }
; 3663 : 
; 3664 :             // cleared or not, once you're inbound, don't seek navpoints:
; 3665 :             continue;

  0010e	e9 3d 06 00 00	 jmp	 $LN2@ResolveTim
$LN14@ResolveTim:

; 3666 :         }
; 3667 : 
; 3668 :         if (ship->GetHangar()) {

  00113	8b 8e 68 03 00
	00		 mov	 ecx, DWORD PTR [esi+872]
  00119	85 c9		 test	 ecx, ecx
  0011b	74 4f		 je	 SHORT $LN8@ResolveTim

; 3669 :             ship->GetHangar()->ExecFrame(seconds);

  0011d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011f	83 ec 08	 sub	 esp, 8
  00122	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR _seconds$1$[esp+216]
  00128	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0012d	ff 50 14	 call	 DWORD PTR [eax+20]

; 3672 :             for (int n = 0; n < flight_decks.size(); n++)

  00130	33 ff		 xor	 edi, edi
; File d:\programming\starshatter\trunk\stars45\ship.h

; 456  :     List<FlightDeck>&       FlightDecks()        { return flight_decks;  }

  00132	8d 86 c0 03 00
	00		 lea	 eax, DWORD PTR [esi+960]
  00138	89 44 24 10	 mov	 DWORD PTR _flight_decks$1$[esp+208], eax
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3672 :             for (int n = 0; n < flight_decks.size(); n++)

  0013c	39 be c0 03 00
	00		 cmp	 DWORD PTR [esi+960], edi
  00142	7e 28		 jle	 SHORT $LN8@ResolveTim
  00144	8b f0		 mov	 esi, eax
$LL9@ResolveTim:

; 3673 :             flight_decks[n]->ExecFrame(seconds);

  00146	57		 push	 edi
  00147	8b ce		 mov	 ecx, esi
  00149	e8 00 00 00 00	 call	 ??A?$List@VFlightDeck@@@@QAEAAPAVFlightDeck@@H@Z ; List<FlightDeck>::operator[]
  0014e	f2 0f 10 44 24
	50		 movsd	 xmm0, QWORD PTR _seconds$1$[esp+208]
  00154	83 ec 08	 sub	 esp, 8
  00157	8b 08		 mov	 ecx, DWORD PTR [eax]
  00159	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0015e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00160	ff 50 14	 call	 DWORD PTR [eax+20]
  00163	47		 inc	 edi
  00164	3b 3e		 cmp	 edi, DWORD PTR [esi]
  00166	7c de		 jl	 SHORT $LL9@ResolveTim
  00168	8b 74 24 40	 mov	 esi, DWORD PTR _ship$1$[esp+208]
$LN8@ResolveTim:

; 3676 :         Instruction* navpt = ship->GetNextNavPoint();

  0016c	8b ce		 mov	 ecx, esi
  0016e	e8 00 00 00 00	 call	 ?GetNextNavPoint@Ship@@QAEPAVInstruction@@XZ ; Ship::GetNextNavPoint
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00173	f2 0f 10 46 48	 movsd	 xmm0, QWORD PTR [esi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3679 :         double       space = 2.0e3 * (ship->GetElementIndex() - 1);

  00178	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0017a	f2 0f 11 84 24
	80 00 00 00	 movsd	 QWORD PTR _dest$13[esp+208], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3676 :         Instruction* navpt = ship->GetNextNavPoint();

  00183	8b f8		 mov	 edi, eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00185	f2 0f 10 46 50	 movsd	 xmm0, QWORD PTR [esi+80]
  0018a	f2 0f 11 84 24
	88 00 00 00	 movsd	 QWORD PTR _dest$13[esp+216], xmm0
  00193	f2 0f 10 46 58	 movsd	 xmm0, QWORD PTR [esi+88]
  00198	f2 0f 11 84 24
	90 00 00 00	 movsd	 QWORD PTR _dest$13[esp+224], xmm0
  001a1	f2 0f 11 44 24
	10		 movsd	 QWORD PTR _delta$3$[esp+208], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3678 :         double       speed = 500;

  001a7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@407f400000000000
  001af	f2 0f 11 44 24
	40		 movsd	 QWORD PTR _speed$1$[esp+208], xmm0

; 3679 :         double       space = 2.0e3 * (ship->GetElementIndex() - 1);

  001b5	e8 00 00 00 00	 call	 ?GetElementIndex@Ship@@QBEHXZ ; Ship::GetElementIndex
  001ba	48		 dec	 eax

; 3680 : 
; 3681 :         if (ship->IsStarship())

  001bb	8b ce		 mov	 ecx, esi
  001bd	66 0f 6e c0	 movd	 xmm0, eax
  001c1	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001c5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@409f400000000000
  001cd	f2 0f 11 44 24
	58		 movsd	 QWORD PTR _space$8[esp+208], xmm0
  001d3	e8 00 00 00 00	 call	 ?IsStarship@Ship@@QBE_NXZ ; Ship::IsStarship
  001d8	84 c0		 test	 al, al
  001da	74 0e		 je	 SHORT $LN18@ResolveTim

; 3682 :         space *= 5;

  001dc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4014000000000000
  001e4	f2 0f 11 44 24
	58		 movsd	 QWORD PTR _space$8[esp+208], xmm0
$LN18@ResolveTim:

; 3683 : 
; 3684 :         if (navpt && navpt->Action() == Instruction::LAUNCH) {

  001ea	85 ff		 test	 edi, edi
  001ec	74 76		 je	 SHORT $LN20@ResolveTim
  001ee	83 7f 70 01	 cmp	 DWORD PTR [edi+112], 1
  001f2	75 22		 jne	 SHORT $LN19@ResolveTim

; 3685 :             ship->SetNavptStatus(navpt, Instruction::COMPLETE);

  001f4	6a 05		 push	 5
  001f6	57		 push	 edi
  001f7	8b ce		 mov	 ecx, esi
  001f9	e8 00 00 00 00	 call	 ?SetNavptStatus@Ship@@QAEXPAVInstruction@@H@Z ; Ship::SetNavptStatus

; 3686 :             navpt = ship->GetNextNavPoint();

  001fe	8b ce		 mov	 ecx, esi
  00200	e8 00 00 00 00	 call	 ?GetNextNavPoint@Ship@@QAEPAVInstruction@@XZ ; Ship::GetNextNavPoint
  00205	f2 0f 10 84 24
	90 00 00 00	 movsd	 xmm0, QWORD PTR _dest$13[esp+224]
  0020e	8b f8		 mov	 edi, eax
  00210	f2 0f 11 44 24
	10		 movsd	 QWORD PTR _delta$3$[esp+208], xmm0
$LN19@ResolveTim:

; 3687 :         }
; 3688 : 
; 3689 :         if (navpt) {

  00216	85 ff		 test	 edi, edi
  00218	74 4a		 je	 SHORT $LN20@ResolveTim

; 3690 :             dest  = navpt->Location().OtherHand();

  0021a	8d 44 24 28	 lea	 eax, DWORD PTR $T6[esp+208]
  0021e	8b cf		 mov	 ecx, edi
  00220	50		 push	 eax
  00221	e8 00 00 00 00	 call	 ?Location@Instruction@@QBE?AUPoint@@XZ ; Instruction::Location
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 244  :     Point    OtherHand()             const { return Point(-x, z, y); }

  00226	f2 0f 10 08	 movsd	 xmm1, QWORD PTR [eax]

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  0022a	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]

; 244  :     Point    OtherHand()             const { return Point(-x, z, y); }

  0022f	0f 57 0d 00 00
	00 00		 xorps	 xmm1, QWORD PTR __xmm@80000000000000008000000000000000

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00236	f2 0f 10 68 08	 movsd	 xmm5, QWORD PTR [eax+8]
  0023b	66 0f 14 c8	 unpcklpd xmm1, xmm0
  0023f	0f 29 8c 24 80
	00 00 00	 movaps	 XMMWORD PTR _dest$13[esp+208], xmm1
  00247	f2 0f 11 ac 24
	90 00 00 00	 movsd	 QWORD PTR _dest$13[esp+224], xmm5
  00250	66 0f 6e 47 7c	 movd	 xmm0, DWORD PTR [edi+124]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3691 :             speed = navpt->Speed();

  00255	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00259	f2 0f 11 44 24
	40		 movsd	 QWORD PTR _speed$1$[esp+208], xmm0
  0025f	e9 c7 00 00 00	 jmp	 $LN23@ResolveTim
$LN20@ResolveTim:

; 3692 :         }
; 3693 : 
; 3694 :         else if (ward) {

  00264	8b 44 24 08	 mov	 eax, DWORD PTR _ward$1$[esp+208]
  00268	85 c0		 test	 eax, eax
  0026a	0f 84 b5 00 00
	00		 je	 $LN260@ResolveTim
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00270	f2 0f 10 46 48	 movsd	 xmm0, QWORD PTR [esi+72]
  00275	0f 57 d2	 xorps	 xmm2, xmm2

; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  00278	f2 0f 5c 40 48	 subsd	 xmm0, QWORD PTR [eax+72]

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0027d	f2 0f 10 4e 58	 movsd	 xmm1, QWORD PTR [esi+88]

; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  00282	f2 0f 5c 48 58	 subsd	 xmm1, QWORD PTR [eax+88]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3696 :             delta.y = 0;

  00287	f2 0f 11 54 24
	70		 movsd	 QWORD PTR _delta$12[esp+216], xmm2
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  0028d	f2 0f 11 44 24
	68		 movsd	 QWORD PTR _delta$12[esp+208], xmm0

; 236  :     Point& operator+=(const Point& p)      { x+=p.x; y+=p.y; z+=p.z; return *this; }
; 237  :     Point& operator-=(const Point& p)      { x-=p.x; y-=p.y; z-=p.z; return *this; }
; 238  :     Point& operator*=(double s)            { x*=s;   y*=s;   z*=s;   return *this; }
; 239  :     Point& operator/=(double s)            { x/=s;   y/=s;   z/=s;   return *this; }
; 240  : 
; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  00293	f2 0f 59 c0	 mulsd	 xmm0, xmm0

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00297	f2 0f 11 4c 24
	78		 movsd	 QWORD PTR _delta$12[esp+224], xmm1

; 236  :     Point& operator+=(const Point& p)      { x+=p.x; y+=p.y; z+=p.z; return *this; }
; 237  :     Point& operator-=(const Point& p)      { x-=p.x; y-=p.y; z-=p.z; return *this; }
; 238  :     Point& operator*=(double s)            { x*=s;   y*=s;   z*=s;   return *this; }
; 239  :     Point& operator/=(double s)            { x/=s;   y/=s;   z/=s;   return *this; }
; 240  : 
; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  0029d	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  002a1	f2 0f 58 c2	 addsd	 xmm0, xmm2
  002a5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002a9	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3698 :             if (delta.length() > 25e3) {

  002ae	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40d86a0000000000
  002b6	76 6d		 jbe	 SHORT $LN260@ResolveTim

; 3699 :                 delta.Normalize();

  002b8	8d 4c 24 68	 lea	 ecx, DWORD PTR _delta$12[esp+208]
  002bc	e8 00 00 00 00	 call	 ?Normalize@Point@@QAENXZ ; Point::Normalize
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }

  002c1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40d86a0000000000
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3699 :                 delta.Normalize();

  002c9	dd d8		 fstp	 ST(0)
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  002cb	8b 44 24 08	 mov	 eax, DWORD PTR _ward$1$[esp+208]

; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }

  002cf	f2 0f 10 54 24
	68		 movsd	 xmm2, QWORD PTR _delta$12[esp+208]
  002d5	f2 0f 10 5c 24
	70		 movsd	 xmm3, QWORD PTR _delta$12[esp+216]
  002db	f2 0f 10 64 24
	78		 movsd	 xmm4, QWORD PTR _delta$12[esp+224]

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  002e1	f2 0f 10 48 50	 movsd	 xmm1, QWORD PTR [eax+80]
  002e6	f2 0f 10 68 58	 movsd	 xmm5, QWORD PTR [eax+88]

; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }

  002eb	f2 0f 59 d8	 mulsd	 xmm3, xmm0
  002ef	f2 0f 59 e0	 mulsd	 xmm4, xmm0
  002f3	f2 0f 59 d0	 mulsd	 xmm2, xmm0

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  002f7	f2 0f 10 40 48	 movsd	 xmm0, QWORD PTR [eax+72]

; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }

  002fc	f2 0f 58 cb	 addsd	 xmm1, xmm3
  00300	f2 0f 58 ec	 addsd	 xmm5, xmm4
  00304	f2 0f 58 c2	 addsd	 xmm0, xmm2

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  00308	f2 0f 11 8c 24
	88 00 00 00	 movsd	 QWORD PTR _dest$13[esp+216], xmm1
  00311	f2 0f 11 ac 24
	90 00 00 00	 movsd	 QWORD PTR _dest$13[esp+224], xmm5
  0031a	f2 0f 11 84 24
	80 00 00 00	 movsd	 QWORD PTR _dest$13[esp+208], xmm0
  00323	eb 06		 jmp	 SHORT $LN23@ResolveTim
$LN260@ResolveTim:
  00325	f2 0f 10 6c 24
	10		 movsd	 xmm5, QWORD PTR _delta$3$[esp+208]
$LN23@ResolveTim:

; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  0032b	f2 0f 10 8c 24
	80 00 00 00	 movsd	 xmm1, QWORD PTR _dest$13[esp+208]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3706 :         double   dist  = unit.Normalize() - space;

  00334	8d 8c 24 a0 00
	00 00		 lea	 ecx, DWORD PTR _unit$14[esp+208]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  0033b	f2 0f 5c 4e 48	 subsd	 xmm1, QWORD PTR [esi+72]
  00340	f2 0f 10 84 24
	88 00 00 00	 movsd	 xmm0, QWORD PTR _dest$13[esp+216]
  00349	f2 0f 5c 46 50	 subsd	 xmm0, QWORD PTR [esi+80]
  0034e	f2 0f 5c 6e 58	 subsd	 xmm5, QWORD PTR [esi+88]
  00353	66 0f 14 c8	 unpcklpd xmm1, xmm0
  00357	0f 29 8c 24 a0
	00 00 00	 movaps	 XMMWORD PTR _unit$14[esp+208], xmm1
  0035f	66 0f d6 ac 24
	b0 00 00 00	 movq	 QWORD PTR _unit$14[esp+224], xmm5
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3706 :         double   dist  = unit.Normalize() - space;

  00368	e8 00 00 00 00	 call	 ?Normalize@Point@@QAENXZ ; Point::Normalize
  0036d	dc 64 24 58	 fsub	 QWORD PTR _space$8[esp+208]
  00371	dd 5c 24 58	 fstp	 QWORD PTR _dist$7[esp+208]

; 3707 : 
; 3708 :         if (dist > 1e3) {

  00375	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR _dist$7[esp+208]
  0037b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f400000000000
  00383	0f 86 74 01 00
	00		 jbe	 $LN24@ResolveTim

; 3709 :             if (speed < 50)

  00389	f2 0f 10 4c 24
	40		 movsd	 xmm1, QWORD PTR _speed$1$[esp+208]
  0038f	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@4049000000000000
  00397	66 0f 2f d1	 comisd	 xmm2, xmm1
  0039b	76 0e		 jbe	 SHORT $LN26@ResolveTim

; 3710 :             speed = 500;

  0039d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@407f400000000000
  003a5	f2 0f 11 4c 24
	40		 movsd	 QWORD PTR _speed$1$[esp+208], xmm1
$LN26@ResolveTim:

; 3711 : 
; 3712 :             double etr = dist / speed;

  003ab	f2 0f 5e c1	 divsd	 xmm0, xmm1

; 3713 : 
; 3714 :             if (etr > seconds)

  003af	f2 0f 10 54 24
	50		 movsd	 xmm2, QWORD PTR _seconds$1$[esp+208]
  003b5	66 0f 2f c2	 comisd	 xmm0, xmm2
  003b9	76 03		 jbe	 SHORT $LN27@ResolveTim

; 3715 :             etr = seconds;

  003bb	0f 28 c2	 movaps	 xmm0, xmm2
$LN27@ResolveTim:

; 3716 : 
; 3717 :             Point trans = unit * (speed * etr);

  003be	f2 0f 59 c1	 mulsd	 xmm0, xmm1

; 3719 :             if (ship->GetFuelLevel() > 1) {

  003c2	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }

  003c4	f2 0f 10 8c 24
	a0 00 00 00	 movsd	 xmm1, QWORD PTR _unit$14[esp+208]
  003cd	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  003d1	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR _trans$1$[esp+208], xmm1
  003d7	f2 0f 10 8c 24
	a8 00 00 00	 movsd	 xmm1, QWORD PTR _unit$14[esp+216]
  003e0	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  003e4	f2 0f 11 8c 24
	c0 00 00 00	 movsd	 QWORD PTR _trans$2$[esp+208], xmm1
  003ed	f2 0f 10 8c 24
	b0 00 00 00	 movsd	 xmm1, QWORD PTR _unit$14[esp+224]
  003f6	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  003fa	f2 0f 11 8c 24
	c8 00 00 00	 movsd	 QWORD PTR _trans$3$[esp+208], xmm1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3719 :             if (ship->GetFuelLevel() > 1) {

  00403	e8 00 00 00 00	 call	 ?GetFuelLevel@Ship@@QBEHXZ ; Ship::GetFuelLevel
  00408	83 f8 01	 cmp	 eax, 1
  0040b	0f 8e a9 00 00
	00		 jle	 $LN47@ResolveTim
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00411	f2 0f 10 46 48	 movsd	 xmm0, QWORD PTR [esi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3720 :                 ship->MoveTo(ship->Location() + trans);

  00416	8d 4c 24 28	 lea	 ecx, DWORD PTR $T5[esp+208]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0041a	f2 0f 10 4e 50	 movsd	 xmm1, QWORD PTR [esi+80]
  0041f	f2 0f 10 56 58	 movsd	 xmm2, QWORD PTR [esi+88]

; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }

  00424	f2 0f 58 44 24
	10		 addsd	 xmm0, QWORD PTR _trans$1$[esp+208]
  0042a	f2 0f 58 8c 24
	c0 00 00 00	 addsd	 xmm1, QWORD PTR _trans$2$[esp+208]
  00433	f2 0f 58 94 24
	c8 00 00 00	 addsd	 xmm2, QWORD PTR _trans$3$[esp+208]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3720 :                 ship->MoveTo(ship->Location() + trans);

  0043c	8b 06		 mov	 eax, DWORD PTR [esi]
  0043e	51		 push	 ecx
  0043f	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00441	f2 0f 11 44 24
	2c		 movsd	 QWORD PTR $T5[esp+212], xmm0
  00447	f2 0f 11 4c 24
	34		 movsd	 QWORD PTR $T5[esp+220], xmm1
  0044d	f2 0f 11 54 24
	3c		 movsd	 QWORD PTR $T5[esp+228], xmm2
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3720 :                 ship->MoveTo(ship->Location() + trans);

  00453	ff 50 1c	 call	 DWORD PTR [eax+28]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }

  00456	f2 0f 10 44 24
	40		 movsd	 xmm0, QWORD PTR _speed$1$[esp+208]
  0045c	f2 0f 10 8c 24
	a0 00 00 00	 movsd	 xmm1, QWORD PTR _unit$14[esp+208]
  00465	f2 0f 10 94 24
	a8 00 00 00	 movsd	 xmm2, QWORD PTR _unit$14[esp+216]
  0046e	f2 0f 10 9c 24
	b0 00 00 00	 movsd	 xmm3, QWORD PTR _unit$14[esp+224]
  00477	8b 06		 mov	 eax, DWORD PTR [esi]
  00479	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0047d	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  00481	f2 0f 59 d8	 mulsd	 xmm3, xmm0

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00485	f2 0f 11 4c 24
	28		 movsd	 QWORD PTR $T4[esp+208], xmm1
  0048b	f2 0f 11 54 24
	30		 movsd	 QWORD PTR $T4[esp+216], xmm2
  00491	f2 0f 11 5c 24
	38		 movsd	 QWORD PTR $T4[esp+224], xmm3
  00497	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  0049c	0f 85 d5 02 00
	00		 jne	 $LN262@ResolveTim

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  004a2	f2 0f 11 8e a8
	00 00 00	 movsd	 QWORD PTR [esi+168], xmm1
  004aa	f2 0f 11 96 b0
	00 00 00	 movsd	 QWORD PTR [esi+176], xmm2
  004b2	f2 0f 11 9e b8
	00 00 00	 movsd	 QWORD PTR [esi+184], xmm3
$LN47@ResolveTim:
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3723 :             ship->LookAt(dest);

  004ba	8b 06		 mov	 eax, DWORD PTR [esi]
  004bc	8d 8c 24 80 00
	00 00		 lea	 ecx, DWORD PTR _dest$13[esp+208]
  004c3	51		 push	 ecx
  004c4	8b ce		 mov	 ecx, esi
  004c6	ff 50 40	 call	 DWORD PTR [eax+64]

; 3724 : 
; 3725 :             if (ship->IsStarship()) {

  004c9	8b ce		 mov	 ecx, esi
  004cb	e8 00 00 00 00	 call	 ?IsStarship@Ship@@QBE_NXZ ; Ship::IsStarship
  004d0	84 c0		 test	 al, al
  004d2	74 3d		 je	 SHORT $LN30@ResolveTim

; 3726 :                 ship->SetFLCSMode(Ship::FLCS_HELM);

  004d4	6a 02		 push	 2
  004d6	e8 00 00 00 00	 call	 ?SetFLCSMode@Ship@@QAEXH@Z ; Ship::SetFLCSMode

; 3727 :                 ship->SetHelmHeading(ship->CompassHeading());

  004db	8b ce		 mov	 ecx, esi
  004dd	e8 00 00 00 00	 call	 ?CompassHeading@Ship@@QBENXZ ; Ship::CompassHeading
  004e2	0f 28 c8	 movaps	 xmm1, xmm0
  004e5	8b ce		 mov	 ecx, esi
  004e7	e8 00 00 00 00	 call	 ?SetHelmHeading@Ship@@QAEXN@Z ; Ship::SetHelmHeading

; 3728 :                 ship->SetHelmPitch(ship->CompassPitch());

  004ec	e8 00 00 00 00	 call	 ?CompassPitch@Ship@@QBENXZ ; Ship::CompassPitch
  004f1	0f 28 c8	 movaps	 xmm1, xmm0
  004f4	8b ce		 mov	 ecx, esi
  004f6	e8 00 00 00 00	 call	 ?SetHelmPitch@Ship@@QAEXN@Z ; Ship::SetHelmPitch

; 3729 :             }
; 3730 :         }

  004fb	eb 14		 jmp	 SHORT $LN30@ResolveTim
$LN24@ResolveTim:

; 3731 : 
; 3732 :         else if (navpt && navpt->Status() <= Instruction::ACTIVE) {

  004fd	85 ff		 test	 edi, edi
  004ff	74 10		 je	 SHORT $LN30@ResolveTim
  00501	83 7f 78 01	 cmp	 DWORD PTR [edi+120], 1
  00505	7f 0a		 jg	 SHORT $LN30@ResolveTim

; 3733 :             ship->SetNavptStatus(navpt, Instruction::COMPLETE);

  00507	6a 05		 push	 5
  00509	57		 push	 edi
  0050a	8b ce		 mov	 ecx, esi
  0050c	e8 00 00 00 00	 call	 ?SetNavptStatus@Ship@@QAEXPAVInstruction@@H@Z ; Ship::SetNavptStatus
$LN30@ResolveTim:

; 3734 :         }
; 3735 : 
; 3736 :         if (ward) {

  00511	8b 7c 24 08	 mov	 edi, DWORD PTR _ward$1$[esp+208]
  00515	85 ff		 test	 edi, edi
  00517	0f 84 fc 00 00
	00		 je	 $LN33@ResolveTim
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 105  :     Point             Heading()   const { return cam.vpn();  }

  0051d	8d 44 24 68	 lea	 eax, DWORD PTR _ward_heading$11[esp+208]
  00521	50		 push	 eax
  00522	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  00525	e8 00 00 00 00	 call	 ?vpn@Camera@@QBE?AUPoint@@XZ ; Camera::vpn
  0052a	0f 57 c0	 xorps	 xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3739 :             ward_heading.Normalize();

  0052d	8d 4c 24 68	 lea	 ecx, DWORD PTR _ward_heading$11[esp+208]
  00531	f2 0f 11 44 24
	70		 movsd	 QWORD PTR _ward_heading$11[esp+216], xmm0
  00537	e8 00 00 00 00	 call	 ?Normalize@Point@@QAENXZ ; Point::Normalize

; 3740 : 
; 3741 :             if (ship->GetFuelLevel() > 1) {

  0053c	8b ce		 mov	 ecx, esi
  0053e	dd d8		 fstp	 ST(0)
  00540	e8 00 00 00 00	 call	 ?GetFuelLevel@Ship@@QBEHXZ ; Ship::GetFuelLevel
  00545	83 f8 01	 cmp	 eax, 1
  00548	7e 3e		 jle	 SHORT $LN49@ResolveTim
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 108  :     Point             Velocity()  const { return velocity + arcade_velocity; }

  0054a	8d 87 c0 00 00
	00		 lea	 eax, DWORD PTR [edi+192]
  00550	50		 push	 eax
  00551	8d 44 24 2c	 lea	 eax, DWORD PTR $T3[esp+212]
  00555	50		 push	 eax
  00556	8d 8f a8 00 00
	00		 lea	 ecx, DWORD PTR [edi+168]
  0055c	e8 00 00 00 00	 call	 ??HPoint@@QBE?AU0@ABU0@@Z ; Point::operator+
  00561	8b 06		 mov	 eax, DWORD PTR [esi]
  00563	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00568	0f 85 18 02 00
	00		 jne	 $LN50@ResolveTim
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  0056e	0f 10 44 24 28	 movups	 xmm0, XMMWORD PTR $T3[esp+208]
  00573	0f 11 86 a8 00
	00 00		 movups	 XMMWORD PTR [esi+168], xmm0
  0057a	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR $T3[esp+224]
  00580	f2 0f 11 86 b8
	00 00 00	 movsd	 QWORD PTR [esi+184], xmm0
$LN49@ResolveTim:

; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }

  00588	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@412e848000000000
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3744 :             ship->LookAt(ship->Location() + ward_heading * 1e6);

  00590	8d 4c 24 28	 lea	 ecx, DWORD PTR $T2[esp+208]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }

  00594	f2 0f 10 5c 24
	68		 movsd	 xmm3, QWORD PTR _ward_heading$11[esp+208]
  0059a	f2 0f 10 64 24
	70		 movsd	 xmm4, QWORD PTR _ward_heading$11[esp+216]
  005a0	f2 0f 10 6c 24
	78		 movsd	 xmm5, QWORD PTR _ward_heading$11[esp+224]

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  005a6	f2 0f 10 4e 50	 movsd	 xmm1, QWORD PTR [esi+80]
  005ab	f2 0f 10 56 58	 movsd	 xmm2, QWORD PTR [esi+88]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3744 :             ship->LookAt(ship->Location() + ward_heading * 1e6);

  005b0	8b 06		 mov	 eax, DWORD PTR [esi]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }

  005b2	f2 0f 59 e0	 mulsd	 xmm4, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3744 :             ship->LookAt(ship->Location() + ward_heading * 1e6);

  005b6	51		 push	 ecx
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }

  005b7	f2 0f 59 e8	 mulsd	 xmm5, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3744 :             ship->LookAt(ship->Location() + ward_heading * 1e6);

  005bb	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }

  005bd	f2 0f 59 d8	 mulsd	 xmm3, xmm0

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  005c1	f2 0f 10 46 48	 movsd	 xmm0, QWORD PTR [esi+72]

; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }

  005c6	f2 0f 58 cc	 addsd	 xmm1, xmm4
  005ca	f2 0f 58 d5	 addsd	 xmm2, xmm5
  005ce	f2 0f 58 c3	 addsd	 xmm0, xmm3

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  005d2	f2 0f 11 4c 24
	34		 movsd	 QWORD PTR $T2[esp+220], xmm1
  005d8	f2 0f 11 54 24
	3c		 movsd	 QWORD PTR $T2[esp+228], xmm2
  005de	f2 0f 11 44 24
	2c		 movsd	 QWORD PTR $T2[esp+212], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3744 :             ship->LookAt(ship->Location() + ward_heading * 1e6);

  005e4	ff 50 40	 call	 DWORD PTR [eax+64]

; 3745 : 
; 3746 :             if (ship->IsStarship()) {

  005e7	8b ce		 mov	 ecx, esi
  005e9	e8 00 00 00 00	 call	 ?IsStarship@Ship@@QBE_NXZ ; Ship::IsStarship
  005ee	84 c0		 test	 al, al
  005f0	74 27		 je	 SHORT $LN33@ResolveTim

; 3747 :                 ship->SetFLCSMode(Ship::FLCS_HELM);

  005f2	6a 02		 push	 2
  005f4	e8 00 00 00 00	 call	 ?SetFLCSMode@Ship@@QAEXH@Z ; Ship::SetFLCSMode

; 3748 :                 ship->SetHelmHeading(ship->CompassHeading());

  005f9	8b ce		 mov	 ecx, esi
  005fb	e8 00 00 00 00	 call	 ?CompassHeading@Ship@@QBENXZ ; Ship::CompassHeading
  00600	0f 28 c8	 movaps	 xmm1, xmm0
  00603	8b ce		 mov	 ecx, esi
  00605	e8 00 00 00 00	 call	 ?SetHelmHeading@Ship@@QAEXN@Z ; Ship::SetHelmHeading

; 3749 :                 ship->SetHelmPitch(ship->CompassPitch());

  0060a	e8 00 00 00 00	 call	 ?CompassPitch@Ship@@QBENXZ ; Ship::CompassPitch
  0060f	0f 28 c8	 movaps	 xmm1, xmm0
  00612	8b ce		 mov	 ecx, esi
  00614	e8 00 00 00 00	 call	 ?SetHelmPitch@Ship@@QAEXN@Z ; Ship::SetHelmPitch
$LN33@ResolveTim:

; 3750 :             }
; 3751 :         }
; 3752 : 
; 3753 :         if (dist > 1 || ward) {

  00619	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR _dist$7[esp+208]
  0061f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00627	77 08		 ja	 SHORT $LN35@ResolveTim
  00629	85 ff		 test	 edi, edi
  0062b	0f 84 1f 01 00
	00		 je	 $LN2@ResolveTim
$LN35@ResolveTim:

; 3754 :             for (int j = 0; j < ships.size(); j++) {

  00631	8b 4c 24 0c	 mov	 ecx, DWORD PTR _this$1$[esp+208]
  00635	33 c0		 xor	 eax, eax
  00637	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0063a	89 44 24 08	 mov	 DWORD PTR _j$1$[esp+208], eax
  0063e	39 01		 cmp	 DWORD PTR [ecx], eax
  00640	0f 8e 0a 01 00
	00		 jle	 $LN2@ResolveTim
$LL12@ResolveTim:

; 3755 :                 Ship* test = ships[j];

  00646	50		 push	 eax
  00647	e8 00 00 00 00	 call	 ??A?$List@VShip@@@@QAEAAPAVShip@@H@Z ; List<Ship>::operator[]
  0064c	8b 38		 mov	 edi, DWORD PTR [eax]

; 3757 :                 if (ship != test && test->Mass() >= ship->Mass()) {

  0064e	3b f7		 cmp	 esi, edi
  00650	0f 84 e2 00 00
	00		 je	 $LN10@ResolveTim
  00656	f3 0f 10 8f b4
	01 00 00	 movss	 xmm1, DWORD PTR [edi+436]
  0065e	f3 0f 10 86 b4
	01 00 00	 movss	 xmm0, DWORD PTR [esi+436]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 128  :     double            Mass()      const { return mass;       }

  00666	0f 5a c9	 cvtps2pd xmm1, xmm1
  00669	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3757 :                 if (ship != test && test->Mass() >= ship->Mass()) {

  0066c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00670	0f 82 c2 00 00
	00		 jb	 $LN10@ResolveTim
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00676	f2 0f 10 56 48	 movsd	 xmm2, QWORD PTR [esi+72]
  0067b	f2 0f 10 46 50	 movsd	 xmm0, QWORD PTR [esi+80]

; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  00680	f2 0f 5c 47 50	 subsd	 xmm0, QWORD PTR [edi+80]
  00685	f2 0f 5c 57 48	 subsd	 xmm2, QWORD PTR [edi+72]

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0068a	f2 0f 10 4e 58	 movsd	 xmm1, QWORD PTR [esi+88]

; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  0068f	f2 0f 5c 4f 58	 subsd	 xmm1, QWORD PTR [edi+88]

; 236  :     Point& operator+=(const Point& p)      { x+=p.x; y+=p.y; z+=p.z; return *this; }
; 237  :     Point& operator-=(const Point& p)      { x-=p.x; y-=p.y; z-=p.z; return *this; }
; 238  :     Point& operator*=(double s)            { x*=s;   y*=s;   z*=s;   return *this; }
; 239  :     Point& operator/=(double s)            { x/=s;   y/=s;   z/=s;   return *this; }
; 240  : 
; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  00694	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  00698	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  0069c	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  006a0	f2 0f 58 c2	 addsd	 xmm0, xmm2
  006a4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006a8	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  006ad	f3 0f 10 97 b0
	01 00 00	 movss	 xmm2, DWORD PTR [edi+432]
  006b5	f3 0f 10 8e b0
	01 00 00	 movss	 xmm1, DWORD PTR [esi+432]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 127  :     double            Radius()    const { return radius;     }

  006bd	0f 5a d2	 cvtps2pd xmm2, xmm2
  006c0	0f 5a c9	 cvtps2pd xmm1, xmm1
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3760 :                     if (delta.length() < ship->Radius() * 2 + test->Radius() * 2) {

  006c3	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@4000000000000000
  006cb	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  006d3	f2 0f 58 d1	 addsd	 xmm2, xmm1
  006d7	66 0f 2f d0	 comisd	 xmm2, xmm0
  006db	76 5b		 jbe	 SHORT $LN10@ResolveTim

; 3761 :                         ship->MoveTo(test->Location() + RandomPoint().OtherHand());

  006dd	8d 44 24 68	 lea	 eax, DWORD PTR $T10[esp+208]
  006e1	50		 push	 eax
  006e2	e8 00 00 00 00	 call	 ?RandomPoint@@YA?AUPoint@@XZ ; RandomPoint
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  006e7	f2 0f 10 47 48	 movsd	 xmm0, QWORD PTR [edi+72]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3761 :                         ship->MoveTo(test->Location() + RandomPoint().OtherHand());

  006ec	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T1[esp+212]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  006f0	f2 0f 10 4f 50	 movsd	 xmm1, QWORD PTR [edi+80]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3761 :                         ship->MoveTo(test->Location() + RandomPoint().OtherHand());

  006f5	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  006f8	f2 0f 10 57 58	 movsd	 xmm2, QWORD PTR [edi+88]

; 244  :     Point    OtherHand()             const { return Point(-x, z, y); }

  006fd	f2 0f 10 18	 movsd	 xmm3, QWORD PTR [eax]

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00701	f2 0f 10 60 10	 movsd	 xmm4, QWORD PTR [eax+16]
  00706	f2 0f 10 68 08	 movsd	 xmm5, QWORD PTR [eax+8]

; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }

  0070b	f2 0f 58 cc	 addsd	 xmm1, xmm4

; 244  :     Point    OtherHand()             const { return Point(-x, z, y); }

  0070f	0f 57 1d 00 00
	00 00		 xorps	 xmm3, QWORD PTR __xmm@80000000000000008000000000000000

; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }

  00716	f2 0f 58 d5	 addsd	 xmm2, xmm5
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3761 :                         ship->MoveTo(test->Location() + RandomPoint().OtherHand());

  0071a	8b 06		 mov	 eax, DWORD PTR [esi]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }

  0071c	f2 0f 58 c3	 addsd	 xmm0, xmm3
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3761 :                         ship->MoveTo(test->Location() + RandomPoint().OtherHand());

  00720	51		 push	 ecx
  00721	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00723	f2 0f 11 4c 24
	34		 movsd	 QWORD PTR $T1[esp+220], xmm1
  00729	f2 0f 11 54 24
	3c		 movsd	 QWORD PTR $T1[esp+228], xmm2
  0072f	f2 0f 11 44 24
	2c		 movsd	 QWORD PTR $T1[esp+212], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3761 :                         ship->MoveTo(test->Location() + RandomPoint().OtherHand());

  00735	ff 50 1c	 call	 DWORD PTR [eax+28]
$LN10@ResolveTim:

; 3754 :             for (int j = 0; j < ships.size(); j++) {

  00738	8b 4c 24 0c	 mov	 ecx, DWORD PTR _this$1$[esp+208]
  0073c	8b 44 24 08	 mov	 eax, DWORD PTR _j$1$[esp+208]
  00740	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00743	40		 inc	 eax
  00744	89 44 24 08	 mov	 DWORD PTR _j$1$[esp+208], eax
  00748	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0074a	0f 8c f6 fe ff
	ff		 jl	 $LL12@ResolveTim
$LN2@ResolveTim:

; 3634 :     for (int i = 0; i < ships.size(); i++) {

  00750	8b 44 24 0c	 mov	 eax, DWORD PTR _this$1$[esp+208]
  00754	8b 4c 24 4c	 mov	 ecx, DWORD PTR _i$1$[esp+208]
  00758	83 c0 4c	 add	 eax, 76			; 0000004cH
  0075b	41		 inc	 ecx
  0075c	89 4c 24 4c	 mov	 DWORD PTR _i$1$[esp+208], ecx
  00760	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00762	0f 8c c8 f8 ff
	ff		 jl	 $LL4@ResolveTim
$LN3@ResolveTim:

; 3762 :                     }
; 3763 :                 }
; 3764 :             }
; 3765 :         }
; 3766 :     }
; 3767 : 
; 3768 :     DockShips();

  00768	8b 4c 24 0c	 mov	 ecx, DWORD PTR _this$1$[esp+208]
  0076c	e8 00 00 00 00	 call	 ?DockShips@SimRegion@@IAEXXZ ; SimRegion::DockShips

; 3769 : }

  00771	5f		 pop	 edi
  00772	5e		 pop	 esi
  00773	8b e5		 mov	 esp, ebp
  00775	5d		 pop	 ebp
  00776	c3		 ret	 0
$LN262@ResolveTim:

; 3721 :                 ship->SetVelocity(unit * speed);

  00777	8d 4c 24 28	 lea	 ecx, DWORD PTR $T4[esp+208]
  0077b	51		 push	 ecx
  0077c	8b ce		 mov	 ecx, esi
  0077e	ff 50 6c	 call	 DWORD PTR [eax+108]
  00781	e9 34 fd ff ff	 jmp	 $LN47@ResolveTim
$LN50@ResolveTim:

; 3742 :                 ship->SetVelocity(ward->Velocity());

  00786	8d 4c 24 28	 lea	 ecx, DWORD PTR $T3[esp+208]
  0078a	51		 push	 ecx
  0078b	8b ce		 mov	 ecx, esi
  0078d	ff 50 6c	 call	 DWORD PTR [eax+108]
  00790	e9 f3 fd ff ff	 jmp	 $LN49@ResolveTim
?ResolveTimeSkip@SimRegion@@QAEXN@Z ENDP		; SimRegion::ResolveTimeSkip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\combatunit.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\ship.h
; File d:\programming\starshatter\trunk\ngenex\physical.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\combatunit.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\combatgroup.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\combatunit.h
; File d:\programming\starshatter\trunk\stars45\simobject.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
; File d:\programming\starshatter\trunk\stars45\combatgroup.h
; File d:\programming\starshatter\trunk\stars45\sim.cpp
_TEXT	SEGMENT
_u_loc$2 = -80						; size = 24
$T3 = -56						; size = 8
$T4 = -48						; size = 8
$T5 = -40						; size = 8
tv571 = -28						; size = 4
_i$1$ = -24						; size = 4
_u$1$ = -20						; size = 4
_this$1$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?CommitMission@SimRegion@@IAEXXZ PROC			; SimRegion::CommitMission
; _this$ = ecx

; 3775 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?CommitMission@SimRegion@@IAEXXZ
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	83 ec 40	 sub	 esp, 64			; 00000040H
  00028	56		 push	 esi
  00029	57		 push	 edi
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	8b c1		 mov	 eax, ecx
  0003d	89 45 ec	 mov	 DWORD PTR _this$1$[ebp], eax
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  00040	83 c0 70	 add	 eax, 112		; 00000070H
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3776 :     for (int i = 0; i < dead_ships.size(); i++) {

  00043	33 ff		 xor	 edi, edi
  00045	39 38		 cmp	 DWORD PTR [eax], edi
  00047	7e 52		 jle	 SHORT $LN3@CommitMiss
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@CommitMiss:

; 3777 :         Ship* s = dead_ships[i];

  00050	57		 push	 edi
  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 ??A?$List@VShip@@@@QAEAAPAVShip@@H@Z ; List<Ship>::operator[]
  00058	8b 30		 mov	 esi, DWORD PTR [eax]

; 3779 :         if (s->GetCombatUnit() && s->GetFlightPhase() != Ship::DOCKED)

  0005a	83 be e4 03 00
	00 00		 cmp	 DWORD PTR [esi+996], 0
  00061	74 2c		 je	 SHORT $LN2@CommitMiss
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b 90 d4 00 00
	00		 mov	 edx, DWORD PTR [eax+212]
  0006b	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00070	75 08		 jne	 SHORT $LN22@CommitMiss
; File d:\programming\starshatter\trunk\stars45\ship.h

; 182  :     virtual int       GetFlightPhase()           const { return flight_phase; }

  00072	8b 86 10 03 00
	00		 mov	 eax, DWORD PTR [esi+784]
  00078	eb 04		 jmp	 SHORT $LN21@CommitMiss
$LN22@CommitMiss:
  0007a	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3779 :         if (s->GetCombatUnit() && s->GetFlightPhase() != Ship::DOCKED)

  0007c	ff d2		 call	 edx
$LN21@CommitMiss:
  0007e	85 c0		 test	 eax, eax
  00080	74 0d		 je	 SHORT $LN2@CommitMiss

; 3780 :         s->GetCombatUnit()->Kill(1);

  00082	8b 8e e4 03 00
	00		 mov	 ecx, DWORD PTR [esi+996]
  00088	6a 01		 push	 1
  0008a	e8 00 00 00 00	 call	 ?Kill@CombatUnit@@QAEHH@Z ; CombatUnit::Kill
$LN2@CommitMiss:

; 3776 :     for (int i = 0; i < dead_ships.size(); i++) {

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00092	47		 inc	 edi
  00093	3b 79 70	 cmp	 edi, DWORD PTR [ecx+112]
  00096	8d 41 70	 lea	 eax, DWORD PTR [ecx+112]
  00099	7c b5		 jl	 SHORT $LL4@CommitMiss
$LN3@CommitMiss:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  0009b	83 c1 4c	 add	 ecx, 76			; 0000004cH
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3783 :     for (int i = 0; i < ships.size(); i++) {

  0009e	33 c0		 xor	 eax, eax
  000a0	89 45 e8	 mov	 DWORD PTR _i$1$[ebp], eax
; File d:\programming\starshatter\trunk\foundationex\list.h

; 74   :    int      size()    const      { return items;  }

  000a3	89 4d e4	 mov	 DWORD PTR tv571[ebp], ecx
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3783 :     for (int i = 0; i < ships.size(); i++) {

  000a6	39 01		 cmp	 DWORD PTR [ecx], eax
  000a8	0f 8e ca 01 00
	00		 jle	 $LN6@CommitMiss
  000ae	66 90		 npad	 2
$LL7@CommitMiss:

; 3784 :         Ship*       s = ships[i];

  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ??A?$List@VShip@@@@QAEAAPAVShip@@H@Z ; List<Ship>::operator[]
  000b6	8b 30		 mov	 esi, DWORD PTR [eax]
; File d:\programming\starshatter\trunk\stars45\ship.h

; 419  :     CombatUnit*             GetCombatUnit()   const { return combat_unit; }

  000b8	8b be e4 03 00
	00		 mov	 edi, DWORD PTR [esi+996]
  000be	89 7d ec	 mov	 DWORD PTR _u$1$[ebp], edi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3787 :         if (u) {

  000c1	85 ff		 test	 edi, edi
  000c3	0f 84 9d 01 00
	00		 je	 $LN5@CommitMiss
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  000c9	f2 0f 10 46 58	 movsd	 xmm0, QWORD PTR [esi+88]
  000ce	f2 0f 10 4e 48	 movsd	 xmm1, QWORD PTR [esi+72]
  000d3	f2 0f 10 56 50	 movsd	 xmm2, QWORD PTR [esi+80]

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }
; 221  : 
; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }
; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }
; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }
; 229  :     Point operator- ()               const { return Point(-x, -y, -z);          }
; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }
; 231  :     Point operator/ (double s)       const { return Point(x/s, y/s, z/s);       }
; 232  :     double operator*(const Point& p) const { return (x*p.x + y*p.y + z*p.z);    }
; 233  :     Point operator* (const Matrix& m) const;
; 234  : 
; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }
; 236  :     Point& operator+=(const Point& p)      { x+=p.x; y+=p.y; z+=p.z; return *this; }
; 237  :     Point& operator-=(const Point& p)      { x-=p.x; y-=p.y; z-=p.z; return *this; }
; 238  :     Point& operator*=(double s)            { x*=s;   y*=s;   z*=s;   return *this; }
; 239  :     Point& operator/=(double s)            { x/=s;   y/=s;   z/=s;   return *this; }
; 240  : 
; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }
; 242  :     double   Normalize();
; 243  :     void     SwapYZ()                      { double t = y; y = z; z = t; }
; 244  :     Point    OtherHand()             const { return Point(-x, z, y); }

  000d8	0f 57 0d 00 00
	00 00		 xorps	 xmm1, QWORD PTR __xmm@80000000000000008000000000000000

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  000df	f2 0f 11 45 b8	 movsd	 QWORD PTR _u_loc$2[ebp+8], xmm0
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3789 :             if (u_loc.z > 20e3)

  000e4	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40d3880000000000
  000ec	66 0f 2f d0	 comisd	 xmm2, xmm0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  000f0	f2 0f 11 4d b0	 movsd	 QWORD PTR _u_loc$2[ebp], xmm1
  000f5	f2 0f 11 55 c0	 movsd	 QWORD PTR _u_loc$2[ebp+16], xmm2
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3789 :             if (u_loc.z > 20e3)

  000fa	77 0e		 ja	 SHORT $LN102@CommitMiss

; 3790 :             u_loc.z = 20e3;
; 3791 :             else if (u_loc.z < -20e3)

  000fc	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c0d3880000000000
  00104	66 0f 2f c2	 comisd	 xmm0, xmm2
  00108	76 05		 jbe	 SHORT $LN12@CommitMiss
$LN102@CommitMiss:

; 3792 :             u_loc.z = -20e3;

  0010a	f2 0f 11 45 c0	 movsd	 QWORD PTR _u_loc$2[ebp+16], xmm0
$LN12@CommitMiss:

; 3793 : 
; 3794 :             if (u->IsStarship()) {

  0010f	8b cf		 mov	 ecx, edi
  00111	e8 00 00 00 00	 call	 ?IsStarship@CombatUnit@@QBE_NXZ ; CombatUnit::IsStarship
  00116	84 c0		 test	 al, al
  00118	74 53		 je	 SHORT $LN13@CommitMiss
  0011a	8b 06		 mov	 eax, DWORD PTR [esi]
  0011c	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00122	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00127	75 08		 jne	 SHORT $LN24@CommitMiss
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00129	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  0012f	eb 04		 jmp	 SHORT $LN23@CommitMiss
$LN24@CommitMiss:
  00131	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3795 :                 u->SetRegion(s->GetRegion()->Name());

  00133	ff d2		 call	 edx
$LN23@CommitMiss:
  00135	ff 70 0c	 push	 DWORD PTR [eax+12]
  00138	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  0013b	e8 00 00 00 00	 call	 ??0Text@@QAE@PBD@Z	; Text::Text
; File d:\programming\starshatter\trunk\stars45\combatunit.h

; 101  :     void           SetRegion(Text rgn)                 { region = rgn;         }

  00140	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  00143	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0014a	50		 push	 eax
  0014b	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  0014e	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@ABV0@@Z ; Text::operator=
  00153	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00156	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0015d	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3796 :                 u->MoveTo(u_loc);

  00162	8d 45 b0	 lea	 eax, DWORD PTR _u_loc$2[ebp]
  00165	8b cf		 mov	 ecx, edi
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?MoveTo@CombatUnit@@QAEXABUPoint@@@Z ; CombatUnit::MoveTo
$LN13@CommitMiss:

; 3797 :             }
; 3798 : 
; 3799 :             if (!u->IsDropship()) {

  0016d	8b cf		 mov	 ecx, edi
  0016f	e8 00 00 00 00	 call	 ?IsDropship@CombatUnit@@QBE_NXZ ; CombatUnit::IsDropship
  00174	84 c0		 test	 al, al
  00176	75 3b		 jne	 SHORT $LN16@CommitMiss

; 3800 :                 if (s->Integrity() < 1)

  00178	f3 0f 10 86 b8
	01 00 00	 movss	 xmm0, DWORD PTR [esi+440]
  00180	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00188	0f 2f c8	 comiss	 xmm1, xmm0
  0018b	76 09		 jbe	 SHORT $LN15@CommitMiss

; 3801 :                 u->Kill(1);

  0018d	6a 01		 push	 1
  0018f	e8 00 00 00 00	 call	 ?Kill@CombatUnit@@QAEHH@Z ; CombatUnit::Kill

; 3802 :                 else

  00194	eb 1d		 jmp	 SHORT $LN16@CommitMiss
$LN15@CommitMiss:
; File d:\programming\starshatter\trunk\stars45\ship.h

; 364  :     const ShipDesign* Design()          const    { return design;        }

  00196	8b 86 00 02 00
	00		 mov	 eax, DWORD PTR [esi+512]
; File d:\programming\starshatter\trunk\ngenex\physical.h

; 129  :     double            Integrity() const { return integrity;  }

  0019c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0019f	f3 0f 10 88 24
	02 00 00	 movss	 xmm1, DWORD PTR [eax+548]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3803 :                 u->SetSustainedDamage(s->Design()->integrity - s->Integrity());

  001a7	0f 5a c9	 cvtps2pd xmm1, xmm1
  001aa	f2 0f 5c c8	 subsd	 xmm1, xmm0
; File d:\programming\starshatter\trunk\stars45\combatunit.h

; 123  :     void           SetSustainedDamage(double d)        { sustained_damage = d;    }

  001ae	f2 0f 11 4f 78	 movsd	 QWORD PTR [edi+120], xmm1
$LN16@CommitMiss:

; 102  :     CombatGroup*   GetCombatGroup()        const { return group;               }

  001b3	8b bf 9c 00 00
	00		 mov	 edi, DWORD PTR [edi+156]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3807 :             if (g && g->Type() > CombatGroup::FLEET && g->GetFirstUnit() == u) {

  001b9	85 ff		 test	 edi, edi
  001bb	0f 84 a5 00 00
	00		 je	 $LN5@CommitMiss
  001c1	83 3f 07	 cmp	 DWORD PTR [edi], 7
  001c4	0f 8e 9c 00 00
	00		 jle	 $LN5@CommitMiss
  001ca	8b cf		 mov	 ecx, edi
  001cc	e8 00 00 00 00	 call	 ?GetFirstUnit@CombatGroup@@QAEPAVCombatUnit@@XZ ; CombatGroup::GetFirstUnit
  001d1	3b 45 ec	 cmp	 eax, DWORD PTR _u$1$[ebp]
  001d4	0f 85 8c 00 00
	00		 jne	 $LN5@CommitMiss
; File d:\programming\starshatter\trunk\stars45\combatgroup.h

; 201  :     bool           IsZoneLocked()                const { return assigned_zone && zone_lock;   }

  001da	83 bf 94 00 00
	00 00		 cmp	 DWORD PTR [edi+148], 0
  001e1	74 30		 je	 SHORT $LN75@CommitMiss
  001e3	80 bf 98 00 00
	00 00		 cmp	 BYTE PTR [edi+152], 0
  001ea	74 27		 je	 SHORT $LN75@CommitMiss

; 159  :     const Text&    GetRegion()                   const { return region;     }

  001ec	8d 47 4c	 lea	 eax, DWORD PTR [edi+76]
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3811 :                 u->SetRegion(g->GetRegion());

  001ef	50		 push	 eax
  001f0	8d 4d d0	 lea	 ecx, DWORD PTR $T4[ebp]
  001f3	e8 00 00 00 00	 call	 ??0Text@@QAE@ABV0@@Z	; Text::Text
; File d:\programming\starshatter\trunk\stars45\combatunit.h

; 101  :     void           SetRegion(Text rgn)                 { region = rgn;         }

  001f8	8b 4d ec	 mov	 ecx, DWORD PTR _u$1$[ebp]
  001fb	8d 45 d0	 lea	 eax, DWORD PTR $T4[ebp]
  001fe	50		 push	 eax
  001ff	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00206	8d 49 3c	 lea	 ecx, DWORD PTR [ecx+60]
  00209	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@ABV0@@Z ; Text::operator=
  0020e	8d 4d d0	 lea	 ecx, DWORD PTR $T4[ebp]
  00211	eb 3c		 jmp	 SHORT $LN103@CommitMiss
$LN75@CommitMiss:
  00213	8b 06		 mov	 eax, DWORD PTR [esi]
  00215	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  0021b	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7Ship@@6BSimObject@@@
  00220	75 08		 jne	 SHORT $LN26@CommitMiss
; File d:\programming\starshatter\trunk\stars45\simobject.h

; 76   :     virtual SimRegion*   GetRegion()                const { return region; }

  00222	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00228	eb 04		 jmp	 SHORT $LN25@CommitMiss
$LN26@CommitMiss:
  0022a	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3809 :                 g->SetRegion(s->GetRegion()->Name());

  0022c	ff d2		 call	 edx
$LN25@CommitMiss:
  0022e	ff 70 0c	 push	 DWORD PTR [eax+12]
  00231	8d 4d c8	 lea	 ecx, DWORD PTR $T3[ebp]
  00234	e8 00 00 00 00	 call	 ??0Text@@QAE@PBD@Z	; Text::Text
; File d:\programming\starshatter\trunk\stars45\combatgroup.h

; 160  :     void           SetRegion(Text rgn)                 { region = rgn;      }

  00239	8d 45 c8	 lea	 eax, DWORD PTR $T3[ebp]
  0023c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00243	50		 push	 eax
  00244	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  00247	e8 00 00 00 00	 call	 ??4Text@@QAEAAV0@ABV0@@Z ; Text::operator=
  0024c	8d 4d c8	 lea	 ecx, DWORD PTR $T3[ebp]
$LN103@CommitMiss:
  0024f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00256	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
; File d:\programming\starshatter\trunk\stars45\sim.cpp

; 3813 :                 g->MoveTo(u_loc);

  0025b	8d 45 b0	 lea	 eax, DWORD PTR _u_loc$2[ebp]
  0025e	8b cf		 mov	 ecx, edi
  00260	50		 push	 eax
  00261	e8 00 00 00 00	 call	 ?MoveTo@CombatGroup@@QAEXABUPoint@@@Z ; CombatGroup::MoveTo
$LN5@CommitMiss:

; 3783 :     for (int i = 0; i < ships.size(); i++) {

  00266	8b 45 e8	 mov	 eax, DWORD PTR _i$1$[ebp]
  00269	8b 4d e4	 mov	 ecx, DWORD PTR tv571[ebp]
  0026c	40		 inc	 eax
  0026d	89 45 e8	 mov	 DWORD PTR _i$1$[ebp], eax
  00270	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00272	0f 8c 38 fe ff
	ff		 jl	 $LL7@CommitMiss
$LN6@CommitMiss:

; 3814 :             }
; 3815 :         }
; 3816 :     }
; 3817 : }

  00278	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0027b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00282	59		 pop	 ecx
  00283	5f		 pop	 edi
  00284	5e		 pop	 esi
  00285	8b e5		 mov	 esp, ebp
  00287	5d		 pop	 ebp
  00288	8b e3		 mov	 esp, ebx
  0028a	5b		 pop	 ebx
  0028b	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CommitMission@SimRegion@@IAEXXZ$3:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CommitMission@SimRegion@@IAEXXZ$5:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__unwindfunclet$?CommitMission@SimRegion@@IAEXXZ$4:
  00010	8d 4d c8	 lea	 ecx, DWORD PTR $T3[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
__ehhandler$?CommitMission@SimRegion@@IAEXXZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CommitMission@SimRegion@@IAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CommitMission@SimRegion@@IAEXXZ ENDP			; SimRegion::CommitMission
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??E?$ListIter@VModel@@@@QAEHXZ
_TEXT	SEGMENT
??E?$ListIter@VModel@@@@QAEHXZ PROC			; ListIter<Model>::operator++, COMDAT
; _this$ = ecx

; 108  :    int operator++() { return next() != 0; }

  00000	e8 00 00 00 00	 call	 ?next@?$ListIter@VModel@@@@QAEPAVModel@@XZ ; ListIter<Model>::next
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax
  0000b	c3		 ret	 0
??E?$ListIter@VModel@@@@QAEHXZ ENDP			; ListIter<Model>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$ListIter@VModel@@@@QAE@AAV?$List@VModel@@@@@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??0?$ListIter@VModel@@@@QAE@AAV?$List@VModel@@@@@Z PROC	; ListIter<Model>::ListIter<Model>, COMDAT
; _this$ = ecx

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _l$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0?$ListIter@VModel@@@@QAE@AAV?$List@VModel@@@@@Z ENDP	; ListIter<Model>::ListIter<Model>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??D?$ListIter@VText@@@@QAEAAVText@@XZ
_TEXT	SEGMENT
??D?$ListIter@VText@@@@QAEAAVText@@XZ PROC		; ListIter<Text>::operator*, COMDAT
; _this$ = ecx

; 111  :    T&  operator* () { return *value();    }

  00000	e9 00 00 00 00	 jmp	 ?value@?$ListIter@VText@@@@QAEPAVText@@XZ ; ListIter<Text>::value
??D?$ListIter@VText@@@@QAEAAVText@@XZ ENDP		; ListIter<Text>::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??C?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ
_TEXT	SEGMENT
??C?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ PROC	; ListIter<Asteroid>::operator->, COMDAT
; _this$ = ecx

; 110  :    T*  operator->() { return value();     }

  00000	e9 00 00 00 00	 jmp	 ?value@?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ; ListIter<Asteroid>::value
??C?$ListIter@VAsteroid@@@@QAEPAVAsteroid@@XZ ENDP	; ListIter<Asteroid>::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??C?$ListIter@VDebris@@@@QAEPAVDebris@@XZ
_TEXT	SEGMENT
??C?$ListIter@VDebris@@@@QAEPAVDebris@@XZ PROC		; ListIter<Debris>::operator->, COMDAT
; _this$ = ecx

; 110  :    T*  operator->() { return value();     }

  00000	e9 00 00 00 00	 jmp	 ?value@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ; ListIter<Debris>::value
??C?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ENDP		; ListIter<Debris>::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??C?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ
_TEXT	SEGMENT
??C?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ PROC	; ListIter<Explosion>::operator->, COMDAT
; _this$ = ecx

; 110  :    T*  operator->() { return value();     }

  00000	e9 00 00 00 00	 jmp	 ?value@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::value
??C?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ENDP	; ListIter<Explosion>::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??E?$ListIter@VExplosion@@@@QAEHXZ
_TEXT	SEGMENT
??E?$ListIter@VExplosion@@@@QAEHXZ PROC			; ListIter<Explosion>::operator++, COMDAT
; _this$ = ecx

; 108  :    int operator++() { return next() != 0; }

  00000	e8 00 00 00 00	 call	 ?next@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ; ListIter<Explosion>::next
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax
  0000b	c3		 ret	 0
??E?$ListIter@VExplosion@@@@QAEHXZ ENDP			; ListIter<Explosion>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$ListIter@VExplosion@@@@QAE@AAV?$List@VExplosion@@@@@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??0?$ListIter@VExplosion@@@@QAE@AAV?$List@VExplosion@@@@@Z PROC ; ListIter<Explosion>::ListIter<Explosion>, COMDAT
; _this$ = ecx

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _l$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0?$ListIter@VExplosion@@@@QAE@AAV?$List@VExplosion@@@@@Z ENDP ; ListIter<Explosion>::ListIter<Explosion>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??1?$List@VExplosion@@@@QAE@XZ
_TEXT	SEGMENT
??1?$List@VExplosion@@@@QAE@XZ PROC			; List<Explosion>::~List<Explosion>, COMDAT
; _this$ = ecx

; 54   :    ~List()  { delete [] array; }

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$List@VExplosion@@@@QAE@XZ ENDP			; List<Explosion>::~List<Explosion>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$List@VExplosion@@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@VExplosion@@@@QAE@XZ PROC			; List<Explosion>::List<Explosion>, COMDAT
; _this$ = ecx

; 52   :    List()   : items(0), extent(0), array(0) { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$List@VExplosion@@@@QAE@XZ ENDP			; List<Explosion>::List<Explosion>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??1?$List@VAsteroid@@@@QAE@XZ
_TEXT	SEGMENT
??1?$List@VAsteroid@@@@QAE@XZ PROC			; List<Asteroid>::~List<Asteroid>, COMDAT
; _this$ = ecx

; 54   :    ~List()  { delete [] array; }

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$List@VAsteroid@@@@QAE@XZ ENDP			; List<Asteroid>::~List<Asteroid>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$List@VAsteroid@@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@VAsteroid@@@@QAE@XZ PROC			; List<Asteroid>::List<Asteroid>, COMDAT
; _this$ = ecx

; 52   :    List()   : items(0), extent(0), array(0) { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$List@VAsteroid@@@@QAE@XZ ENDP			; List<Asteroid>::List<Asteroid>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ?size@?$List@VDebris@@@@QBEHXZ
_TEXT	SEGMENT
?size@?$List@VDebris@@@@QBEHXZ PROC			; List<Debris>::size, COMDAT
; _this$ = ecx

; 74   :    int      size()    const      { return items;  }

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c3		 ret	 0
?size@?$List@VDebris@@@@QBEHXZ ENDP			; List<Debris>::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??1?$List@VDebris@@@@QAE@XZ
_TEXT	SEGMENT
??1?$List@VDebris@@@@QAE@XZ PROC			; List<Debris>::~List<Debris>, COMDAT
; _this$ = ecx

; 54   :    ~List()  { delete [] array; }

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$List@VDebris@@@@QAE@XZ ENDP			; List<Debris>::~List<Debris>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$List@VDebris@@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@VDebris@@@@QAE@XZ PROC			; List<Debris>::List<Debris>, COMDAT
; _this$ = ecx

; 52   :    List()   : items(0), extent(0), array(0) { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$List@VDebris@@@@QAE@XZ ENDP			; List<Debris>::List<Debris>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??1?$List@VDrone@@@@QAE@XZ
_TEXT	SEGMENT
??1?$List@VDrone@@@@QAE@XZ PROC				; List<Drone>::~List<Drone>, COMDAT
; _this$ = ecx

; 54   :    ~List()  { delete [] array; }

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$List@VDrone@@@@QAE@XZ ENDP				; List<Drone>::~List<Drone>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$List@VDrone@@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@VDrone@@@@QAE@XZ PROC				; List<Drone>::List<Drone>, COMDAT
; _this$ = ecx

; 52   :    List()   : items(0), extent(0), array(0) { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$List@VDrone@@@@QAE@XZ ENDP				; List<Drone>::List<Drone>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??E?$ListIter@VSimSplash@@@@QAEHXZ
_TEXT	SEGMENT
??E?$ListIter@VSimSplash@@@@QAEHXZ PROC			; ListIter<SimSplash>::operator++, COMDAT
; _this$ = ecx

; 108  :    int operator++() { return next() != 0; }

  00000	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimSplash@@@@QAEPAVSimSplash@@XZ ; ListIter<SimSplash>::next
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax
  0000b	c3		 ret	 0
??E?$ListIter@VSimSplash@@@@QAEHXZ ENDP			; ListIter<SimSplash>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$ListIter@VSimSplash@@@@QAE@AAV?$List@VSimSplash@@@@@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??0?$ListIter@VSimSplash@@@@QAE@AAV?$List@VSimSplash@@@@@Z PROC ; ListIter<SimSplash>::ListIter<SimSplash>, COMDAT
; _this$ = ecx

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _l$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0?$ListIter@VSimSplash@@@@QAE@AAV?$List@VSimSplash@@@@@Z ENDP ; ListIter<SimSplash>::ListIter<SimSplash>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ?size@?$List@VSimSplash@@@@QBEHXZ
_TEXT	SEGMENT
?size@?$List@VSimSplash@@@@QBEHXZ PROC			; List<SimSplash>::size, COMDAT
; _this$ = ecx

; 74   :    int      size()    const      { return items;  }

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c3		 ret	 0
?size@?$List@VSimSplash@@@@QBEHXZ ENDP			; List<SimSplash>::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??1?$List@VSimSplash@@@@QAE@XZ
_TEXT	SEGMENT
??1?$List@VSimSplash@@@@QAE@XZ PROC			; List<SimSplash>::~List<SimSplash>, COMDAT
; _this$ = ecx

; 54   :    ~List()  { delete [] array; }

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$List@VSimSplash@@@@QAE@XZ ENDP			; List<SimSplash>::~List<SimSplash>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$List@VSimSplash@@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@VSimSplash@@@@QAE@XZ PROC			; List<SimSplash>::List<SimSplash>, COMDAT
; _this$ = ecx

; 52   :    List()   : items(0), extent(0), array(0) { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$List@VSimSplash@@@@QAE@XZ ENDP			; List<SimSplash>::List<SimSplash>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??E?$ListIter@VSimHyper@@@@QAEHXZ
_TEXT	SEGMENT
??E?$ListIter@VSimHyper@@@@QAEHXZ PROC			; ListIter<SimHyper>::operator++, COMDAT
; _this$ = ecx

; 108  :    int operator++() { return next() != 0; }

  00000	e8 00 00 00 00	 call	 ?next@?$ListIter@VSimHyper@@@@QAEPAVSimHyper@@XZ ; ListIter<SimHyper>::next
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax
  0000b	c3		 ret	 0
??E?$ListIter@VSimHyper@@@@QAEHXZ ENDP			; ListIter<SimHyper>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$ListIter@VSimHyper@@@@QAE@AAV?$List@VSimHyper@@@@@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??0?$ListIter@VSimHyper@@@@QAE@AAV?$List@VSimHyper@@@@@Z PROC ; ListIter<SimHyper>::ListIter<SimHyper>, COMDAT
; _this$ = ecx

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _l$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0?$ListIter@VSimHyper@@@@QAE@AAV?$List@VSimHyper@@@@@Z ENDP ; ListIter<SimHyper>::ListIter<SimHyper>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ?size@?$List@VSimHyper@@@@QBEHXZ
_TEXT	SEGMENT
?size@?$List@VSimHyper@@@@QBEHXZ PROC			; List<SimHyper>::size, COMDAT
; _this$ = ecx

; 74   :    int      size()    const      { return items;  }

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c3		 ret	 0
?size@?$List@VSimHyper@@@@QBEHXZ ENDP			; List<SimHyper>::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??1?$List@VSimHyper@@@@QAE@XZ
_TEXT	SEGMENT
??1?$List@VSimHyper@@@@QAE@XZ PROC			; List<SimHyper>::~List<SimHyper>, COMDAT
; _this$ = ecx

; 54   :    ~List()  { delete [] array; }

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$List@VSimHyper@@@@QAE@XZ ENDP			; List<SimHyper>::~List<SimHyper>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$List@VSimHyper@@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@VSimHyper@@@@QAE@XZ PROC			; List<SimHyper>::List<SimHyper>, COMDAT
; _this$ = ecx

; 52   :    List()   : items(0), extent(0), array(0) { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$List@VSimHyper@@@@QAE@XZ ENDP			; List<SimHyper>::List<SimHyper>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??C?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ
_TEXT	SEGMENT
??C?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ PROC	; ListIter<SimRegion>::operator->, COMDAT
; _this$ = ecx

; 110  :    T*  operator->() { return value();     }

  00000	e9 00 00 00 00	 jmp	 ?value@?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ; ListIter<SimRegion>::value
??C?$ListIter@VSimRegion@@@@QAEPAVSimRegion@@XZ ENDP	; ListIter<SimRegion>::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ?isEmpty@?$List@VSimRegion@@@@QBE_NXZ
_TEXT	SEGMENT
?isEmpty@?$List@VSimRegion@@@@QBE_NXZ PROC		; List<SimRegion>::isEmpty, COMDAT
; _this$ = ecx

; 75   :    bool     isEmpty() const      { return !items; }

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 94 c0	 sete	 al
  00007	c3		 ret	 0
?isEmpty@?$List@VSimRegion@@@@QBE_NXZ ENDP		; List<SimRegion>::isEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ??A?$List@VSimRegion@@@@QAEAAPAVSimRegion@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
??A?$List@VSimRegion@@@@QAEAAPAVSimRegion@@H@Z PROC	; List<SimRegion>::operator[], COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 107  :    if (check(index))

  00004	8d 45 08	 lea	 eax, DWORD PTR _index$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?check@?$List@VSimRegion@@@@ABE_NAAH@Z ; List<SimRegion>::check
  0000f	84 c0		 test	 al, al
  00011	74 0e		 je	 SHORT $LN2@operator

; 108  :       return array[index];

  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00019	5e		 pop	 esi
  0001a	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 114  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@operator:

; 109  : 
; 110  :    if (!array || !extent)

  00021	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00025	74 06		 je	 SHORT $LN4@operator
  00027	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0002b	75 09		 jne	 SHORT $LN3@operator
$LN4@operator:

; 111  :       resize(1);

  0002d	6a 01		 push	 1
  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 ?resize@?$List@VSimRegion@@@@AAEXH@Z ; List<SimRegion>::resize
$LN3@operator:

; 112  : 
; 113  :    return array[0];

  00036	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00039	5e		 pop	 esi

; 114  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
??A?$List@VSimRegion@@@@QAEAAPAVSimRegion@@H@Z ENDP	; List<SimRegion>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?removeIndex@?$List@VSimRegion@@@@QAEPAVSimRegion@@H@Z
_TEXT	SEGMENT
_index$ = -4						; size = 4
_index$dead$ = 8					; size = 4
?removeIndex@?$List@VSimRegion@@@@QAEPAVSimRegion@@H@Z PROC ; List<SimRegion>::removeIndex, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 247  :    if (!check(index))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _index$[ebp]
  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0
  0000f	50		 push	 eax
  00010	8b f1		 mov	 esi, ecx
  00012	e8 00 00 00 00	 call	 ?check@?$List@VSimRegion@@@@ABE_NAAH@Z ; List<SimRegion>::check
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN5@removeInde

; 248  :       return 0;

  0001b	33 c0		 xor	 eax, eax
  0001d	5e		 pop	 esi

; 262  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN5@removeInde:

; 249  : 
; 250  :    T* tmp = array[index];

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	8b 55 fc	 mov	 edx, DWORD PTR _index$[ebp]
  0002a	57		 push	 edi
  0002b	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]

; 251  :    array[index] = 0;

  0002e	c7 04 90 00 00
	00 00		 mov	 DWORD PTR [eax+edx*4], 0

; 252  : 
; 253  :    // slide left:
; 254  :    for (int i = index; i < items-1; i++)

  00035	8b 06		 mov	 eax, DWORD PTR [esi]
  00037	48		 dec	 eax
  00038	3b d0		 cmp	 edx, eax
  0003a	7d 17		 jge	 SHORT $LN3@removeInde
  0003c	0f 1f 40 00	 npad	 4
$LL4@removeInde:
  00040	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00043	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00046	42		 inc	 edx

; 255  :       array[i] = array[i+1];

  00047	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004a	89 01		 mov	 DWORD PTR [ecx], eax
  0004c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004e	49		 dec	 ecx
  0004f	3b d1		 cmp	 edx, ecx
  00051	7c ed		 jl	 SHORT $LL4@removeInde
$LN3@removeInde:

; 256  : 
; 257  :    // blank out the hole we just created:
; 258  :    array[items-1] = 0;

  00053	8b 16		 mov	 edx, DWORD PTR [esi]

; 259  : 
; 260  :    items--;
; 261  :    return tmp;

  00055	8b c7		 mov	 eax, edi
  00057	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0005a	5f		 pop	 edi
  0005b	c7 44 91 fc 00
	00 00 00	 mov	 DWORD PTR [ecx+edx*4-4], 0
  00063	ff 0e		 dec	 DWORD PTR [esi]
  00065	5e		 pop	 esi

; 262  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?removeIndex@?$List@VSimRegion@@@@QAEPAVSimRegion@@H@Z ENDP ; List<SimRegion>::removeIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?clear@?$List@VSimRegion@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$List@VSimRegion@@@@QAEXXZ PROC			; List<SimRegion>::clear, COMDAT
; _this$ = ecx

; 61   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 62   :    delete [] array;

  00003	ff 76 08	 push	 DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0000b	83 c4 04	 add	 esp, 4

; 63   :    items       = 0;

  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 64   :    extent  = 0;

  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 65   :    array       = 0;

  0001b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00022	5e		 pop	 esi

; 66   : }

  00023	c3		 ret	 0
?clear@?$List@VSimRegion@@@@QAEXXZ ENDP			; List<SimRegion>::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?destroy@?$List@VSimRegion@@@@QAEXXZ
_TEXT	SEGMENT
?destroy@?$List@VSimRegion@@@@QAEXXZ PROC		; List<SimRegion>::destroy, COMDAT
; _this$ = ecx

; 70   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 71   :    if (items) {

  00003	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00006	74 44		 je	 SHORT $LN5@destroy

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00008	56		 push	 esi
  00009	33 f6		 xor	 esi, esi
  0000b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00011	39 77 04	 cmp	 DWORD PTR [edi+4], esi
  00014	7e 16		 jle	 SHORT $LN3@destroy
$LL4@destroy:

; 75   :          delete array[i];

  00016	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00019	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN2@destroy
  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	6a 01		 push	 1
  00024	ff 10		 call	 DWORD PTR [eax]
$LN2@destroy:

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00026	46		 inc	 esi
  00027	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
  0002a	7c ea		 jl	 SHORT $LL4@destroy
$LN3@destroy:

; 76   : 
; 77   :       delete [] array;

  0002c	ff 77 08	 push	 DWORD PTR [edi+8]
  0002f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00034	83 c4 04	 add	 esp, 4

; 78   :       items       = 0;

  00037	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 79   :       extent  = 0;

  0003d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 80   :       array       = 0;

  00044	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0004b	5e		 pop	 esi
$LN5@destroy:
  0004c	5f		 pop	 edi

; 81   :    }
; 82   : }

  0004d	c3		 ret	 0
?destroy@?$List@VSimRegion@@@@QAEXXZ ENDP		; List<SimRegion>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?removeItem@?$ListIter@VShip@@@@QAEPAVShip@@XZ
_TEXT	SEGMENT
?removeItem@?$ListIter@VShip@@@@QAEPAVShip@@XZ PROC	; ListIter<Ship>::removeItem, COMDAT
; _this$ = ecx

; 416  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 417  :    if (list && step >= 0 && step < list->items)

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 19		 je	 SHORT $LN2@removeItem
  00009	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000c	85 d2		 test	 edx, edx
  0000e	78 12		 js	 SHORT $LN2@removeItem
  00010	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00012	7d 0e		 jge	 SHORT $LN2@removeItem

; 418  :       return list->removeIndex(step--);

  00014	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00017	52		 push	 edx
  00018	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001b	e8 00 00 00 00	 call	 ?removeIndex@?$List@VShip@@@@QAEPAVShip@@H@Z ; List<Ship>::removeIndex
  00020	5e		 pop	 esi

; 421  : }

  00021	c3		 ret	 0
$LN2@removeItem:

; 419  : 
; 420  :    return 0;

  00022	33 c0		 xor	 eax, eax
  00024	5e		 pop	 esi

; 421  : }

  00025	c3		 ret	 0
?removeItem@?$ListIter@VShip@@@@QAEPAVShip@@XZ ENDP	; ListIter<Ship>::removeItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ??A?$List@VElement@@@@QAEAAPAVElement@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
??A?$List@VElement@@@@QAEAAPAVElement@@H@Z PROC		; List<Element>::operator[], COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 107  :    if (check(index))

  00004	8d 45 08	 lea	 eax, DWORD PTR _index$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?check@?$List@VElement@@@@ABE_NAAH@Z ; List<Element>::check
  0000f	84 c0		 test	 al, al
  00011	74 0e		 je	 SHORT $LN2@operator

; 108  :       return array[index];

  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00019	5e		 pop	 esi
  0001a	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 114  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@operator:

; 109  : 
; 110  :    if (!array || !extent)

  00021	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00025	74 06		 je	 SHORT $LN4@operator
  00027	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0002b	75 09		 jne	 SHORT $LN3@operator
$LN4@operator:

; 111  :       resize(1);

  0002d	6a 01		 push	 1
  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 ?resize@?$List@VElement@@@@AAEXH@Z ; List<Element>::resize
$LN3@operator:

; 112  : 
; 113  :    return array[0];

  00036	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00039	5e		 pop	 esi

; 114  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
??A?$List@VElement@@@@QAEAAPAVElement@@H@Z ENDP		; List<Element>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?at@?$List@VElement@@@@QAEAAPAVElement@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?at@?$List@VElement@@@@QAEAAPAVElement@@H@Z PROC	; List<Element>::at, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 127  :    if (check(index))

  00004	8d 45 08	 lea	 eax, DWORD PTR _index$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?check@?$List@VElement@@@@ABE_NAAH@Z ; List<Element>::check
  0000f	84 c0		 test	 al, al
  00011	74 0e		 je	 SHORT $LN2@at

; 128  :       return array[index];

  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00019	5e		 pop	 esi
  0001a	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 134  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@at:

; 129  : 
; 130  :    if (!array || !extent)

  00021	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00025	74 06		 je	 SHORT $LN4@at
  00027	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0002b	75 09		 jne	 SHORT $LN3@at
$LN4@at:

; 131  :       resize(1);

  0002d	6a 01		 push	 1
  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 ?resize@?$List@VElement@@@@AAEXH@Z ; List<Element>::resize
$LN3@at:

; 132  : 
; 133  :    return array[0];

  00036	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00039	5e		 pop	 esi

; 134  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?at@?$List@VElement@@@@QAEAAPAVElement@@H@Z ENDP	; List<Element>::at
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?remove@?$List@VElement@@@@QAEPAVElement@@PBV2@@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?remove@?$List@VElement@@@@QAEPAVElement@@PBV2@@Z PROC	; List<Element>::remove, COMDAT
; _this$ = ecx

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 230  :    if (items == 0 || val == 0)

  00007	8b 17		 mov	 edx, DWORD PTR [edi]
  00009	85 d2		 test	 edx, edx
  0000b	74 1f		 je	 SHORT $LN6@remove
  0000d	8b 75 08	 mov	 esi, DWORD PTR _val$[ebp]
  00010	85 f6		 test	 esi, esi
  00012	74 18		 je	 SHORT $LN6@remove

; 232  : 
; 233  :    for (int i = 0; i < items; i++) {

  00014	33 c0		 xor	 eax, eax
  00016	85 d2		 test	 edx, edx
  00018	7e 12		 jle	 SHORT $LN6@remove

; 234  :       if (array[i] == val) {

  0001a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001d	0f 1f 00	 npad	 3
$LL4@remove:
  00020	39 31		 cmp	 DWORD PTR [ecx], esi
  00022	74 10		 je	 SHORT $LN10@remove

; 232  : 
; 233  :    for (int i = 0; i < items; i++) {

  00024	40		 inc	 eax
  00025	83 c1 04	 add	 ecx, 4
  00028	3b c2		 cmp	 eax, edx
  0002a	7c f4		 jl	 SHORT $LL4@remove
$LN6@remove:
  0002c	5f		 pop	 edi

; 231  :       return 0;

  0002d	33 c0		 xor	 eax, eax
  0002f	5e		 pop	 esi

; 236  :       }
; 237  :    }
; 238  :    
; 239  :    return 0;
; 240  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN10@remove:

; 235  :          return removeIndex(i);

  00034	50		 push	 eax
  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ?removeIndex@?$List@VElement@@@@QAEPAVElement@@H@Z ; List<Element>::removeIndex
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 236  :       }
; 237  :    }
; 238  :    
; 239  :    return 0;
; 240  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?remove@?$List@VElement@@@@QAEPAVElement@@PBV2@@Z ENDP	; List<Element>::remove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?destroy@?$List@VElement@@@@QAEXXZ
_TEXT	SEGMENT
?destroy@?$List@VElement@@@@QAEXXZ PROC			; List<Element>::destroy, COMDAT
; _this$ = ecx

; 70   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 71   :    if (items) {

  00003	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00006	74 44		 je	 SHORT $LN5@destroy

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00008	56		 push	 esi
  00009	33 f6		 xor	 esi, esi
  0000b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00011	39 77 04	 cmp	 DWORD PTR [edi+4], esi
  00014	7e 16		 jle	 SHORT $LN3@destroy
$LL4@destroy:

; 75   :          delete array[i];

  00016	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00019	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN2@destroy
  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	6a 01		 push	 1
  00024	ff 10		 call	 DWORD PTR [eax]
$LN2@destroy:

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00026	46		 inc	 esi
  00027	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
  0002a	7c ea		 jl	 SHORT $LL4@destroy
$LN3@destroy:

; 76   : 
; 77   :       delete [] array;

  0002c	ff 77 08	 push	 DWORD PTR [edi+8]
  0002f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00034	83 c4 04	 add	 esp, 4

; 78   :       items       = 0;

  00037	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 79   :       extent  = 0;

  0003d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 80   :       array       = 0;

  00044	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0004b	5e		 pop	 esi
$LN5@destroy:
  0004c	5f		 pop	 edi

; 81   :    }
; 82   : }

  0004d	c3		 ret	 0
?destroy@?$List@VElement@@@@QAEXXZ ENDP			; List<Element>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?append@?$List@VSimHyper@@@@QAEXPBVSimHyper@@@Z
_TEXT	SEGMENT
_item$ = 8						; size = 4
?append@?$List@VSimHyper@@@@QAEXPBVSimHyper@@@Z PROC	; List<SimHyper>::append, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 174  :    if (item) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR _item$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 18		 je	 SHORT $LN2@append

; 175  :       if (items+1 > extent) resize(items+1);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	40		 inc	 eax
  00011	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00014	7e 06		 jle	 SHORT $LN3@append
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?resize@?$List@VSimHyper@@@@AAEXH@Z ; List<SimHyper>::resize
$LN3@append:

; 176  :       array[items++] = (T*)item;

  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00021	89 3c 88	 mov	 DWORD PTR [eax+ecx*4], edi
  00024	ff 06		 inc	 DWORD PTR [esi]
$LN2@append:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 177  :    }
; 178  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?append@?$List@VSimHyper@@@@QAEXPBVSimHyper@@@Z ENDP	; List<SimHyper>::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?destroy@?$List@VSimHyper@@@@QAEXXZ
_TEXT	SEGMENT
?destroy@?$List@VSimHyper@@@@QAEXXZ PROC		; List<SimHyper>::destroy, COMDAT
; _this$ = ecx

; 70   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 71   :    if (items) {

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 44		 je	 SHORT $LN5@destroy

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00011	39 7e 04	 cmp	 DWORD PTR [esi+4], edi
  00014	7e 16		 jle	 SHORT $LN3@destroy
$LL4@destroy:

; 75   :          delete array[i];

  00016	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00019	6a 30		 push	 48			; 00000030H
  0001b	ff 34 b8	 push	 DWORD PTR [eax+edi*4]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00023	47		 inc	 edi
  00024	83 c4 08	 add	 esp, 8
  00027	3b 7e 04	 cmp	 edi, DWORD PTR [esi+4]
  0002a	7c ea		 jl	 SHORT $LL4@destroy
$LN3@destroy:

; 76   : 
; 77   :       delete [] array;

  0002c	ff 76 08	 push	 DWORD PTR [esi+8]
  0002f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00034	83 c4 04	 add	 esp, 4

; 78   :       items       = 0;

  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 79   :       extent  = 0;

  0003d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 80   :       array       = 0;

  00044	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004b	5f		 pop	 edi
$LN5@destroy:
  0004c	5e		 pop	 esi

; 81   :    }
; 82   : }

  0004d	c3		 ret	 0
?destroy@?$List@VSimHyper@@@@QAEXXZ ENDP		; List<SimHyper>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?next@?$ListIter@VSimHyper@@@@QAEPAVSimHyper@@XZ
_TEXT	SEGMENT
?next@?$ListIter@VSimHyper@@@@QAEPAVSimHyper@@XZ PROC	; ListIter<SimHyper>::next, COMDAT
; _this$ = ecx

; 427  : {

  00000	8b d1		 mov	 edx, ecx
  00002	56		 push	 esi

; 428  :    if (list && step >= -1 && step < list->items-1)

  00003	8b 32		 mov	 esi, DWORD PTR [edx]
  00005	85 f6		 test	 esi, esi
  00007	74 1b		 je	 SHORT $LN2@next
  00009	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0000c	83 f9 ff	 cmp	 ecx, -1
  0000f	7c 13		 jl	 SHORT $LN2@next
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	48		 dec	 eax
  00014	3b c8		 cmp	 ecx, eax
  00016	7d 0c		 jge	 SHORT $LN2@next

; 429  :       return list->array[++step];

  00018	41		 inc	 ecx
  00019	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001f	5e		 pop	 esi
  00020	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 432  : }

  00023	c3		 ret	 0
$LN2@next:

; 430  : 
; 431  :    return 0;

  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 432  : }

  00027	c3		 ret	 0
?next@?$ListIter@VSimHyper@@@@QAEPAVSimHyper@@XZ ENDP	; ListIter<SimHyper>::next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?value@?$ListIter@VSimHyper@@@@QAEPAVSimHyper@@XZ
_TEXT	SEGMENT
?value@?$ListIter@VSimHyper@@@@QAEPAVSimHyper@@XZ PROC	; ListIter<SimHyper>::value, COMDAT
; _this$ = ecx

; 406  :    if (list && step >= 0 && step < list->items)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 12		 je	 SHORT $LN2@value
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	78 0b		 js	 SHORT $LN2@value
  0000d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000f	7d 07		 jge	 SHORT $LN2@value

; 407  :       return list->array[step];

  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 410  : }

  00017	c3		 ret	 0
$LN2@value:

; 408  : 
; 409  :    return 0;

  00018	33 c0		 xor	 eax, eax

; 410  : }

  0001a	c3		 ret	 0
?value@?$ListIter@VSimHyper@@@@QAEPAVSimHyper@@XZ ENDP	; ListIter<SimHyper>::value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?append@?$List@VSimSplash@@@@QAEXPBVSimSplash@@@Z
_TEXT	SEGMENT
_item$ = 8						; size = 4
?append@?$List@VSimSplash@@@@QAEXPBVSimSplash@@@Z PROC	; List<SimSplash>::append, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 174  :    if (item) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR _item$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 18		 je	 SHORT $LN2@append

; 175  :       if (items+1 > extent) resize(items+1);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	40		 inc	 eax
  00011	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00014	7e 06		 jle	 SHORT $LN3@append
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?resize@?$List@VSimSplash@@@@AAEXH@Z ; List<SimSplash>::resize
$LN3@append:

; 176  :       array[items++] = (T*)item;

  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00021	89 3c 88	 mov	 DWORD PTR [eax+ecx*4], edi
  00024	ff 06		 inc	 DWORD PTR [esi]
$LN2@append:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 177  :    }
; 178  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?append@?$List@VSimSplash@@@@QAEXPBVSimSplash@@@Z ENDP	; List<SimSplash>::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?destroy@?$List@VSimSplash@@@@QAEXXZ
_TEXT	SEGMENT
?destroy@?$List@VSimSplash@@@@QAEXXZ PROC		; List<SimSplash>::destroy, COMDAT
; _this$ = ecx

; 70   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 71   :    if (items) {

  00003	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00006	74 52		 je	 SHORT $LN5@destroy

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00008	56		 push	 esi
  00009	33 f6		 xor	 esi, esi
  0000b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00011	39 77 04	 cmp	 DWORD PTR [edi+4], esi
  00014	7e 24		 jle	 SHORT $LN3@destroy
  00016	53		 push	 ebx
$LL4@destroy:

; 75   :          delete array[i];

  00017	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001a	8b 1c b0	 mov	 ebx, DWORD PTR [eax+esi*4]
  0001d	85 db		 test	 ebx, ebx
  0001f	74 12		 je	 SHORT $LN2@destroy
  00021	8b cb		 mov	 ecx, ebx
  00023	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  00028	6a 38		 push	 56			; 00000038H
  0002a	53		 push	 ebx
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN2@destroy:

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00033	46		 inc	 esi
  00034	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
  00037	7c de		 jl	 SHORT $LL4@destroy
  00039	5b		 pop	 ebx
$LN3@destroy:

; 76   : 
; 77   :       delete [] array;

  0003a	ff 77 08	 push	 DWORD PTR [edi+8]
  0003d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00042	83 c4 04	 add	 esp, 4

; 78   :       items       = 0;

  00045	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 79   :       extent  = 0;

  0004b	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 80   :       array       = 0;

  00052	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00059	5e		 pop	 esi
$LN5@destroy:
  0005a	5f		 pop	 edi

; 81   :    }
; 82   : }

  0005b	c3		 ret	 0
?destroy@?$List@VSimSplash@@@@QAEXXZ ENDP		; List<SimSplash>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?next@?$ListIter@VSimSplash@@@@QAEPAVSimSplash@@XZ
_TEXT	SEGMENT
?next@?$ListIter@VSimSplash@@@@QAEPAVSimSplash@@XZ PROC	; ListIter<SimSplash>::next, COMDAT
; _this$ = ecx

; 427  : {

  00000	8b d1		 mov	 edx, ecx
  00002	56		 push	 esi

; 428  :    if (list && step >= -1 && step < list->items-1)

  00003	8b 32		 mov	 esi, DWORD PTR [edx]
  00005	85 f6		 test	 esi, esi
  00007	74 1b		 je	 SHORT $LN2@next
  00009	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0000c	83 f9 ff	 cmp	 ecx, -1
  0000f	7c 13		 jl	 SHORT $LN2@next
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	48		 dec	 eax
  00014	3b c8		 cmp	 ecx, eax
  00016	7d 0c		 jge	 SHORT $LN2@next

; 429  :       return list->array[++step];

  00018	41		 inc	 ecx
  00019	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001f	5e		 pop	 esi
  00020	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 432  : }

  00023	c3		 ret	 0
$LN2@next:

; 430  : 
; 431  :    return 0;

  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 432  : }

  00027	c3		 ret	 0
?next@?$ListIter@VSimSplash@@@@QAEPAVSimSplash@@XZ ENDP	; ListIter<SimSplash>::next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?value@?$ListIter@VSimSplash@@@@QAEPAVSimSplash@@XZ
_TEXT	SEGMENT
?value@?$ListIter@VSimSplash@@@@QAEPAVSimSplash@@XZ PROC ; ListIter<SimSplash>::value, COMDAT
; _this$ = ecx

; 406  :    if (list && step >= 0 && step < list->items)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 12		 je	 SHORT $LN2@value
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	78 0b		 js	 SHORT $LN2@value
  0000d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000f	7d 07		 jge	 SHORT $LN2@value

; 407  :       return list->array[step];

  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 410  : }

  00017	c3		 ret	 0
$LN2@value:

; 408  : 
; 409  :    return 0;

  00018	33 c0		 xor	 eax, eax

; 410  : }

  0001a	c3		 ret	 0
?value@?$ListIter@VSimSplash@@@@QAEPAVSimSplash@@XZ ENDP ; ListIter<SimSplash>::value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?removeItem@?$ListIter@VElement@@@@QAEPAVElement@@XZ
_TEXT	SEGMENT
?removeItem@?$ListIter@VElement@@@@QAEPAVElement@@XZ PROC ; ListIter<Element>::removeItem, COMDAT
; _this$ = ecx

; 416  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 417  :    if (list && step >= 0 && step < list->items)

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 19		 je	 SHORT $LN2@removeItem
  00009	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000c	85 d2		 test	 edx, edx
  0000e	78 12		 js	 SHORT $LN2@removeItem
  00010	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00012	7d 0e		 jge	 SHORT $LN2@removeItem

; 418  :       return list->removeIndex(step--);

  00014	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00017	52		 push	 edx
  00018	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001b	e8 00 00 00 00	 call	 ?removeIndex@?$List@VElement@@@@QAEPAVElement@@H@Z ; List<Element>::removeIndex
  00020	5e		 pop	 esi

; 421  : }

  00021	c3		 ret	 0
$LN2@removeItem:

; 419  : 
; 420  :    return 0;

  00022	33 c0		 xor	 eax, eax
  00024	5e		 pop	 esi

; 421  : }

  00025	c3		 ret	 0
?removeItem@?$ListIter@VElement@@@@QAEPAVElement@@XZ ENDP ; ListIter<Element>::removeItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?destroy@?$List@VShip@@@@QAEXXZ
_TEXT	SEGMENT
?destroy@?$List@VShip@@@@QAEXXZ PROC			; List<Ship>::destroy, COMDAT
; _this$ = ecx

; 70   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 71   :    if (items) {

  00003	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00006	74 44		 je	 SHORT $LN5@destroy

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00008	56		 push	 esi
  00009	33 f6		 xor	 esi, esi
  0000b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00011	39 77 04	 cmp	 DWORD PTR [edi+4], esi
  00014	7e 16		 jle	 SHORT $LN3@destroy
$LL4@destroy:

; 75   :          delete array[i];

  00016	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00019	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN2@destroy
  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	6a 01		 push	 1
  00024	ff 10		 call	 DWORD PTR [eax]
$LN2@destroy:

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00026	46		 inc	 esi
  00027	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
  0002a	7c ea		 jl	 SHORT $LL4@destroy
$LN3@destroy:

; 76   : 
; 77   :       delete [] array;

  0002c	ff 77 08	 push	 DWORD PTR [edi+8]
  0002f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00034	83 c4 04	 add	 esp, 4

; 78   :       items       = 0;

  00037	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 79   :       extent  = 0;

  0003d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 80   :       array       = 0;

  00044	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0004b	5e		 pop	 esi
$LN5@destroy:
  0004c	5f		 pop	 edi

; 81   :    }
; 82   : }

  0004d	c3		 ret	 0
?destroy@?$List@VShip@@@@QAEXXZ ENDP			; List<Ship>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?destroy@?$List@VShot@@@@QAEXXZ
_TEXT	SEGMENT
?destroy@?$List@VShot@@@@QAEXXZ PROC			; List<Shot>::destroy, COMDAT
; _this$ = ecx

; 70   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 71   :    if (items) {

  00003	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00006	74 44		 je	 SHORT $LN5@destroy

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00008	56		 push	 esi
  00009	33 f6		 xor	 esi, esi
  0000b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00011	39 77 04	 cmp	 DWORD PTR [edi+4], esi
  00014	7e 16		 jle	 SHORT $LN3@destroy
$LL4@destroy:

; 75   :          delete array[i];

  00016	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00019	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN2@destroy
  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	6a 01		 push	 1
  00024	ff 10		 call	 DWORD PTR [eax]
$LN2@destroy:

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00026	46		 inc	 esi
  00027	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
  0002a	7c ea		 jl	 SHORT $LL4@destroy
$LN3@destroy:

; 76   : 
; 77   :       delete [] array;

  0002c	ff 77 08	 push	 DWORD PTR [edi+8]
  0002f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00034	83 c4 04	 add	 esp, 4

; 78   :       items       = 0;

  00037	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 79   :       extent  = 0;

  0003d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 80   :       array       = 0;

  00044	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0004b	5e		 pop	 esi
$LN5@destroy:
  0004c	5f		 pop	 edi

; 81   :    }
; 82   : }

  0004d	c3		 ret	 0
?destroy@?$List@VShot@@@@QAEXXZ ENDP			; List<Shot>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?append@?$List@VDrone@@@@QAEXPBVDrone@@@Z
_TEXT	SEGMENT
_item$ = 8						; size = 4
?append@?$List@VDrone@@@@QAEXPBVDrone@@@Z PROC		; List<Drone>::append, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 174  :    if (item) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR _item$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 18		 je	 SHORT $LN2@append

; 175  :       if (items+1 > extent) resize(items+1);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	40		 inc	 eax
  00011	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00014	7e 06		 jle	 SHORT $LN3@append
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?resize@?$List@VDrone@@@@AAEXH@Z ; List<Drone>::resize
$LN3@append:

; 176  :       array[items++] = (T*)item;

  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00021	89 3c 88	 mov	 DWORD PTR [eax+ecx*4], edi
  00024	ff 06		 inc	 DWORD PTR [esi]
$LN2@append:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 177  :    }
; 178  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?append@?$List@VDrone@@@@QAEXPBVDrone@@@Z ENDP		; List<Drone>::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?remove@?$List@VDrone@@@@QAEPAVDrone@@PBV2@@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?remove@?$List@VDrone@@@@QAEPAVDrone@@PBV2@@Z PROC	; List<Drone>::remove, COMDAT
; _this$ = ecx

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 230  :    if (items == 0 || val == 0)

  00007	8b 17		 mov	 edx, DWORD PTR [edi]
  00009	85 d2		 test	 edx, edx
  0000b	74 1f		 je	 SHORT $LN6@remove
  0000d	8b 75 08	 mov	 esi, DWORD PTR _val$[ebp]
  00010	85 f6		 test	 esi, esi
  00012	74 18		 je	 SHORT $LN6@remove

; 232  : 
; 233  :    for (int i = 0; i < items; i++) {

  00014	33 c0		 xor	 eax, eax
  00016	85 d2		 test	 edx, edx
  00018	7e 12		 jle	 SHORT $LN6@remove

; 234  :       if (array[i] == val) {

  0001a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001d	0f 1f 00	 npad	 3
$LL4@remove:
  00020	39 31		 cmp	 DWORD PTR [ecx], esi
  00022	74 10		 je	 SHORT $LN10@remove

; 232  : 
; 233  :    for (int i = 0; i < items; i++) {

  00024	40		 inc	 eax
  00025	83 c1 04	 add	 ecx, 4
  00028	3b c2		 cmp	 eax, edx
  0002a	7c f4		 jl	 SHORT $LL4@remove
$LN6@remove:
  0002c	5f		 pop	 edi

; 231  :       return 0;

  0002d	33 c0		 xor	 eax, eax
  0002f	5e		 pop	 esi

; 236  :       }
; 237  :    }
; 238  :    
; 239  :    return 0;
; 240  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN10@remove:

; 235  :          return removeIndex(i);

  00034	50		 push	 eax
  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ?removeIndex@?$List@VDrone@@@@QAEPAVDrone@@H@Z ; List<Drone>::removeIndex
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 236  :       }
; 237  :    }
; 238  :    
; 239  :    return 0;
; 240  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?remove@?$List@VDrone@@@@QAEPAVDrone@@PBV2@@Z ENDP	; List<Drone>::remove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?append@?$List@VDebris@@@@QAEXPBVDebris@@@Z
_TEXT	SEGMENT
_item$ = 8						; size = 4
?append@?$List@VDebris@@@@QAEXPBVDebris@@@Z PROC	; List<Debris>::append, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 174  :    if (item) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR _item$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 18		 je	 SHORT $LN2@append

; 175  :       if (items+1 > extent) resize(items+1);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	40		 inc	 eax
  00011	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00014	7e 06		 jle	 SHORT $LN3@append
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?resize@?$List@VDebris@@@@AAEXH@Z ; List<Debris>::resize
$LN3@append:

; 176  :       array[items++] = (T*)item;

  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00021	89 3c 88	 mov	 DWORD PTR [eax+ecx*4], edi
  00024	ff 06		 inc	 DWORD PTR [esi]
$LN2@append:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 177  :    }
; 178  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?append@?$List@VDebris@@@@QAEXPBVDebris@@@Z ENDP	; List<Debris>::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?remove@?$List@VDebris@@@@QAEPAVDebris@@PBV2@@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?remove@?$List@VDebris@@@@QAEPAVDebris@@PBV2@@Z PROC	; List<Debris>::remove, COMDAT
; _this$ = ecx

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 230  :    if (items == 0 || val == 0)

  00007	8b 17		 mov	 edx, DWORD PTR [edi]
  00009	85 d2		 test	 edx, edx
  0000b	74 1f		 je	 SHORT $LN6@remove
  0000d	8b 75 08	 mov	 esi, DWORD PTR _val$[ebp]
  00010	85 f6		 test	 esi, esi
  00012	74 18		 je	 SHORT $LN6@remove

; 232  : 
; 233  :    for (int i = 0; i < items; i++) {

  00014	33 c0		 xor	 eax, eax
  00016	85 d2		 test	 edx, edx
  00018	7e 12		 jle	 SHORT $LN6@remove

; 234  :       if (array[i] == val) {

  0001a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001d	0f 1f 00	 npad	 3
$LL4@remove:
  00020	39 31		 cmp	 DWORD PTR [ecx], esi
  00022	74 10		 je	 SHORT $LN10@remove

; 232  : 
; 233  :    for (int i = 0; i < items; i++) {

  00024	40		 inc	 eax
  00025	83 c1 04	 add	 ecx, 4
  00028	3b c2		 cmp	 eax, edx
  0002a	7c f4		 jl	 SHORT $LL4@remove
$LN6@remove:
  0002c	5f		 pop	 edi

; 231  :       return 0;

  0002d	33 c0		 xor	 eax, eax
  0002f	5e		 pop	 esi

; 236  :       }
; 237  :    }
; 238  :    
; 239  :    return 0;
; 240  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN10@remove:

; 235  :          return removeIndex(i);

  00034	50		 push	 eax
  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ?removeIndex@?$List@VDebris@@@@QAEPAVDebris@@H@Z ; List<Debris>::removeIndex
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 236  :       }
; 237  :    }
; 238  :    
; 239  :    return 0;
; 240  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?remove@?$List@VDebris@@@@QAEPAVDebris@@PBV2@@Z ENDP	; List<Debris>::remove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?destroy@?$List@VDebris@@@@QAEXXZ
_TEXT	SEGMENT
?destroy@?$List@VDebris@@@@QAEXXZ PROC			; List<Debris>::destroy, COMDAT
; _this$ = ecx

; 70   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 71   :    if (items) {

  00003	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00006	74 44		 je	 SHORT $LN5@destroy

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00008	56		 push	 esi
  00009	33 f6		 xor	 esi, esi
  0000b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00011	39 77 04	 cmp	 DWORD PTR [edi+4], esi
  00014	7e 16		 jle	 SHORT $LN3@destroy
$LL4@destroy:

; 75   :          delete array[i];

  00016	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00019	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN2@destroy
  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	6a 01		 push	 1
  00024	ff 10		 call	 DWORD PTR [eax]
$LN2@destroy:

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00026	46		 inc	 esi
  00027	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
  0002a	7c ea		 jl	 SHORT $LL4@destroy
$LN3@destroy:

; 76   : 
; 77   :       delete [] array;

  0002c	ff 77 08	 push	 DWORD PTR [edi+8]
  0002f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00034	83 c4 04	 add	 esp, 4

; 78   :       items       = 0;

  00037	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 79   :       extent  = 0;

  0003d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 80   :       array       = 0;

  00044	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0004b	5e		 pop	 esi
$LN5@destroy:
  0004c	5f		 pop	 edi

; 81   :    }
; 82   : }

  0004d	c3		 ret	 0
?destroy@?$List@VDebris@@@@QAEXXZ ENDP			; List<Debris>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?append@?$List@VAsteroid@@@@QAEXPBVAsteroid@@@Z
_TEXT	SEGMENT
_item$ = 8						; size = 4
?append@?$List@VAsteroid@@@@QAEXPBVAsteroid@@@Z PROC	; List<Asteroid>::append, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 174  :    if (item) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR _item$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 18		 je	 SHORT $LN2@append

; 175  :       if (items+1 > extent) resize(items+1);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	40		 inc	 eax
  00011	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00014	7e 06		 jle	 SHORT $LN3@append
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?resize@?$List@VAsteroid@@@@AAEXH@Z ; List<Asteroid>::resize
$LN3@append:

; 176  :       array[items++] = (T*)item;

  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00021	89 3c 88	 mov	 DWORD PTR [eax+ecx*4], edi
  00024	ff 06		 inc	 DWORD PTR [esi]
$LN2@append:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 177  :    }
; 178  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?append@?$List@VAsteroid@@@@QAEXPBVAsteroid@@@Z ENDP	; List<Asteroid>::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?remove@?$List@VAsteroid@@@@QAEPAVAsteroid@@PBV2@@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?remove@?$List@VAsteroid@@@@QAEPAVAsteroid@@PBV2@@Z PROC ; List<Asteroid>::remove, COMDAT
; _this$ = ecx

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 230  :    if (items == 0 || val == 0)

  00007	8b 17		 mov	 edx, DWORD PTR [edi]
  00009	85 d2		 test	 edx, edx
  0000b	74 1f		 je	 SHORT $LN6@remove
  0000d	8b 75 08	 mov	 esi, DWORD PTR _val$[ebp]
  00010	85 f6		 test	 esi, esi
  00012	74 18		 je	 SHORT $LN6@remove

; 232  : 
; 233  :    for (int i = 0; i < items; i++) {

  00014	33 c0		 xor	 eax, eax
  00016	85 d2		 test	 edx, edx
  00018	7e 12		 jle	 SHORT $LN6@remove

; 234  :       if (array[i] == val) {

  0001a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001d	0f 1f 00	 npad	 3
$LL4@remove:
  00020	39 31		 cmp	 DWORD PTR [ecx], esi
  00022	74 10		 je	 SHORT $LN10@remove

; 232  : 
; 233  :    for (int i = 0; i < items; i++) {

  00024	40		 inc	 eax
  00025	83 c1 04	 add	 ecx, 4
  00028	3b c2		 cmp	 eax, edx
  0002a	7c f4		 jl	 SHORT $LL4@remove
$LN6@remove:
  0002c	5f		 pop	 edi

; 231  :       return 0;

  0002d	33 c0		 xor	 eax, eax
  0002f	5e		 pop	 esi

; 236  :       }
; 237  :    }
; 238  :    
; 239  :    return 0;
; 240  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN10@remove:

; 235  :          return removeIndex(i);

  00034	50		 push	 eax
  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ?removeIndex@?$List@VAsteroid@@@@QAEPAVAsteroid@@H@Z ; List<Asteroid>::removeIndex
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 236  :       }
; 237  :    }
; 238  :    
; 239  :    return 0;
; 240  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?remove@?$List@VAsteroid@@@@QAEPAVAsteroid@@PBV2@@Z ENDP ; List<Asteroid>::remove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?destroy@?$List@VAsteroid@@@@QAEXXZ
_TEXT	SEGMENT
?destroy@?$List@VAsteroid@@@@QAEXXZ PROC		; List<Asteroid>::destroy, COMDAT
; _this$ = ecx

; 70   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 71   :    if (items) {

  00003	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00006	74 44		 je	 SHORT $LN5@destroy

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00008	56		 push	 esi
  00009	33 f6		 xor	 esi, esi
  0000b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00011	39 77 04	 cmp	 DWORD PTR [edi+4], esi
  00014	7e 16		 jle	 SHORT $LN3@destroy
$LL4@destroy:

; 75   :          delete array[i];

  00016	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00019	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN2@destroy
  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	6a 01		 push	 1
  00024	ff 10		 call	 DWORD PTR [eax]
$LN2@destroy:

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00026	46		 inc	 esi
  00027	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
  0002a	7c ea		 jl	 SHORT $LL4@destroy
$LN3@destroy:

; 76   : 
; 77   :       delete [] array;

  0002c	ff 77 08	 push	 DWORD PTR [edi+8]
  0002f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00034	83 c4 04	 add	 esp, 4

; 78   :       items       = 0;

  00037	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 79   :       extent  = 0;

  0003d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 80   :       array       = 0;

  00044	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0004b	5e		 pop	 esi
$LN5@destroy:
  0004c	5f		 pop	 edi

; 81   :    }
; 82   : }

  0004d	c3		 ret	 0
?destroy@?$List@VAsteroid@@@@QAEXXZ ENDP		; List<Asteroid>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?append@?$List@VExplosion@@@@QAEXPBVExplosion@@@Z
_TEXT	SEGMENT
_item$ = 8						; size = 4
?append@?$List@VExplosion@@@@QAEXPBVExplosion@@@Z PROC	; List<Explosion>::append, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 174  :    if (item) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR _item$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 18		 je	 SHORT $LN2@append

; 175  :       if (items+1 > extent) resize(items+1);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	40		 inc	 eax
  00011	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00014	7e 06		 jle	 SHORT $LN3@append
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?resize@?$List@VExplosion@@@@AAEXH@Z ; List<Explosion>::resize
$LN3@append:

; 176  :       array[items++] = (T*)item;

  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00021	89 3c 88	 mov	 DWORD PTR [eax+ecx*4], edi
  00024	ff 06		 inc	 DWORD PTR [esi]
$LN2@append:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 177  :    }
; 178  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?append@?$List@VExplosion@@@@QAEXPBVExplosion@@@Z ENDP	; List<Explosion>::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?remove@?$List@VExplosion@@@@QAEPAVExplosion@@PBV2@@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?remove@?$List@VExplosion@@@@QAEPAVExplosion@@PBV2@@Z PROC ; List<Explosion>::remove, COMDAT
; _this$ = ecx

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 230  :    if (items == 0 || val == 0)

  00007	8b 17		 mov	 edx, DWORD PTR [edi]
  00009	85 d2		 test	 edx, edx
  0000b	74 1f		 je	 SHORT $LN6@remove
  0000d	8b 75 08	 mov	 esi, DWORD PTR _val$[ebp]
  00010	85 f6		 test	 esi, esi
  00012	74 18		 je	 SHORT $LN6@remove

; 232  : 
; 233  :    for (int i = 0; i < items; i++) {

  00014	33 c0		 xor	 eax, eax
  00016	85 d2		 test	 edx, edx
  00018	7e 12		 jle	 SHORT $LN6@remove

; 234  :       if (array[i] == val) {

  0001a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001d	0f 1f 00	 npad	 3
$LL4@remove:
  00020	39 31		 cmp	 DWORD PTR [ecx], esi
  00022	74 10		 je	 SHORT $LN10@remove

; 232  : 
; 233  :    for (int i = 0; i < items; i++) {

  00024	40		 inc	 eax
  00025	83 c1 04	 add	 ecx, 4
  00028	3b c2		 cmp	 eax, edx
  0002a	7c f4		 jl	 SHORT $LL4@remove
$LN6@remove:
  0002c	5f		 pop	 edi

; 231  :       return 0;

  0002d	33 c0		 xor	 eax, eax
  0002f	5e		 pop	 esi

; 236  :       }
; 237  :    }
; 238  :    
; 239  :    return 0;
; 240  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN10@remove:

; 235  :          return removeIndex(i);

  00034	50		 push	 eax
  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ?removeIndex@?$List@VExplosion@@@@QAEPAVExplosion@@H@Z ; List<Explosion>::removeIndex
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 236  :       }
; 237  :    }
; 238  :    
; 239  :    return 0;
; 240  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?remove@?$List@VExplosion@@@@QAEPAVExplosion@@PBV2@@Z ENDP ; List<Explosion>::remove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?destroy@?$List@VExplosion@@@@QAEXXZ
_TEXT	SEGMENT
?destroy@?$List@VExplosion@@@@QAEXXZ PROC		; List<Explosion>::destroy, COMDAT
; _this$ = ecx

; 70   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 71   :    if (items) {

  00003	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00006	74 44		 je	 SHORT $LN5@destroy

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00008	56		 push	 esi
  00009	33 f6		 xor	 esi, esi
  0000b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00011	39 77 04	 cmp	 DWORD PTR [edi+4], esi
  00014	7e 16		 jle	 SHORT $LN3@destroy
$LL4@destroy:

; 75   :          delete array[i];

  00016	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00019	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN2@destroy
  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	6a 01		 push	 1
  00024	ff 10		 call	 DWORD PTR [eax]
$LN2@destroy:

; 72   :       items = 0;  // prevent dangerous re-entrancy
; 73   : 
; 74   :       for (int i = 0; i < extent; i++)

  00026	46		 inc	 esi
  00027	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
  0002a	7c ea		 jl	 SHORT $LL4@destroy
$LN3@destroy:

; 76   : 
; 77   :       delete [] array;

  0002c	ff 77 08	 push	 DWORD PTR [edi+8]
  0002f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00034	83 c4 04	 add	 esp, 4

; 78   :       items       = 0;

  00037	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 79   :       extent  = 0;

  0003d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 80   :       array       = 0;

  00044	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0004b	5e		 pop	 esi
$LN5@destroy:
  0004c	5f		 pop	 edi

; 81   :    }
; 82   : }

  0004d	c3		 ret	 0
?destroy@?$List@VExplosion@@@@QAEXXZ ENDP		; List<Explosion>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?removeItem@?$ListIter@VShot@@@@QAEPAVShot@@XZ
_TEXT	SEGMENT
?removeItem@?$ListIter@VShot@@@@QAEPAVShot@@XZ PROC	; ListIter<Shot>::removeItem, COMDAT
; _this$ = ecx

; 416  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 417  :    if (list && step >= 0 && step < list->items)

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 19		 je	 SHORT $LN2@removeItem
  00009	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000c	85 d2		 test	 edx, edx
  0000e	78 12		 js	 SHORT $LN2@removeItem
  00010	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00012	7d 0e		 jge	 SHORT $LN2@removeItem

; 418  :       return list->removeIndex(step--);

  00014	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00017	52		 push	 edx
  00018	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001b	e8 00 00 00 00	 call	 ?removeIndex@?$List@VShot@@@@QAEPAVShot@@H@Z ; List<Shot>::removeIndex
  00020	5e		 pop	 esi

; 421  : }

  00021	c3		 ret	 0
$LN2@removeItem:

; 419  : 
; 420  :    return 0;

  00022	33 c0		 xor	 eax, eax
  00024	5e		 pop	 esi

; 421  : }

  00025	c3		 ret	 0
?removeItem@?$ListIter@VShot@@@@QAEPAVShot@@XZ ENDP	; ListIter<Shot>::removeItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?next@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ
_TEXT	SEGMENT
?next@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ PROC	; ListIter<Explosion>::next, COMDAT
; _this$ = ecx

; 427  : {

  00000	8b d1		 mov	 edx, ecx
  00002	56		 push	 esi

; 428  :    if (list && step >= -1 && step < list->items-1)

  00003	8b 32		 mov	 esi, DWORD PTR [edx]
  00005	85 f6		 test	 esi, esi
  00007	74 1b		 je	 SHORT $LN2@next
  00009	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0000c	83 f9 ff	 cmp	 ecx, -1
  0000f	7c 13		 jl	 SHORT $LN2@next
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	48		 dec	 eax
  00014	3b c8		 cmp	 ecx, eax
  00016	7d 0c		 jge	 SHORT $LN2@next

; 429  :       return list->array[++step];

  00018	41		 inc	 ecx
  00019	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001f	5e		 pop	 esi
  00020	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 432  : }

  00023	c3		 ret	 0
$LN2@next:

; 430  : 
; 431  :    return 0;

  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 432  : }

  00027	c3		 ret	 0
?next@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ENDP	; ListIter<Explosion>::next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?value@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ
_TEXT	SEGMENT
?value@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ PROC ; ListIter<Explosion>::value, COMDAT
; _this$ = ecx

; 406  :    if (list && step >= 0 && step < list->items)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 12		 je	 SHORT $LN2@value
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	78 0b		 js	 SHORT $LN2@value
  0000d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000f	7d 07		 jge	 SHORT $LN2@value

; 407  :       return list->array[step];

  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 410  : }

  00017	c3		 ret	 0
$LN2@value:

; 408  : 
; 409  :    return 0;

  00018	33 c0		 xor	 eax, eax

; 410  : }

  0001a	c3		 ret	 0
?value@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ENDP ; ListIter<Explosion>::value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?removeItem@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ
_TEXT	SEGMENT
?removeItem@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ PROC ; ListIter<Explosion>::removeItem, COMDAT
; _this$ = ecx

; 416  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 417  :    if (list && step >= 0 && step < list->items)

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 19		 je	 SHORT $LN2@removeItem
  00009	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000c	85 d2		 test	 edx, edx
  0000e	78 12		 js	 SHORT $LN2@removeItem
  00010	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00012	7d 0e		 jge	 SHORT $LN2@removeItem

; 418  :       return list->removeIndex(step--);

  00014	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00017	52		 push	 edx
  00018	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001b	e8 00 00 00 00	 call	 ?removeIndex@?$List@VExplosion@@@@QAEPAVExplosion@@H@Z ; List<Explosion>::removeIndex
  00020	5e		 pop	 esi

; 421  : }

  00021	c3		 ret	 0
$LN2@removeItem:

; 419  : 
; 420  :    return 0;

  00022	33 c0		 xor	 eax, eax
  00024	5e		 pop	 esi

; 421  : }

  00025	c3		 ret	 0
?removeItem@?$ListIter@VExplosion@@@@QAEPAVExplosion@@XZ ENDP ; ListIter<Explosion>::removeItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?removeItem@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ
_TEXT	SEGMENT
?removeItem@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ PROC	; ListIter<Debris>::removeItem, COMDAT
; _this$ = ecx

; 416  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 417  :    if (list && step >= 0 && step < list->items)

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 19		 je	 SHORT $LN2@removeItem
  00009	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000c	85 d2		 test	 edx, edx
  0000e	78 12		 js	 SHORT $LN2@removeItem
  00010	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00012	7d 0e		 jge	 SHORT $LN2@removeItem

; 418  :       return list->removeIndex(step--);

  00014	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00017	52		 push	 edx
  00018	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001b	e8 00 00 00 00	 call	 ?removeIndex@?$List@VDebris@@@@QAEPAVDebris@@H@Z ; List<Debris>::removeIndex
  00020	5e		 pop	 esi

; 421  : }

  00021	c3		 ret	 0
$LN2@removeItem:

; 419  : 
; 420  :    return 0;

  00022	33 c0		 xor	 eax, eax
  00024	5e		 pop	 esi

; 421  : }

  00025	c3		 ret	 0
?removeItem@?$ListIter@VDebris@@@@QAEPAVDebris@@XZ ENDP	; ListIter<Debris>::removeItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?contains@?$List@VModel@@@@QBE_NPBVModel@@@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?contains@?$List@VModel@@@@QBE_NPBVModel@@@Z PROC	; List<Model>::contains, COMDAT
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 269  :    if (val) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _val$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 11		 je	 SHORT $LN3@contains

; 270  :       if (index(val) != -1)

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?index@?$List@VModel@@@@QBEHPBVModel@@@Z ; List<Model>::index
  00010	83 f8 ff	 cmp	 eax, -1
  00013	74 06		 je	 SHORT $LN3@contains

; 271  :           return true;

  00015	b0 01		 mov	 al, 1

; 275  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN3@contains:

; 272  :    }
; 273  : 
; 274  :    return false;

  0001b	32 c0		 xor	 al, al

; 275  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?contains@?$List@VModel@@@@QBE_NPBVModel@@@Z ENDP	; List<Model>::contains
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?next@?$ListIter@VModel@@@@QAEPAVModel@@XZ
_TEXT	SEGMENT
?next@?$ListIter@VModel@@@@QAEPAVModel@@XZ PROC		; ListIter<Model>::next, COMDAT
; _this$ = ecx

; 427  : {

  00000	8b d1		 mov	 edx, ecx
  00002	56		 push	 esi

; 428  :    if (list && step >= -1 && step < list->items-1)

  00003	8b 32		 mov	 esi, DWORD PTR [edx]
  00005	85 f6		 test	 esi, esi
  00007	74 1b		 je	 SHORT $LN2@next
  00009	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0000c	83 f9 ff	 cmp	 ecx, -1
  0000f	7c 13		 jl	 SHORT $LN2@next
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	48		 dec	 eax
  00014	3b c8		 cmp	 ecx, eax
  00016	7d 0c		 jge	 SHORT $LN2@next

; 429  :       return list->array[++step];

  00018	41		 inc	 ecx
  00019	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001f	5e		 pop	 esi
  00020	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 432  : }

  00023	c3		 ret	 0
$LN2@next:

; 430  : 
; 431  :    return 0;

  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 432  : }

  00027	c3		 ret	 0
?next@?$ListIter@VModel@@@@QAEPAVModel@@XZ ENDP		; ListIter<Model>::next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?value@?$ListIter@VModel@@@@QAEPAVModel@@XZ
_TEXT	SEGMENT
?value@?$ListIter@VModel@@@@QAEPAVModel@@XZ PROC	; ListIter<Model>::value, COMDAT
; _this$ = ecx

; 406  :    if (list && step >= 0 && step < list->items)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 12		 je	 SHORT $LN2@value
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	78 0b		 js	 SHORT $LN2@value
  0000d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000f	7d 07		 jge	 SHORT $LN2@value

; 407  :       return list->array[step];

  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 410  : }

  00017	c3		 ret	 0
$LN2@value:

; 408  : 
; 409  :    return 0;

  00018	33 c0		 xor	 eax, eax

; 410  : }

  0001a	c3		 ret	 0
?value@?$ListIter@VModel@@@@QAEPAVModel@@XZ ENDP	; ListIter<Model>::value
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSimSplash@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_GSimSplash@@QAEPAXI@Z PROC				; SimSplash::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1Text@@QAE@XZ		; Text::~Text
  00008	6a 38		 push	 56			; 00000038H
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00010	83 c4 08	 add	 esp, 8
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??_GSimSplash@@QAEPAXI@Z ENDP				; SimSplash::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1SimSplash@@QAE@XZ
_TEXT	SEGMENT
??1SimSplash@@QAE@XZ PROC				; SimSplash::~SimSplash, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1Text@@QAE@XZ		; Text::~Text
??1SimSplash@@QAE@XZ ENDP				; SimSplash::~SimSplash
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?removeIndex@?$List@VElement@@@@QAEPAVElement@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?removeIndex@?$List@VElement@@@@QAEPAVElement@@H@Z PROC	; List<Element>::removeIndex, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 247  :    if (!check(index))

  00004	8d 45 08	 lea	 eax, DWORD PTR _index$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?check@?$List@VElement@@@@ABE_NAAH@Z ; List<Element>::check
  0000f	84 c0		 test	 al, al
  00011	75 07		 jne	 SHORT $LN5@removeInde

; 248  :       return 0;

  00013	33 c0		 xor	 eax, eax
  00015	5e		 pop	 esi

; 262  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN5@removeInde:

; 249  : 
; 250  :    T* tmp = array[index];

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  00020	57		 push	 edi
  00021	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]

; 251  :    array[index] = 0;

  00024	c7 04 90 00 00
	00 00		 mov	 DWORD PTR [eax+edx*4], 0

; 252  : 
; 253  :    // slide left:
; 254  :    for (int i = index; i < items-1; i++)

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	48		 dec	 eax
  0002e	3b d0		 cmp	 edx, eax
  00030	7d 13		 jge	 SHORT $LN3@removeInde
$LL4@removeInde:
  00032	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00035	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00038	42		 inc	 edx

; 255  :       array[i] = array[i+1];

  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00040	49		 dec	 ecx
  00041	3b d1		 cmp	 edx, ecx
  00043	7c ed		 jl	 SHORT $LL4@removeInde
$LN3@removeInde:

; 256  : 
; 257  :    // blank out the hole we just created:
; 258  :    array[items-1] = 0;

  00045	8b 16		 mov	 edx, DWORD PTR [esi]

; 259  : 
; 260  :    items--;
; 261  :    return tmp;

  00047	8b c7		 mov	 eax, edi
  00049	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004c	5f		 pop	 edi
  0004d	c7 44 91 fc 00
	00 00 00	 mov	 DWORD PTR [ecx+edx*4-4], 0
  00055	ff 0e		 dec	 DWORD PTR [esi]
  00057	5e		 pop	 esi

; 262  : }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?removeIndex@?$List@VElement@@@@QAEPAVElement@@H@Z ENDP	; List<Element>::removeIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?check@?$List@VElement@@@@ABE_NAAH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?check@?$List@VElement@@@@ABE_NAAH@Z PROC		; List<Element>::check, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 89   :    if (index < 0) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _index$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	85 c9		 test	 ecx, ecx
  0000e	79 1c		 jns	 SHORT $LN2@check

; 90   :       Print("Bounds error in List(%08x) T=%s index=%d min=0\n", (int)this, T::TYPENAME(), index);

  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIEAPHAO@SimObserver?$AA@
  00016	57		 push	 edi
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HIKLCBIP@Bounds?5error?5in?5List?$CI?$CF08x?$CJ?5T?$DN?$CFs?5@
  0001c	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 91   :       index = 0;

  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002a	eb 26		 jmp	 SHORT $LN12@check
$LN2@check:

; 92   :    }
; 93   : 
; 94   :    else if (index >= items) {

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]
  0002e	3b c8		 cmp	 ecx, eax
  00030	7c 1b		 jl	 SHORT $LN4@check

; 95   :       Print("Bounds error in List(%08x) T=%s index=%d max=%d\n", (int)this, T::TYPENAME(), index, items-1);

  00032	48		 dec	 eax
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EIEAPHAO@SimObserver?$AA@
  0003a	57		 push	 edi
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@EEHODDHM@Bounds?5error?5in?5List?$CI?$CF08x?$CJ?5T?$DN?$CFs?5@
  00040	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 96   :       index = items-1;

  00045	8b 07		 mov	 eax, DWORD PTR [edi]
  00047	83 c4 14	 add	 esp, 20			; 00000014H
  0004a	48		 dec	 eax
  0004b	89 06		 mov	 DWORD PTR [esi], eax
$LN4@check:

; 97   :    }
; 98   : 
; 99   :    return (index >= 0 && index < items);

  0004d	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00050	7c 0e		 jl	 SHORT $LN6@check
$LN12@check:
  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	3b 07		 cmp	 eax, DWORD PTR [edi]
  00056	7d 08		 jge	 SHORT $LN6@check
  00058	5f		 pop	 edi
  00059	b0 01		 mov	 al, 1
  0005b	5e		 pop	 esi

; 100  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN6@check:
  00060	5f		 pop	 edi

; 97   :    }
; 98   : 
; 99   :    return (index >= 0 && index < items);

  00061	32 c0		 xor	 al, al
  00063	5e		 pop	 esi

; 100  : }

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?check@?$List@VElement@@@@ABE_NAAH@Z ENDP		; List<Element>::check
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?resize@?$List@VSimHyper@@@@AAEXH@Z
_TEXT	SEGMENT
_newsize$ = 8						; size = 4
?resize@?$List@VSimHyper@@@@AAEXH@Z PROC		; List<SimHyper>::resize, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  :    if (newsize > extent) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _newsize$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0000c	7e 61		 jle	 SHORT $LN8@resize

; 150  :       extent = 16 * (newsize/16 + 1);

  0000e	99		 cdq

; 151  : 
; 152  : #ifdef MEM_DEBUG
; 153  :       T** v = new(__FILE__,__LINE__) PTR[extent];
; 154  : #else
; 155  :       T** v = new PTR[extent];

  0000f	33 c9		 xor	 ecx, ecx
  00011	83 e2 0f	 and	 edx, 15			; 0000000fH
  00014	03 c2		 add	 eax, edx
  00016	ba 04 00 00 00	 mov	 edx, 4
  0001b	c1 f8 04	 sar	 eax, 4
  0001e	40		 inc	 eax
  0001f	c1 e0 04	 shl	 eax, 4
  00022	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00025	f7 e2		 mul	 edx
  00027	57		 push	 edi
  00028	0f 90 c1	 seto	 cl
  0002b	f7 d9		 neg	 ecx
  0002d	0b c8		 or	 ecx, eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 156  : #endif
; 157  :       int i;
; 158  :       for (i = 0; i < items; i++)

  00035	33 c9		 xor	 ecx, ecx
  00037	83 c4 04	 add	 esp, 4
  0003a	8b f8		 mov	 edi, eax
  0003c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0003e	7e 0e		 jle	 SHORT $LN3@resize
$LL4@resize:

; 159  :          v[i] = array[i];

  00040	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00043	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00046	89 04 8f	 mov	 DWORD PTR [edi+ecx*4], eax
  00049	41		 inc	 ecx
  0004a	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  0004c	7c f2		 jl	 SHORT $LL4@resize
$LN3@resize:

; 160  : 
; 161  :       for (; i < extent; i++)

  0004e	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00051	7d 0d		 jge	 SHORT $LN6@resize
$LL7@resize:

; 162  :          v[i] = 0;

  00053	c7 04 8f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx*4], 0
  0005a	41		 inc	 ecx
  0005b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0005e	7c f3		 jl	 SHORT $LL7@resize
$LN6@resize:

; 163  : 
; 164  :       delete [] array;   

  00060	ff 76 08	 push	 DWORD PTR [esi+8]
  00063	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00068	83 c4 04	 add	 esp, 4

; 165  :       array = v;

  0006b	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0006e	5f		 pop	 edi
$LN8@resize:
  0006f	5e		 pop	 esi

; 166  :    }
; 167  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?resize@?$List@VSimHyper@@@@AAEXH@Z ENDP		; List<SimHyper>::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?resize@?$List@VSimSplash@@@@AAEXH@Z
_TEXT	SEGMENT
_newsize$ = 8						; size = 4
?resize@?$List@VSimSplash@@@@AAEXH@Z PROC		; List<SimSplash>::resize, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  :    if (newsize > extent) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _newsize$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0000c	7e 61		 jle	 SHORT $LN8@resize

; 150  :       extent = 16 * (newsize/16 + 1);

  0000e	99		 cdq

; 151  : 
; 152  : #ifdef MEM_DEBUG
; 153  :       T** v = new(__FILE__,__LINE__) PTR[extent];
; 154  : #else
; 155  :       T** v = new PTR[extent];

  0000f	33 c9		 xor	 ecx, ecx
  00011	83 e2 0f	 and	 edx, 15			; 0000000fH
  00014	03 c2		 add	 eax, edx
  00016	ba 04 00 00 00	 mov	 edx, 4
  0001b	c1 f8 04	 sar	 eax, 4
  0001e	40		 inc	 eax
  0001f	c1 e0 04	 shl	 eax, 4
  00022	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00025	f7 e2		 mul	 edx
  00027	57		 push	 edi
  00028	0f 90 c1	 seto	 cl
  0002b	f7 d9		 neg	 ecx
  0002d	0b c8		 or	 ecx, eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 156  : #endif
; 157  :       int i;
; 158  :       for (i = 0; i < items; i++)

  00035	33 c9		 xor	 ecx, ecx
  00037	83 c4 04	 add	 esp, 4
  0003a	8b f8		 mov	 edi, eax
  0003c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0003e	7e 0e		 jle	 SHORT $LN3@resize
$LL4@resize:

; 159  :          v[i] = array[i];

  00040	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00043	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00046	89 04 8f	 mov	 DWORD PTR [edi+ecx*4], eax
  00049	41		 inc	 ecx
  0004a	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  0004c	7c f2		 jl	 SHORT $LL4@resize
$LN3@resize:

; 160  : 
; 161  :       for (; i < extent; i++)

  0004e	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00051	7d 0d		 jge	 SHORT $LN6@resize
$LL7@resize:

; 162  :          v[i] = 0;

  00053	c7 04 8f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx*4], 0
  0005a	41		 inc	 ecx
  0005b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0005e	7c f3		 jl	 SHORT $LL7@resize
$LN6@resize:

; 163  : 
; 164  :       delete [] array;   

  00060	ff 76 08	 push	 DWORD PTR [esi+8]
  00063	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00068	83 c4 04	 add	 esp, 4

; 165  :       array = v;

  0006b	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0006e	5f		 pop	 edi
$LN8@resize:
  0006f	5e		 pop	 esi

; 166  :    }
; 167  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?resize@?$List@VSimSplash@@@@AAEXH@Z ENDP		; List<SimSplash>::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?removeIndex@?$List@VDrone@@@@QAEPAVDrone@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?removeIndex@?$List@VDrone@@@@QAEPAVDrone@@H@Z PROC	; List<Drone>::removeIndex, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 247  :    if (!check(index))

  00004	8d 45 08	 lea	 eax, DWORD PTR _index$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?check@?$List@VDrone@@@@ABE_NAAH@Z ; List<Drone>::check
  0000f	84 c0		 test	 al, al
  00011	75 07		 jne	 SHORT $LN5@removeInde

; 248  :       return 0;

  00013	33 c0		 xor	 eax, eax
  00015	5e		 pop	 esi

; 262  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN5@removeInde:

; 249  : 
; 250  :    T* tmp = array[index];

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  00020	57		 push	 edi
  00021	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]

; 251  :    array[index] = 0;

  00024	c7 04 90 00 00
	00 00		 mov	 DWORD PTR [eax+edx*4], 0

; 252  : 
; 253  :    // slide left:
; 254  :    for (int i = index; i < items-1; i++)

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	48		 dec	 eax
  0002e	3b d0		 cmp	 edx, eax
  00030	7d 13		 jge	 SHORT $LN3@removeInde
$LL4@removeInde:
  00032	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00035	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00038	42		 inc	 edx

; 255  :       array[i] = array[i+1];

  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00040	49		 dec	 ecx
  00041	3b d1		 cmp	 edx, ecx
  00043	7c ed		 jl	 SHORT $LL4@removeInde
$LN3@removeInde:

; 256  : 
; 257  :    // blank out the hole we just created:
; 258  :    array[items-1] = 0;

  00045	8b 16		 mov	 edx, DWORD PTR [esi]

; 259  : 
; 260  :    items--;
; 261  :    return tmp;

  00047	8b c7		 mov	 eax, edi
  00049	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004c	5f		 pop	 edi
  0004d	c7 44 91 fc 00
	00 00 00	 mov	 DWORD PTR [ecx+edx*4-4], 0
  00055	ff 0e		 dec	 DWORD PTR [esi]
  00057	5e		 pop	 esi

; 262  : }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?removeIndex@?$List@VDrone@@@@QAEPAVDrone@@H@Z ENDP	; List<Drone>::removeIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?resize@?$List@VDrone@@@@AAEXH@Z
_TEXT	SEGMENT
_newsize$ = 8						; size = 4
?resize@?$List@VDrone@@@@AAEXH@Z PROC			; List<Drone>::resize, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  :    if (newsize > extent) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _newsize$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0000c	7e 61		 jle	 SHORT $LN8@resize

; 150  :       extent = 16 * (newsize/16 + 1);

  0000e	99		 cdq

; 151  : 
; 152  : #ifdef MEM_DEBUG
; 153  :       T** v = new(__FILE__,__LINE__) PTR[extent];
; 154  : #else
; 155  :       T** v = new PTR[extent];

  0000f	33 c9		 xor	 ecx, ecx
  00011	83 e2 0f	 and	 edx, 15			; 0000000fH
  00014	03 c2		 add	 eax, edx
  00016	ba 04 00 00 00	 mov	 edx, 4
  0001b	c1 f8 04	 sar	 eax, 4
  0001e	40		 inc	 eax
  0001f	c1 e0 04	 shl	 eax, 4
  00022	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00025	f7 e2		 mul	 edx
  00027	57		 push	 edi
  00028	0f 90 c1	 seto	 cl
  0002b	f7 d9		 neg	 ecx
  0002d	0b c8		 or	 ecx, eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 156  : #endif
; 157  :       int i;
; 158  :       for (i = 0; i < items; i++)

  00035	33 c9		 xor	 ecx, ecx
  00037	83 c4 04	 add	 esp, 4
  0003a	8b f8		 mov	 edi, eax
  0003c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0003e	7e 0e		 jle	 SHORT $LN3@resize
$LL4@resize:

; 159  :          v[i] = array[i];

  00040	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00043	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00046	89 04 8f	 mov	 DWORD PTR [edi+ecx*4], eax
  00049	41		 inc	 ecx
  0004a	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  0004c	7c f2		 jl	 SHORT $LL4@resize
$LN3@resize:

; 160  : 
; 161  :       for (; i < extent; i++)

  0004e	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00051	7d 0d		 jge	 SHORT $LN6@resize
$LL7@resize:

; 162  :          v[i] = 0;

  00053	c7 04 8f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx*4], 0
  0005a	41		 inc	 ecx
  0005b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0005e	7c f3		 jl	 SHORT $LL7@resize
$LN6@resize:

; 163  : 
; 164  :       delete [] array;   

  00060	ff 76 08	 push	 DWORD PTR [esi+8]
  00063	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00068	83 c4 04	 add	 esp, 4

; 165  :       array = v;

  0006b	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0006e	5f		 pop	 edi
$LN8@resize:
  0006f	5e		 pop	 esi

; 166  :    }
; 167  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?resize@?$List@VDrone@@@@AAEXH@Z ENDP			; List<Drone>::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?removeIndex@?$List@VDebris@@@@QAEPAVDebris@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?removeIndex@?$List@VDebris@@@@QAEPAVDebris@@H@Z PROC	; List<Debris>::removeIndex, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 247  :    if (!check(index))

  00004	8d 45 08	 lea	 eax, DWORD PTR _index$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?check@?$List@VDebris@@@@ABE_NAAH@Z ; List<Debris>::check
  0000f	84 c0		 test	 al, al
  00011	75 07		 jne	 SHORT $LN5@removeInde

; 248  :       return 0;

  00013	33 c0		 xor	 eax, eax
  00015	5e		 pop	 esi

; 262  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN5@removeInde:

; 249  : 
; 250  :    T* tmp = array[index];

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  00020	57		 push	 edi
  00021	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]

; 251  :    array[index] = 0;

  00024	c7 04 90 00 00
	00 00		 mov	 DWORD PTR [eax+edx*4], 0

; 252  : 
; 253  :    // slide left:
; 254  :    for (int i = index; i < items-1; i++)

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	48		 dec	 eax
  0002e	3b d0		 cmp	 edx, eax
  00030	7d 13		 jge	 SHORT $LN3@removeInde
$LL4@removeInde:
  00032	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00035	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00038	42		 inc	 edx

; 255  :       array[i] = array[i+1];

  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00040	49		 dec	 ecx
  00041	3b d1		 cmp	 edx, ecx
  00043	7c ed		 jl	 SHORT $LL4@removeInde
$LN3@removeInde:

; 256  : 
; 257  :    // blank out the hole we just created:
; 258  :    array[items-1] = 0;

  00045	8b 16		 mov	 edx, DWORD PTR [esi]

; 259  : 
; 260  :    items--;
; 261  :    return tmp;

  00047	8b c7		 mov	 eax, edi
  00049	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004c	5f		 pop	 edi
  0004d	c7 44 91 fc 00
	00 00 00	 mov	 DWORD PTR [ecx+edx*4-4], 0
  00055	ff 0e		 dec	 DWORD PTR [esi]
  00057	5e		 pop	 esi

; 262  : }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?removeIndex@?$List@VDebris@@@@QAEPAVDebris@@H@Z ENDP	; List<Debris>::removeIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?resize@?$List@VDebris@@@@AAEXH@Z
_TEXT	SEGMENT
_newsize$ = 8						; size = 4
?resize@?$List@VDebris@@@@AAEXH@Z PROC			; List<Debris>::resize, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  :    if (newsize > extent) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _newsize$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0000c	7e 61		 jle	 SHORT $LN8@resize

; 150  :       extent = 16 * (newsize/16 + 1);

  0000e	99		 cdq

; 151  : 
; 152  : #ifdef MEM_DEBUG
; 153  :       T** v = new(__FILE__,__LINE__) PTR[extent];
; 154  : #else
; 155  :       T** v = new PTR[extent];

  0000f	33 c9		 xor	 ecx, ecx
  00011	83 e2 0f	 and	 edx, 15			; 0000000fH
  00014	03 c2		 add	 eax, edx
  00016	ba 04 00 00 00	 mov	 edx, 4
  0001b	c1 f8 04	 sar	 eax, 4
  0001e	40		 inc	 eax
  0001f	c1 e0 04	 shl	 eax, 4
  00022	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00025	f7 e2		 mul	 edx
  00027	57		 push	 edi
  00028	0f 90 c1	 seto	 cl
  0002b	f7 d9		 neg	 ecx
  0002d	0b c8		 or	 ecx, eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 156  : #endif
; 157  :       int i;
; 158  :       for (i = 0; i < items; i++)

  00035	33 c9		 xor	 ecx, ecx
  00037	83 c4 04	 add	 esp, 4
  0003a	8b f8		 mov	 edi, eax
  0003c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0003e	7e 0e		 jle	 SHORT $LN3@resize
$LL4@resize:

; 159  :          v[i] = array[i];

  00040	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00043	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00046	89 04 8f	 mov	 DWORD PTR [edi+ecx*4], eax
  00049	41		 inc	 ecx
  0004a	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  0004c	7c f2		 jl	 SHORT $LL4@resize
$LN3@resize:

; 160  : 
; 161  :       for (; i < extent; i++)

  0004e	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00051	7d 0d		 jge	 SHORT $LN6@resize
$LL7@resize:

; 162  :          v[i] = 0;

  00053	c7 04 8f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx*4], 0
  0005a	41		 inc	 ecx
  0005b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0005e	7c f3		 jl	 SHORT $LL7@resize
$LN6@resize:

; 163  : 
; 164  :       delete [] array;   

  00060	ff 76 08	 push	 DWORD PTR [esi+8]
  00063	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00068	83 c4 04	 add	 esp, 4

; 165  :       array = v;

  0006b	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0006e	5f		 pop	 edi
$LN8@resize:
  0006f	5e		 pop	 esi

; 166  :    }
; 167  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?resize@?$List@VDebris@@@@AAEXH@Z ENDP			; List<Debris>::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?removeIndex@?$List@VAsteroid@@@@QAEPAVAsteroid@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?removeIndex@?$List@VAsteroid@@@@QAEPAVAsteroid@@H@Z PROC ; List<Asteroid>::removeIndex, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 247  :    if (!check(index))

  00004	8d 45 08	 lea	 eax, DWORD PTR _index$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?check@?$List@VAsteroid@@@@ABE_NAAH@Z ; List<Asteroid>::check
  0000f	84 c0		 test	 al, al
  00011	75 07		 jne	 SHORT $LN5@removeInde

; 248  :       return 0;

  00013	33 c0		 xor	 eax, eax
  00015	5e		 pop	 esi

; 262  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN5@removeInde:

; 249  : 
; 250  :    T* tmp = array[index];

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  00020	57		 push	 edi
  00021	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]

; 251  :    array[index] = 0;

  00024	c7 04 90 00 00
	00 00		 mov	 DWORD PTR [eax+edx*4], 0

; 252  : 
; 253  :    // slide left:
; 254  :    for (int i = index; i < items-1; i++)

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	48		 dec	 eax
  0002e	3b d0		 cmp	 edx, eax
  00030	7d 13		 jge	 SHORT $LN3@removeInde
$LL4@removeInde:
  00032	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00035	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00038	42		 inc	 edx

; 255  :       array[i] = array[i+1];

  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00040	49		 dec	 ecx
  00041	3b d1		 cmp	 edx, ecx
  00043	7c ed		 jl	 SHORT $LL4@removeInde
$LN3@removeInde:

; 256  : 
; 257  :    // blank out the hole we just created:
; 258  :    array[items-1] = 0;

  00045	8b 16		 mov	 edx, DWORD PTR [esi]

; 259  : 
; 260  :    items--;
; 261  :    return tmp;

  00047	8b c7		 mov	 eax, edi
  00049	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004c	5f		 pop	 edi
  0004d	c7 44 91 fc 00
	00 00 00	 mov	 DWORD PTR [ecx+edx*4-4], 0
  00055	ff 0e		 dec	 DWORD PTR [esi]
  00057	5e		 pop	 esi

; 262  : }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?removeIndex@?$List@VAsteroid@@@@QAEPAVAsteroid@@H@Z ENDP ; List<Asteroid>::removeIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?resize@?$List@VAsteroid@@@@AAEXH@Z
_TEXT	SEGMENT
_newsize$ = 8						; size = 4
?resize@?$List@VAsteroid@@@@AAEXH@Z PROC		; List<Asteroid>::resize, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  :    if (newsize > extent) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _newsize$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0000c	7e 61		 jle	 SHORT $LN8@resize

; 150  :       extent = 16 * (newsize/16 + 1);

  0000e	99		 cdq

; 151  : 
; 152  : #ifdef MEM_DEBUG
; 153  :       T** v = new(__FILE__,__LINE__) PTR[extent];
; 154  : #else
; 155  :       T** v = new PTR[extent];

  0000f	33 c9		 xor	 ecx, ecx
  00011	83 e2 0f	 and	 edx, 15			; 0000000fH
  00014	03 c2		 add	 eax, edx
  00016	ba 04 00 00 00	 mov	 edx, 4
  0001b	c1 f8 04	 sar	 eax, 4
  0001e	40		 inc	 eax
  0001f	c1 e0 04	 shl	 eax, 4
  00022	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00025	f7 e2		 mul	 edx
  00027	57		 push	 edi
  00028	0f 90 c1	 seto	 cl
  0002b	f7 d9		 neg	 ecx
  0002d	0b c8		 or	 ecx, eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 156  : #endif
; 157  :       int i;
; 158  :       for (i = 0; i < items; i++)

  00035	33 c9		 xor	 ecx, ecx
  00037	83 c4 04	 add	 esp, 4
  0003a	8b f8		 mov	 edi, eax
  0003c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0003e	7e 0e		 jle	 SHORT $LN3@resize
$LL4@resize:

; 159  :          v[i] = array[i];

  00040	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00043	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00046	89 04 8f	 mov	 DWORD PTR [edi+ecx*4], eax
  00049	41		 inc	 ecx
  0004a	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  0004c	7c f2		 jl	 SHORT $LL4@resize
$LN3@resize:

; 160  : 
; 161  :       for (; i < extent; i++)

  0004e	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00051	7d 0d		 jge	 SHORT $LN6@resize
$LL7@resize:

; 162  :          v[i] = 0;

  00053	c7 04 8f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx*4], 0
  0005a	41		 inc	 ecx
  0005b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0005e	7c f3		 jl	 SHORT $LL7@resize
$LN6@resize:

; 163  : 
; 164  :       delete [] array;   

  00060	ff 76 08	 push	 DWORD PTR [esi+8]
  00063	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00068	83 c4 04	 add	 esp, 4

; 165  :       array = v;

  0006b	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0006e	5f		 pop	 edi
$LN8@resize:
  0006f	5e		 pop	 esi

; 166  :    }
; 167  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?resize@?$List@VAsteroid@@@@AAEXH@Z ENDP		; List<Asteroid>::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?removeIndex@?$List@VExplosion@@@@QAEPAVExplosion@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?removeIndex@?$List@VExplosion@@@@QAEPAVExplosion@@H@Z PROC ; List<Explosion>::removeIndex, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 247  :    if (!check(index))

  00004	8d 45 08	 lea	 eax, DWORD PTR _index$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?check@?$List@VExplosion@@@@ABE_NAAH@Z ; List<Explosion>::check
  0000f	84 c0		 test	 al, al
  00011	75 07		 jne	 SHORT $LN5@removeInde

; 248  :       return 0;

  00013	33 c0		 xor	 eax, eax
  00015	5e		 pop	 esi

; 262  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN5@removeInde:

; 249  : 
; 250  :    T* tmp = array[index];

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  00020	57		 push	 edi
  00021	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]

; 251  :    array[index] = 0;

  00024	c7 04 90 00 00
	00 00		 mov	 DWORD PTR [eax+edx*4], 0

; 252  : 
; 253  :    // slide left:
; 254  :    for (int i = index; i < items-1; i++)

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	48		 dec	 eax
  0002e	3b d0		 cmp	 edx, eax
  00030	7d 13		 jge	 SHORT $LN3@removeInde
$LL4@removeInde:
  00032	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00035	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00038	42		 inc	 edx

; 255  :       array[i] = array[i+1];

  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00040	49		 dec	 ecx
  00041	3b d1		 cmp	 edx, ecx
  00043	7c ed		 jl	 SHORT $LL4@removeInde
$LN3@removeInde:

; 256  : 
; 257  :    // blank out the hole we just created:
; 258  :    array[items-1] = 0;

  00045	8b 16		 mov	 edx, DWORD PTR [esi]

; 259  : 
; 260  :    items--;
; 261  :    return tmp;

  00047	8b c7		 mov	 eax, edi
  00049	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004c	5f		 pop	 edi
  0004d	c7 44 91 fc 00
	00 00 00	 mov	 DWORD PTR [ecx+edx*4-4], 0
  00055	ff 0e		 dec	 DWORD PTR [esi]
  00057	5e		 pop	 esi

; 262  : }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?removeIndex@?$List@VExplosion@@@@QAEPAVExplosion@@H@Z ENDP ; List<Explosion>::removeIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?resize@?$List@VExplosion@@@@AAEXH@Z
_TEXT	SEGMENT
_newsize$ = 8						; size = 4
?resize@?$List@VExplosion@@@@AAEXH@Z PROC		; List<Explosion>::resize, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  :    if (newsize > extent) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _newsize$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0000c	7e 61		 jle	 SHORT $LN8@resize

; 150  :       extent = 16 * (newsize/16 + 1);

  0000e	99		 cdq

; 151  : 
; 152  : #ifdef MEM_DEBUG
; 153  :       T** v = new(__FILE__,__LINE__) PTR[extent];
; 154  : #else
; 155  :       T** v = new PTR[extent];

  0000f	33 c9		 xor	 ecx, ecx
  00011	83 e2 0f	 and	 edx, 15			; 0000000fH
  00014	03 c2		 add	 eax, edx
  00016	ba 04 00 00 00	 mov	 edx, 4
  0001b	c1 f8 04	 sar	 eax, 4
  0001e	40		 inc	 eax
  0001f	c1 e0 04	 shl	 eax, 4
  00022	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00025	f7 e2		 mul	 edx
  00027	57		 push	 edi
  00028	0f 90 c1	 seto	 cl
  0002b	f7 d9		 neg	 ecx
  0002d	0b c8		 or	 ecx, eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 156  : #endif
; 157  :       int i;
; 158  :       for (i = 0; i < items; i++)

  00035	33 c9		 xor	 ecx, ecx
  00037	83 c4 04	 add	 esp, 4
  0003a	8b f8		 mov	 edi, eax
  0003c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0003e	7e 0e		 jle	 SHORT $LN3@resize
$LL4@resize:

; 159  :          v[i] = array[i];

  00040	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00043	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00046	89 04 8f	 mov	 DWORD PTR [edi+ecx*4], eax
  00049	41		 inc	 ecx
  0004a	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  0004c	7c f2		 jl	 SHORT $LL4@resize
$LN3@resize:

; 160  : 
; 161  :       for (; i < extent; i++)

  0004e	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00051	7d 0d		 jge	 SHORT $LN6@resize
$LL7@resize:

; 162  :          v[i] = 0;

  00053	c7 04 8f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx*4], 0
  0005a	41		 inc	 ecx
  0005b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0005e	7c f3		 jl	 SHORT $LL7@resize
$LN6@resize:

; 163  : 
; 164  :       delete [] array;   

  00060	ff 76 08	 push	 DWORD PTR [esi+8]
  00063	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00068	83 c4 04	 add	 esp, 4

; 165  :       array = v;

  0006b	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0006e	5f		 pop	 edi
$LN8@resize:
  0006f	5e		 pop	 esi

; 166  :    }
; 167  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?resize@?$List@VExplosion@@@@AAEXH@Z ENDP		; List<Explosion>::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
; File d:\programming\starshatter\trunk\ngenex\solid.h
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?index@?$List@VModel@@@@QBEHPBVModel@@@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?index@?$List@VModel@@@@QBEHPBVModel@@@Z PROC		; List<Model>::index, COMDAT
; _this$ = ecx

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 299  :    if (val) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _val$[ebp]
  00007	57		 push	 edi
  00008	85 f6		 test	 esi, esi
  0000a	74 1b		 je	 SHORT $LN15@index

; 300  :       for (int i = 0; i < items; i++) {

  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	33 c0		 xor	 eax, eax
  00010	85 d2		 test	 edx, edx
  00012	7e 13		 jle	 SHORT $LN15@index

; 301  :          if (array[i] && ((*array[i])==(*val)))

  00014	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
$LL4@index:
  00017	8b 0c 87	 mov	 ecx, DWORD PTR [edi+eax*4]
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 04		 je	 SHORT $LN2@index
; File d:\programming\starshatter\trunk\ngenex\solid.h

; 145  :     int operator == (const Model& that) const { return this == &that; }

  0001e	3b ce		 cmp	 ecx, esi
; File d:\programming\starshatter\trunk\foundationex\list.inl

; 301  :          if (array[i] && ((*array[i])==(*val)))

  00020	74 08		 je	 SHORT $LN1@index
$LN2@index:

; 300  :       for (int i = 0; i < items; i++) {

  00022	40		 inc	 eax
  00023	3b c2		 cmp	 eax, edx
  00025	7c f0		 jl	 SHORT $LL4@index
$LN15@index:

; 302  :             return i;
; 303  :       }
; 304  :    }
; 305  : 
; 306  :    return -1;

  00027	83 c8 ff	 or	 eax, -1
$LN1@index:
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi

; 307  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?index@?$List@VModel@@@@QBEHPBVModel@@@Z ENDP		; List<Model>::index
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?check@?$List@VDrone@@@@ABE_NAAH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?check@?$List@VDrone@@@@ABE_NAAH@Z PROC			; List<Drone>::check, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 89   :    if (index < 0) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _index$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	85 c9		 test	 ecx, ecx
  0000e	79 1c		 jns	 SHORT $LN2@check

; 90   :       Print("Bounds error in List(%08x) T=%s index=%d min=0\n", (int)this, T::TYPENAME(), index);

  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_05GAGADLBE@Drone?$AA@
  00016	57		 push	 edi
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HIKLCBIP@Bounds?5error?5in?5List?$CI?$CF08x?$CJ?5T?$DN?$CFs?5@
  0001c	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 91   :       index = 0;

  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002a	eb 26		 jmp	 SHORT $LN12@check
$LN2@check:

; 92   :    }
; 93   : 
; 94   :    else if (index >= items) {

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]
  0002e	3b c8		 cmp	 ecx, eax
  00030	7c 1b		 jl	 SHORT $LN4@check

; 95   :       Print("Bounds error in List(%08x) T=%s index=%d max=%d\n", (int)this, T::TYPENAME(), index, items-1);

  00032	48		 dec	 eax
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_05GAGADLBE@Drone?$AA@
  0003a	57		 push	 edi
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@EEHODDHM@Bounds?5error?5in?5List?$CI?$CF08x?$CJ?5T?$DN?$CFs?5@
  00040	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 96   :       index = items-1;

  00045	8b 07		 mov	 eax, DWORD PTR [edi]
  00047	83 c4 14	 add	 esp, 20			; 00000014H
  0004a	48		 dec	 eax
  0004b	89 06		 mov	 DWORD PTR [esi], eax
$LN4@check:

; 97   :    }
; 98   : 
; 99   :    return (index >= 0 && index < items);

  0004d	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00050	7c 0e		 jl	 SHORT $LN6@check
$LN12@check:
  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	3b 07		 cmp	 eax, DWORD PTR [edi]
  00056	7d 08		 jge	 SHORT $LN6@check
  00058	5f		 pop	 edi
  00059	b0 01		 mov	 al, 1
  0005b	5e		 pop	 esi

; 100  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN6@check:
  00060	5f		 pop	 edi

; 97   :    }
; 98   : 
; 99   :    return (index >= 0 && index < items);

  00061	32 c0		 xor	 al, al
  00063	5e		 pop	 esi

; 100  : }

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?check@?$List@VDrone@@@@ABE_NAAH@Z ENDP			; List<Drone>::check
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?check@?$List@VDebris@@@@ABE_NAAH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?check@?$List@VDebris@@@@ABE_NAAH@Z PROC		; List<Debris>::check, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 89   :    if (index < 0) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _index$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	85 c9		 test	 ecx, ecx
  0000e	79 1c		 jns	 SHORT $LN2@check

; 90   :       Print("Bounds error in List(%08x) T=%s index=%d min=0\n", (int)this, T::TYPENAME(), index);

  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_09NMLPCCMA@SimObject?$AA@
  00016	57		 push	 edi
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HIKLCBIP@Bounds?5error?5in?5List?$CI?$CF08x?$CJ?5T?$DN?$CFs?5@
  0001c	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 91   :       index = 0;

  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002a	eb 26		 jmp	 SHORT $LN12@check
$LN2@check:

; 92   :    }
; 93   : 
; 94   :    else if (index >= items) {

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]
  0002e	3b c8		 cmp	 ecx, eax
  00030	7c 1b		 jl	 SHORT $LN4@check

; 95   :       Print("Bounds error in List(%08x) T=%s index=%d max=%d\n", (int)this, T::TYPENAME(), index, items-1);

  00032	48		 dec	 eax
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_09NMLPCCMA@SimObject?$AA@
  0003a	57		 push	 edi
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@EEHODDHM@Bounds?5error?5in?5List?$CI?$CF08x?$CJ?5T?$DN?$CFs?5@
  00040	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 96   :       index = items-1;

  00045	8b 07		 mov	 eax, DWORD PTR [edi]
  00047	83 c4 14	 add	 esp, 20			; 00000014H
  0004a	48		 dec	 eax
  0004b	89 06		 mov	 DWORD PTR [esi], eax
$LN4@check:

; 97   :    }
; 98   : 
; 99   :    return (index >= 0 && index < items);

  0004d	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00050	7c 0e		 jl	 SHORT $LN6@check
$LN12@check:
  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	3b 07		 cmp	 eax, DWORD PTR [edi]
  00056	7d 08		 jge	 SHORT $LN6@check
  00058	5f		 pop	 edi
  00059	b0 01		 mov	 al, 1
  0005b	5e		 pop	 esi

; 100  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN6@check:
  00060	5f		 pop	 edi

; 97   :    }
; 98   : 
; 99   :    return (index >= 0 && index < items);

  00061	32 c0		 xor	 al, al
  00063	5e		 pop	 esi

; 100  : }

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?check@?$List@VDebris@@@@ABE_NAAH@Z ENDP		; List<Debris>::check
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?check@?$List@VAsteroid@@@@ABE_NAAH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?check@?$List@VAsteroid@@@@ABE_NAAH@Z PROC		; List<Asteroid>::check, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 89   :    if (index < 0) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _index$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	85 c9		 test	 ecx, ecx
  0000e	79 1c		 jns	 SHORT $LN2@check

; 90   :       Print("Bounds error in List(%08x) T=%s index=%d min=0\n", (int)this, T::TYPENAME(), index);

  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_09NMLPCCMA@SimObject?$AA@
  00016	57		 push	 edi
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HIKLCBIP@Bounds?5error?5in?5List?$CI?$CF08x?$CJ?5T?$DN?$CFs?5@
  0001c	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 91   :       index = 0;

  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002a	eb 26		 jmp	 SHORT $LN12@check
$LN2@check:

; 92   :    }
; 93   : 
; 94   :    else if (index >= items) {

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]
  0002e	3b c8		 cmp	 ecx, eax
  00030	7c 1b		 jl	 SHORT $LN4@check

; 95   :       Print("Bounds error in List(%08x) T=%s index=%d max=%d\n", (int)this, T::TYPENAME(), index, items-1);

  00032	48		 dec	 eax
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_09NMLPCCMA@SimObject?$AA@
  0003a	57		 push	 edi
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@EEHODDHM@Bounds?5error?5in?5List?$CI?$CF08x?$CJ?5T?$DN?$CFs?5@
  00040	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 96   :       index = items-1;

  00045	8b 07		 mov	 eax, DWORD PTR [edi]
  00047	83 c4 14	 add	 esp, 20			; 00000014H
  0004a	48		 dec	 eax
  0004b	89 06		 mov	 DWORD PTR [esi], eax
$LN4@check:

; 97   :    }
; 98   : 
; 99   :    return (index >= 0 && index < items);

  0004d	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00050	7c 0e		 jl	 SHORT $LN6@check
$LN12@check:
  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	3b 07		 cmp	 eax, DWORD PTR [edi]
  00056	7d 08		 jge	 SHORT $LN6@check
  00058	5f		 pop	 edi
  00059	b0 01		 mov	 al, 1
  0005b	5e		 pop	 esi

; 100  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN6@check:
  00060	5f		 pop	 edi

; 97   :    }
; 98   : 
; 99   :    return (index >= 0 && index < items);

  00061	32 c0		 xor	 al, al
  00063	5e		 pop	 esi

; 100  : }

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?check@?$List@VAsteroid@@@@ABE_NAAH@Z ENDP		; List<Asteroid>::check
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?check@?$List@VExplosion@@@@ABE_NAAH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?check@?$List@VExplosion@@@@ABE_NAAH@Z PROC		; List<Explosion>::check, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 89   :    if (index < 0) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _index$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	85 c9		 test	 ecx, ecx
  0000e	79 1c		 jns	 SHORT $LN2@check

; 90   :       Print("Bounds error in List(%08x) T=%s index=%d min=0\n", (int)this, T::TYPENAME(), index);

  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_09HGNANIIM@Explosion?$AA@
  00016	57		 push	 edi
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HIKLCBIP@Bounds?5error?5in?5List?$CI?$CF08x?$CJ?5T?$DN?$CFs?5@
  0001c	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 91   :       index = 0;

  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002a	eb 26		 jmp	 SHORT $LN12@check
$LN2@check:

; 92   :    }
; 93   : 
; 94   :    else if (index >= items) {

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]
  0002e	3b c8		 cmp	 ecx, eax
  00030	7c 1b		 jl	 SHORT $LN4@check

; 95   :       Print("Bounds error in List(%08x) T=%s index=%d max=%d\n", (int)this, T::TYPENAME(), index, items-1);

  00032	48		 dec	 eax
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_09HGNANIIM@Explosion?$AA@
  0003a	57		 push	 edi
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@EEHODDHM@Bounds?5error?5in?5List?$CI?$CF08x?$CJ?5T?$DN?$CFs?5@
  00040	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 96   :       index = items-1;

  00045	8b 07		 mov	 eax, DWORD PTR [edi]
  00047	83 c4 14	 add	 esp, 20			; 00000014H
  0004a	48		 dec	 eax
  0004b	89 06		 mov	 DWORD PTR [esi], eax
$LN4@check:

; 97   :    }
; 98   : 
; 99   :    return (index >= 0 && index < items);

  0004d	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00050	7c 0e		 jl	 SHORT $LN6@check
$LN12@check:
  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	3b 07		 cmp	 eax, DWORD PTR [edi]
  00056	7d 08		 jge	 SHORT $LN6@check
  00058	5f		 pop	 edi
  00059	b0 01		 mov	 al, 1
  0005b	5e		 pop	 esi

; 100  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN6@check:
  00060	5f		 pop	 edi

; 97   :    }
; 98   : 
; 99   :    return (index >= 0 && index < items);

  00061	32 c0		 xor	 al, al
  00063	5e		 pop	 esi

; 100  : }

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?check@?$List@VExplosion@@@@ABE_NAAH@Z ENDP		; List<Explosion>::check
_TEXT	ENDS
END
