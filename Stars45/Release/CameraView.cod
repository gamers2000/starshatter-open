; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	d:\programming\starshatter\trunk\ngenex\cameraview.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_07PEMABHH@Graphic?$AA@			; `string'
PUBLIC	??_R2View@@8					; View::`RTTI Base Class Array'
PUBLIC	??_R2CameraView@@8				; CameraView::`RTTI Base Class Array'
PUBLIC	??_R0?AVView@@@8				; View `RTTI Type Descriptor'
PUBLIC	??_R4CameraView@@6B@				; CameraView::`RTTI Complete Object Locator'
PUBLIC	??_7CameraView@@6B@				; CameraView::`vftable'
PUBLIC	??_R1A@?0A@EA@CameraView@@8			; CameraView::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3CameraView@@8				; CameraView::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7View@@6B@					; View::`vftable'
PUBLIC	??_R0?AVCameraView@@@8				; CameraView `RTTI Type Descriptor'
PUBLIC	??_R4View@@6B@					; View::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@View@@8				; View::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3View@@8					; View::`RTTI Class Hierarchy Descriptor'
EXTRN	??MGraphic@@QBEHABV0@@Z:PROC			; Graphic::operator<
EXTRN	??NGraphic@@QBEHABV0@@Z:PROC			; Graphic::operator<=
EXTRN	??0Projector@@QAE@PAVWindow@@PAVCamera@@@Z:PROC	; Projector::Projector
EXTRN	??1Projector@@UAE@XZ:PROC			; Projector::~Projector
EXTRN	?IsVisible@Projector@@QBEHABUVec3@@M@Z:PROC	; Projector::IsVisible
EXTRN	?DrawBitmap@Window@@QAEXHHHHPAVBitmap@@H@Z:PROC	; Window::DrawBitmap
EXTRN	??0Scene@@QAE@XZ:PROC				; Scene::Scene
EXTRN	??1Scene@@UAE@XZ:PROC				; Scene::~Scene
EXTRN	_atexit:PROC
EXTRN	?video_instance@Video@@1PAV1@A:DWORD		; Video::video_instance
EXTRN	?Render@Shadow@@QAEXPAVVideo@@@Z:PROC		; Shadow::Render
;	COMDAT ??_R3View@@8
rdata$r	SEGMENT
??_R3View@@8 DD	00H					; View::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2View@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@View@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@View@@8 DD FLAT:??_R0?AVView@@@8		; View::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3View@@8
rdata$r	ENDS
;	COMDAT ??_R4View@@6B@
rdata$r	SEGMENT
??_R4View@@6B@ DD 00H					; View::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVView@@@8
	DD	FLAT:??_R3View@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCameraView@@@8
data$r	SEGMENT
??_R0?AVCameraView@@@8 DD FLAT:??_7type_info@@6B@	; CameraView `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCameraView@@', 00H
data$r	ENDS
;	COMDAT ??_7View@@6B@
CONST	SEGMENT
??_7View@@6B@ DD FLAT:??_R4View@@6B@			; View::`vftable'
	DD	FLAT:??_EView@@UAEPAXI@Z
	DD	FLAT:?Refresh@View@@UAEXXZ
	DD	FLAT:?OnWindowMove@View@@UAEXXZ
	DD	FLAT:?OnShow@View@@UAEXXZ
	DD	FLAT:?OnHide@View@@UAEXXZ
	DD	FLAT:?SetWindow@View@@UAEXPAVWindow@@@Z
	DD	FLAT:?GetWindow@View@@UAEPAVWindow@@XZ
CONST	ENDS
;	COMDAT ?nelem@?BJ@??RenderLensFlare@CameraView@@UAEXXZ@4HA
CONST	SEGMENT
?nelem@?BJ@??RenderLensFlare@CameraView@@UAEXXZ@4HA DD 0cH ; `CameraView::RenderLensFlare'::`25'::nelem
CONST	ENDS
;	COMDAT ??_R3CameraView@@8
rdata$r	SEGMENT
??_R3CameraView@@8 DD 00H				; CameraView::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CameraView@@8
rdata$r	ENDS
;	COMDAT ?elem_size@?BJ@??RenderLensFlare@CameraView@@UAEXXZ@4PAMA
CONST	SEGMENT
?elem_size@?BJ@??RenderLensFlare@CameraView@@UAEXXZ@4PAMA DD 03e99999ar ; 0.3 ; `CameraView::RenderLensFlare'::`25'::elem_size
	DD	03e4ccccdr			; 0.2
	DD	03ecccccdr			; 0.4
	DD	03e99999ar			; 0.3
	DD	03ecccccdr			; 0.4
	DD	03e4ccccdr			; 0.2
	DD	03f19999ar			; 0.6
	DD	03dcccccdr			; 0.1
	DD	03dcccccdr			; 0.1
	DD	03fcccccdr			; 1.6
	DD	03f800000r			; 1
	DD	03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CameraView@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CameraView@@8 DD FLAT:??_R0?AVCameraView@@@8 ; CameraView::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CameraView@@8
rdata$r	ENDS
;	COMDAT ??_7CameraView@@6B@
CONST	SEGMENT
??_7CameraView@@6B@ DD FLAT:??_R4CameraView@@6B@	; CameraView::`vftable'
	DD	FLAT:??_ECameraView@@UAEPAXI@Z
	DD	FLAT:?Refresh@CameraView@@UAEXXZ
	DD	FLAT:?OnWindowMove@CameraView@@UAEXXZ
	DD	FLAT:?OnShow@View@@UAEXXZ
	DD	FLAT:?OnHide@View@@UAEXXZ
	DD	FLAT:?SetWindow@View@@UAEXPAVWindow@@@Z
	DD	FLAT:?GetWindow@View@@UAEPAVWindow@@XZ
	DD	FLAT:?UseCamera@CameraView@@UAEXPAVCamera@@@Z
	DD	FLAT:?UseScene@CameraView@@UAEXPAVScene@@@Z
	DD	FLAT:?LensFlareElements@CameraView@@UAEXPAVBitmap@@000@Z
	DD	FLAT:?LensFlare@CameraView@@UAEXHN@Z
	DD	FLAT:?SetDepthScale@CameraView@@UAEXM@Z
	DD	FLAT:?SetFieldOfView@CameraView@@UAEXN@Z
	DD	FLAT:?GetFieldOfView@CameraView@@UBENXZ
	DD	FLAT:?SetProjectionType@CameraView@@UAEXK@Z
	DD	FLAT:?GetProjectionType@CameraView@@UBEKXZ
	DD	FLAT:?TranslateScene@CameraView@@UAEXXZ
	DD	FLAT:?UnTranslateScene@CameraView@@UAEXXZ
	DD	FLAT:?MarkVisibleObjects@CameraView@@UAEXXZ
	DD	FLAT:?MarkVisibleLights@CameraView@@UAEXPAVGraphic@@K@Z
	DD	FLAT:?RenderScene@CameraView@@UAEXXZ
	DD	FLAT:?RenderSceneObjects@CameraView@@UAEX_N@Z
	DD	FLAT:?RenderForeground@CameraView@@UAEXXZ
	DD	FLAT:?RenderBackground@CameraView@@UAEXXZ
	DD	FLAT:?RenderSprites@CameraView@@UAEXXZ
	DD	FLAT:?RenderLensFlare@CameraView@@UAEXXZ
	DD	FLAT:?Render@CameraView@@UAEXPAVGraphic@@K@Z
	DD	FLAT:?FindDepth@CameraView@@UAEXPAVGraphic@@@Z
	DD	FLAT:?SetInfinite@CameraView@@UAEHH@Z
	DD	FLAT:?WorldPlaneToView@CameraView@@MAEXAAUPlane@@@Z
CONST	ENDS
;	COMDAT ?elem_dist@?BJ@??RenderLensFlare@CameraView@@UAEXXZ@4PAMA
CONST	SEGMENT
?elem_dist@?BJ@??RenderLensFlare@CameraView@@UAEXXZ@4PAMA DD 0be4ccccdr ; -0.2 ; `CameraView::RenderLensFlare'::`25'::elem_dist
	DD	03f000000r			; 0.5
	DD	03f0ccccdr			; 0.55
	DD	03f1eb852r			; 0.62
	DD	03f9d70a4r			; 1.23
	DD	03faa3d71r			; 1.33
	DD	03faccccdr			; 1.35
	DD	03f4ccccdr			; 0.8
	DD	03f666666r			; 0.9
	DD	03fb33333r			; 1.4
	DD	03fd9999ar			; 1.7
	DD	03fe66666r			; 1.8
CONST	ENDS
;	COMDAT ??_R4CameraView@@6B@
rdata$r	SEGMENT
??_R4CameraView@@6B@ DD 00H				; CameraView::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCameraView@@@8
	DD	FLAT:??_R3CameraView@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVView@@@8
data$r	SEGMENT
??_R0?AVView@@@8 DD FLAT:??_7type_info@@6B@		; View `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVView@@', 00H
data$r	ENDS
;	COMDAT ??_R2CameraView@@8
rdata$r	SEGMENT
??_R2CameraView@@8 DD FLAT:??_R1A@?0A@EA@CameraView@@8	; CameraView::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@View@@8
rdata$r	ENDS
;	COMDAT ?elem_indx@?BJ@??RenderLensFlare@CameraView@@UAEXXZ@4PAHA
CONST	SEGMENT
?elem_indx@?BJ@??RenderLensFlare@CameraView@@UAEXXZ@4PAHA DD 00H ; `CameraView::RenderLensFlare'::`25'::elem_indx
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	02H
CONST	ENDS
;	COMDAT ??_R2View@@8
rdata$r	SEGMENT
??_R2View@@8 DD	FLAT:??_R1A@?0A@EA@View@@8		; View::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_C@_07PEMABHH@Graphic?$AA@
CONST	SEGMENT
??_C@_07PEMABHH@Graphic?$AA@ DB 'Graphic', 00H		; `string'
_DATA	ENDS
PUBLIC	?swap@?$List@VGraphic@@@@AAEXPAPAVGraphic@@HH@Z	; List<Graphic>::swap
PUBLIC	?check@?$List@VGraphic@@@@ABE_NAAH@Z		; List<Graphic>::check
PUBLIC	?resize@?$List@VGraphic@@@@AAEXH@Z		; List<Graphic>::resize
PUBLIC	?qsort@?$List@VGraphic@@@@AAEXPAPAVGraphic@@HH@Z ; List<Graphic>::qsort
PUBLIC	?value@?$ListIter@VShadow@@@@QAEPAVShadow@@XZ	; ListIter<Shadow>::value
PUBLIC	?next@?$ListIter@VShadow@@@@QAEPAVShadow@@XZ	; ListIter<Shadow>::next
PUBLIC	?value@?$ListIter@VLight@@@@QAEPAVLight@@XZ	; ListIter<Light>::value
PUBLIC	?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ	; ListIter<Light>::next
PUBLIC	?attach@?$ListIter@VGraphic@@@@QAEXAAV?$List@VGraphic@@@@@Z ; ListIter<Graphic>::attach
PUBLIC	?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ	; ListIter<Graphic>::value
PUBLIC	?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ	; ListIter<Graphic>::next
PUBLIC	?sort@?$List@VGraphic@@@@QAEXXZ			; List<Graphic>::sort
PUBLIC	?clear@?$List@VGraphic@@@@QAEXXZ		; List<Graphic>::clear
PUBLIC	?append@?$List@VGraphic@@@@QAEXPBVGraphic@@@Z	; List<Graphic>::append
PUBLIC	??A?$List@VGraphic@@@@QBEPAVGraphic@@H@Z	; List<Graphic>::operator[]
PUBLIC	??0?$List@VGraphic@@@@QAE@XZ			; List<Graphic>::List<Graphic>
PUBLIC	??1?$List@VGraphic@@@@QAE@XZ			; List<Graphic>::~List<Graphic>
PUBLIC	?last@?$List@VGraphic@@@@QBEPAVGraphic@@XZ	; List<Graphic>::last
PUBLIC	?size@?$List@VGraphic@@@@QBEHXZ			; List<Graphic>::size
PUBLIC	?isEmpty@?$List@VGraphic@@@@QBE_NXZ		; List<Graphic>::isEmpty
PUBLIC	??0?$ListIter@VGraphic@@@@QAE@AAV?$List@VGraphic@@@@@Z ; ListIter<Graphic>::ListIter<Graphic>
PUBLIC	??E?$ListIter@VGraphic@@@@QAEHXZ		; ListIter<Graphic>::operator++
PUBLIC	?reset@?$ListIter@VGraphic@@@@QAEXXZ		; ListIter<Graphic>::reset
PUBLIC	??0?$ListIter@VLight@@@@QAE@AAV?$List@VLight@@@@@Z ; ListIter<Light>::ListIter<Light>
PUBLIC	??E?$ListIter@VLight@@@@QAEHXZ			; ListIter<Light>::operator++
PUBLIC	??0?$ListIter@VShadow@@@@QAE@AAV?$List@VShadow@@@@@Z ; ListIter<Shadow>::ListIter<Shadow>
PUBLIC	??E?$ListIter@VShadow@@@@QAEHXZ			; ListIter<Shadow>::operator++
PUBLIC	?SetDepthScale@CameraView@@UAEXM@Z		; CameraView::SetDepthScale
PUBLIC	?WorldPlaneToView@CameraView@@MAEXAAUPlane@@@Z	; CameraView::WorldPlaneToView
PUBLIC	?RenderLensFlare@CameraView@@UAEXXZ		; CameraView::RenderLensFlare
PUBLIC	?Render@CameraView@@UAEXPAVGraphic@@K@Z		; CameraView::Render
PUBLIC	?RenderSceneObjects@CameraView@@UAEX_N@Z	; CameraView::RenderSceneObjects
PUBLIC	?RenderScene@CameraView@@UAEXXZ			; CameraView::RenderScene
PUBLIC	?RenderSprites@CameraView@@UAEXXZ		; CameraView::RenderSprites
PUBLIC	?RenderForeground@CameraView@@UAEXXZ		; CameraView::RenderForeground
PUBLIC	?RenderBackground@CameraView@@UAEXXZ		; CameraView::RenderBackground
PUBLIC	?MarkVisibleLights@CameraView@@UAEXPAVGraphic@@K@Z ; CameraView::MarkVisibleLights
PUBLIC	?MarkVisibleObjects@CameraView@@UAEXXZ		; CameraView::MarkVisibleObjects
PUBLIC	?UnTranslateScene@CameraView@@UAEXXZ		; CameraView::UnTranslateScene
PUBLIC	?TranslateScene@CameraView@@UAEXXZ		; CameraView::TranslateScene
PUBLIC	?Refresh@CameraView@@UAEXXZ			; CameraView::Refresh
PUBLIC	?FindDepth@CameraView@@UAEXPAVGraphic@@@Z	; CameraView::FindDepth
PUBLIC	?SetInfinite@CameraView@@UAEHH@Z		; CameraView::SetInfinite
PUBLIC	?LensFlareElements@CameraView@@UAEXPAVBitmap@@000@Z ; CameraView::LensFlareElements
PUBLIC	?LensFlare@CameraView@@UAEXHN@Z			; CameraView::LensFlare
PUBLIC	?OnWindowMove@CameraView@@UAEXXZ		; CameraView::OnWindowMove
PUBLIC	?GetProjectionType@CameraView@@UBEKXZ		; CameraView::GetProjectionType
PUBLIC	?SetProjectionType@CameraView@@UAEXK@Z		; CameraView::SetProjectionType
PUBLIC	?GetFieldOfView@CameraView@@UBENXZ		; CameraView::GetFieldOfView
PUBLIC	?SetFieldOfView@CameraView@@UAEXN@Z		; CameraView::SetFieldOfView
PUBLIC	?UseScene@CameraView@@UAEXPAVScene@@@Z		; CameraView::UseScene
PUBLIC	?UseCamera@CameraView@@UAEXPAVCamera@@@Z	; CameraView::UseCamera
PUBLIC	??1CameraView@@UAE@XZ				; CameraView::~CameraView
PUBLIC	??_GCameraView@@UAEPAXI@Z			; CameraView::`scalar deleting destructor'
PUBLIC	??0CameraView@@QAE@PAVWindow@@PAVCamera@@PAVScene@@@Z ; CameraView::CameraView
PUBLIC	?GetShadows@Solid@@QAEAAV?$List@VShadow@@@@XZ	; Solid::GetShadows
PUBLIC	?Radius@Graphic@@QBEMXZ				; Graphic::Radius
PUBLIC	?IsVisible@Graphic@@QBE_NXZ			; Graphic::IsVisible
PUBLIC	?TYPENAME@Graphic@@SAPBDXZ			; Graphic::TYPENAME
PUBLIC	?CastsShadow@Light@@QBE_NXZ			; Light::CastsShadow
PUBLIC	?SetActive@Light@@QAEX_N@Z			; Light::SetActive
PUBLIC	?IsActive@Light@@QBE_NXZ			; Light::IsActive
PUBLIC	?Intensity@Light@@QBEMXZ			; Light::Intensity
PUBLIC	?Type@Light@@QBEKXZ				; Light::Type
PUBLIC	?Location@Light@@QBE?AUPoint@@XZ		; Light::Location
PUBLIC	?Ambient@Scene@@QAE?AVColor@@XZ			; Scene::Ambient
PUBLIC	?Lights@Scene@@QAEAAV?$List@VLight@@@@XZ	; Scene::Lights
PUBLIC	?Sprites@Scene@@QAEAAV?$List@VGraphic@@@@XZ	; Scene::Sprites
PUBLIC	?Graphics@Scene@@QAEAAV?$List@VGraphic@@@@XZ	; Scene::Graphics
PUBLIC	?Foreground@Scene@@QAEAAV?$List@VGraphic@@@@XZ	; Scene::Foreground
PUBLIC	?Background@Scene@@QAEAAV?$List@VGraphic@@@@XZ	; Scene::Background
PUBLIC	?GetInstance@Video@@SAPAV1@XZ			; Video::GetInstance
PUBLIC	?SetOrthogonal@Projector@@QAEX_N@Z		; Projector::SetOrthogonal
PUBLIC	??0Color@@QAE@ABV0@@Z				; Color::Color
PUBLIC	?Height@Window@@QBEHXZ				; Window::Height
PUBLIC	?Width@Window@@QBEHXZ				; Window::Width
PUBLIC	?GetRect@Window@@QBEABURect@@XZ			; Window::GetRect
PUBLIC	??DPoint@@QBENABU0@@Z				; Point::operator*
PUBLIC	??GPoint@@QBE?AU0@XZ				; Point::operator-
PUBLIC	??4Vec3@@QAEAAU0@ABU0@@Z			; Vec3::operator=
PUBLIC	??DVec3@@QBEMABU0@@Z				; Vec3::operator*
PUBLIC	??GVec3@@QBE?AU0@ABU0@@Z			; Vec3::operator-
PUBLIC	??0Vec3@@QAE@XZ					; Vec3::Vec3
PUBLIC	??0Rect@@QAE@XZ					; Rect::Rect
PUBLIC	??_GView@@UAEPAXI@Z				; View::`scalar deleting destructor'
PUBLIC	?GetWindow@View@@UAEPAVWindow@@XZ		; View::GetWindow
PUBLIC	?SetWindow@View@@UAEXPAVWindow@@@Z		; View::SetWindow
PUBLIC	?OnHide@View@@UAEXXZ				; View::OnHide
PUBLIC	?OnShow@View@@UAEXXZ				; View::OnShow
PUBLIC	?OnWindowMove@View@@UAEXXZ			; View::OnWindowMove
PUBLIC	?Refresh@View@@UAEXXZ				; View::Refresh
PUBLIC	??1View@@UAE@XZ					; View::~View
PUBLIC	??0View@@QAE@PAVWindow@@@Z			; View::View
EXTRN	??_EView@@UAEPAXI@Z:PROC			; View::`vector deleting destructor'
EXTRN	??_ECameraView@@UAEPAXI@Z:PROC			; CameraView::`vector deleting destructor'
?emergency_cam@@3VCamera@@A DB 068H DUP (?)		; emergency_cam
?emergency_scene@@3VScene@@A DB 044H DUP (?)		; emergency_scene
_BSS	ENDS
?emergency_cam$initializer$@@3P6AXXZA DD FLAT:??__Eemergency_cam@@YAXXZ ; emergency_cam$initializer$
	ORG $+2360
__unwindtable$??0CameraView@@QAE@PAVWindow@@PAVCamera@@PAVScene@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CameraView@@QAE@PAVWindow@@PAVCamera@@PAVScene@@@Z$0
	ORG $+26028
__ehfuncinfo$??0CameraView@@QAE@PAVWindow@@PAVCamera@@PAVScene@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CameraView@@QAE@PAVWindow@@PAVCamera@@PAVScene@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
?emergency_scene$initializer$@@3P6AXXZA DD FLAT:??__Eemergency_scene@@YAXXZ ; emergency_scene$initializer$
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\view.h
;	COMDAT ??0View@@QAE@PAVWindow@@@Z
_TEXT	SEGMENT
_c$ = 8							; size = 4
??0View@@QAE@PAVWindow@@@Z PROC				; View::View, COMDAT
; _this$ = ecx

; 57   :     View(Window* c) : window(c)               { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7View@@6B@
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0View@@QAE@PAVWindow@@@Z ENDP				; View::View
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\view.h
;	COMDAT ??1View@@UAE@XZ
_TEXT	SEGMENT
??1View@@UAE@XZ PROC					; View::~View, COMDAT
; _this$ = ecx

; 58   :     virtual ~View()                           { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7View@@6B@
  00006	c3		 ret	 0
??1View@@UAE@XZ ENDP					; View::~View
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\view.h
;	COMDAT ?Refresh@View@@UAEXXZ
_TEXT	SEGMENT
?Refresh@View@@UAEXXZ PROC				; View::Refresh, COMDAT
; _this$ = ecx

; 63   :     virtual void      Refresh()               { }

  00000	c3		 ret	 0
?Refresh@View@@UAEXXZ ENDP				; View::Refresh
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\view.h
;	COMDAT ?OnWindowMove@View@@UAEXXZ
_TEXT	SEGMENT
?OnWindowMove@View@@UAEXXZ PROC				; View::OnWindowMove, COMDAT
; _this$ = ecx

; 64   :     virtual void      OnWindowMove()          { }

  00000	c3		 ret	 0
?OnWindowMove@View@@UAEXXZ ENDP				; View::OnWindowMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\view.h
;	COMDAT ?OnShow@View@@UAEXXZ
_TEXT	SEGMENT
?OnShow@View@@UAEXXZ PROC				; View::OnShow, COMDAT
; _this$ = ecx

; 65   :     virtual void      OnShow()                { }

  00000	c3		 ret	 0
?OnShow@View@@UAEXXZ ENDP				; View::OnShow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\view.h
;	COMDAT ?OnHide@View@@UAEXXZ
_TEXT	SEGMENT
?OnHide@View@@UAEXXZ PROC				; View::OnHide, COMDAT
; _this$ = ecx

; 66   :     virtual void      OnHide()                { }

  00000	c3		 ret	 0
?OnHide@View@@UAEXXZ ENDP				; View::OnHide
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\view.h
;	COMDAT ?SetWindow@View@@UAEXPAVWindow@@@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
?SetWindow@View@@UAEXPAVWindow@@@Z PROC			; View::SetWindow, COMDAT
; _this$ = ecx

; 68   :     virtual void      SetWindow(Window* w)    { window = w; OnWindowMove(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _w$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	ff 50 08	 call	 DWORD PTR [eax+8]
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?SetWindow@View@@UAEXPAVWindow@@@Z ENDP			; View::SetWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\view.h
;	COMDAT ?GetWindow@View@@UAEPAVWindow@@XZ
_TEXT	SEGMENT
?GetWindow@View@@UAEPAVWindow@@XZ PROC			; View::GetWindow, COMDAT
; _this$ = ecx

; 69   :     virtual Window*   GetWindow()             { return window; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetWindow@View@@UAEPAVWindow@@XZ ENDP			; View::GetWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\view.h
;	COMDAT ??_GView@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GView@@UAEPAXI@Z PROC				; View::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 58   :     virtual ~View()                           { }

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7View@@6B@
  00010	74 0b		 je	 SHORT $LN7@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GView@@UAEPAXI@Z ENDP				; View::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
;	COMDAT ??0Rect@@QAE@XZ
_TEXT	SEGMENT
??0Rect@@QAE@XZ PROC					; Rect::Rect, COMDAT
; _this$ = ecx

; 63   :     Rect()                                 : x(0),  y(0),  w(0),  h(0)  { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c3		 ret	 0
??0Rect@@QAE@XZ ENDP					; Rect::Rect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
;	COMDAT ??0Vec3@@QAE@XZ
_TEXT	SEGMENT
??0Vec3@@QAE@XZ PROC					; Vec3::Vec3, COMDAT
; _this$ = ecx

; 174  :     Vec3() { }

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0Vec3@@QAE@XZ ENDP					; Vec3::Vec3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
;	COMDAT ??GVec3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_p$ = 12						; size = 4
??GVec3@@QBE?AU0@ABU0@@Z PROC				; Vec3::operator-, COMDAT
; _this$ = ecx

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 0c	 mov	 edx, DWORD PTR _p$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0000a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  0000d	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  00011	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  00015	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0001a	f3 0f 5c 42 04	 subss	 xmm0, DWORD PTR [edx+4]

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  00024	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00029	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??GVec3@@QBE?AU0@ABU0@@Z ENDP				; Vec3::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
;	COMDAT ??DVec3@@QBEMABU0@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??DVec3@@QBEMABU0@@Z PROC				; Vec3::operator*, COMDAT
; _this$ = ecx

; 187  :     float  operator* (const Vec3& p)  const { return (x*p.x + y*p.y + z*p.z);    }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0000a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0000f	f3 0f 59 09	 mulss	 xmm1, DWORD PTR [ecx]
  00013	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  00018	f3 0f 58 c1	 addss	 xmm0, xmm1
  0001c	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  00021	f3 0f 59 49 08	 mulss	 xmm1, DWORD PTR [ecx+8]
  00026	f3 0f 58 c1	 addss	 xmm0, xmm1
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??DVec3@@QBEMABU0@@Z ENDP				; Vec3::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
;	COMDAT ??4Vec3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??4Vec3@@QAEAAU0@ABU0@@Z PROC				; Vec3::operator=, COMDAT
; _this$ = ecx

; 190  :     Vec3&  operator= (const Vec3& p)  { x =p.x; y =p.y; z =p.z; return *this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00016	8b c1		 mov	 eax, ecx
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??4Vec3@@QAEAAU0@ABU0@@Z ENDP				; Vec3::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
;	COMDAT ??GPoint@@QBE?AU0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??GPoint@@QBE?AU0@XZ PROC				; Point::operator-, COMDAT
; _this$ = ecx

; 229  :     Point operator- ()               const { return Point(-x, -y, -z);          }

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00013	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]

; 229  :     Point operator- ()               const { return Point(-x, -y, -z);          }

  00016	0f 28 0d 00 00
	00 00		 movaps	 xmm1, XMMWORD PTR __xmm@80000000000000008000000000000000
  0001d	0f 57 c1	 xorps	 xmm0, xmm1
  00020	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00024	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 229  :     Point operator- ()               const { return Point(-x, -y, -z);          }

  00027	f2 0f 10 41 10	 movsd	 xmm0, QWORD PTR [ecx+16]
  0002c	0f 57 c1	 xorps	 xmm0, xmm1

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  0002f	f2 0f 11 40 10	 movsd	 QWORD PTR [eax+16], xmm0

; 229  :     Point operator- ()               const { return Point(-x, -y, -z);          }

  00034	5d		 pop	 ebp
  00035	8b e3		 mov	 esp, ebx
  00037	5b		 pop	 ebx
  00038	c2 04 00	 ret	 4
??GPoint@@QBE?AU0@XZ ENDP				; Point::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
;	COMDAT ??DPoint@@QBENABU0@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??DPoint@@QBENABU0@@Z PROC				; Point::operator*, COMDAT
; _this$ = ecx

; 232  :     double operator*(const Point& p) const { return (x*p.x + y*p.y + z*p.z);    }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	f2 0f 10 08	 movsd	 xmm1, QWORD PTR [eax]
  0000a	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  0000f	f2 0f 59 09	 mulsd	 xmm1, QWORD PTR [ecx]
  00013	f2 0f 59 41 08	 mulsd	 xmm0, QWORD PTR [ecx+8]
  00018	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0001c	f2 0f 10 48 10	 movsd	 xmm1, QWORD PTR [eax+16]
  00021	f2 0f 59 49 10	 mulsd	 xmm1, QWORD PTR [ecx+16]
  00026	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??DPoint@@QBENABU0@@Z ENDP				; Point::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\window.h
;	COMDAT ?GetRect@Window@@QBEABURect@@XZ
_TEXT	SEGMENT
?GetRect@Window@@QBEABURect@@XZ PROC			; Window::GetRect, COMDAT
; _this$ = ecx

; 70   :     const Rect&       GetRect()            const { return rect;    }

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetRect@Window@@QBEABURect@@XZ ENDP			; Window::GetRect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\window.h
;	COMDAT ?Width@Window@@QBEHXZ
_TEXT	SEGMENT
?Width@Window@@QBEHXZ PROC				; Window::Width, COMDAT
; _this$ = ecx

; 73   :     int               Width()              const { return rect.w;  }

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	c3		 ret	 0
?Width@Window@@QBEHXZ ENDP				; Window::Width
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\window.h
;	COMDAT ?Height@Window@@QBEHXZ
_TEXT	SEGMENT
?Height@Window@@QBEHXZ PROC				; Window::Height, COMDAT
; _this$ = ecx

; 74   :     int               Height()             const { return rect.h;  }

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	c3		 ret	 0
?Height@Window@@QBEHXZ ENDP				; Window::Height
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\color.h
;	COMDAT ??0Color@@QAE@ABV0@@Z
_TEXT	SEGMENT
_c$ = 8							; size = 4
??0Color@@QAE@ABV0@@Z PROC				; Color::Color, COMDAT
; _this$ = ecx

; 101  :     Color(const Color& c) : rgba(c.rgba) { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b c1		 mov	 eax, ecx
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??0Color@@QAE@ABV0@@Z ENDP				; Color::Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\projector.h
;	COMDAT ?SetOrthogonal@Projector@@QAEX_N@Z
_TEXT	SEGMENT
_o$ = 8							; size = 1
?SetOrthogonal@Projector@@QAEX_N@Z PROC			; Projector::SetOrthogonal, COMDAT
; _this$ = ecx

; 76   :     void           SetOrthogonal(bool o)   { orthogonal = o;    }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _o$[ebp]
  00006	88 41 60	 mov	 BYTE PTR [ecx+96], al
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetOrthogonal@Projector@@QAEX_N@Z ENDP			; Projector::SetOrthogonal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\video.h
;	COMDAT ?GetInstance@Video@@SAPAV1@XZ
_TEXT	SEGMENT
?GetInstance@Video@@SAPAV1@XZ PROC			; Video::GetInstance, COMDAT

; 231  :     static Video*        GetInstance()           { return video_instance; }

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_instance@Video@@1PAV1@A ; Video::video_instance
  00005	c3		 ret	 0
?GetInstance@Video@@SAPAV1@XZ ENDP			; Video::GetInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\scene.h
;	COMDAT ?Background@Scene@@QAEAAV?$List@VGraphic@@@@XZ
_TEXT	SEGMENT
?Background@Scene@@QAEAAV?$List@VGraphic@@@@XZ PROC	; Scene::Background, COMDAT
; _this$ = ecx

; 74   :     List<Graphic>&    Background()               { return background; }

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?Background@Scene@@QAEAAV?$List@VGraphic@@@@XZ ENDP	; Scene::Background
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\scene.h
;	COMDAT ?Foreground@Scene@@QAEAAV?$List@VGraphic@@@@XZ
_TEXT	SEGMENT
?Foreground@Scene@@QAEAAV?$List@VGraphic@@@@XZ PROC	; Scene::Foreground, COMDAT
; _this$ = ecx

; 75   :     List<Graphic>&    Foreground()               { return foreground; }

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00003	c3		 ret	 0
?Foreground@Scene@@QAEAAV?$List@VGraphic@@@@XZ ENDP	; Scene::Foreground
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\scene.h
;	COMDAT ?Graphics@Scene@@QAEAAV?$List@VGraphic@@@@XZ
_TEXT	SEGMENT
?Graphics@Scene@@QAEAAV?$List@VGraphic@@@@XZ PROC	; Scene::Graphics, COMDAT
; _this$ = ecx

; 76   :     List<Graphic>&    Graphics()                 { return graphics;   }

  00000	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?Graphics@Scene@@QAEAAV?$List@VGraphic@@@@XZ ENDP	; Scene::Graphics
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\scene.h
;	COMDAT ?Sprites@Scene@@QAEAAV?$List@VGraphic@@@@XZ
_TEXT	SEGMENT
?Sprites@Scene@@QAEAAV?$List@VGraphic@@@@XZ PROC	; Scene::Sprites, COMDAT
; _this$ = ecx

; 77   :     List<Graphic>&    Sprites()                  { return sprites;    }

  00000	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  00003	c3		 ret	 0
?Sprites@Scene@@QAEAAV?$List@VGraphic@@@@XZ ENDP	; Scene::Sprites
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\scene.h
;	COMDAT ?Lights@Scene@@QAEAAV?$List@VLight@@@@XZ
_TEXT	SEGMENT
?Lights@Scene@@QAEAAV?$List@VLight@@@@XZ PROC		; Scene::Lights, COMDAT
; _this$ = ecx

; 78   :     List<Light>&      Lights()                   { return lights;     }

  00000	8d 41 34	 lea	 eax, DWORD PTR [ecx+52]
  00003	c3		 ret	 0
?Lights@Scene@@QAEAAV?$List@VLight@@@@XZ ENDP		; Scene::Lights
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\color.h
; File d:\programming\starshatter\trunk\ngenex\scene.h
;	COMDAT ?Ambient@Scene@@QAE?AVColor@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?Ambient@Scene@@QAE?AVColor@@XZ PROC			; Scene::Ambient, COMDAT
; _this$ = ecx

; 79   :     Color             Ambient()                  { return ambient;    }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File d:\programming\starshatter\trunk\ngenex\color.h

; 101  :     Color(const Color& c) : rgba(c.rgba) { }

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  00009	89 08		 mov	 DWORD PTR [eax], ecx
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 79   :     Color             Ambient()                  { return ambient;    }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?Ambient@Scene@@QAE?AVColor@@XZ ENDP			; Scene::Ambient
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\light.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\light.h
;	COMDAT ?Location@Light@@QBE?AUPoint@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?Location@Light@@QBE?AUPoint@@XZ PROC			; Light::Location, COMDAT
; _this$ = ecx

; 77   :     Point             Location()        const { return loc;     }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
  0000a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0000d	f2 0f 10 41 20	 movsd	 xmm0, QWORD PTR [ecx+32]
  00012	f2 0f 11 40 10	 movsd	 QWORD PTR [eax+16], xmm0
; File d:\programming\starshatter\trunk\ngenex\light.h

; 77   :     Point             Location()        const { return loc;     }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?Location@Light@@QBE?AUPoint@@XZ ENDP			; Light::Location
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\light.h
;	COMDAT ?Type@Light@@QBEKXZ
_TEXT	SEGMENT
?Type@Light@@QBEKXZ PROC				; Light::Type, COMDAT
; _this$ = ecx

; 79   :     DWORD             Type()            const { return type;    }

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	c3		 ret	 0
?Type@Light@@QBEKXZ ENDP				; Light::Type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\light.h
;	COMDAT ?Intensity@Light@@QBEMXZ
_TEXT	SEGMENT
?Intensity@Light@@QBEMXZ PROC				; Light::Intensity, COMDAT
; _this$ = ecx

; 81   :     float             Intensity()       const { return light;   }

  00000	f3 0f 10 41 2c	 movss	 xmm0, DWORD PTR [ecx+44]
  00005	c3		 ret	 0
?Intensity@Light@@QBEMXZ ENDP				; Light::Intensity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\light.h
;	COMDAT ?IsActive@Light@@QBE_NXZ
_TEXT	SEGMENT
?IsActive@Light@@QBE_NXZ PROC				; Light::IsActive, COMDAT
; _this$ = ecx

; 85   :     bool              IsActive()        const { return active;  }

  00000	8a 41 38	 mov	 al, BYTE PTR [ecx+56]
  00003	c3		 ret	 0
?IsActive@Light@@QBE_NXZ ENDP				; Light::IsActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\light.h
;	COMDAT ?SetActive@Light@@QAEX_N@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
?SetActive@Light@@QAEX_N@Z PROC				; Light::SetActive, COMDAT
; _this$ = ecx

; 86   :     void              SetActive(bool a)       { active = a;     }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _a$[ebp]
  00006	88 41 38	 mov	 BYTE PTR [ecx+56], al
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetActive@Light@@QAEX_N@Z ENDP				; Light::SetActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\light.h
;	COMDAT ?CastsShadow@Light@@QBE_NXZ
_TEXT	SEGMENT
?CastsShadow@Light@@QBE_NXZ PROC			; Light::CastsShadow, COMDAT
; _this$ = ecx

; 87   :     bool              CastsShadow()     const { return shadow;  }

  00000	8a 41 39	 mov	 al, BYTE PTR [ecx+57]
  00003	c3		 ret	 0
?CastsShadow@Light@@QBE_NXZ ENDP			; Light::CastsShadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
;	COMDAT ?TYPENAME@Graphic@@SAPBDXZ
_TEXT	SEGMENT
?TYPENAME@Graphic@@SAPBDXZ PROC				; Graphic::TYPENAME, COMDAT

; 62   :     static const char* TYPENAME() { return "Graphic"; }

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07PEMABHH@Graphic?$AA@
  00005	c3		 ret	 0
?TYPENAME@Graphic@@SAPBDXZ ENDP				; Graphic::TYPENAME
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
;	COMDAT ?IsVisible@Graphic@@QBE_NXZ
_TEXT	SEGMENT
?IsVisible@Graphic@@QBE_NXZ PROC			; Graphic::IsVisible, COMDAT
; _this$ = ecx

; 91   :     bool              IsVisible()    const { return visible; }

  00000	8a 41 34	 mov	 al, BYTE PTR [ecx+52]
  00003	c3		 ret	 0
?IsVisible@Graphic@@QBE_NXZ ENDP			; Graphic::IsVisible
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
;	COMDAT ?Radius@Graphic@@QBEMXZ
_TEXT	SEGMENT
?Radius@Graphic@@QBEMXZ PROC				; Graphic::Radius, COMDAT
; _this$ = ecx

; 93   :     float             Radius()       const { return radius;  }

  00000	f3 0f 10 41 2c	 movss	 xmm0, DWORD PTR [ecx+44]
  00005	c3		 ret	 0
?Radius@Graphic@@QBEMXZ ENDP				; Graphic::Radius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\solid.h
;	COMDAT ?GetShadows@Solid@@QAEAAV?$List@VShadow@@@@XZ
_TEXT	SEGMENT
?GetShadows@Solid@@QAEAAV?$List@VShadow@@@@XZ PROC	; Solid::GetShadows, COMDAT
; _this$ = ecx

; 98   :     List<Shadow>&  GetShadows()         { return shadows;       }

  00000	8d 81 d4 00 00
	00		 lea	 eax, DWORD PTR [ecx+212]
  00006	c3		 ret	 0
?GetShadows@Solid@@QAEAAV?$List@VShadow@@@@XZ ENDP	; Solid::GetShadows
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
;	COMDAT ??__Eemergency_cam@@YAXXZ
text$di	SEGMENT
??__Eemergency_cam@@YAXXZ PROC				; `dynamic initializer for 'emergency_cam'', COMDAT

; 60   : static Camera  emergency_cam;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 c0	 and	 esp, -64		; ffffffc0H
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET ?emergency_cam@@3VCamera@@A
  00011	0f 11 44 24 08	 movups	 XMMWORD PTR [esp+8], xmm0
  00016	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0001b	e8 00 00 00 00	 call	 ??0Camera@@QAE@NNN@Z	; Camera::Camera
  00020	68 00 00 00 00	 push	 OFFSET ??__Femergency_cam@@YAXXZ ; `dynamic atexit destructor for 'emergency_cam''
  00025	e8 00 00 00 00	 call	 _atexit
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??__Eemergency_cam@@YAXXZ ENDP				; `dynamic initializer for 'emergency_cam''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Femergency_cam@@YAXXZ
text$yd	SEGMENT
??__Femergency_cam@@YAXXZ PROC				; `dynamic atexit destructor for 'emergency_cam'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?emergency_cam@@3VCamera@@A
  00005	e9 00 00 00 00	 jmp	 ??1Camera@@UAE@XZ	; Camera::~Camera
??__Femergency_cam@@YAXXZ ENDP				; `dynamic atexit destructor for 'emergency_cam''
text$yd	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
;	COMDAT ??__Eemergency_scene@@YAXXZ
text$di	SEGMENT
??__Eemergency_scene@@YAXXZ PROC			; `dynamic initializer for 'emergency_scene'', COMDAT

; 61   : static Scene   emergency_scene;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?emergency_scene@@3VScene@@A
  00005	e8 00 00 00 00	 call	 ??0Scene@@QAE@XZ	; Scene::Scene
  0000a	68 00 00 00 00	 push	 OFFSET ??__Femergency_scene@@YAXXZ ; `dynamic atexit destructor for 'emergency_scene''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eemergency_scene@@YAXXZ ENDP			; `dynamic initializer for 'emergency_scene''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Femergency_scene@@YAXXZ
text$yd	SEGMENT
??__Femergency_scene@@YAXXZ PROC			; `dynamic atexit destructor for 'emergency_scene'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?emergency_scene@@3VScene@@A
  00005	e9 00 00 00 00	 jmp	 ??1Scene@@UAE@XZ	; Scene::~Scene
??__Femergency_scene@@YAXXZ ENDP			; `dynamic atexit destructor for 'emergency_scene''
text$yd	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\view.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\window.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c$ = 8							; size = 4
_cam$ = 12						; size = 4
_s$ = 16						; size = 4
??0CameraView@@QAE@PAVWindow@@PAVCamera@@PAVScene@@@Z PROC ; CameraView::CameraView
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CameraView@@QAE@PAVWindow@@PAVCamera@@PAVScene@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File d:\programming\starshatter\trunk\ngenex\view.h

; 57   :     View(Window* c) : window(c)               { }

  00029	8b 55 08	 mov	 edx, DWORD PTR _c$[ebp]
  0002c	89 56 04	 mov	 DWORD PTR [esi+4], edx
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 66   :     : View(c), video(0), camera(cam), projector(c, cam), scene(s),

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _cam$[ebp]
  00032	0f 57 c0	 xorps	 xmm0, xmm0
  00035	8b 45 10	 mov	 eax, DWORD PTR _s$[ebp]
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00042	51		 push	 ecx
  00043	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CameraView@@6B@
  00049	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  0004c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0004f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00056	52		 push	 edx
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 217  :     Point()                                : x(0),   y(0),   z(0)    { }

  00057	0f 11 46 18	 movups	 XMMWORD PTR [esi+24], xmm0
  0005b	f2 0f 11 46 28	 movsd	 QWORD PTR [esi+40], xmm0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 66   :     : View(c), video(0), camera(cam), projector(c, cam), scene(s),

  00060	e8 00 00 00 00	 call	 ??0Projector@@QAE@PAVWindow@@PAVCamera@@@Z ; Projector::Projector

; 67   :       lens_flare_enable(0), halo_bitmap(0),  infinite(0),

  00065	c7 86 50 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+336], 0

; 68   :       projection_type(Video::PROJECTION_PERSPECTIVE)

  0006f	c7 86 5c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+348], 1

; 67   :       lens_flare_enable(0), halo_bitmap(0),  infinite(0),

  00079	c7 86 60 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+352], 0
  00083	c7 86 70 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+368], 0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 52   :    List()   : items(0), extent(0), array(0) { }

  0008d	c7 86 80 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+384], 0
  00097	c7 86 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+388], 0
  000a1	c7 86 88 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+392], 0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 70   :     elem_bitmap[0] = 0;

  000ab	c7 86 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+372], 0

; 71   :     elem_bitmap[1] = 0;

  000b5	c7 86 78 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+376], 0

; 72   :     elem_bitmap[2] = 0;

  000bf	c7 86 7c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+380], 0

; 73   : 
; 74   :     if (!camera)

  000c9	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  000cd	75 07		 jne	 SHORT $LN2@CameraView

; 75   :     camera = &emergency_cam;

  000cf	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?emergency_cam@@3VCamera@@A
$LN2@CameraView:

; 76   : 
; 77   :     if (!scene)

  000d6	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  000da	75 07		 jne	 SHORT $LN3@CameraView

; 78   :     scene = &emergency_scene;

  000dc	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], OFFSET ?emergency_scene@@3VScene@@A
$LN3@CameraView:
; File d:\programming\starshatter\trunk\ngenex\window.h

; 70   :     const Rect&       GetRect()            const { return rect;    }

  000e3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 80   :     Rect r = window->GetRect();

  000e6	0f 10 48 04	 movups	 xmm1, XMMWORD PTR [eax+4]

; 81   :     width  = r.w;
; 82   :     height = r.h;
; 83   : }

  000ea	8b c6		 mov	 eax, esi
  000ec	0f 28 c1	 movaps	 xmm0, xmm1
  000ef	66 0f 73 d9 0c	 psrldq	 xmm1, 12		; 0000000cH
  000f4	66 0f 73 d8 08	 psrldq	 xmm0, 8
  000f9	66 0f 7e 86 54
	01 00 00	 movd	 DWORD PTR [esi+340], xmm0
  00101	66 0f 7e 8e 58
	01 00 00	 movd	 DWORD PTR [esi+344], xmm1
  00109	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00113	59		 pop	 ecx
  00114	5e		 pop	 esi
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CameraView@@QAE@PAVWindow@@PAVCamera@@PAVScene@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1View@@UAE@XZ		; View::~View
__ehhandler$??0CameraView@@QAE@PAVWindow@@PAVCamera@@PAVScene@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CameraView@@QAE@PAVWindow@@PAVCamera@@PAVScene@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CameraView@@QAE@PAVWindow@@PAVCamera@@PAVScene@@@Z ENDP ; CameraView::CameraView
; Function compile flags: /Ogtp
;	COMDAT ??_GCameraView@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCameraView@@UAEPAXI@Z PROC				; CameraView::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CameraView@@UAE@XZ	; CameraView::~CameraView
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 90 01 00 00	 push	 400			; 00000190H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCameraView@@UAEPAXI@Z ENDP				; CameraView::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\view.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
??1CameraView@@UAE@XZ PROC				; CameraView::~CameraView
; _this$ = ecx

; 86   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 54   :    ~List()  { delete [] array; }

  00003	ff b6 88 01 00
	00		 push	 DWORD PTR [esi+392]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 86   : {

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CameraView@@6B@
; File d:\programming\starshatter\trunk\foundationex\list.h

; 54   :    ~List()  { delete [] array; }

  0000f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00014	83 c4 04	 add	 esp, 4
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 87   : }

  00017	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  0001a	e8 00 00 00 00	 call	 ??1Projector@@UAE@XZ	; Projector::~Projector
; File d:\programming\starshatter\trunk\ngenex\view.h

; 58   :     virtual ~View()                           { }

  0001f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7View@@6B@
  00025	5e		 pop	 esi
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 87   : }

  00026	c3		 ret	 0
??1CameraView@@UAE@XZ ENDP				; CameraView::~CameraView
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_cam$ = 8						; size = 4
?UseCamera@CameraView@@UAEXPAVCamera@@@Z PROC		; CameraView::UseCamera
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 94   :     if (cam)

  00003	8b 45 08	 mov	 eax, DWORD PTR _cam$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 12		 je	 SHORT $LN2@UseCamera

; 95   :     camera = cam;

  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 96   :     else
; 97   :     camera = &emergency_cam;
; 98   : 
; 99   :     projector.UseCamera(camera);

  0000f	8d 4a 58	 lea	 ecx, DWORD PTR [edx+88]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	ff 72 08	 push	 DWORD PTR [edx+8]
  00017	ff 50 08	 call	 DWORD PTR [eax+8]

; 100  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
$LN2@UseCamera:

; 96   :     else
; 97   :     camera = &emergency_cam;
; 98   : 
; 99   :     projector.UseCamera(camera);

  0001e	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00021	8d 4a 58	 lea	 ecx, DWORD PTR [edx+88]
  00024	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?emergency_cam@@3VCamera@@A
  0002b	ff 72 08	 push	 DWORD PTR [edx+8]
  0002e	ff 50 08	 call	 DWORD PTR [eax+8]

; 100  : }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?UseCamera@CameraView@@UAEXPAVCamera@@@Z ENDP		; CameraView::UseCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_s$ = 8							; size = 4
?UseScene@CameraView@@UAEXPAVScene@@@Z PROC		; CameraView::UseScene
; _this$ = ecx

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  :     if (s)

  00003	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00006	ba 00 00 00 00	 mov	 edx, OFFSET ?emergency_scene@@3VScene@@A
  0000b	85 c0		 test	 eax, eax
  0000d	0f 45 d0	 cmovne	 edx, eax
  00010	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 106  :     scene = s;
; 107  :     else
; 108  :     scene = &emergency_scene;
; 109  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?UseScene@CameraView@@UAEXPAVScene@@@Z ENDP		; CameraView::UseScene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_fov$ = 8						; size = 8
?SetFieldOfView@CameraView@@UAEXN@Z PROC		; CameraView::SetFieldOfView
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     projector.SetFieldOfView(fov);

  00003	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00006	83 c1 58	 add	 ecx, 88			; 00000058H
  00009	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _fov$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	ff 50 14	 call	 DWORD PTR [eax+20]

; 115  : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?SetFieldOfView@CameraView@@UAEXN@Z ENDP		; CameraView::SetFieldOfView
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
?GetFieldOfView@CameraView@@UBENXZ PROC			; CameraView::GetFieldOfView
; _this$ = ecx

; 120  :     return projector.GetFieldOfView();

  00000	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00003	83 c1 58	 add	 ecx, 88			; 00000058H
  00006	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00009	ff e0		 jmp	 eax
?GetFieldOfView@CameraView@@UBENXZ ENDP			; CameraView::GetFieldOfView
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\projector.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_pt$ = 8						; size = 4
?SetProjectionType@CameraView@@UAEXK@Z PROC		; CameraView::SetProjectionType
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 126  :     projector.SetOrthogonal(pt == Video::PROJECTION_ORTHOGONAL);

  00003	8b 55 08	 mov	 edx, DWORD PTR _pt$[ebp]
  00006	83 fa 02	 cmp	 edx, 2

; 127  :     projection_type = pt;

  00009	89 91 5c 01 00
	00		 mov	 DWORD PTR [ecx+348], edx
  0000f	0f 94 c0	 sete	 al
; File d:\programming\starshatter\trunk\ngenex\projector.h

; 76   :     void           SetOrthogonal(bool o)   { orthogonal = o;    }

  00012	88 81 b8 00 00
	00		 mov	 BYTE PTR [ecx+184], al
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 128  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetProjectionType@CameraView@@UAEXK@Z ENDP		; CameraView::SetProjectionType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
?GetProjectionType@CameraView@@UBEKXZ PROC		; CameraView::GetProjectionType
; _this$ = ecx

; 133  :     return projection_type;

  00000	8b 81 5c 01 00
	00		 mov	 eax, DWORD PTR [ecx+348]

; 134  : }

  00006	c3		 ret	 0
?GetProjectionType@CameraView@@UBEKXZ ENDP		; CameraView::GetProjectionType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\window.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_r$3$ = -16						; size = 16
?OnWindowMove@CameraView@@UAEXXZ PROC			; CameraView::OnWindowMove
; _this$ = ecx

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 140  :     projector.UseWindow(window);

  00009	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  0000c	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
; File d:\programming\starshatter\trunk\ngenex\window.h

; 70   :     const Rect&       GetRect()            const { return rect;    }

  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 140  :     projector.UseWindow(window);

  00012	52		 push	 edx
  00013	0f 10 42 04	 movups	 xmm0, XMMWORD PTR [edx+4]
  00017	0f 11 45 f0	 movups	 XMMWORD PTR _r$3$[ebp], xmm0
  0001b	ff 50 04	 call	 DWORD PTR [eax+4]

; 141  : 
; 142  :     width  = r.w;

  0001e	0f 10 4d f0	 movups	 xmm1, XMMWORD PTR _r$3$[ebp]
  00022	0f 28 c1	 movaps	 xmm0, xmm1

; 143  :     height = r.h;

  00025	66 0f 73 d9 0c	 psrldq	 xmm1, 12		; 0000000cH
  0002a	66 0f 73 d8 08	 psrldq	 xmm0, 8
  0002f	66 0f 7e 86 54
	01 00 00	 movd	 DWORD PTR [esi+340], xmm0
  00037	66 0f 7e 8e 58
	01 00 00	 movd	 DWORD PTR [esi+344], xmm1
  0003f	5e		 pop	 esi

; 144  : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?OnWindowMove@CameraView@@UAEXXZ ENDP			; CameraView::OnWindowMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_on$ = 8						; size = 4
_dim$ = 12						; size = 8
?LensFlare@CameraView@@UAEXHN@Z PROC			; CameraView::LensFlare
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 154  :     lens_flare_enable = on;
; 155  :     lens_flare_dim    = dim;

  00003	f2 0f 10 45 0c	 movsd	 xmm0, QWORD PTR _dim$[ebp]
  00008	8b 45 08	 mov	 eax, DWORD PTR _on$[ebp]
  0000b	89 81 60 01 00
	00		 mov	 DWORD PTR [ecx+352], eax
  00011	f2 0f 11 81 68
	01 00 00	 movsd	 QWORD PTR [ecx+360], xmm0

; 156  : }

  00019	5d		 pop	 ebp
  0001a	c2 0c 00	 ret	 12			; 0000000cH
?LensFlare@CameraView@@UAEXHN@Z ENDP			; CameraView::LensFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_halo$ = 8						; size = 4
_e1$ = 12						; size = 4
_e2$ = 16						; size = 4
_e3$ = 20						; size = 4
?LensFlareElements@CameraView@@UAEXPAVBitmap@@000@Z PROC ; CameraView::LensFlareElements
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 161  :     if (halo)

  00003	8b 45 08	 mov	 eax, DWORD PTR _halo$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 06		 je	 SHORT $LN2@LensFlareE

; 162  :     halo_bitmap = halo;

  0000a	89 81 70 01 00
	00		 mov	 DWORD PTR [ecx+368], eax
$LN2@LensFlareE:

; 163  : 
; 164  :     if (e1)

  00010	8b 45 0c	 mov	 eax, DWORD PTR _e1$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	74 06		 je	 SHORT $LN3@LensFlareE

; 165  :     elem_bitmap[0] = e1;

  00017	89 81 74 01 00
	00		 mov	 DWORD PTR [ecx+372], eax
$LN3@LensFlareE:

; 166  : 
; 167  :     if (e2)

  0001d	8b 45 10	 mov	 eax, DWORD PTR _e2$[ebp]
  00020	85 c0		 test	 eax, eax
  00022	74 06		 je	 SHORT $LN4@LensFlareE

; 168  :     elem_bitmap[1] = e2;

  00024	89 81 78 01 00
	00		 mov	 DWORD PTR [ecx+376], eax
$LN4@LensFlareE:

; 169  : 
; 170  :     if (e3)

  0002a	8b 45 14	 mov	 eax, DWORD PTR _e3$[ebp]
  0002d	85 c0		 test	 eax, eax
  0002f	74 06		 je	 SHORT $LN5@LensFlareE

; 171  :     elem_bitmap[2] = e3;

  00031	89 81 7c 01 00
	00		 mov	 DWORD PTR [ecx+380], eax
$LN5@LensFlareE:

; 172  : }

  00037	5d		 pop	 ebp
  00038	c2 10 00	 ret	 16			; 00000010H
?LensFlareElements@CameraView@@UAEXPAVBitmap@@000@Z ENDP ; CameraView::LensFlareElements
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_i$ = 8							; size = 4
?SetInfinite@CameraView@@UAEHH@Z PROC			; CameraView::SetInfinite
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 179  :     int old = infinite;
; 180  :     infinite = i;
; 181  :     projector.SetInfinite(i);

  00003	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _i$[ebp]
  0000a	57		 push	 edi
  0000b	8b b9 50 01 00
	00		 mov	 edi, DWORD PTR [ecx+336]
  00011	89 b1 50 01 00
	00		 mov	 DWORD PTR [ecx+336], esi
  00017	83 c1 58	 add	 ecx, 88			; 00000058H
  0001a	56		 push	 esi
  0001b	ff 52 1c	 call	 DWORD PTR [edx+28]

; 182  :     return old;

  0001e	8b c7		 mov	 eax, edi
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 183  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetInfinite@CameraView@@UAEHH@Z ENDP			; CameraView::SetInfinite
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\camera.h
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_g$ = 8							; size = 4
?FindDepth@CameraView@@UAEXPAVGraphic@@@Z PROC		; CameraView::FindDepth
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 192  :     if (infinite) {

  00006	83 b9 50 01 00
	00 00		 cmp	 DWORD PTR [ecx+336], 0
  0000d	74 20		 je	 SHORT $LN2@FindDepth
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _g$[ebp]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00017	3d 00 00 00 00	 cmp	 eax, OFFSET ?SetDepth@Graphic@@UAEXM@Z ; Graphic::SetDepth
  0001c	0f 85 89 00 00
	00		 jne	 $LN45@FindDepth
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 100  :     virtual void      SetDepth(float d)    { depth = d;      }

  00022	c7 41 28 ec 78
	ad 60		 mov	 DWORD PTR [ecx+40], 1621981420 ; 60ad78ecH
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 203  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN2@FindDepth:
; File d:\programming\starshatter\trunk\ngenex\camera.h

; 72   :     Point    Pos() const { return pos;    }

  0002f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 95   :     Point             Location()     const { return loc;     }

  00032	8b 4d 08	 mov	 ecx, DWORD PTR _g$[ebp]
  00035	f2 0f 10 68 58	 movsd	 xmm5, QWORD PTR [eax+88]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0003a	f2 0f 10 49 18	 movsd	 xmm1, QWORD PTR [ecx+24]

; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }
; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  0003f	f2 0f 5c 48 10	 subsd	 xmm1, QWORD PTR [eax+16]

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00044	f2 0f 10 41 10	 movsd	 xmm0, QWORD PTR [ecx+16]

; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }
; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  00049	f2 0f 5c 40 08	 subsd	 xmm0, QWORD PTR [eax+8]

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0004e	f2 0f 10 51 20	 movsd	 xmm2, QWORD PTR [ecx+32]

; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }
; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  00053	f2 0f 5c 50 18	 subsd	 xmm2, QWORD PTR [eax+24]

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }
; 221  : 
; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00058	66 0f 5a d9	 cvtpd2ps xmm3, xmm1
  0005c	f2 0f 10 48 50	 movsd	 xmm1, QWORD PTR [eax+80]
  00061	66 0f 5a e0	 cvtpd2ps xmm4, xmm0
  00065	f2 0f 10 40 60	 movsd	 xmm0, QWORD PTR [eax+96]
  0006a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006c	66 0f 5a ed	 cvtpd2ps xmm5, xmm5
  00070	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00073	66 0f 5a c9	 cvtpd2ps xmm1, xmm1

; 187  :     float  operator* (const Vec3& p)  const { return (x*p.x + y*p.y + z*p.z);    }

  00077	f3 0f 59 eb	 mulss	 xmm5, xmm3
  0007b	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }
; 221  : 
; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  0007f	66 0f 5a d2	 cvtpd2ps xmm2, xmm2

; 187  :     float  operator* (const Vec3& p)  const { return (x*p.x + y*p.y + z*p.z);    }

  00083	f3 0f 58 e9	 addss	 xmm5, xmm1

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }
; 221  : 
; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00087	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 187  :     float  operator* (const Vec3& p)  const { return (x*p.x + y*p.y + z*p.z);    }

  0008b	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0008f	f3 0f 58 e8	 addss	 xmm5, xmm0
  00093	3d 00 00 00 00	 cmp	 eax, OFFSET ?SetDepth@Graphic@@UAEXM@Z ; Graphic::SetDepth
  00098	75 21		 jne	 SHORT $LN7@FindDepth
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 100  :     virtual void      SetDepth(float d)    { depth = d;      }

  0009a	f3 0f 11 69 28	 movss	 DWORD PTR [ecx+40], xmm5
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 203  : }

  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 04 00	 ret	 4
$LN6@FindDepth:
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 04 00	 ret	 4
$LN45@FindDepth:

; 193  :         g->SetDepth(1.0e20f);

  000ab	51		 push	 ecx
  000ac	c7 04 24 ec 78
	ad 60		 mov	 DWORD PTR [esp], 1621981420 ; 60ad78ecH

; 194  :         return;
; 195  :     }
; 196  : 
; 197  :     // Translate into a viewpoint-relative coordinate
; 198  :     Vec3 loc = g->Location() - camera->Pos();
; 199  : 
; 200  :     // Rotate into the view orientation
; 201  :     float z = (float) (loc * camera->vpn());
; 202  :     g->SetDepth(z);

  000b3	ff d0		 call	 eax

; 203  : }

  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 04 00	 ret	 4
$LN7@FindDepth:

; 194  :         return;
; 195  :     }
; 196  : 
; 197  :     // Translate into a viewpoint-relative coordinate
; 198  :     Vec3 loc = g->Location() - camera->Pos();
; 199  : 
; 200  :     // Rotate into the view orientation
; 201  :     float z = (float) (loc * camera->vpn());
; 202  :     g->SetDepth(z);

  000bb	51		 push	 ecx
  000bc	f3 0f 11 2c 24	 movss	 DWORD PTR [esp], xmm5
  000c1	ff d0		 call	 eax
  000c3	eb e0		 jmp	 SHORT $LN6@FindDepth
?FindDepth@CameraView@@UAEXPAVGraphic@@@Z ENDP		; CameraView::FindDepth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\window.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
tv242 = -24						; size = 8
_old_rect$ = -16					; size = 16
?Refresh@CameraView@@UAEXXZ PROC			; CameraView::Refresh
; _this$ = ecx

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx

; 210  :     // disabled:
; 211  :     if (camera == &emergency_cam)

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET ?emergency_cam@@3VCamera@@A
  00015	0f 84 50 01 00
	00		 je	 $LN1@Refresh

; 212  :     return;
; 213  : 
; 214  :     // prologue:
; 215  :     video = Video::GetInstance();

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_instance@Video@@1PAV1@A ; Video::video_instance
  00020	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 216  :     if (!video)

  00023	85 c0		 test	 eax, eax
  00025	0f 84 40 01 00
	00		 je	 $LN1@Refresh

; 217  :     return;
; 218  : 
; 219  :     int cw = window->Width();
; 220  :     int ch = window->Height();
; 221  : 
; 222  :     cvrt = camera->vrt();
; 223  :     cvup = camera->vup();

  0002b	f2 0f 10 51 20	 movsd	 xmm2, QWORD PTR [ecx+32]
  00030	8b c1		 mov	 eax, ecx
  00032	f2 0f 10 49 28	 movsd	 xmm1, QWORD PTR [ecx+40]
  00037	f2 0f 10 41 30	 movsd	 xmm0, QWORD PTR [ecx+48]
  0003c	8b ce		 mov	 ecx, esi
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  0003e	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00042	66 0f 5a c9	 cvtpd2ps xmm1, xmm1

; 190  :     Vec3&  operator= (const Vec3& p)  { x =p.x; y =p.y; z =p.z; return *this; }

  00046	f3 0f 11 56 30	 movss	 DWORD PTR [esi+48], xmm2
  0004b	f3 0f 11 4e 34	 movss	 DWORD PTR [esi+52], xmm1

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00050	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 190  :     Vec3&  operator= (const Vec3& p)  { x =p.x; y =p.y; z =p.z; return *this; }

  00054	f3 0f 11 46 38	 movss	 DWORD PTR [esi+56], xmm0
  00059	f2 0f 10 50 38	 movsd	 xmm2, QWORD PTR [eax+56]
  0005e	f2 0f 10 48 40	 movsd	 xmm1, QWORD PTR [eax+64]
  00063	f2 0f 10 40 48	 movsd	 xmm0, QWORD PTR [eax+72]

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00068	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  0006c	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00070	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 190  :     Vec3&  operator= (const Vec3& p)  { x =p.x; y =p.y; z =p.z; return *this; }

  00074	f3 0f 11 56 3c	 movss	 DWORD PTR [esi+60], xmm2
  00079	f3 0f 11 4e 40	 movss	 DWORD PTR [esi+64], xmm1
  0007e	f3 0f 11 46 44	 movss	 DWORD PTR [esi+68], xmm0
  00083	f2 0f 10 50 50	 movsd	 xmm2, QWORD PTR [eax+80]
  00088	f2 0f 10 48 58	 movsd	 xmm1, QWORD PTR [eax+88]
  0008d	f2 0f 10 40 60	 movsd	 xmm0, QWORD PTR [eax+96]

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00092	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00096	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0009a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 190  :     Vec3&  operator= (const Vec3& p)  { x =p.x; y =p.y; z =p.z; return *this; }

  0009e	f3 0f 11 56 48	 movss	 DWORD PTR [esi+72], xmm2
  000a3	f3 0f 11 4e 4c	 movss	 DWORD PTR [esi+76], xmm1
  000a8	f3 0f 11 46 50	 movss	 DWORD PTR [esi+80], xmm0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 226  :     TranslateScene();

  000ad	8b 06		 mov	 eax, DWORD PTR [esi]
  000af	ff 50 40	 call	 DWORD PTR [eax+64]

; 227  :     MarkVisibleObjects();

  000b2	8b 06		 mov	 eax, DWORD PTR [esi]
  000b4	8b ce		 mov	 ecx, esi
  000b6	ff 50 48	 call	 DWORD PTR [eax+72]

; 228  : 
; 229  :     Rect old_rect;
; 230  :     video->GetWindowRect(old_rect);

  000b9	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000bc	8d 54 24 10	 lea	 edx, DWORD PTR _old_rect$[esp+32]
  000c0	0f 57 c0	 xorps	 xmm0, xmm0
  000c3	0f 11 44 24 10	 movups	 XMMWORD PTR _old_rect$[esp+32], xmm0
  000c8	52		 push	 edx
  000c9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cb	ff 90 88 00 00
	00		 call	 DWORD PTR [eax+136]

; 231  : 
; 232  :     video->SetCamera(camera);

  000d1	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000d4	ff 76 08	 push	 DWORD PTR [esi+8]
  000d7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d9	ff 90 94 00 00
	00		 call	 DWORD PTR [eax+148]

; 233  :     video->SetWindowRect(window->GetRect());

  000df	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
; File d:\programming\starshatter\trunk\ngenex\window.h

; 70   :     const Rect&       GetRect()            const { return rect;    }

  000e2	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e5	83 c0 04	 add	 eax, 4
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 233  :     video->SetWindowRect(window->GetRect());

  000e8	50		 push	 eax
  000e9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000eb	ff 92 8c 00 00
	00		 call	 DWORD PTR [edx+140]
  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
  000f3	8b ce		 mov	 ecx, esi
  000f5	8b 40 34	 mov	 eax, DWORD PTR [eax+52]

; 234  :     video->SetProjection((float) GetFieldOfView(), 1.0f, 1.0e6f, projection_type);

  000f8	ff d0		 call	 eax
  000fa	ff b6 5c 01 00
	00		 push	 DWORD PTR [esi+348]
  00100	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00103	dd 5c 24 0c	 fstp	 QWORD PTR tv242[esp+36]
  00107	f2 0f 10 44 24
	0c		 movsd	 xmm0, QWORD PTR tv242[esp+36]
  0010d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00110	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00114	8b 01		 mov	 eax, DWORD PTR [ecx]
  00116	c7 44 24 08 00
	24 74 49	 mov	 DWORD PTR [esp+8], 1232348160 ; 49742400H
  0011e	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	ff 90 98 00 00
	00		 call	 DWORD PTR [eax+152]

; 235  : 
; 236  :     // project and render:
; 237  :     RenderBackground();

  00131	8b 06		 mov	 eax, DWORD PTR [esi]
  00133	8b ce		 mov	 ecx, esi
  00135	ff 50 5c	 call	 DWORD PTR [eax+92]

; 238  :     RenderScene();

  00138	8b 06		 mov	 eax, DWORD PTR [esi]
  0013a	8b ce		 mov	 ecx, esi
  0013c	ff 50 50	 call	 DWORD PTR [eax+80]

; 239  :     RenderForeground();

  0013f	8b 06		 mov	 eax, DWORD PTR [esi]
  00141	8b ce		 mov	 ecx, esi
  00143	ff 50 58	 call	 DWORD PTR [eax+88]

; 240  :     RenderSprites();

  00146	8b 06		 mov	 eax, DWORD PTR [esi]
  00148	8b ce		 mov	 ecx, esi
  0014a	ff 50 60	 call	 DWORD PTR [eax+96]

; 241  :     RenderLensFlare();

  0014d	8b 06		 mov	 eax, DWORD PTR [esi]
  0014f	8b ce		 mov	 ecx, esi
  00151	ff 50 64	 call	 DWORD PTR [eax+100]

; 242  : 
; 243  :     UnTranslateScene();

  00154	8b 06		 mov	 eax, DWORD PTR [esi]
  00156	8b ce		 mov	 ecx, esi
  00158	ff 50 44	 call	 DWORD PTR [eax+68]

; 244  : 
; 245  :     video->SetWindowRect(old_rect);

  0015b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0015e	8d 54 24 10	 lea	 edx, DWORD PTR _old_rect$[esp+32]
  00162	52		 push	 edx
  00163	8b 01		 mov	 eax, DWORD PTR [ecx]
  00165	ff 90 8c 00 00
	00		 call	 DWORD PTR [eax+140]
$LN1@Refresh:

; 246  : }

  0016b	5e		 pop	 esi
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
?Refresh@CameraView@@UAEXXZ ENDP			; CameraView::Refresh
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\camera.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_l_iter$ = -8						; size = 8
_g_iter$ = -8						; size = 8
?TranslateScene@CameraView@@UAEXXZ PROC			; CameraView::TranslateScene
; _this$ = ecx

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 c0	 and	 esp, -64		; ffffffc0H
  00006	83 ec 34	 sub	 esp, 52			; 00000034H
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0000c	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR _g_iter$[esp+60], -1
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 254  : {

  00014	56		 push	 esi
  00015	57		 push	 edi

; 255  :     camera_loc = camera->Pos();

  00016	8d 7b 18	 lea	 edi, DWORD PTR [ebx+24]
; File d:\programming\starshatter\trunk\ngenex\camera.h

; 72   :     Point    Pos() const { return pos;    }

  00019	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0001c	8d 4c 24 38	 lea	 ecx, DWORD PTR _g_iter$[esp+64]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00020	0f 10 40 08	 movups	 xmm0, XMMWORD PTR [eax+8]
  00024	f2 0f 10 50 18	 movsd	 xmm2, QWORD PTR [eax+24]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 76   :     List<Graphic>&    Graphics()                 { return graphics;   }

  00029	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0002c	83 c0 1c	 add	 eax, 28			; 0000001cH
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }

  0002f	f2 0f 11 57 10	 movsd	 QWORD PTR [edi+16], xmm2
  00034	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00037	89 44 24 38	 mov	 DWORD PTR _g_iter$[esp+64], eax

; 108  :    int operator++() { return next() != 0; }

  0003b	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00040	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 258  :     while (++g_iter) {

  00042	74 38		 je	 SHORT $LN3@TranslateS
$LL2@TranslateS:

; 259  :         Graphic* graphic = g_iter.value();

  00044	8d 4c 24 38	 lea	 ecx, DWORD PTR _g_iter$[esp+64]
  00048	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  0004d	8b f0		 mov	 esi, eax
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00054	3d 00 00 00 00	 cmp	 eax, OFFSET ?IsInfinite@Graphic@@UBEHXZ ; Graphic::IsInfinite
  00059	0f 85 15 01 00
	00		 jne	 $LN61@TranslateS
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 104  :     virtual int       IsInfinite()   const { return infinite;      }

  0005f	0f b6 46 35	 movzx	 eax, BYTE PTR [esi+53]
$LN13@TranslateS:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 261  :         if (!graphic->IsInfinite())

  00063	85 c0		 test	 eax, eax
  00065	75 08		 jne	 SHORT $LN10@TranslateS

; 262  :         graphic->TranslateBy(camera_loc);

  00067	8b 06		 mov	 eax, DWORD PTR [esi]
  00069	8b ce		 mov	 ecx, esi
  0006b	57		 push	 edi
  0006c	ff 50 18	 call	 DWORD PTR [eax+24]
$LN10@TranslateS:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0006f	8d 4c 24 38	 lea	 ecx, DWORD PTR _g_iter$[esp+64]
  00073	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00078	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 258  :     while (++g_iter) {

  0007a	75 c8		 jne	 SHORT $LL2@TranslateS
$LN3@TranslateS:
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 75   :     List<Graphic>&    Foreground()               { return foreground; }

  0007c	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 265  :     g_iter.attach(scene->Foreground());

  0007f	8d 4c 24 38	 lea	 ecx, DWORD PTR _g_iter$[esp+64]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 75   :     List<Graphic>&    Foreground()               { return foreground; }

  00083	83 c0 10	 add	 eax, 16			; 00000010H
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 265  :     g_iter.attach(scene->Foreground());

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ?attach@?$ListIter@VGraphic@@@@QAEXAAV?$List@VGraphic@@@@@Z ; ListIter<Graphic>::attach
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0008c	8d 4c 24 38	 lea	 ecx, DWORD PTR _g_iter$[esp+64]
  00090	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00095	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 266  :     while (++g_iter) {

  00097	74 25		 je	 SHORT $LN5@TranslateS
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@TranslateS:

; 267  :         Graphic* graphic = g_iter.value();

  000a0	8d 4c 24 38	 lea	 ecx, DWORD PTR _g_iter$[esp+64]
  000a4	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value

; 268  :         graphic->TranslateBy(camera_loc);

  000a9	57		 push	 edi
  000aa	8b c8		 mov	 ecx, eax
  000ac	8b 10		 mov	 edx, DWORD PTR [eax]
  000ae	ff 52 18	 call	 DWORD PTR [edx+24]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000b1	8d 4c 24 38	 lea	 ecx, DWORD PTR _g_iter$[esp+64]
  000b5	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  000ba	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 266  :     while (++g_iter) {

  000bc	75 e2		 jne	 SHORT $LL4@TranslateS
$LN5@TranslateS:
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 77   :     List<Graphic>&    Sprites()                  { return sprites;    }

  000be	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 271  :     g_iter.attach(scene->Sprites());

  000c1	8d 4c 24 38	 lea	 ecx, DWORD PTR _g_iter$[esp+64]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 77   :     List<Graphic>&    Sprites()                  { return sprites;    }

  000c5	83 c0 28	 add	 eax, 40			; 00000028H
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 271  :     g_iter.attach(scene->Sprites());

  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?attach@?$ListIter@VGraphic@@@@QAEXAAV?$List@VGraphic@@@@@Z ; ListIter<Graphic>::attach
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000ce	8d 4c 24 38	 lea	 ecx, DWORD PTR _g_iter$[esp+64]
  000d2	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  000d7	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 272  :     while (++g_iter) {

  000d9	74 3d		 je	 SHORT $LN7@TranslateS
  000db	0f 1f 44 00 00	 npad	 5
$LL6@TranslateS:

; 273  :         Graphic* graphic = g_iter.value();

  000e0	8d 4c 24 38	 lea	 ecx, DWORD PTR _g_iter$[esp+64]
  000e4	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  000e9	8b f0		 mov	 esi, eax
  000eb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ed	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  000f0	3d 00 00 00 00	 cmp	 eax, OFFSET ?IsInfinite@Graphic@@UBEHXZ ; Graphic::IsInfinite
  000f5	0f 85 82 00 00
	00		 jne	 $LN16@TranslateS
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 104  :     virtual int       IsInfinite()   const { return infinite;      }

  000fb	0f b6 46 35	 movzx	 eax, BYTE PTR [esi+53]
$LN15@TranslateS:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 275  :         if (!graphic->IsInfinite())

  000ff	85 c0		 test	 eax, eax
  00101	75 08		 jne	 SHORT $LN11@TranslateS

; 276  :         graphic->TranslateBy(camera_loc);

  00103	8b 06		 mov	 eax, DWORD PTR [esi]
  00105	8b ce		 mov	 ecx, esi
  00107	57		 push	 edi
  00108	ff 50 18	 call	 DWORD PTR [eax+24]
$LN11@TranslateS:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0010b	8d 4c 24 38	 lea	 ecx, DWORD PTR _g_iter$[esp+64]
  0010f	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00114	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 272  :     while (++g_iter) {

  00116	75 c8		 jne	 SHORT $LL6@TranslateS
$LN7@TranslateS:
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 78   :     List<Light>&      Lights()                   { return lights;     }

  00118	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0011b	8d 4c 24 38	 lea	 ecx, DWORD PTR _l_iter$[esp+64]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 78   :     List<Light>&      Lights()                   { return lights;     }

  0011f	83 c0 34	 add	 eax, 52			; 00000034H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00122	c7 44 24 3c ff
	ff ff ff	 mov	 DWORD PTR _l_iter$[esp+68], -1
  0012a	89 44 24 38	 mov	 DWORD PTR _l_iter$[esp+64], eax

; 108  :    int operator++() { return next() != 0; }

  0012e	e8 00 00 00 00	 call	 ?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::next
  00133	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 280  :     while (++l_iter) {

  00135	74 1e		 je	 SHORT $LN9@TranslateS
$LL8@TranslateS:

; 281  :         Light* light = l_iter.value();

  00137	8d 4c 24 38	 lea	 ecx, DWORD PTR _l_iter$[esp+64]
  0013b	e8 00 00 00 00	 call	 ?value@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::value

; 282  :         light->TranslateBy(camera_loc);

  00140	57		 push	 edi
  00141	8b c8		 mov	 ecx, eax
  00143	8b 10		 mov	 edx, DWORD PTR [eax]
  00145	ff 52 0c	 call	 DWORD PTR [edx+12]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00148	8d 4c 24 38	 lea	 ecx, DWORD PTR _l_iter$[esp+64]
  0014c	e8 00 00 00 00	 call	 ?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::next
  00151	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 280  :     while (++l_iter) {

  00153	75 e2		 jne	 SHORT $LL8@TranslateS
$LN9@TranslateS:

; 283  :     }
; 284  : 
; 285  :     camera->MoveTo(0,0,0);

  00155	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00158	83 ec 18	 sub	 esp, 24			; 00000018H
  0015b	0f 57 c0	 xorps	 xmm0, xmm0
  0015e	0f 11 44 24 08	 movups	 XMMWORD PTR [esp+8], xmm0
  00163	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00168	e8 00 00 00 00	 call	 ?MoveTo@Camera@@QAEXNNN@Z ; Camera::MoveTo

; 286  : }

  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
$LN61@TranslateS:
  00174	8b ce		 mov	 ecx, esi

; 261  :         if (!graphic->IsInfinite())

  00176	ff d0		 call	 eax
  00178	e9 e6 fe ff ff	 jmp	 $LN13@TranslateS
$LN16@TranslateS:
  0017d	8b ce		 mov	 ecx, esi

; 275  :         if (!graphic->IsInfinite())

  0017f	ff d0		 call	 eax
  00181	e9 79 ff ff ff	 jmp	 $LN15@TranslateS
?TranslateScene@CameraView@@UAEXXZ ENDP			; CameraView::TranslateScene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_l_iter$ = -32						; size = 8
_g_iter$ = -32						; size = 8
_reloc$ = -24						; size = 24
?UnTranslateScene@CameraView@@UAEXXZ PROC		; CameraView::UnTranslateScene
; _this$ = ecx

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 20	 sub	 esp, 32			; 00000020H
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 229  :     Point operator- ()               const { return Point(-x, -y, -z);          }

  00009	0f 28 0d 00 00
	00 00		 movaps	 xmm1, XMMWORD PTR __xmm@80000000000000008000000000000000
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 294  : {

  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00014	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _g_iter$[esp+44], -1

; 108  :    int operator++() { return next() != 0; }

  0001c	8d 4c 24 08	 lea	 ecx, DWORD PTR _g_iter$[esp+40]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 229  :     Point operator- ()               const { return Point(-x, -y, -z);          }

  00020	0f 10 47 18	 movups	 xmm0, XMMWORD PTR [edi+24]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 76   :     List<Graphic>&    Graphics()                 { return graphics;   }

  00024	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00027	83 c0 1c	 add	 eax, 28			; 0000001cH
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 229  :     Point operator- ()               const { return Point(-x, -y, -z);          }

  0002a	0f 57 c1	 xorps	 xmm0, xmm1
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0002d	89 44 24 08	 mov	 DWORD PTR _g_iter$[esp+40], eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  00031	0f 11 44 24 10	 movups	 XMMWORD PTR _reloc$[esp+40], xmm0

; 229  :     Point operator- ()               const { return Point(-x, -y, -z);          }

  00036	f2 0f 10 47 28	 movsd	 xmm0, QWORD PTR [edi+40]
  0003b	0f 57 c1	 xorps	 xmm0, xmm1

; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }

  0003e	f2 0f 11 44 24
	20		 movsd	 QWORD PTR _reloc$[esp+56], xmm0
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00044	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00049	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 298  :     while (++g_iter) {

  0004b	74 3f		 je	 SHORT $LN3@UnTranslat
  0004d	0f 1f 00	 npad	 3
$LL2@UnTranslat:

; 299  :         Graphic* graphic = g_iter.value();

  00050	8d 4c 24 08	 lea	 ecx, DWORD PTR _g_iter$[esp+40]
  00054	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  00059	8b f0		 mov	 esi, eax
  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00060	3d 00 00 00 00	 cmp	 eax, OFFSET ?IsInfinite@Graphic@@UBEHXZ ; Graphic::IsInfinite
  00065	0f 85 10 01 00
	00		 jne	 $LN59@UnTranslat
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 104  :     virtual int       IsInfinite()   const { return infinite;      }

  0006b	0f b6 46 35	 movzx	 eax, BYTE PTR [esi+53]
$LN13@UnTranslat:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 301  :         if (!graphic->IsInfinite())

  0006f	85 c0		 test	 eax, eax
  00071	75 0c		 jne	 SHORT $LN10@UnTranslat

; 302  :         graphic->TranslateBy(reloc);

  00073	8b 06		 mov	 eax, DWORD PTR [esi]
  00075	8d 4c 24 10	 lea	 ecx, DWORD PTR _reloc$[esp+40]
  00079	51		 push	 ecx
  0007a	8b ce		 mov	 ecx, esi
  0007c	ff 50 18	 call	 DWORD PTR [eax+24]
$LN10@UnTranslat:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0007f	8d 4c 24 08	 lea	 ecx, DWORD PTR _g_iter$[esp+40]
  00083	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00088	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 298  :     while (++g_iter) {

  0008a	75 c4		 jne	 SHORT $LL2@UnTranslat
$LN3@UnTranslat:
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 75   :     List<Graphic>&    Foreground()               { return foreground; }

  0008c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 305  :     g_iter.attach(scene->Foreground());

  0008f	8d 4c 24 08	 lea	 ecx, DWORD PTR _g_iter$[esp+40]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 75   :     List<Graphic>&    Foreground()               { return foreground; }

  00093	83 c0 10	 add	 eax, 16			; 00000010H
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 305  :     g_iter.attach(scene->Foreground());

  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?attach@?$ListIter@VGraphic@@@@QAEXAAV?$List@VGraphic@@@@@Z ; ListIter<Graphic>::attach
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0009c	8d 4c 24 08	 lea	 ecx, DWORD PTR _g_iter$[esp+40]
  000a0	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  000a5	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 306  :     while (++g_iter) {

  000a7	74 29		 je	 SHORT $LN5@UnTranslat
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@UnTranslat:

; 307  :         Graphic* graphic = g_iter.value();

  000b0	8d 4c 24 08	 lea	 ecx, DWORD PTR _g_iter$[esp+40]
  000b4	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value

; 308  :         graphic->TranslateBy(reloc);

  000b9	8d 4c 24 10	 lea	 ecx, DWORD PTR _reloc$[esp+40]
  000bd	51		 push	 ecx
  000be	8b c8		 mov	 ecx, eax
  000c0	8b 10		 mov	 edx, DWORD PTR [eax]
  000c2	ff 52 18	 call	 DWORD PTR [edx+24]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000c5	8d 4c 24 08	 lea	 ecx, DWORD PTR _g_iter$[esp+40]
  000c9	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  000ce	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 306  :     while (++g_iter) {

  000d0	75 de		 jne	 SHORT $LL4@UnTranslat
$LN5@UnTranslat:
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 77   :     List<Graphic>&    Sprites()                  { return sprites;    }

  000d2	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 311  :     g_iter.attach(scene->Sprites());

  000d5	8d 4c 24 08	 lea	 ecx, DWORD PTR _g_iter$[esp+40]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 77   :     List<Graphic>&    Sprites()                  { return sprites;    }

  000d9	83 c0 28	 add	 eax, 40			; 00000028H
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 311  :     g_iter.attach(scene->Sprites());

  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ?attach@?$ListIter@VGraphic@@@@QAEXAAV?$List@VGraphic@@@@@Z ; ListIter<Graphic>::attach
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000e2	8d 4c 24 08	 lea	 ecx, DWORD PTR _g_iter$[esp+40]
  000e6	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  000eb	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 312  :     while (++g_iter) {

  000ed	74 39		 je	 SHORT $LN7@UnTranslat
  000ef	90		 npad	 1
$LL6@UnTranslat:

; 313  :         Graphic* graphic = g_iter.value();

  000f0	8d 4c 24 08	 lea	 ecx, DWORD PTR _g_iter$[esp+40]
  000f4	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  000f9	8b f0		 mov	 esi, eax
  000fb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000fd	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00100	3d 00 00 00 00	 cmp	 eax, OFFSET ?IsInfinite@Graphic@@UBEHXZ ; Graphic::IsInfinite
  00105	75 7d		 jne	 SHORT $LN16@UnTranslat
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 104  :     virtual int       IsInfinite()   const { return infinite;      }

  00107	0f b6 46 35	 movzx	 eax, BYTE PTR [esi+53]
$LN15@UnTranslat:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 315  :         if (!graphic->IsInfinite())

  0010b	85 c0		 test	 eax, eax
  0010d	75 0c		 jne	 SHORT $LN11@UnTranslat

; 316  :         graphic->TranslateBy(reloc);

  0010f	8b 06		 mov	 eax, DWORD PTR [esi]
  00111	8d 4c 24 10	 lea	 ecx, DWORD PTR _reloc$[esp+40]
  00115	51		 push	 ecx
  00116	8b ce		 mov	 ecx, esi
  00118	ff 50 18	 call	 DWORD PTR [eax+24]
$LN11@UnTranslat:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0011b	8d 4c 24 08	 lea	 ecx, DWORD PTR _g_iter$[esp+40]
  0011f	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00124	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 312  :     while (++g_iter) {

  00126	75 c8		 jne	 SHORT $LL6@UnTranslat
$LN7@UnTranslat:
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 78   :     List<Light>&      Lights()                   { return lights;     }

  00128	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0012b	8d 4c 24 08	 lea	 ecx, DWORD PTR _l_iter$[esp+40]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 78   :     List<Light>&      Lights()                   { return lights;     }

  0012f	83 c0 34	 add	 eax, 52			; 00000034H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00132	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _l_iter$[esp+44], -1
  0013a	89 44 24 08	 mov	 DWORD PTR _l_iter$[esp+40], eax

; 108  :    int operator++() { return next() != 0; }

  0013e	e8 00 00 00 00	 call	 ?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::next
  00143	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 320  :     while (++l_iter) {

  00145	74 22		 je	 SHORT $LN9@UnTranslat
$LL8@UnTranslat:

; 321  :         Light* light = l_iter.value();

  00147	8d 4c 24 08	 lea	 ecx, DWORD PTR _l_iter$[esp+40]
  0014b	e8 00 00 00 00	 call	 ?value@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::value

; 322  :         light->TranslateBy(reloc);

  00150	8d 4c 24 10	 lea	 ecx, DWORD PTR _reloc$[esp+40]
  00154	51		 push	 ecx
  00155	8b c8		 mov	 ecx, eax
  00157	8b 10		 mov	 edx, DWORD PTR [eax]
  00159	ff 52 0c	 call	 DWORD PTR [edx+12]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0015c	8d 4c 24 08	 lea	 ecx, DWORD PTR _l_iter$[esp+40]
  00160	e8 00 00 00 00	 call	 ?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::next
  00165	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 320  :     while (++l_iter) {

  00167	75 de		 jne	 SHORT $LL8@UnTranslat
$LN9@UnTranslat:

; 323  :     }
; 324  : 
; 325  :     camera->MoveTo(camera_loc);

  00169	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0016c	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  0016f	50		 push	 eax
  00170	e8 00 00 00 00	 call	 ?MoveTo@Camera@@QAEXABUPoint@@@Z ; Camera::MoveTo

; 326  : }

  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c3		 ret	 0
$LN59@UnTranslat:
  0017b	8b ce		 mov	 ecx, esi

; 301  :         if (!graphic->IsInfinite())

  0017d	ff d0		 call	 eax
  0017f	e9 eb fe ff ff	 jmp	 $LN13@UnTranslat
$LN16@UnTranslat:
  00184	8b ce		 mov	 ecx, esi

; 315  :         if (!graphic->IsInfinite())

  00186	ff d0		 call	 eax
  00188	eb 81		 jmp	 SHORT $LN15@UnTranslat
?UnTranslateScene@CameraView@@UAEXXZ ENDP		; CameraView::UnTranslateScene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_graphic_iter$ = -8					; size = 8
?MarkVisibleObjects@CameraView@@UAEXXZ PROC		; CameraView::MarkVisibleObjects
; _this$ = ecx

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx

; 335  :     projector.StartFrame();

  0000d	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00010	57		 push	 edi
  00011	8d 7e 58	 lea	 edi, DWORD PTR [esi+88]
  00014	8b cf		 mov	 ecx, edi
  00016	ff 50 20	 call	 DWORD PTR [eax+32]

; 336  :     graphics.clear();

  00019	8d 9e 80 01 00
	00		 lea	 ebx, DWORD PTR [esi+384]
  0001f	8b cb		 mov	 ecx, ebx
  00021	e8 00 00 00 00	 call	 ?clear@?$List@VGraphic@@@@QAEXXZ ; List<Graphic>::clear
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 76   :     List<Graphic>&    Graphics()                 { return graphics;   }

  00026	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00029	8d 4c 24 10	 lea	 ecx, DWORD PTR _graphic_iter$[esp+24]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 76   :     List<Graphic>&    Graphics()                 { return graphics;   }

  0002d	83 c0 1c	 add	 eax, 28			; 0000001cH
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00030	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _graphic_iter$[esp+28], -1
  00038	89 44 24 10	 mov	 DWORD PTR _graphic_iter$[esp+24], eax

; 108  :    int operator++() { return next() != 0; }

  0003c	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00041	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 339  :     while (++graphic_iter) {

  00043	74 53		 je	 SHORT $LN3@MarkVisibl
$LL2@MarkVisibl:

; 340  :         Graphic* graphic = graphic_iter.value();

  00045	8d 4c 24 10	 lea	 ecx, DWORD PTR _graphic_iter$[esp+24]
  00049	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  0004e	8b f0		 mov	 esi, eax
  00050	8b 06		 mov	 eax, DWORD PTR [esi]
  00052	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  00055	3d 00 00 00 00	 cmp	 eax, OFFSET ?Hidden@Graphic@@UBEHXZ ; Graphic::Hidden
  0005a	75 43		 jne	 SHORT $LN24@MarkVisibl
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 111  :     virtual int       Hidden()       const { return hidden;  }

  0005c	0f b6 46 38	 movzx	 eax, BYTE PTR [esi+56]
$LN8@MarkVisibl:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 342  :         if (graphic->Hidden())

  00060	85 c0		 test	 eax, eax
  00062	75 27		 jne	 SHORT $LN6@MarkVisibl

; 343  :         continue;
; 344  :         
; 345  :         if (graphic->CheckVisibility(projector)) {

  00064	8b 06		 mov	 eax, DWORD PTR [esi]
  00066	8b ce		 mov	 ecx, esi
  00068	57		 push	 edi
  00069	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  0006f	ff d0		 call	 eax
  00071	84 c0		 test	 al, al

; 346  :             graphic->Update();

  00073	8b ce		 mov	 ecx, esi
  00075	8b 06		 mov	 eax, DWORD PTR [esi]
  00077	74 0d		 je	 SHORT $LN5@MarkVisibl
  00079	ff 50 08	 call	 DWORD PTR [eax+8]

; 347  :             graphics.append(graphic);

  0007c	56		 push	 esi
  0007d	8b cb		 mov	 ecx, ebx
  0007f	e8 00 00 00 00	 call	 ?append@?$List@VGraphic@@@@QAEXPBVGraphic@@@Z ; List<Graphic>::append

; 348  :         }
; 349  :         else {

  00084	eb 05		 jmp	 SHORT $LN6@MarkVisibl
$LN5@MarkVisibl:

; 350  :             graphic->ProjectScreenRect(0);

  00086	6a 00		 push	 0
  00088	ff 50 74	 call	 DWORD PTR [eax+116]
$LN6@MarkVisibl:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0008b	8d 4c 24 10	 lea	 ecx, DWORD PTR _graphic_iter$[esp+24]
  0008f	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00094	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 339  :     while (++graphic_iter) {

  00096	75 ad		 jne	 SHORT $LL2@MarkVisibl
$LN3@MarkVisibl:

; 351  :         }
; 352  :     }
; 353  : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
$LN24@MarkVisibl:
  0009f	8b ce		 mov	 ecx, esi

; 342  :         if (graphic->Hidden())

  000a1	ff d0		 call	 eax
  000a3	eb bb		 jmp	 SHORT $LN8@MarkVisibl
?MarkVisibleObjects@CameraView@@UAEXXZ ENDP		; CameraView::MarkVisibleObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\light.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_bright_enough$1$ = -13					; size = 1
tv313 = -12						; size = 4
_light_iter$1 = -8					; size = 8
_graphic$ = 8						; size = 4
_flags$ = 12						; size = 4
?MarkVisibleLights@CameraView@@UAEXPAVGraphic@@K@Z PROC	; CameraView::MarkVisibleLights
; _this$ = ecx

; 357  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 358  :     if (flags < Graphic::RENDER_FIRST_LIGHT) {

  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _flags$[ebp]
  0000f	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  00015	73 06		 jae	 SHORT $LN4@MarkVisibl

; 359  :         flags = flags | Graphic::RENDER_FIRST_LIGHT | Graphic::RENDER_ADD_LIGHT;

  00017	81 cf 00 30 00
	00		 or	 edi, 12288		; 00003000H
$LN4@MarkVisibl:

; 360  :     }
; 361  : 
; 362  :     if (graphic->IsVisible()) {

  0001d	8b 5d 08	 mov	 ebx, DWORD PTR _graphic$[ebp]
  00020	80 7b 34 00	 cmp	 BYTE PTR [ebx+52], 0
  00024	0f 84 e4 00 00
	00		 je	 $LN3@MarkVisibl
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 78   :     List<Light>&      Lights()                   { return lights;     }

  0002a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0002d	8d 4c 24 18	 lea	 ecx, DWORD PTR _light_iter$1[esp+32]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 78   :     List<Light>&      Lights()                   { return lights;     }

  00031	83 c0 34	 add	 eax, 52			; 00000034H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00034	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR _light_iter$1[esp+36], -1
  0003c	89 44 24 18	 mov	 DWORD PTR _light_iter$1[esp+32], eax

; 108  :    int operator++() { return next() != 0; }

  00040	e8 00 00 00 00	 call	 ?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::next
  00045	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 367  :         while (++light_iter) {

  00047	0f 84 c1 00 00
	00		 je	 $LN3@MarkVisibl
  0004d	0f 1f 00	 npad	 3
$LL2@MarkVisibl:

; 368  :             Light* light = light_iter.value();

  00050	8d 4c 24 18	 lea	 ecx, DWORD PTR _light_iter$1[esp+32]
  00054	e8 00 00 00 00	 call	 ?value@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::value
  00059	8b f0		 mov	 esi, eax

; 369  :             bool bright_enough = light->Type()      == Light::LIGHT_DIRECTIONAL ||

  0005b	83 7e 0c 03	 cmp	 DWORD PTR [esi+12], 3
  0005f	74 78		 je	 SHORT $LN14@MarkVisibl
  00061	f3 0f 10 46 2c	 movss	 xmm0, DWORD PTR [esi+44]
  00066	f3 0f 11 44 24
	14		 movss	 DWORD PTR tv313[esp+32], xmm0
  0006c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0006f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41cdcd6500000000
  00077	73 60		 jae	 SHORT $LN14@MarkVisibl
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00079	f2 0f 10 53 10	 movsd	 xmm2, QWORD PTR [ebx+16]
  0007e	f2 0f 10 43 18	 movsd	 xmm0, QWORD PTR [ebx+24]

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }
; 221  : 
; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }
; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }
; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  00083	f2 0f 5c 46 18	 subsd	 xmm0, QWORD PTR [esi+24]
  00088	f2 0f 5c 56 10	 subsd	 xmm2, QWORD PTR [esi+16]

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0008d	f2 0f 10 4b 20	 movsd	 xmm1, QWORD PTR [ebx+32]

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }
; 221  : 
; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }
; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }
; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  00092	f2 0f 5c 4e 20	 subsd	 xmm1, QWORD PTR [esi+32]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 369  :             bool bright_enough = light->Type()      == Light::LIGHT_DIRECTIONAL ||

  00097	c6 44 24 13 00	 mov	 BYTE PTR _bright_enough$1$[esp+32], 0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  0009c	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  000a0	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  000a4	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  000a8	f2 0f 58 c2	 addsd	 xmm0, xmm2
  000ac	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000b0	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 374  :                 if (test.length() < light->Intensity()*10)

  000b5	f3 0f 10 4c 24
	14		 movss	 xmm1, DWORD PTR tv313[esp+32]
  000bb	b8 01 00 00 00	 mov	 eax, 1
  000c0	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@41200000
  000c8	0f b6 4c 24 13	 movzx	 ecx, BYTE PTR _bright_enough$1$[esp+32]
  000cd	0f 5a c9	 cvtps2pd xmm1, xmm1
  000d0	66 0f 2f c8	 comisd	 xmm1, xmm0
  000d4	0f 47 c8	 cmova	 ecx, eax
  000d7	eb 02		 jmp	 SHORT $LN7@MarkVisibl
$LN14@MarkVisibl:

; 369  :             bool bright_enough = light->Type()      == Light::LIGHT_DIRECTIONAL ||

  000d9	b1 01		 mov	 cl, 1
$LN7@MarkVisibl:

; 375  :                 bright_enough = true;
; 376  :             }
; 377  : 
; 378  :             // turn off lights that won't be used this pass:
; 379  :             if (light->CastsShadow()) {

  000db	80 7e 39 00	 cmp	 BYTE PTR [esi+57], 0
  000df	74 0c		 je	 SHORT $LN8@MarkVisibl

; 380  :                 if ((flags & Graphic::RENDER_ADD_LIGHT) == 0)

  000e1	f7 c7 00 20 00
	00		 test	 edi, 8192		; 00002000H
  000e7	75 11		 jne	 SHORT $LN11@MarkVisibl

; 381  :                 bright_enough = false;

  000e9	32 c9		 xor	 cl, cl

; 382  :             }
; 383  :             else {

  000eb	eb 0d		 jmp	 SHORT $LN11@MarkVisibl
$LN8@MarkVisibl:

; 384  :                 if ((flags & Graphic::RENDER_FIRST_LIGHT) == 0)

  000ed	8b c7		 mov	 eax, edi
  000ef	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  000f4	f7 d8		 neg	 eax
  000f6	1a c0		 sbb	 al, al
  000f8	22 c8		 and	 cl, al
$LN11@MarkVisibl:
; File d:\programming\starshatter\trunk\ngenex\light.h

; 86   :     void              SetActive(bool a)       { active = a;     }

  000fa	88 4e 38	 mov	 BYTE PTR [esi+56], cl
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000fd	8d 4c 24 18	 lea	 ecx, DWORD PTR _light_iter$1[esp+32]
  00101	e8 00 00 00 00	 call	 ?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::next
  00106	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 367  :         while (++light_iter) {

  00108	0f 85 42 ff ff
	ff		 jne	 $LL2@MarkVisibl
$LN3@MarkVisibl:

; 385  :                 bright_enough = false;
; 386  :             }
; 387  : 
; 388  :             double obs_radius = graphic->Radius();
; 389  :             if (obs_radius < 100)
; 390  :             obs_radius = 100;
; 391  : 
; 392  :             light->SetActive(bright_enough);
; 393  :         }
; 394  :     }
; 395  : }

  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c2 08 00	 ret	 8
?MarkVisibleLights@CameraView@@UAEXPAVGraphic@@K@Z ENDP	; CameraView::MarkVisibleLights
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_iter$ = -8						; size = 8
?RenderBackground@CameraView@@UAEXXZ PROC		; CameraView::RenderBackground
; _this$ = ecx

; 401  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	57		 push	 edi
; File d:\programming\starshatter\trunk\foundationex\list.h

; 75   :    bool     isEmpty() const      { return !items; }

  0000d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00010	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 402  :     if (scene->Background().isEmpty()) return;

  00014	0f 84 3e 01 00
	00		 je	 $LN7@RenderBack

; 403  : 
; 404  :     video->SetRenderState(Video::FILL_MODE,         Video::FILL_SOLID);

  0001a	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0001d	6a 03		 push	 3
  0001f	6a 00		 push	 0
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 405  :     video->SetRenderState(Video::Z_ENABLE,          FALSE);

  00029	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0002c	6a 00		 push	 0
  0002e	6a 03		 push	 3
  00030	8b 01		 mov	 eax, DWORD PTR [ecx]
  00032	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 406  :     video->SetRenderState(Video::Z_WRITE_ENABLE,    FALSE);

  00038	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0003b	6a 00		 push	 0
  0003d	6a 04		 push	 4
  0003f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00041	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 407  :     video->SetRenderState(Video::STENCIL_ENABLE,    FALSE);

  00047	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0004a	6a 00		 push	 0
  0004c	6a 0c		 push	 12			; 0000000cH
  0004e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00050	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 408  :     video->SetRenderState(Video::LIGHTING_ENABLE,   TRUE);

  00056	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00059	6a 01		 push	 1
  0005b	6a 02		 push	 2
  0005d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005f	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 74   :     List<Graphic>&    Background()               { return background; }

  00065	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00068	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 74   :     List<Graphic>&    Background()               { return background; }

  0006c	83 c0 04	 add	 eax, 4
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0006f	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+20], -1
  00077	89 44 24 08	 mov	 DWORD PTR _iter$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  0007b	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00080	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 412  :     while (++iter) {

  00082	74 3a		 je	 SHORT $LN3@RenderBack
$LL2@RenderBack:

; 413  :         Graphic* g = iter.value();

  00084	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
  00088	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  0008d	8b f8		 mov	 edi, eax
  0008f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00091	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00094	3d 00 00 00 00	 cmp	 eax, OFFSET ?Hidden@Graphic@@UBEHXZ ; Graphic::Hidden
  00099	0f 85 bf 00 00
	00		 jne	 $LN58@RenderBack
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 111  :     virtual int       Hidden()       const { return hidden;  }

  0009f	0f b6 47 38	 movzx	 eax, BYTE PTR [edi+56]
$LN13@RenderBack:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 415  :         if (!g->Hidden())

  000a3	85 c0		 test	 eax, eax
  000a5	75 0a		 jne	 SHORT $LN15@RenderBack

; 416  :         Render(g, Graphic::RENDER_SOLID);

  000a7	8b 06		 mov	 eax, DWORD PTR [esi]
  000a9	8b ce		 mov	 ecx, esi
  000ab	6a 01		 push	 1
  000ad	57		 push	 edi
  000ae	ff 50 68	 call	 DWORD PTR [eax+104]
$LN15@RenderBack:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000b1	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
  000b5	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  000ba	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 412  :     while (++iter) {

  000bc	75 c6		 jne	 SHORT $LL2@RenderBack
$LN3@RenderBack:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000be	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  000c2	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  000ca	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  000cf	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 421  :     while (++iter) {

  000d1	74 3a		 je	 SHORT $LN5@RenderBack
$LL4@RenderBack:

; 422  :         Graphic* g = iter.value();

  000d3	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
  000d7	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  000dc	8b f8		 mov	 edi, eax
  000de	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000e0	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  000e3	3d 00 00 00 00	 cmp	 eax, OFFSET ?Hidden@Graphic@@UBEHXZ ; Graphic::Hidden
  000e8	0f 85 79 00 00
	00		 jne	 $LN18@RenderBack
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 111  :     virtual int       Hidden()       const { return hidden;  }

  000ee	0f b6 47 38	 movzx	 eax, BYTE PTR [edi+56]
$LN17@RenderBack:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 424  :         if (!g->Hidden())

  000f2	85 c0		 test	 eax, eax
  000f4	75 0a		 jne	 SHORT $LN19@RenderBack

; 425  :         Render(g, Graphic::RENDER_ALPHA);

  000f6	8b 06		 mov	 eax, DWORD PTR [esi]
  000f8	8b ce		 mov	 ecx, esi
  000fa	6a 02		 push	 2
  000fc	57		 push	 edi
  000fd	ff 50 68	 call	 DWORD PTR [eax+104]
$LN19@RenderBack:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00100	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
  00104	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00109	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 421  :     while (++iter) {

  0010b	75 c6		 jne	 SHORT $LL4@RenderBack
$LN5@RenderBack:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0010d	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  00111	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  00119	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  0011e	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 430  :     while (++iter) {

  00120	74 36		 je	 SHORT $LN7@RenderBack
$LL6@RenderBack:

; 431  :         Graphic* g = iter.value();

  00122	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
  00126	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  0012b	8b f8		 mov	 edi, eax
  0012d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0012f	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00132	3d 00 00 00 00	 cmp	 eax, OFFSET ?Hidden@Graphic@@UBEHXZ ; Graphic::Hidden
  00137	75 34		 jne	 SHORT $LN22@RenderBack
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 111  :     virtual int       Hidden()       const { return hidden;  }

  00139	0f b6 47 38	 movzx	 eax, BYTE PTR [edi+56]
$LN21@RenderBack:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 433  :         if (!g->Hidden())

  0013d	85 c0		 test	 eax, eax
  0013f	75 0a		 jne	 SHORT $LN23@RenderBack

; 434  :         Render(g, Graphic::RENDER_ADDITIVE);

  00141	8b 06		 mov	 eax, DWORD PTR [esi]
  00143	8b ce		 mov	 ecx, esi
  00145	6a 04		 push	 4
  00147	57		 push	 edi
  00148	ff 50 68	 call	 DWORD PTR [eax+104]
$LN23@RenderBack:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0014b	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
  0014f	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00154	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 430  :     while (++iter) {

  00156	75 ca		 jne	 SHORT $LL6@RenderBack
$LN7@RenderBack:

; 435  :     }
; 436  : }

  00158	5f		 pop	 edi
  00159	5e		 pop	 esi
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
$LN58@RenderBack:
  0015e	8b cf		 mov	 ecx, edi

; 415  :         if (!g->Hidden())

  00160	ff d0		 call	 eax
  00162	e9 3c ff ff ff	 jmp	 $LN13@RenderBack
$LN18@RenderBack:
  00167	8b cf		 mov	 ecx, edi

; 424  :         if (!g->Hidden())

  00169	ff d0		 call	 eax
  0016b	eb 85		 jmp	 SHORT $LN17@RenderBack
$LN22@RenderBack:
  0016d	8b cf		 mov	 ecx, edi

; 433  :         if (!g->Hidden())

  0016f	ff d0		 call	 eax
  00171	eb ca		 jmp	 SHORT $LN21@RenderBack
?RenderBackground@CameraView@@UAEXXZ ENDP		; CameraView::RenderBackground
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\color.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\color.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\color.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\color.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_iter$ = -16						; size = 8
tv358 = -8						; size = 8
?RenderForeground@CameraView@@UAEXXZ PROC		; CameraView::RenderForeground
; _this$ = ecx

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0000e	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  00016	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 443  :     bool foregroundVisible = false;

  0001a	32 db		 xor	 bl, bl
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 75   :     List<Graphic>&    Foreground()               { return foreground; }

  0001c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0001f	83 c0 10	 add	 eax, 16			; 00000010H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00022	89 44 24 10	 mov	 DWORD PTR _iter$[esp+32], eax

; 108  :    int operator++() { return next() != 0; }

  00026	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  0002b	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 446  :     while (++iter && !foregroundVisible) {

  0002d	0f 84 a9 02 00
	00		 je	 $LN13@RenderFore
  00033	be 01 00 00 00	 mov	 esi, 1
$LL2@RenderFore:
  00038	84 db		 test	 bl, bl
  0003a	75 3f		 jne	 SHORT $LN88@RenderFore

; 447  :         Graphic* g = iter.value();

  0003c	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00040	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value

; 448  :         if (g && !g->Hidden())

  00045	85 c0		 test	 eax, eax
  00047	74 1d		 je	 SHORT $LN14@RenderFore
  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0004e	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?Hidden@Graphic@@UBEHXZ ; Graphic::Hidden
  00054	0f 85 89 02 00
	00		 jne	 $LN89@RenderFore
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 111  :     virtual int       Hidden()       const { return hidden;  }

  0005a	0f b6 40 38	 movzx	 eax, BYTE PTR [eax+56]
$LN20@RenderFore:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 448  :         if (g && !g->Hidden())

  0005e	85 c0		 test	 eax, eax
  00060	0f b6 db	 movzx	 ebx, bl
  00063	0f 44 de	 cmove	 ebx, esi
$LN14@RenderFore:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00066	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  0006a	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  0006f	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 446  :     while (++iter && !foregroundVisible) {

  00071	75 c5		 jne	 SHORT $LL2@RenderFore

; 449  :         foregroundVisible = true;
; 450  :     }
; 451  : 
; 452  :     if (!foregroundVisible)

  00073	84 db		 test	 bl, bl
  00075	0f 84 61 02 00
	00		 je	 $LN13@RenderFore
$LN88@RenderFore:

; 453  :     return;
; 454  : 
; 455  :     video->SetRenderState(Video::FILL_MODE,         Video::FILL_SOLID);

  0007b	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0007e	6a 03		 push	 3
  00080	6a 00		 push	 0
  00082	8b 01		 mov	 eax, DWORD PTR [ecx]
  00084	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 456  :     video->SetRenderState(Video::Z_ENABLE,          TRUE);

  0008a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0008d	6a 01		 push	 1
  0008f	6a 03		 push	 3
  00091	8b 01		 mov	 eax, DWORD PTR [ecx]
  00093	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 457  :     video->SetRenderState(Video::Z_WRITE_ENABLE,    TRUE);

  00099	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0009c	6a 01		 push	 1
  0009e	6a 04		 push	 4
  000a0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a2	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 458  :     video->SetRenderState(Video::STENCIL_ENABLE,    FALSE);

  000a8	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  000ab	6a 00		 push	 0
  000ad	6a 0c		 push	 12			; 0000000cH
  000af	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b1	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 459  :     video->SetRenderState(Video::LIGHTING_ENABLE,   TRUE);

  000b7	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  000ba	6a 01		 push	 1
  000bc	6a 02		 push	 2
  000be	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c0	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
  000c6	8b 07		 mov	 eax, DWORD PTR [edi]
  000c8	8b cf		 mov	 ecx, edi
  000ca	8b 40 34	 mov	 eax, DWORD PTR [eax+52]

; 460  :     video->SetProjection((float) GetFieldOfView(), 1.0f,   1.0e6f,  projection_type);

  000cd	ff d0		 call	 eax
  000cf	ff b7 5c 01 00
	00		 push	 DWORD PTR [edi+348]
  000d5	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  000d8	dd 5c 24 1c	 fstp	 QWORD PTR tv358[esp+36]
  000dc	f2 0f 10 44 24
	1c		 movsd	 xmm0, QWORD PTR tv358[esp+36]
  000e2	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000e5	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000e9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000eb	c7 44 24 08 00
	24 74 49	 mov	 DWORD PTR [esp+8], 1232348160 ; 49742400H
  000f3	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	ff 90 98 00 00
	00		 call	 DWORD PTR [eax+152]

; 461  : 
; 462  :     if (video->IsShadowEnabled() || video->IsBumpMapEnabled()) {

  00106	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00109	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010b	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]
  0010e	ff d0		 call	 eax
  00110	84 c0		 test	 al, al
  00112	75 51		 jne	 SHORT $LN18@RenderFore
  00114	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00117	8b 01		 mov	 eax, DWORD PTR [ecx]
  00119	8b 40 70	 mov	 eax, DWORD PTR [eax+112]
  0011c	ff d0		 call	 eax
  0011e	84 c0		 test	 al, al
  00120	75 43		 jne	 SHORT $LN18@RenderFore
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00122	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  00126	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  0012e	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00133	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 484  :         while (++iter) {

  00135	0f 84 c8 00 00
	00		 je	 $LN7@RenderFore
  0013b	0f 1f 44 00 00	 npad	 5
$LL8@RenderFore:

; 485  :             Graphic* g = iter.value();
; 486  :             Render(g, Graphic::RENDER_SOLID);

  00140	8b 37		 mov	 esi, DWORD PTR [edi]
  00142	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00146	6a 01		 push	 1
  00148	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  0014d	50		 push	 eax
  0014e	8b cf		 mov	 ecx, edi
  00150	ff 56 68	 call	 DWORD PTR [esi+104]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00153	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00157	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  0015c	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 484  :         while (++iter) {

  0015e	75 e0		 jne	 SHORT $LL8@RenderFore

; 461  : 
; 462  :     if (video->IsShadowEnabled() || video->IsBumpMapEnabled()) {

  00160	e9 9e 00 00 00	 jmp	 $LN7@RenderFore
$LN18@RenderFore:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00165	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  00169	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  00171	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00176	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 465  :         while (++iter) {

  00178	74 29		 je	 SHORT $LN5@RenderFore
  0017a	66 0f 1f 44 00
	00		 npad	 6
$LL4@RenderFore:

; 466  :             Graphic* g = iter.value();
; 467  :             Render(g, Graphic::RENDER_SOLID | Graphic::RENDER_FIRST_LIGHT);

  00180	8b 37		 mov	 esi, DWORD PTR [edi]
  00182	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00186	68 01 10 00 00	 push	 4097			; 00001001H
  0018b	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  00190	50		 push	 eax
  00191	8b cf		 mov	 ecx, edi
  00193	ff 56 68	 call	 DWORD PTR [esi+104]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00196	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  0019a	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  0019f	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 465  :         while (++iter) {

  001a1	75 dd		 jne	 SHORT $LL4@RenderFore
$LN5@RenderFore:
; File d:\programming\starshatter\trunk\ngenex\color.h

; 101  :     Color(const Color& c) : rgba(c.rgba) { }

  001a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Black@Color@@2V1@A ; Color::Black
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 470  :         video->SetAmbient(Color::Black);

  001a8	51		 push	 ecx
  001a9	8b cc		 mov	 ecx, esp
; File d:\programming\starshatter\trunk\ngenex\color.h

; 101  :     Color(const Color& c) : rgba(c.rgba) { }

  001ab	89 01		 mov	 DWORD PTR [ecx], eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 470  :         video->SetAmbient(Color::Black);

  001ad	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  001b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  001b2	ff 90 a0 00 00
	00		 call	 DWORD PTR [eax+160]

; 471  :         video->SetRenderState(Video::LIGHTING_PASS,     2);

  001b8	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  001bb	6a 02		 push	 2
  001bd	6a 0e		 push	 14			; 0000000eH
  001bf	8b 01		 mov	 eax, DWORD PTR [ecx]
  001c1	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  001c7	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  001cb	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  001d3	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  001d8	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 475  :         while (++iter) {

  001da	74 27		 je	 SHORT $LN7@RenderFore
  001dc	0f 1f 40 00	 npad	 4
$LL6@RenderFore:

; 476  :             Graphic* g = iter.value();
; 477  :             Render(g, Graphic::RENDER_SOLID | Graphic::RENDER_ADD_LIGHT);

  001e0	8b 37		 mov	 esi, DWORD PTR [edi]
  001e2	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  001e6	68 01 20 00 00	 push	 8193			; 00002001H
  001eb	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  001f0	50		 push	 eax
  001f1	8b cf		 mov	 ecx, edi
  001f3	ff 56 68	 call	 DWORD PTR [esi+104]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  001f6	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  001fa	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  001ff	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 475  :         while (++iter) {

  00201	75 dd		 jne	 SHORT $LL6@RenderFore
$LN7@RenderFore:
; File d:\programming\starshatter\trunk\ngenex\color.h

; 101  :     Color(const Color& c) : rgba(c.rgba) { }

  00203	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 490  :     video->SetAmbient(scene->Ambient());

  00206	51		 push	 ecx
  00207	8b cc		 mov	 ecx, esp
; File d:\programming\starshatter\trunk\ngenex\color.h

; 101  :     Color(const Color& c) : rgba(c.rgba) { }

  00209	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0020c	89 01		 mov	 DWORD PTR [ecx], eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 490  :     video->SetAmbient(scene->Ambient());

  0020e	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00211	8b 01		 mov	 eax, DWORD PTR [ecx]
  00213	ff 90 a0 00 00
	00		 call	 DWORD PTR [eax+160]

; 491  :     video->SetRenderState(Video::LIGHTING_PASS,     0);

  00219	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0021c	6a 00		 push	 0
  0021e	6a 0e		 push	 14			; 0000000eH
  00220	8b 01		 mov	 eax, DWORD PTR [ecx]
  00222	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 492  :     video->SetRenderState(Video::STENCIL_ENABLE,    FALSE);

  00228	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0022b	6a 00		 push	 0
  0022d	6a 0c		 push	 12			; 0000000cH
  0022f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00231	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 493  :     video->SetRenderState(Video::Z_ENABLE,          TRUE);

  00237	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0023a	6a 01		 push	 1
  0023c	6a 03		 push	 3
  0023e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00240	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 494  :     video->SetRenderState(Video::Z_WRITE_ENABLE,    FALSE);

  00246	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00249	6a 00		 push	 0
  0024b	6a 04		 push	 4
  0024d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0024f	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00255	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  00259	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  00261	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00266	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 498  :     while (++iter) {

  00268	74 30		 je	 SHORT $LN11@RenderFore
  0026a	8d 5f 58	 lea	 ebx, DWORD PTR [edi+88]
  0026d	0f 1f 00	 npad	 3
$LL10@RenderFore:

; 499  :         Graphic* g = iter.value();

  00270	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00274	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value

; 500  :         Render(g, Graphic::RENDER_ALPHA);

  00279	8b 17		 mov	 edx, DWORD PTR [edi]
  0027b	8b f0		 mov	 esi, eax
  0027d	6a 02		 push	 2
  0027f	56		 push	 esi
  00280	8b cf		 mov	 ecx, edi
  00282	ff 52 68	 call	 DWORD PTR [edx+104]

; 501  :         g->ProjectScreenRect(&projector);

  00285	8b 16		 mov	 edx, DWORD PTR [esi]
  00287	8b ce		 mov	 ecx, esi
  00289	53		 push	 ebx
  0028a	ff 52 74	 call	 DWORD PTR [edx+116]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0028d	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00291	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00296	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 498  :     while (++iter) {

  00298	75 d6		 jne	 SHORT $LL10@RenderFore
$LN11@RenderFore:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0029a	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  0029e	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  002a6	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  002ab	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 506  :     while (++iter) {

  002ad	74 2d		 je	 SHORT $LN13@RenderFore
  002af	8d 5f 58	 lea	 ebx, DWORD PTR [edi+88]
$LL12@RenderFore:

; 507  :         Graphic* g = iter.value();

  002b2	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  002b6	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value

; 508  :         Render(g, Graphic::RENDER_ADDITIVE);

  002bb	8b 17		 mov	 edx, DWORD PTR [edi]
  002bd	8b f0		 mov	 esi, eax
  002bf	6a 04		 push	 4
  002c1	56		 push	 esi
  002c2	8b cf		 mov	 ecx, edi
  002c4	ff 52 68	 call	 DWORD PTR [edx+104]

; 509  :         g->ProjectScreenRect(&projector);

  002c7	8b 16		 mov	 edx, DWORD PTR [esi]
  002c9	8b ce		 mov	 ecx, esi
  002cb	53		 push	 ebx
  002cc	ff 52 74	 call	 DWORD PTR [edx+116]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  002cf	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  002d3	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  002d8	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 506  :     while (++iter) {

  002da	75 d6		 jne	 SHORT $LL12@RenderFore
$LN13@RenderFore:

; 510  :     }
; 511  : }

  002dc	5f		 pop	 edi
  002dd	5e		 pop	 esi
  002de	5b		 pop	 ebx
  002df	8b e5		 mov	 esp, ebp
  002e1	5d		 pop	 ebp
  002e2	c3		 ret	 0
$LN89@RenderFore:
  002e3	8b c8		 mov	 ecx, eax

; 448  :         if (g && !g->Hidden())

  002e5	ff d2		 call	 edx
  002e7	e9 72 fd ff ff	 jmp	 $LN20@RenderFore
?RenderForeground@CameraView@@UAEXXZ ENDP		; CameraView::RenderForeground
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_iter$ = -8						; size = 8
?RenderSprites@CameraView@@UAEXXZ PROC			; CameraView::RenderSprites
; _this$ = ecx

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 75   :    bool     isEmpty() const      { return !items; }

  0000d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00010	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 518  :     if (scene->Sprites().isEmpty()) return;

  00014	0f 84 26 01 00
	00		 je	 $LN7@RenderSpri

; 519  : 
; 520  :     video->SetRenderState(Video::FILL_MODE,         Video::FILL_SOLID);

  0001a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0001d	6a 03		 push	 3
  0001f	6a 00		 push	 0
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 521  :     video->SetRenderState(Video::Z_ENABLE,          TRUE);

  00029	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0002c	6a 01		 push	 1
  0002e	6a 03		 push	 3
  00030	8b 01		 mov	 eax, DWORD PTR [ecx]
  00032	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 522  :     video->SetRenderState(Video::Z_WRITE_ENABLE,    FALSE);

  00038	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0003b	6a 00		 push	 0
  0003d	6a 04		 push	 4
  0003f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00041	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 523  :     video->SetRenderState(Video::STENCIL_ENABLE,    FALSE);

  00047	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0004a	6a 00		 push	 0
  0004c	6a 0c		 push	 12			; 0000000cH
  0004e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00050	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 524  :     video->SetRenderState(Video::LIGHTING_ENABLE,   TRUE);

  00056	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00059	6a 01		 push	 1
  0005b	6a 02		 push	 2
  0005d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005f	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 77   :     List<Graphic>&    Sprites()                  { return sprites;    }

  00065	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00068	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 77   :     List<Graphic>&    Sprites()                  { return sprites;    }

  0006c	83 c0 28	 add	 eax, 40			; 00000028H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  0006f	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+20], -1
  00077	89 44 24 08	 mov	 DWORD PTR _iter$[esp+16], eax

; 108  :    int operator++() { return next() != 0; }

  0007b	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00080	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 528  :     while (++iter) {

  00082	74 42		 je	 SHORT $LN3@RenderSpri
$LL2@RenderSpri:

; 529  :         Graphic* g = iter.value();

  00084	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
  00088	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  0008d	8b f0		 mov	 esi, eax

; 530  :         if (g && g->IsVisible() && !g->Hidden()) {

  0008f	85 f6		 test	 esi, esi
  00091	74 26		 je	 SHORT $LN13@RenderSpri
  00093	80 7e 34 00	 cmp	 BYTE PTR [esi+52], 0
  00097	74 20		 je	 SHORT $LN13@RenderSpri
  00099	8b 06		 mov	 eax, DWORD PTR [esi]
  0009b	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  0009e	3d 00 00 00 00	 cmp	 eax, OFFSET ?Hidden@Graphic@@UBEHXZ ; Graphic::Hidden
  000a3	0f 85 9d 00 00
	00		 jne	 $LN52@RenderSpri
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 111  :     virtual int       Hidden()       const { return hidden;  }

  000a9	0f b6 46 38	 movzx	 eax, BYTE PTR [esi+56]
$LN11@RenderSpri:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 530  :         if (g && g->IsVisible() && !g->Hidden()) {

  000ad	85 c0		 test	 eax, eax
  000af	75 08		 jne	 SHORT $LN13@RenderSpri

; 531  :             FindDepth(g);

  000b1	8b 07		 mov	 eax, DWORD PTR [edi]
  000b3	8b cf		 mov	 ecx, edi
  000b5	56		 push	 esi
  000b6	ff 50 6c	 call	 DWORD PTR [eax+108]
$LN13@RenderSpri:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000b9	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
  000bd	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  000c2	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 528  :     while (++iter) {

  000c4	75 be		 jne	 SHORT $LL2@RenderSpri
$LN3@RenderSpri:
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 77   :     List<Graphic>&    Sprites()                  { return sprites;    }

  000c6	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000c9	83 c1 28	 add	 ecx, 40			; 00000028H
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 536  :     scene->Sprites().sort();

  000cc	e8 00 00 00 00	 call	 ?sort@?$List@VGraphic@@@@QAEXXZ ; List<Graphic>::sort
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000d1	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  000d5	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  000dd	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  000e2	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 540  :     while (++iter) {

  000e4	74 20		 je	 SHORT $LN5@RenderSpri
$LL4@RenderSpri:

; 541  :         Graphic* g = iter.value();
; 542  :         Render(g, Graphic::RENDER_ALPHA);

  000e6	8b 37		 mov	 esi, DWORD PTR [edi]
  000e8	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
  000ec	6a 02		 push	 2
  000ee	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  000f3	50		 push	 eax
  000f4	8b cf		 mov	 ecx, edi
  000f6	ff 56 68	 call	 DWORD PTR [esi+104]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000f9	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
  000fd	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00102	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 540  :     while (++iter) {

  00104	75 e0		 jne	 SHORT $LL4@RenderSpri
$LN5@RenderSpri:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00106	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  0010a	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+20], -1

; 108  :    int operator++() { return next() != 0; }

  00112	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00117	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 547  :     while (++iter) {

  00119	74 25		 je	 SHORT $LN7@RenderSpri
  0011b	0f 1f 44 00 00	 npad	 5
$LL6@RenderSpri:

; 548  :         Graphic* g = iter.value();
; 549  :         Render(g, Graphic::RENDER_ADDITIVE);

  00120	8b 37		 mov	 esi, DWORD PTR [edi]
  00122	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
  00126	6a 04		 push	 4
  00128	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  0012d	50		 push	 eax
  0012e	8b cf		 mov	 ecx, edi
  00130	ff 56 68	 call	 DWORD PTR [esi+104]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00133	8d 4c 24 08	 lea	 ecx, DWORD PTR _iter$[esp+16]
  00137	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  0013c	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 547  :     while (++iter) {

  0013e	75 e0		 jne	 SHORT $LL6@RenderSpri
$LN7@RenderSpri:

; 550  :     }
; 551  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
$LN52@RenderSpri:
  00146	8b ce		 mov	 ecx, esi

; 530  :         if (g && g->IsVisible() && !g->Hidden()) {

  00148	ff d0		 call	 eax
  0014a	e9 5e ff ff ff	 jmp	 $LN11@RenderSpri
?RenderSprites@CameraView@@UAEXXZ ENDP			; CameraView::RenderSprites
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
tv222 = -8						; size = 4
tv221 = -8						; size = 4
_iter$ = -8						; size = 8
?RenderScene@CameraView@@UAEXXZ PROC			; CameraView::RenderScene
; _this$ = ecx

; 559  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
; File d:\programming\starshatter\trunk\foundationex\list.h

; 75   :    bool     isEmpty() const      { return !items; }

  0000e	83 bf 80 01 00
	00 00		 cmp	 DWORD PTR [edi+384], 0
  00015	8d 9f 80 01 00
	00		 lea	 ebx, DWORD PTR [edi+384]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 560  :     if (graphics.isEmpty()) return;

  0001b	0f 84 f1 00 00
	00		 je	 $LN22@RenderScen
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00021	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+24]

; 76   : 
; 77   :    bool     contains(const T* val) const;
; 78   :    int      count(const T* val)    const;
; 79   :    int      index(const T* val)    const;
; 80   :    T*       find(const T* val)     const;
; 81   : 
; 82   :    void     sort();
; 83   :    void     shuffle();
; 84   : 
; 85   : private:
; 86   :    typedef  T* PTR;
; 87   :    void     qsort(T** a, int lo, int hi);
; 88   :    void     resize(int newsize);
; 89   :    bool     check(int& index) const;
; 90   :    void     swap(T** a, int i, int j);
; 91   : 
; 92   :    int      items;
; 93   :    int      extent;
; 94   :    PTR*     array;
; 95   : 
; 96   :    friend class ListIter<T>;
; 97   : };
; 98   : 
; 99   : // +-------------------------------------------------------------------+
; 100  : 
; 101  : template <class T> class ListIter
; 102  : {
; 103  : public:
; 104  :    ListIter()                       : list(0),      step(-1)      { }
; 105  :    ListIter(const ListIter<T>& i)   : list(i.list), step(i.step)  { }
; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00025	89 5c 24 10	 mov	 DWORD PTR _iter$[esp+24], ebx
  00029	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+28], -1

; 108  :    int operator++() { return next() != 0; }

  00031	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00036	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 567  :     while (++iter) {

  00038	0f 84 89 00 00
	00		 je	 $LN3@RenderScen
  0003e	66 90		 npad	 2
$LL2@RenderScen:

; 568  :         Graphic* g = iter.value();

  00040	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+24]
  00044	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  00049	8b f0		 mov	 esi, eax

; 569  :         if (g && !g->Hidden()) {

  0004b	85 f6		 test	 esi, esi
  0004d	74 67		 je	 SHORT $LN7@RenderScen
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00054	3d 00 00 00 00	 cmp	 eax, OFFSET ?Hidden@Graphic@@UBEHXZ ; Graphic::Hidden
  00059	0f 85 ba 00 00
	00		 jne	 $LN43@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 111  :     virtual int       Hidden()       const { return hidden;  }

  0005f	0f b6 46 38	 movzx	 eax, BYTE PTR [esi+56]
$LN10@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 569  :         if (g && !g->Hidden()) {

  00063	85 c0		 test	 eax, eax
  00065	75 4f		 jne	 SHORT $LN7@RenderScen

; 570  :             FindDepth(g);

  00067	8b 07		 mov	 eax, DWORD PTR [edi]
  00069	8b cf		 mov	 ecx, edi
  0006b	56		 push	 esi
  0006c	ff 50 6c	 call	 DWORD PTR [eax+108]

; 571  : 
; 572  :             if (g->IsSolid()) {

  0006f	8b 06		 mov	 eax, DWORD PTR [esi]
  00071	8b ce		 mov	 ecx, esi
  00073	8b 40 64	 mov	 eax, DWORD PTR [eax+100]
  00076	ff d0		 call	 eax
  00078	84 c0		 test	 al, al
  0007a	74 3a		 je	 SHORT $LN7@RenderScen

; 573  :                 Solid* solid = (Solid*) g;
; 574  : 
; 575  :                 solid->SelectDetail(&projector);

  0007c	8b 16		 mov	 edx, DWORD PTR [esi]
  0007e	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
  00081	50		 push	 eax
  00082	8b ce		 mov	 ecx, esi
  00084	ff 92 88 00 00
	00		 call	 DWORD PTR [edx+136]

; 576  : 
; 577  :                 if (video->IsShadowEnabled()) {

  0008a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0008d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008f	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]
  00092	ff d0		 call	 eax
  00094	84 c0		 test	 al, al
  00096	74 1e		 je	 SHORT $LN7@RenderScen

; 578  :                     MarkVisibleLights(solid, Graphic::RENDER_ADD_LIGHT);

  00098	8b 07		 mov	 eax, DWORD PTR [edi]
  0009a	8b cf		 mov	 ecx, edi
  0009c	68 00 20 00 00	 push	 8192			; 00002000H
  000a1	56		 push	 esi
  000a2	ff 50 4c	 call	 DWORD PTR [eax+76]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 78   :     List<Light>&      Lights()                   { return lights;     }

  000a5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 579  :                     solid->UpdateShadows(scene->Lights());

  000a8	8b ce		 mov	 ecx, esi
  000aa	8b 16		 mov	 edx, DWORD PTR [esi]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 78   :     List<Light>&      Lights()                   { return lights;     }

  000ac	83 c0 34	 add	 eax, 52			; 00000034H
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 579  :                     solid->UpdateShadows(scene->Lights());

  000af	50		 push	 eax
  000b0	ff 92 9c 00 00
	00		 call	 DWORD PTR [edx+156]
$LN7@RenderScen:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000b6	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+24]
  000ba	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  000bf	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 567  :     while (++iter) {

  000c1	0f 85 79 ff ff
	ff		 jne	 $LL2@RenderScen
$LN3@RenderScen:

; 580  :                 }
; 581  :             }
; 582  :         }
; 583  :     }
; 584  : 
; 585  :     // sort the list:
; 586  :     graphics.sort();

  000c7	8b cb		 mov	 ecx, ebx
  000c9	e8 00 00 00 00	 call	 ?sort@?$List@VGraphic@@@@QAEXXZ ; List<Graphic>::sort
; File d:\programming\starshatter\trunk\foundationex\list.h

; 67   :    T*       last()    const      { return operator[](items-1); }

  000ce	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d0	8b cb		 mov	 ecx, ebx
  000d2	48		 dec	 eax
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ??A?$List@VGraphic@@@@QBEPAVGraphic@@H@Z ; List<Graphic>::operator[]
  000d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000db	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  000de	89 4c 24 10	 mov	 DWORD PTR tv221[esp+24], ecx
  000e2	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  000e8	75 38		 jne	 SHORT $LN19@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  000ea	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
$LN18@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 589  :     if (g->Depth() > 5e6) {

  000ef	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@4a989680
  000f6	76 11		 jbe	 SHORT $LN8@RenderScen

; 590  :         RenderSceneObjects(true);

  000f8	8b 07		 mov	 eax, DWORD PTR [edi]
  000fa	8b cf		 mov	 ecx, edi
  000fc	6a 01		 push	 1
  000fe	ff 50 54	 call	 DWORD PTR [eax+84]

; 591  :         video->ClearDepthBuffer();

  00101	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00104	8b 01		 mov	 eax, DWORD PTR [ecx]
  00106	ff 50 30	 call	 DWORD PTR [eax+48]
$LN8@RenderScen:

; 592  :     }
; 593  : 
; 594  :     RenderSceneObjects(false);

  00109	8b 07		 mov	 eax, DWORD PTR [edi]
  0010b	8b cf		 mov	 ecx, edi
  0010d	6a 00		 push	 0
  0010f	ff 50 54	 call	 DWORD PTR [eax+84]
$LN22@RenderScen:

; 595  : }

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c3		 ret	 0
$LN43@RenderScen:
  00119	8b ce		 mov	 ecx, esi

; 569  :         if (g && !g->Hidden()) {

  0011b	ff d0		 call	 eax
  0011d	e9 41 ff ff ff	 jmp	 $LN10@RenderScen
$LN19@RenderScen:
  00122	8b c8		 mov	 ecx, eax

; 589  :     if (g->Depth() > 5e6) {

  00124	ff 54 24 10	 call	 DWORD PTR tv221[esp+24]
  00128	d9 5c 24 10	 fstp	 DWORD PTR tv222[esp+24]
  0012c	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR tv222[esp+24]
  00132	eb bb		 jmp	 SHORT $LN18@RenderScen
?RenderScene@CameraView@@UAEXXZ ENDP			; CameraView::RenderScene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\color.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\solid.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\color.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\color.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\color.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\color.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
tv639 = -20						; size = 4
tv638 = -20						; size = 4
tv631 = -20						; size = 4
tv630 = -20						; size = 4
tv614 = -20						; size = 4
tv613 = -20						; size = 4
tv606 = -20						; size = 4
tv605 = -20						; size = 4
tv589 = -20						; size = 4
tv588 = -20						; size = 4
tv581 = -20						; size = 4
tv580 = -20						; size = 4
tv564 = -20						; size = 4
tv563 = -20						; size = 4
tv556 = -20						; size = 4
tv555 = -20						; size = 4
tv548 = -20						; size = 4
tv547 = -20						; size = 4
tv540 = -20						; size = 4
tv539 = -20						; size = 4
tv523 = -20						; size = 4
tv522 = -20						; size = 4
tv515 = -20						; size = 4
tv514 = -20						; size = 4
_iter$ = -16						; size = 8
tv512 = -8						; size = 8
tv504 = -8						; size = 8
_shadow_iter$1 = -8					; size = 8
_distant$ = 8						; size = 1
?RenderSceneObjects@CameraView@@UAEX_N@Z PROC		; CameraView::RenderSceneObjects
; _this$ = ecx

; 599  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi

; 602  :     video->SetAmbient(scene->Ambient());

  0000e	51		 push	 ecx
  0000f	8b d4		 mov	 edx, esp
  00011	8d 86 80 01 00
	00		 lea	 eax, DWORD PTR [esi+384]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00017	89 44 24 14	 mov	 DWORD PTR _iter$[esp+36], eax
; File d:\programming\starshatter\trunk\ngenex\color.h

; 101  :     Color(const Color& c) : rgba(c.rgba) { }

  0001b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001e	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  00021	89 02		 mov	 DWORD PTR [edx], eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 602  :     video->SetAmbient(scene->Ambient());

  00023	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00026	8b 01		 mov	 eax, DWORD PTR [ecx]
  00028	ff 90 a0 00 00
	00		 call	 DWORD PTR [eax+160]

; 603  :     video->SetRenderState(Video::FILL_MODE,         Video::FILL_SOLID);

  0002e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00031	6a 03		 push	 3
  00033	6a 00		 push	 0
  00035	8b 01		 mov	 eax, DWORD PTR [ecx]
  00037	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 604  :     video->SetRenderState(Video::Z_ENABLE,          TRUE);

  0003d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00040	6a 01		 push	 1
  00042	6a 03		 push	 3
  00044	8b 01		 mov	 eax, DWORD PTR [ecx]
  00046	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 605  :     video->SetRenderState(Video::Z_WRITE_ENABLE,    TRUE);

  0004c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0004f	6a 01		 push	 1
  00051	6a 04		 push	 4
  00053	8b 01		 mov	 eax, DWORD PTR [ecx]
  00055	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 606  :     video->SetRenderState(Video::LIGHTING_ENABLE,   TRUE);

  0005b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0005e	6a 01		 push	 1
  00060	6a 02		 push	 2
  00062	8b 01		 mov	 eax, DWORD PTR [ecx]
  00064	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	8b ce		 mov	 ecx, esi

; 607  : 
; 608  :     if (distant)

  0006e	8a 5d 08	 mov	 bl, BYTE PTR _distant$[ebp]
  00071	8b 40 34	 mov	 eax, DWORD PTR [eax+52]

; 609  :     video->SetProjection((float) GetFieldOfView(), 5.0e6f, 1.0e12f, projection_type);

  00074	ff d0		 call	 eax
  00076	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00079	ff b6 5c 01 00
	00		 push	 DWORD PTR [esi+348]
  0007f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00082	8b 01		 mov	 eax, DWORD PTR [ecx]
  00084	84 db		 test	 bl, bl
  00086	74 1c		 je	 SHORT $LN16@RenderScen
  00088	dd 5c 24 28	 fstp	 QWORD PTR tv504[esp+48]
  0008c	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR tv504[esp+48]
  00092	c7 44 24 08 a5
	d4 68 53	 mov	 DWORD PTR [esp+8], 1399379109 ; 5368d4a5H
  0009a	c7 44 24 04 80
	96 98 4a	 mov	 DWORD PTR [esp+4], 1251513984 ; 4a989680H

; 610  :     else

  000a2	eb 1a		 jmp	 SHORT $LN174@RenderScen
$LN16@RenderScen:

; 611  :     video->SetProjection((float) GetFieldOfView(), 1.0f,   1.0e6f,  projection_type);

  000a4	dd 5c 24 28	 fstp	 QWORD PTR tv512[esp+48]
  000a8	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR tv512[esp+48]
  000ae	c7 44 24 08 00
	24 74 49	 mov	 DWORD PTR [esp+8], 1232348160 ; 49742400H
  000b6	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
$LN174@RenderScen:
  000be	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c7	ff 90 98 00 00
	00		 call	 DWORD PTR [eax+152]

; 612  : 
; 613  :     if (video->IsShadowEnabled() || video->IsBumpMapEnabled()) {

  000cd	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000d0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d2	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]
  000d5	ff d0		 call	 eax
  000d7	84 c0		 test	 al, al
  000d9	0f 85 a7 00 00
	00		 jne	 $LN20@RenderScen
  000df	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000e2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e4	8b 40 70	 mov	 eax, DWORD PTR [eax+112]
  000e7	ff d0		 call	 eax
  000e9	84 c0		 test	 al, al
  000eb	0f 85 95 00 00
	00		 jne	 $LN20@RenderScen
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000f1	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  000f5	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  000fd	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00102	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 661  :         while (++iter) {

  00104	0f 84 ba 02 00
	00		 je	 $LN9@RenderScen
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL10@RenderScen:

; 662  :             Graphic* g = iter.value();

  00110	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00114	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  00119	8b f8		 mov	 edi, eax

; 664  :             if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  0011b	84 db		 test	 bl, bl
  0011d	74 25		 je	 SHORT $LN173@RenderScen
  0011f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00121	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00124	89 4c 24 0c	 mov	 DWORD PTR tv580[esp+32], ecx
  00128	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  0012e	0f 85 16 04 00
	00		 jne	 $LN175@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  00134	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
$LN62@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 664  :             if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  00139	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@4a989680
  00140	77 28		 ja	 SHORT $LN33@RenderScen
  00142	eb 30		 jmp	 SHORT $LN66@RenderScen
$LN173@RenderScen:
  00144	8b 07		 mov	 eax, DWORD PTR [edi]
  00146	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00149	89 44 24 0c	 mov	 DWORD PTR tv588[esp+32], eax
  0014d	3d 00 00 00 00	 cmp	 eax, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  00152	0f 85 07 04 00
	00		 jne	 $LN65@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  00158	f3 0f 10 4f 28	 movss	 xmm1, DWORD PTR [edi+40]
$LN64@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 664  :             if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  0015d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4a989680
  00165	0f 2f c1	 comiss	 xmm0, xmm1
  00168	76 0a		 jbe	 SHORT $LN66@RenderScen
$LN33@RenderScen:

; 665  :                 Render(g, Graphic::RENDER_SOLID);

  0016a	8b 06		 mov	 eax, DWORD PTR [esi]
  0016c	8b ce		 mov	 ecx, esi
  0016e	6a 01		 push	 1
  00170	57		 push	 edi
  00171	ff 50 68	 call	 DWORD PTR [eax+104]
$LN66@RenderScen:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00174	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00178	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  0017d	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 661  :         while (++iter) {

  0017f	75 8f		 jne	 SHORT $LL10@RenderScen

; 612  : 
; 613  :     if (video->IsShadowEnabled() || video->IsBumpMapEnabled()) {

  00181	e9 3e 02 00 00	 jmp	 $LN9@RenderScen
$LN20@RenderScen:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00186	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  0018a	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  00192	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00197	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 616  :         while (++iter) {

  00199	74 79		 je	 SHORT $LN3@RenderScen
  0019b	0f 1f 44 00 00	 npad	 5
$LL2@RenderScen:

; 617  :             Graphic* g = iter.value();

  001a0	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  001a4	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  001a9	8b f8		 mov	 edi, eax

; 619  :             if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  001ab	84 db		 test	 bl, bl
  001ad	74 25		 je	 SHORT $LN172@RenderScen
  001af	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001b1	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  001b4	89 4c 24 0c	 mov	 DWORD PTR tv514[esp+32], ecx
  001b8	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  001be	0f 85 b0 03 00
	00		 jne	 $LN47@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  001c4	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
$LN46@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 619  :             if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  001c9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@4a989680
  001d0	77 28		 ja	 SHORT $LN22@RenderScen
  001d2	eb 33		 jmp	 SHORT $LN50@RenderScen
$LN172@RenderScen:
  001d4	8b 07		 mov	 eax, DWORD PTR [edi]
  001d6	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  001d9	89 44 24 0c	 mov	 DWORD PTR tv522[esp+32], eax
  001dd	3d 00 00 00 00	 cmp	 eax, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  001e2	0f 85 a1 03 00
	00		 jne	 $LN49@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  001e8	f3 0f 10 4f 28	 movss	 xmm1, DWORD PTR [edi+40]
$LN48@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 619  :             if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  001ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4a989680
  001f5	0f 2f c1	 comiss	 xmm0, xmm1
  001f8	76 0d		 jbe	 SHORT $LN50@RenderScen
$LN22@RenderScen:

; 620  :                 Render(g, Graphic::RENDER_SOLID | Graphic::RENDER_FIRST_LIGHT);

  001fa	8b 06		 mov	 eax, DWORD PTR [esi]
  001fc	8b ce		 mov	 ecx, esi
  001fe	68 01 10 00 00	 push	 4097			; 00001001H
  00203	57		 push	 edi
  00204	ff 50 68	 call	 DWORD PTR [eax+104]
$LN50@RenderScen:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00207	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  0020b	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00210	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 616  :         while (++iter) {

  00212	75 8c		 jne	 SHORT $LL2@RenderScen
$LN3@RenderScen:

; 621  :             }
; 622  :         }
; 623  : 
; 624  :         // send shadows to stencil buffer:
; 625  :         if (video->IsShadowEnabled()) {

  00214	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00217	8b 01		 mov	 eax, DWORD PTR [ecx]
  00219	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]
  0021c	ff d0		 call	 eax
  0021e	84 c0		 test	 al, al
  00220	0f 84 db 00 00
	00		 je	 $LN5@RenderScen
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00226	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  0022a	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  00232	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00237	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 627  :             while (++iter) {

  00239	0f 84 c2 00 00
	00		 je	 $LN5@RenderScen
  0023f	90		 npad	 1
$LL4@RenderScen:

; 628  :                 Graphic* g = iter.value();

  00240	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00244	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  00249	8b f8		 mov	 edi, eax

; 629  :                 if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  0024b	84 db		 test	 bl, bl
  0024d	74 25		 je	 SHORT $LN171@RenderScen
  0024f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00251	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00254	89 4c 24 0c	 mov	 DWORD PTR tv539[esp+32], ecx
  00258	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  0025e	0f 85 3a 03 00
	00		 jne	 $LN53@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  00264	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
$LN52@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 629  :                 if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  00269	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@4a989680
  00270	77 28		 ja	 SHORT $LN26@RenderScen
  00272	eb 7c		 jmp	 SHORT $LN7@RenderScen
$LN171@RenderScen:
  00274	8b 07		 mov	 eax, DWORD PTR [edi]
  00276	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00279	89 44 24 0c	 mov	 DWORD PTR tv547[esp+32], eax
  0027d	3d 00 00 00 00	 cmp	 eax, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  00282	0f 85 2b 03 00
	00		 jne	 $LN55@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  00288	f3 0f 10 4f 28	 movss	 xmm1, DWORD PTR [edi+40]
$LN54@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 629  :                 if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  0028d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4a989680
  00295	0f 2f c1	 comiss	 xmm0, xmm1
  00298	76 56		 jbe	 SHORT $LN7@RenderScen
$LN26@RenderScen:

; 630  :                     if (g->IsSolid()) {

  0029a	8b 07		 mov	 eax, DWORD PTR [edi]
  0029c	8b cf		 mov	 ecx, edi
  0029e	8b 40 64	 mov	 eax, DWORD PTR [eax+100]
  002a1	ff d0		 call	 eax
  002a3	84 c0		 test	 al, al
  002a5	74 49		 je	 SHORT $LN7@RenderScen
; File d:\programming\starshatter\trunk\ngenex\solid.h

; 98   :     List<Shadow>&  GetShadows()         { return shadows;       }

  002a7	8d 87 d4 00 00
	00		 lea	 eax, DWORD PTR [edi+212]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  002ad	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR _shadow_iter$1[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  002b5	8d 4c 24 18	 lea	 ecx, DWORD PTR _shadow_iter$1[esp+32]

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  002b9	89 44 24 18	 mov	 DWORD PTR _shadow_iter$1[esp+32], eax

; 108  :    int operator++() { return next() != 0; }

  002bd	e8 00 00 00 00	 call	 ?next@?$ListIter@VShadow@@@@QAEPAVShadow@@XZ ; ListIter<Shadow>::next
  002c2	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 634  :                         while (++shadow_iter) {

  002c4	74 2a		 je	 SHORT $LN7@RenderScen
  002c6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL6@RenderScen:

; 635  :                             Shadow* shadow = shadow_iter.value();
; 636  :                             shadow->Render(video);

  002d0	ff 76 10	 push	 DWORD PTR [esi+16]
  002d3	8d 4c 24 1c	 lea	 ecx, DWORD PTR _shadow_iter$1[esp+36]
  002d7	e8 00 00 00 00	 call	 ?value@?$ListIter@VShadow@@@@QAEPAVShadow@@XZ ; ListIter<Shadow>::value
  002dc	8b c8		 mov	 ecx, eax
  002de	e8 00 00 00 00	 call	 ?Render@Shadow@@QAEXPAVVideo@@@Z ; Shadow::Render
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  002e3	8d 4c 24 18	 lea	 ecx, DWORD PTR _shadow_iter$1[esp+32]
  002e7	e8 00 00 00 00	 call	 ?next@?$ListIter@VShadow@@@@QAEPAVShadow@@XZ ; ListIter<Shadow>::next
  002ec	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 634  :                         while (++shadow_iter) {

  002ee	75 e0		 jne	 SHORT $LL6@RenderScen
$LN7@RenderScen:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  002f0	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  002f4	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  002f9	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 627  :             while (++iter) {

  002fb	0f 85 3f ff ff
	ff		 jne	 $LL4@RenderScen
$LN5@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\color.h

; 101  :     Color(const Color& c) : rgba(c.rgba) { }

  00301	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Black@Color@@2V1@A ; Color::Black
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 643  :         video->SetAmbient(Color::Black);

  00306	51		 push	 ecx
  00307	8b cc		 mov	 ecx, esp
; File d:\programming\starshatter\trunk\ngenex\color.h

; 101  :     Color(const Color& c) : rgba(c.rgba) { }

  00309	89 01		 mov	 DWORD PTR [ecx], eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 643  :         video->SetAmbient(Color::Black);

  0030b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0030e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00310	ff 90 a0 00 00
	00		 call	 DWORD PTR [eax+160]

; 644  :         video->SetRenderState(Video::LIGHTING_PASS,     2);

  00316	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00319	6a 02		 push	 2
  0031b	6a 0e		 push	 14			; 0000000eH
  0031d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0031f	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 645  :         video->SetRenderState(Video::STENCIL_ENABLE,    TRUE);

  00325	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00328	6a 01		 push	 1
  0032a	6a 0c		 push	 12			; 0000000cH
  0032c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0032e	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00334	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  00338	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  00340	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00345	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 649  :         while (++iter) {

  00347	74 7b		 je	 SHORT $LN9@RenderScen
  00349	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@RenderScen:

; 650  :             Graphic* g = iter.value();

  00350	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00354	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  00359	8b f8		 mov	 edi, eax

; 652  :             if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  0035b	84 db		 test	 bl, bl
  0035d	74 25		 je	 SHORT $LN170@RenderScen
  0035f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00361	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00364	89 4c 24 0c	 mov	 DWORD PTR tv555[esp+32], ecx
  00368	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  0036e	0f 85 54 02 00
	00		 jne	 $LN57@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  00374	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
$LN56@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 652  :             if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  00379	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@4a989680
  00380	77 28		 ja	 SHORT $LN30@RenderScen
  00382	eb 33		 jmp	 SHORT $LN60@RenderScen
$LN170@RenderScen:
  00384	8b 07		 mov	 eax, DWORD PTR [edi]
  00386	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00389	89 44 24 0c	 mov	 DWORD PTR tv563[esp+32], eax
  0038d	3d 00 00 00 00	 cmp	 eax, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  00392	0f 85 45 02 00
	00		 jne	 $LN59@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  00398	f3 0f 10 4f 28	 movss	 xmm1, DWORD PTR [edi+40]
$LN58@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 652  :             if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  0039d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4a989680
  003a5	0f 2f c1	 comiss	 xmm0, xmm1
  003a8	76 0d		 jbe	 SHORT $LN60@RenderScen
$LN30@RenderScen:

; 653  :                 Render(g, Graphic::RENDER_SOLID | Graphic::RENDER_ADD_LIGHT);

  003aa	8b 06		 mov	 eax, DWORD PTR [esi]
  003ac	8b ce		 mov	 ecx, esi
  003ae	68 01 20 00 00	 push	 8193			; 00002001H
  003b3	57		 push	 edi
  003b4	ff 50 68	 call	 DWORD PTR [eax+104]
$LN60@RenderScen:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  003b7	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  003bb	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  003c0	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 649  :         while (++iter) {

  003c2	75 8c		 jne	 SHORT $LL8@RenderScen
$LN9@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\color.h

; 101  :     Color(const Color& c) : rgba(c.rgba) { }

  003c4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 670  :     video->SetAmbient(scene->Ambient());

  003c7	51		 push	 ecx
  003c8	8b cc		 mov	 ecx, esp
; File d:\programming\starshatter\trunk\ngenex\color.h

; 101  :     Color(const Color& c) : rgba(c.rgba) { }

  003ca	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  003cd	89 01		 mov	 DWORD PTR [ecx], eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 670  :     video->SetAmbient(scene->Ambient());

  003cf	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  003d2	8b 01		 mov	 eax, DWORD PTR [ecx]
  003d4	ff 90 a0 00 00
	00		 call	 DWORD PTR [eax+160]

; 671  :     video->SetRenderState(Video::LIGHTING_PASS,     0);

  003da	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  003dd	6a 00		 push	 0
  003df	6a 0e		 push	 14			; 0000000eH
  003e1	8b 01		 mov	 eax, DWORD PTR [ecx]
  003e3	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 672  :     video->SetRenderState(Video::STENCIL_ENABLE,    FALSE);

  003e9	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  003ec	6a 00		 push	 0
  003ee	6a 0c		 push	 12			; 0000000cH
  003f0	8b 01		 mov	 eax, DWORD PTR [ecx]
  003f2	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 673  :     video->SetRenderState(Video::Z_ENABLE,          TRUE);

  003f8	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  003fb	6a 01		 push	 1
  003fd	6a 03		 push	 3
  003ff	8b 01		 mov	 eax, DWORD PTR [ecx]
  00401	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 674  :     video->SetRenderState(Video::Z_WRITE_ENABLE,    FALSE);

  00407	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0040a	6a 00		 push	 0
  0040c	6a 04		 push	 4
  0040e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00410	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00416	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  0041a	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  00422	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00427	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 678  :     while (++iter) {

  00429	0f 84 7d 00 00
	00		 je	 $LN13@RenderScen
  0042f	90		 npad	 1
$LL12@RenderScen:

; 679  :         Graphic* g = iter.value();

  00430	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00434	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  00439	8b f8		 mov	 edi, eax

; 681  :         if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  0043b	84 db		 test	 bl, bl
  0043d	74 25		 je	 SHORT $LN169@RenderScen
  0043f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00441	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00444	89 4c 24 0c	 mov	 DWORD PTR tv605[esp+32], ecx
  00448	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  0044e	0f 85 9e 01 00
	00		 jne	 $LN69@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  00454	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
$LN68@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 681  :         if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  00459	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@4a989680
  00460	77 28		 ja	 SHORT $LN36@RenderScen
  00462	eb 3b		 jmp	 SHORT $LN35@RenderScen
$LN169@RenderScen:
  00464	8b 07		 mov	 eax, DWORD PTR [edi]
  00466	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00469	89 44 24 0c	 mov	 DWORD PTR tv613[esp+32], eax
  0046d	3d 00 00 00 00	 cmp	 eax, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  00472	0f 85 8f 01 00
	00		 jne	 $LN71@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  00478	f3 0f 10 4f 28	 movss	 xmm1, DWORD PTR [edi+40]
$LN70@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 681  :         if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  0047d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4a989680
  00485	0f 2f c1	 comiss	 xmm0, xmm1
  00488	76 15		 jbe	 SHORT $LN35@RenderScen
$LN36@RenderScen:

; 682  :             Render(g, Graphic::RENDER_ALPHA);

  0048a	8b 06		 mov	 eax, DWORD PTR [esi]
  0048c	8b ce		 mov	 ecx, esi
  0048e	6a 02		 push	 2
  00490	57		 push	 edi
  00491	ff 50 68	 call	 DWORD PTR [eax+104]

; 683  :             g->ProjectScreenRect(&projector);

  00494	8b 17		 mov	 edx, DWORD PTR [edi]
  00496	8d 46 58	 lea	 eax, DWORD PTR [esi+88]
  00499	50		 push	 eax
  0049a	8b cf		 mov	 ecx, edi
  0049c	ff 52 74	 call	 DWORD PTR [edx+116]
$LN35@RenderScen:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  0049f	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  004a3	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  004a8	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 678  :     while (++iter) {

  004aa	75 84		 jne	 SHORT $LL12@RenderScen
$LN13@RenderScen:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  004ac	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]

; 109  :    int operator--() { return prev() != 0; }
; 110  :    T*  operator->() { return value();     }
; 111  :    T&  operator* () { return *value();    }
; 112  : 
; 113  :    void     reset() { step = -1;          }

  004b0	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _iter$[esp+36], -1

; 108  :    int operator++() { return next() != 0; }

  004b8	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  004bd	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 689  :     while (++iter) {

  004bf	0f 84 7c 00 00
	00		 je	 $LN15@RenderScen
$LL14@RenderScen:

; 690  :         Graphic* g = iter.value();

  004c5	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  004c9	e8 00 00 00 00	 call	 ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::value
  004ce	8b f8		 mov	 edi, eax

; 692  :         if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  004d0	84 db		 test	 bl, bl
  004d2	74 25		 je	 SHORT $LN168@RenderScen
  004d4	8b 0f		 mov	 ecx, DWORD PTR [edi]
  004d6	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  004d9	89 4c 24 0c	 mov	 DWORD PTR tv630[esp+32], ecx
  004dd	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  004e3	0f 85 33 01 00
	00		 jne	 $LN75@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  004e9	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
$LN74@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 692  :         if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  004ee	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@4a989680
  004f5	77 28		 ja	 SHORT $LN39@RenderScen
  004f7	eb 3b		 jmp	 SHORT $LN38@RenderScen
$LN168@RenderScen:
  004f9	8b 07		 mov	 eax, DWORD PTR [edi]
  004fb	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  004fe	89 44 24 0c	 mov	 DWORD PTR tv638[esp+32], eax
  00502	3d 00 00 00 00	 cmp	 eax, OFFSET ?Depth@Graphic@@UBEMXZ ; Graphic::Depth
  00507	0f 85 24 01 00
	00		 jne	 $LN77@RenderScen
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 99   :     virtual float     Depth()        const { return depth;   }

  0050d	f3 0f 10 4f 28	 movss	 xmm1, DWORD PTR [edi+40]
$LN76@RenderScen:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 692  :         if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  00512	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4a989680
  0051a	0f 2f c1	 comiss	 xmm0, xmm1
  0051d	76 15		 jbe	 SHORT $LN38@RenderScen
$LN39@RenderScen:

; 693  :             Render(g, Graphic::RENDER_ADDITIVE);

  0051f	8b 06		 mov	 eax, DWORD PTR [esi]
  00521	8b ce		 mov	 ecx, esi
  00523	6a 04		 push	 4
  00525	57		 push	 edi
  00526	ff 50 68	 call	 DWORD PTR [eax+104]

; 694  :             g->ProjectScreenRect(&projector);

  00529	8b 17		 mov	 edx, DWORD PTR [edi]
  0052b	8d 46 58	 lea	 eax, DWORD PTR [esi+88]
  0052e	50		 push	 eax
  0052f	8b cf		 mov	 ecx, edi
  00531	ff 52 74	 call	 DWORD PTR [edx+116]
$LN38@RenderScen:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00534	8d 4c 24 10	 lea	 ecx, DWORD PTR _iter$[esp+32]
  00538	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  0053d	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 689  :     while (++iter) {

  0053f	75 84		 jne	 SHORT $LL14@RenderScen
$LN15@RenderScen:

; 695  :         }
; 696  :     }
; 697  : }

  00541	5f		 pop	 edi
  00542	5e		 pop	 esi
  00543	5b		 pop	 ebx
  00544	8b e5		 mov	 esp, ebp
  00546	5d		 pop	 ebp
  00547	c2 04 00	 ret	 4
$LN175@RenderScen:
  0054a	8b cf		 mov	 ecx, edi

; 664  :             if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  0054c	ff 54 24 0c	 call	 DWORD PTR tv580[esp+32]
  00550	d9 5c 24 0c	 fstp	 DWORD PTR tv581[esp+32]
  00554	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv581[esp+32]
  0055a	e9 da fb ff ff	 jmp	 $LN62@RenderScen
$LN65@RenderScen:
  0055f	8b cf		 mov	 ecx, edi
  00561	ff 54 24 0c	 call	 DWORD PTR tv588[esp+32]
  00565	d9 5c 24 0c	 fstp	 DWORD PTR tv589[esp+32]
  00569	f3 0f 10 4c 24
	0c		 movss	 xmm1, DWORD PTR tv589[esp+32]
  0056f	e9 e9 fb ff ff	 jmp	 $LN64@RenderScen
$LN47@RenderScen:
  00574	8b cf		 mov	 ecx, edi

; 619  :             if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  00576	ff 54 24 0c	 call	 DWORD PTR tv514[esp+32]
  0057a	d9 5c 24 0c	 fstp	 DWORD PTR tv515[esp+32]
  0057e	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv515[esp+32]
  00584	e9 40 fc ff ff	 jmp	 $LN46@RenderScen
$LN49@RenderScen:
  00589	8b cf		 mov	 ecx, edi
  0058b	ff 54 24 0c	 call	 DWORD PTR tv522[esp+32]
  0058f	d9 5c 24 0c	 fstp	 DWORD PTR tv523[esp+32]
  00593	f3 0f 10 4c 24
	0c		 movss	 xmm1, DWORD PTR tv523[esp+32]
  00599	e9 4f fc ff ff	 jmp	 $LN48@RenderScen
$LN53@RenderScen:
  0059e	8b cf		 mov	 ecx, edi

; 629  :                 if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  005a0	ff 54 24 0c	 call	 DWORD PTR tv539[esp+32]
  005a4	d9 5c 24 0c	 fstp	 DWORD PTR tv540[esp+32]
  005a8	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv540[esp+32]
  005ae	e9 b6 fc ff ff	 jmp	 $LN52@RenderScen
$LN55@RenderScen:
  005b3	8b cf		 mov	 ecx, edi
  005b5	ff 54 24 0c	 call	 DWORD PTR tv547[esp+32]
  005b9	d9 5c 24 0c	 fstp	 DWORD PTR tv548[esp+32]
  005bd	f3 0f 10 4c 24
	0c		 movss	 xmm1, DWORD PTR tv548[esp+32]
  005c3	e9 c5 fc ff ff	 jmp	 $LN54@RenderScen
$LN57@RenderScen:
  005c8	8b cf		 mov	 ecx, edi

; 652  :             if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  005ca	ff 54 24 0c	 call	 DWORD PTR tv555[esp+32]
  005ce	d9 5c 24 0c	 fstp	 DWORD PTR tv556[esp+32]
  005d2	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv556[esp+32]
  005d8	e9 9c fd ff ff	 jmp	 $LN56@RenderScen
$LN59@RenderScen:
  005dd	8b cf		 mov	 ecx, edi
  005df	ff 54 24 0c	 call	 DWORD PTR tv563[esp+32]
  005e3	d9 5c 24 0c	 fstp	 DWORD PTR tv564[esp+32]
  005e7	f3 0f 10 4c 24
	0c		 movss	 xmm1, DWORD PTR tv564[esp+32]
  005ed	e9 ab fd ff ff	 jmp	 $LN58@RenderScen
$LN69@RenderScen:
  005f2	8b cf		 mov	 ecx, edi

; 681  :         if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  005f4	ff 54 24 0c	 call	 DWORD PTR tv605[esp+32]
  005f8	d9 5c 24 0c	 fstp	 DWORD PTR tv606[esp+32]
  005fc	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv606[esp+32]
  00602	e9 52 fe ff ff	 jmp	 $LN68@RenderScen
$LN71@RenderScen:
  00607	8b cf		 mov	 ecx, edi
  00609	ff 54 24 0c	 call	 DWORD PTR tv613[esp+32]
  0060d	d9 5c 24 0c	 fstp	 DWORD PTR tv614[esp+32]
  00611	f3 0f 10 4c 24
	0c		 movss	 xmm1, DWORD PTR tv614[esp+32]
  00617	e9 61 fe ff ff	 jmp	 $LN70@RenderScen
$LN75@RenderScen:
  0061c	8b cf		 mov	 ecx, edi

; 692  :         if (distant && g->Depth() > 5e6 || !distant && g->Depth() < 5e6) {

  0061e	ff 54 24 0c	 call	 DWORD PTR tv630[esp+32]
  00622	d9 5c 24 0c	 fstp	 DWORD PTR tv631[esp+32]
  00626	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv631[esp+32]
  0062c	e9 bd fe ff ff	 jmp	 $LN74@RenderScen
$LN77@RenderScen:
  00631	8b cf		 mov	 ecx, edi
  00633	ff 54 24 0c	 call	 DWORD PTR tv638[esp+32]
  00637	d9 5c 24 0c	 fstp	 DWORD PTR tv639[esp+32]
  0063b	f3 0f 10 4c 24
	0c		 movss	 xmm1, DWORD PTR tv639[esp+32]
  00641	e9 cc fe ff ff	 jmp	 $LN76@RenderScen
?RenderSceneObjects@CameraView@@UAEX_N@Z ENDP		; CameraView::RenderSceneObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\graphic.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_g$ = 8							; size = 4
_flags$ = 12						; size = 4
?Render@CameraView@@UAEXPAVGraphic@@K@Z PROC		; CameraView::Render
; _this$ = ecx

; 701  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 702  :     if (g && g->IsVisible() && !g->Hidden()) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _g$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 51		 je	 SHORT $LN2@Render
  0000e	80 7e 34 00	 cmp	 BYTE PTR [esi+52], 0
  00012	74 4b		 je	 SHORT $LN2@Render
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  00019	3d 00 00 00 00	 cmp	 eax, OFFSET ?Hidden@Graphic@@UBEHXZ ; Graphic::Hidden
  0001e	75 45		 jne	 SHORT $LN15@Render
; File d:\programming\starshatter\trunk\ngenex\graphic.h

; 111  :     virtual int       Hidden()       const { return hidden;  }

  00020	0f b6 46 38	 movzx	 eax, BYTE PTR [esi+56]
$LN5@Render:
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 702  :     if (g && g->IsVisible() && !g->Hidden()) {

  00024	85 c0		 test	 eax, eax
  00026	75 37		 jne	 SHORT $LN2@Render

; 703  :         if (g->IsSolid()) {

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	8b ce		 mov	 ecx, esi
  0002c	8b 40 64	 mov	 eax, DWORD PTR [eax+100]
  0002f	ff d0		 call	 eax
  00031	84 c0		 test	 al, al
  00033	74 1d		 je	 SHORT $LN3@Render

; 704  :             MarkVisibleLights(g, flags);

  00035	ff 75 0c	 push	 DWORD PTR _flags$[ebp]
  00038	8b 07		 mov	 eax, DWORD PTR [edi]
  0003a	8b cf		 mov	 ecx, edi
  0003c	56		 push	 esi
  0003d	ff 50 4c	 call	 DWORD PTR [eax+76]

; 705  :             video->SetLights(scene->Lights());

  00040	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 78   :     List<Light>&      Lights()                   { return lights;     }

  00043	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00046	83 c0 34	 add	 eax, 52			; 00000034H
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 705  :             video->SetLights(scene->Lights());

  00049	50		 push	 eax
  0004a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004c	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]
$LN3@Render:

; 706  :         }
; 707  : 
; 708  :         g->Render(video, flags);

  00052	ff 75 0c	 push	 DWORD PTR _flags$[ebp]
  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	8b ce		 mov	 ecx, esi
  00059	ff 77 10	 push	 DWORD PTR [edi+16]
  0005c	ff 50 04	 call	 DWORD PTR [eax+4]
$LN2@Render:
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 709  :     }
; 710  : }

  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
$LN15@Render:
  00065	8b ce		 mov	 ecx, esi

; 702  :     if (g && g->IsVisible() && !g->Hidden()) {

  00067	ff d0		 call	 eax
  00069	eb b9		 jmp	 SHORT $LN5@Render
?Render@CameraView@@UAEXPAVGraphic@@K@Z ENDP		; CameraView::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\scene.h
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\camera.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\camera.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\window.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\window.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\foundationex\list.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
tv878 = -84						; size = 4
_vlen$1$ = -80						; size = 4
_center$1$ = -76					; size = 4
_center$2$ = -72					; size = 4
_light_iter$ = -68					; size = 8
$T1 = -60						; size = 12
_sun_pos$2 = -48					; size = 24
_vector$3 = -24						; size = 24
$T4 = -24						; size = 24
?RenderLensFlare@CameraView@@UAEXXZ PROC		; CameraView::RenderLensFlare
; _this$ = ecx

; 718  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 c0	 and	 esp, -64		; ffffffc0H
  00006	83 ec 74	 sub	 esp, 116		; 00000074H
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi

; 719  :     if (!lens_flare_enable || lens_flare_dim < 0.01)

  0000e	83 bb 60 01 00
	00 00		 cmp	 DWORD PTR [ebx+352], 0
  00015	0f 84 ba 03 00
	00		 je	 $LN8@RenderLens
  0001b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00023	66 0f 2f 83 68
	01 00 00	 comisd	 xmm0, QWORD PTR [ebx+360]
  0002b	0f 87 a4 03 00
	00		 ja	 $LN8@RenderLens

; 720  :     return;
; 721  : 
; 722  :     if (!halo_bitmap)

  00031	83 bb 70 01 00
	00 00		 cmp	 DWORD PTR [ebx+368], 0
  00038	0f 84 97 03 00
	00		 je	 $LN8@RenderLens

; 723  :     return;
; 724  : 
; 725  :     video->SetRenderState(Video::STENCIL_ENABLE,    FALSE);

  0003e	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00041	6a 00		 push	 0
  00043	6a 0c		 push	 12			; 0000000cH
  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 726  :     video->SetRenderState(Video::Z_ENABLE,          FALSE);

  0004d	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00050	6a 00		 push	 0
  00052	6a 03		 push	 3
  00054	8b 01		 mov	 eax, DWORD PTR [ecx]
  00056	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 727  :     video->SetRenderState(Video::Z_WRITE_ENABLE,    FALSE);

  0005c	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  0005f	6a 00		 push	 0
  00061	6a 04		 push	 4
  00063	8b 01		 mov	 eax, DWORD PTR [ecx]
  00065	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
  0006b	66 0f 6e 8b 54
	01 00 00	 movd	 xmm1, DWORD PTR [ebx+340]
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  00073	8d 4c 24 3c	 lea	 ecx, DWORD PTR _light_iter$[esp+128]
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 78   :     List<Light>&      Lights()                   { return lights;     }

  00077	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 731  :     Vec3 center((float)width/2.0f, (float)height/2.0f, 1.0f);

  0007a	0f 5b c9	 cvtdq2ps xmm1, xmm1
; File d:\programming\starshatter\trunk\ngenex\scene.h

; 78   :     List<Light>&      Lights()                   { return lights;     }

  0007d	83 c0 34	 add	 eax, 52			; 00000034H
; File d:\programming\starshatter\trunk\foundationex\list.h

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00080	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR _light_iter$[esp+132], -1
  00088	89 44 24 3c	 mov	 DWORD PTR _light_iter$[esp+128], eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 731  :     Vec3 center((float)width/2.0f, (float)height/2.0f, 1.0f);

  0008c	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00094	f3 0f 11 4c 24
	34		 movss	 DWORD PTR _center$1$[esp+128], xmm1
  0009a	66 0f 6e 8b 58
	01 00 00	 movd	 xmm1, DWORD PTR [ebx+344]
  000a2	0f 5b c9	 cvtdq2ps xmm1, xmm1
  000a5	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  000ad	f3 0f 11 4c 24
	38		 movss	 DWORD PTR _center$2$[esp+128], xmm1
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  000b3	e8 00 00 00 00	 call	 ?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::next
  000b8	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 735  :     while (++light_iter) {

  000ba	0f 84 15 03 00
	00		 je	 $LN8@RenderLens
$LL2@RenderLens:

; 736  :         Light* light = light_iter.value();

  000c0	8d 4c 24 3c	 lea	 ecx, DWORD PTR _light_iter$[esp+128]
  000c4	e8 00 00 00 00	 call	 ?value@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::value
  000c9	8b f0		 mov	 esi, eax

; 737  : 
; 738  :         if (!light->IsActive())

  000cb	80 7e 38 00	 cmp	 BYTE PTR [esi+56], 0
  000cf	0f 84 ef 02 00
	00		 je	 $LN5@RenderLens

; 739  :         continue;
; 740  : 
; 741  :         if (light->Type() == Light::LIGHT_DIRECTIONAL && light->Intensity() < 1)

  000d5	83 7e 0c 03	 cmp	 DWORD PTR [esi+12], 3
  000d9	75 12		 jne	 SHORT $LN11@RenderLens
  000db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000e3	0f 2f 46 2c	 comiss	 xmm0, DWORD PTR [esi+44]
  000e7	0f 87 d7 02 00
	00		 ja	 $LN5@RenderLens
$LN11@RenderLens:
; File d:\programming\starshatter\trunk\ngenex\camera.h

; 72   :     Point    Pos() const { return pos;    }

  000ed	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  000f0	f2 0f 10 56 10	 movsd	 xmm2, QWORD PTR [esi+16]
  000f5	f2 0f 10 46 18	 movsd	 xmm0, QWORD PTR [esi+24]
  000fa	f2 0f 10 4e 20	 movsd	 xmm1, QWORD PTR [esi+32]

; 228  :     Point operator- (const Point& p) const { return Point(x-p.x, y-p.y, z-p.z); }

  000ff	f2 0f 5c 40 10	 subsd	 xmm0, QWORD PTR [eax+16]
  00104	f2 0f 5c 50 08	 subsd	 xmm2, QWORD PTR [eax+8]
  00109	f2 0f 5c 48 18	 subsd	 xmm1, QWORD PTR [eax+24]

; 231  :     Point operator/ (double s)       const { return Point(x/s, y/s, z/s);       }
; 232  :     double operator*(const Point& p) const { return (x*p.x + y*p.y + z*p.z);    }
; 233  :     Point operator* (const Matrix& m) const;
; 234  : 
; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }
; 236  :     Point& operator+=(const Point& p)      { x+=p.x; y+=p.y; z+=p.z; return *this; }
; 237  :     Point& operator-=(const Point& p)      { x-=p.x; y-=p.y; z-=p.z; return *this; }
; 238  :     Point& operator*=(double s)            { x*=s;   y*=s;   z*=s;   return *this; }
; 239  :     Point& operator/=(double s)            { x/=s;   y/=s;   z/=s;   return *this; }
; 240  : 
; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  0010e	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  00112	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  00116	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  0011a	f2 0f 58 c2	 addsd	 xmm0, xmm2
  0011e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00122	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 747  :         if (distance > 1e9) {

  00127	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41cdcd6500000000
  0012f	0f 86 8f 02 00
	00		 jbe	 $LN5@RenderLens

; 748  :             if (projector.IsVisible(light->Location(), 1.0f)) {

  00135	f2 0f 10 46 10	 movsd	 xmm0, QWORD PTR [esi+16]
  0013a	8d 44 24 44	 lea	 eax, DWORD PTR $T1[esp+128]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  0013e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 748  :             if (projector.IsVisible(light->Location(), 1.0f)) {

  00142	51		 push	 ecx
  00143	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0014a	8d 4b 58	 lea	 ecx, DWORD PTR [ebx+88]
  0014d	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0014e	f3 0f 11 44 24
	4c		 movss	 DWORD PTR $T1[esp+136], xmm0
  00154	f2 0f 10 46 18	 movsd	 xmm0, QWORD PTR [esi+24]

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00159	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0015d	f3 0f 11 44 24
	50		 movss	 DWORD PTR $T1[esp+140], xmm0
  00163	f2 0f 10 46 20	 movsd	 xmm0, QWORD PTR [esi+32]

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00168	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 176  :     Vec3(float  ix, float  iy, float  iz) : x(ix),         y(iy),         z(iz)         { }

  0016c	f3 0f 11 44 24
	54		 movss	 DWORD PTR $T1[esp+144], xmm0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 748  :             if (projector.IsVisible(light->Location(), 1.0f)) {

  00172	e8 00 00 00 00	 call	 ?IsVisible@Projector@@QBEHABUVec3@@M@Z ; Projector::IsVisible
  00177	85 c0		 test	 eax, eax
  00179	0f 84 45 02 00
	00		 je	 $LN5@RenderLens

; 752  :                 if (light->CastsShadow() && scene->IsLightObscured(camera->Pos(), sun_pos, -1))

  0017f	80 7e 39 00	 cmp	 BYTE PTR [esi+57], 0
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  00183	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  00187	0f 11 44 24 50	 movups	 XMMWORD PTR _sun_pos$2[esp+128], xmm0
  0018c	f2 0f 10 46 20	 movsd	 xmm0, QWORD PTR [esi+32]
  00191	f2 0f 11 44 24
	60		 movsd	 QWORD PTR _sun_pos$2[esp+144], xmm0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 752  :                 if (light->CastsShadow() && scene->IsLightObscured(camera->Pos(), sun_pos, -1))

  00197	74 55		 je	 SHORT $LN14@RenderLens
; File d:\programming\starshatter\trunk\ngenex\camera.h

; 72   :     Point    Pos() const { return pos;    }

  00199	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 752  :                 if (light->CastsShadow() && scene->IsLightObscured(camera->Pos(), sun_pos, -1))

  0019c	8d 54 24 50	 lea	 edx, DWORD PTR _sun_pos$2[esp+128]
  001a0	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  001a3	6a 00		 push	 0
  001a5	83 ec 08	 sub	 esp, 8
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  001a8	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  001ad	f2 0f 11 44 24
	74		 movsd	 QWORD PTR $T4[esp+140], xmm0
  001b3	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  001b8	f2 0f 11 44 24
	7c		 movsd	 QWORD PTR $T4[esp+148], xmm0
  001be	f2 0f 10 40 18	 movsd	 xmm0, QWORD PTR [eax+24]
  001c3	f2 0f 11 84 24
	84 00 00 00	 movsd	 QWORD PTR $T4[esp+156], xmm0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 752  :                 if (light->CastsShadow() && scene->IsLightObscured(camera->Pos(), sun_pos, -1))

  001cc	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  001d4	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001db	52		 push	 edx
  001dc	8d 54 24 78	 lea	 edx, DWORD PTR $T4[esp+144]
  001e0	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001e3	52		 push	 edx
  001e4	ff d0		 call	 eax
  001e6	84 c0		 test	 al, al
  001e8	0f 85 d6 01 00
	00		 jne	 $LN5@RenderLens
$LN14@RenderLens:

; 753  :                 continue;
; 754  : 
; 755  :                 projector.Transform(sun_pos);

  001ee	8b 43 58	 mov	 eax, DWORD PTR [ebx+88]
  001f1	8d 4c 24 50	 lea	 ecx, DWORD PTR _sun_pos$2[esp+128]
  001f5	51		 push	 ecx
  001f6	8d 4b 58	 lea	 ecx, DWORD PTR [ebx+88]
  001f9	ff 50 24	 call	 DWORD PTR [eax+36]

; 756  : 
; 757  :                 if (sun_pos.z < 100)

  001fc	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4059000000000000
  00204	66 0f 2f 44 24
	60		 comisd	 xmm0, QWORD PTR _sun_pos$2[esp+144]
  0020a	0f 87 b4 01 00
	00		 ja	 $LN5@RenderLens

; 758  :                 continue;
; 759  : 
; 760  :                 projector.Project(sun_pos, false);

  00210	8b 43 58	 mov	 eax, DWORD PTR [ebx+88]
  00213	8d 4c 24 50	 lea	 ecx, DWORD PTR _sun_pos$2[esp+128]
  00217	6a 00		 push	 0
  00219	51		 push	 ecx
  0021a	8d 4b 58	 lea	 ecx, DWORD PTR [ebx+88]
  0021d	ff 50 2c	 call	 DWORD PTR [eax+44]
; File d:\programming\starshatter\trunk\ngenex\window.h

; 73   :     int               Width()              const { return rect.w;  }

  00220	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 763  :                 int y = (int) (sun_pos.y);

  00223	f2 0f 2c 74 24
	58		 cvttsd2si esi, QWORD PTR _sun_pos$2[esp+136]

; 764  :                 int w = (int) (window->Width() / 4.0);
; 765  :                 int h = w;
; 766  : 
; 767  :                 // halo:
; 768  :                 window->DrawBitmap(x-w,y-h,x+w,y+h, halo_bitmap, Video::BLEND_ADDITIVE);

  00229	6a 04		 push	 4
  0022b	66 0f 6e 41 0c	 movd	 xmm0, DWORD PTR [ecx+12]
  00230	f2 0f 2c 7c 24
	54		 cvttsd2si edi, QWORD PTR _sun_pos$2[esp+132]
  00236	ff b3 70 01 00
	00		 push	 DWORD PTR [ebx+368]
  0023c	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00240	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00248	f2 0f 2c d0	 cvttsd2si edx, xmm0
  0024c	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  0024f	2b f2		 sub	 esi, edx
  00251	50		 push	 eax
  00252	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  00255	2b fa		 sub	 edi, edx
  00257	50		 push	 eax
  00258	56		 push	 esi
  00259	57		 push	 edi
  0025a	e8 00 00 00 00	 call	 ?DrawBitmap@Window@@QAEXHHHHPAVBitmap@@H@Z ; Window::DrawBitmap

; 769  : 
; 770  :                 // lens elements:
; 771  :                 if (elem_bitmap[0]) {

  0025f	83 bb 74 01 00
	00 00		 cmp	 DWORD PTR [ebx+372], 0
  00266	0f 84 58 01 00
	00		 je	 $LN5@RenderLens
  0026c	f2 0f 10 44 24
	50		 movsd	 xmm0, QWORD PTR _sun_pos$2[esp+128]
  00272	f2 0f 10 4c 24
	58		 movsd	 xmm1, QWORD PTR _sun_pos$2[esp+136]
  00278	f2 0f 10 54 24
	60		 movsd	 xmm2, QWORD PTR _sun_pos$2[esp+144]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  0027e	f3 0f 10 5c 24
	34		 movss	 xmm3, DWORD PTR _center$1$[esp+128]

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00284	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00288	66 0f 5a c9	 cvtpd2ps xmm1, xmm1

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  0028c	f3 0f 5c d8	 subss	 xmm3, xmm0
  00290	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR _center$2$[esp+128]
  00296	f3 0f 5c c1	 subss	 xmm0, xmm1
  0029a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  002a2	66 0f 5a d2	 cvtpd2ps xmm2, xmm2

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }

  002a6	0f 5a c0	 cvtps2pd xmm0, xmm0

; 183  :     Vec3   operator- (const Vec3& p)  const { return Vec3(x-p.x, y-p.y, z-p.z);  }

  002a9	f3 0f 5c ca	 subss	 xmm1, xmm2

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }

  002ad	0f 5a d3	 cvtps2pd xmm2, xmm3
  002b0	0f 5a c9	 cvtps2pd xmm1, xmm1
  002b3	f2 0f 11 44 24
	70		 movsd	 QWORD PTR _vector$3[esp+136], xmm0
  002b9	f2 0f 11 54 24
	68		 movsd	 QWORD PTR _vector$3[esp+128], xmm2

; 231  :     Point operator/ (double s)       const { return Point(x/s, y/s, z/s);       }
; 232  :     double operator*(const Point& p) const { return (x*p.x + y*p.y + z*p.z);    }
; 233  :     Point operator* (const Matrix& m) const;
; 234  : 
; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }
; 236  :     Point& operator+=(const Point& p)      { x+=p.x; y+=p.y; z+=p.z; return *this; }
; 237  :     Point& operator-=(const Point& p)      { x-=p.x; y-=p.y; z-=p.z; return *this; }
; 238  :     Point& operator*=(double s)            { x*=s;   y*=s;   z*=s;   return *this; }
; 239  :     Point& operator/=(double s)            { x/=s;   y/=s;   z/=s;   return *this; }
; 240  : 
; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  002bf	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  002c3	f2 0f 59 d2	 mulsd	 xmm2, xmm2

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }

  002c7	f2 0f 11 4c 24
	78		 movsd	 QWORD PTR _vector$3[esp+144], xmm1

; 231  :     Point operator/ (double s)       const { return Point(x/s, y/s, z/s);       }
; 232  :     double operator*(const Point& p) const { return (x*p.x + y*p.y + z*p.z);    }
; 233  :     Point operator* (const Matrix& m) const;
; 234  : 
; 235  :     Point& operator= (const Point& p)      { x =p.x; y =p.y; z =p.z; return *this; }
; 236  :     Point& operator+=(const Point& p)      { x+=p.x; y+=p.y; z+=p.z; return *this; }
; 237  :     Point& operator-=(const Point& p)      { x-=p.x; y-=p.y; z-=p.z; return *this; }
; 238  :     Point& operator*=(double s)            { x*=s;   y*=s;   z*=s;   return *this; }
; 239  :     Point& operator/=(double s)            { x/=s;   y/=s;   z/=s;   return *this; }
; 240  : 
; 241  :     double   length()                const { return sqrt(x*x+y*y+z*z); }

  002cd	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  002d1	f2 0f 58 c2	 addsd	 xmm0, xmm2
  002d5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002d9	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 773  :                     float vlen = (float) vector.length();

  002de	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0

; 774  :                     vector.Normalize();

  002e2	8d 4c 24 68	 lea	 ecx, DWORD PTR _vector$3[esp+128]
  002e6	f3 0f 11 44 24
	30		 movss	 DWORD PTR _vlen$1$[esp+128], xmm0
  002ec	e8 00 00 00 00	 call	 ?Normalize@Point@@QAENXZ ; Point::Normalize
  002f1	f3 0f 10 5c 24
	30		 movss	 xmm3, DWORD PTR _vlen$1$[esp+128]

; 775  : 
; 776  :                     static int   nelem = 12;
; 777  :                     static int   elem_indx[] = {  0,    1,    1,     1,     0,      0,     0,    0,    2,    0,    0,    2    };
; 778  :                     static float elem_dist[] = { -0.2f, 0.5f, 0.55f, 0.62f, 1.23f, 1.33f, 1.35f, 0.8f, 0.9f, 1.4f, 1.7f, 1.8f };
; 779  :                     static float elem_size[] = {  0.3f, 0.2f, 0.4f,  0.3f,  0.4f,  0.2f,  0.6f,  0.1f, 0.1f, 1.6f, 1.0f, 0.2f };
; 780  : 
; 781  :                     for (int elem = 0; elem < nelem; elem++) {

  002f7	33 d2		 xor	 edx, edx
  002f9	dd d8		 fstp	 ST(0)
  002fb	89 54 24 2c	 mov	 DWORD PTR tv878[esp+128], edx
  002ff	0f 5a db	 cvtps2pd xmm3, xmm3
  00302	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL6@RenderLens:

; 782  :                         Bitmap* img = elem_bitmap[elem_indx[elem]];

  00310	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?elem_indx@?BJ@??RenderLensFlare@CameraView@@UAEXXZ@4PAHA[edx]
  00316	8b 84 83 74 01
	00 00		 mov	 eax, DWORD PTR [ebx+eax*4+372]

; 783  : 
; 784  :                         /***
; 785  :                 if (elem == 10)
; 786  :                     shade *= 0.5;
; 787  :                 ***/
; 788  : 
; 789  :                         if (img == 0)

  0031d	85 c0		 test	 eax, eax
  0031f	75 06		 jne	 SHORT $LN17@RenderLens

; 790  :                         img = elem_bitmap[0];

  00321	8b 83 74 01 00
	00		 mov	 eax, DWORD PTR [ebx+372]
$LN17@RenderLens:
  00327	f3 0f 10 82 00
	00 00 00	 movss	 xmm0, DWORD PTR ?elem_dist@?BJ@??RenderLensFlare@CameraView@@UAEXXZ@4PAMA[edx]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }

  0032f	f2 0f 10 54 24
	70		 movsd	 xmm2, QWORD PTR _vector$3[esp+136]
  00335	f2 0f 10 4c 24
	68		 movsd	 xmm1, QWORD PTR _vector$3[esp+128]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 792  :                         flare_pos = sun_pos + (vector * elem_dist[elem] * vlen);

  0033b	0f 5a c0	 cvtps2pd xmm0, xmm0
; File d:\programming\starshatter\trunk\ngenex\window.h

; 73   :     int               Width()              const { return rect.w;  }

  0033e	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 798  :                         window->DrawBitmap(x-w,y-h,x+w,y+h, img, Video::BLEND_ADDITIVE);

  00341	6a 04		 push	 4
  00343	50		 push	 eax
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 230  :     Point operator* (double s)       const { return Point(x*s, y*s, z*s);       }

  00344	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  00348	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0034c	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  00350	f2 0f 59 cb	 mulsd	 xmm1, xmm3

; 223  : 
; 224  :     operator void*()           const { return (void*) (x || y || z);      }
; 225  :     int   operator==(const Point& p) const { return x==p.x && y==p.y && z==p.z; }
; 226  :     int   operator!=(const Point& p) const { return x!=p.x || y!=p.y || z!=p.z; }
; 227  :     Point operator+ (const Point& p) const { return Point(x+p.x, y+p.y, z+p.z); }

  00354	f2 0f 58 54 24
	60		 addsd	 xmm2, QWORD PTR _sun_pos$2[esp+144]
  0035a	f2 0f 58 4c 24
	58		 addsd	 xmm1, QWORD PTR _sun_pos$2[esp+136]

; 222  :     operator Vec3() const { return Vec3((float) x, (float) y, (float) z); }

  00360	66 0f 5a c2	 cvtpd2ps xmm0, xmm2
  00364	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 794  :                         y = (int) (flare_pos.y);

  00368	f3 0f 2c f0	 cvttss2si esi, xmm0
  0036c	66 0f 6e 41 0c	 movd	 xmm0, DWORD PTR [ecx+12]
  00371	f3 0f 2c f9	 cvttss2si edi, xmm1
  00375	f3 0f 10 8a 00
	00 00 00	 movss	 xmm1, DWORD PTR ?elem_size@?BJ@??RenderLensFlare@CameraView@@UAEXXZ@4PAMA[edx]

; 795  :                         w = (int) (window->Width() / 8.0 * elem_size[elem]);

  0037d	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00381	0f 5a c9	 cvtps2pd xmm1, xmm1
  00384	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  0038c	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00390	f2 0f 2c d1	 cvttsd2si edx, xmm1

; 798  :                         window->DrawBitmap(x-w,y-h,x+w,y+h, img, Video::BLEND_ADDITIVE);

  00394	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00397	2b f2		 sub	 esi, edx
  00399	50		 push	 eax
  0039a	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  0039d	2b fa		 sub	 edi, edx
  0039f	50		 push	 eax
  003a0	56		 push	 esi
  003a1	57		 push	 edi
  003a2	e8 00 00 00 00	 call	 ?DrawBitmap@Window@@QAEXHHHHPAVBitmap@@H@Z ; Window::DrawBitmap
  003a7	8b 54 24 2c	 mov	 edx, DWORD PTR tv878[esp+128]
  003ab	f3 0f 10 5c 24
	30		 movss	 xmm3, DWORD PTR _vlen$1$[esp+128]
  003b1	83 c2 04	 add	 edx, 4
  003b4	89 54 24 2c	 mov	 DWORD PTR tv878[esp+128], edx
  003b8	0f 5a db	 cvtps2pd xmm3, xmm3
  003bb	83 fa 30	 cmp	 edx, 48			; 00000030H
  003be	0f 8c 4c ff ff
	ff		 jl	 $LL6@RenderLens
$LN5@RenderLens:
; File d:\programming\starshatter\trunk\foundationex\list.h

; 108  :    int operator++() { return next() != 0; }

  003c4	8d 4c 24 3c	 lea	 ecx, DWORD PTR _light_iter$[esp+128]
  003c8	e8 00 00 00 00	 call	 ?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::next
  003cd	85 c0		 test	 eax, eax
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 735  :     while (++light_iter) {

  003cf	0f 85 eb fc ff
	ff		 jne	 $LL2@RenderLens
$LN8@RenderLens:

; 799  :                     }
; 800  :                 }
; 801  :             }
; 802  :         }
; 803  :     }
; 804  : }

  003d5	5f		 pop	 edi
  003d6	5e		 pop	 esi
  003d7	5b		 pop	 ebx
  003d8	8b e5		 mov	 esp, ebp
  003da	5d		 pop	 ebp
  003db	c3		 ret	 0
?RenderLensFlare@CameraView@@UAEXXZ ENDP		; CameraView::RenderLensFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\camera.h
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
; File d:\programming\starshatter\trunk\ngenex\geometry.h
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_tnormal$ = -12						; size = 12
_plane$ = 8						; size = 4
?WorldPlaneToView@CameraView@@MAEXAAUPlane@@@Z PROC	; CameraView::WorldPlaneToView
; _this$ = ecx

; 812  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 10	 sub	 esp, 16			; 00000010H

; 813  :     // Determine the distance from the viewpoint
; 814  :     Vec3 tnormal = plane.normal;
; 815  : 
; 816  :     if (!infinite)

  00009	83 b9 50 01 00
	00 00		 cmp	 DWORD PTR [ecx+336], 0
  00010	8b 55 08	 mov	 edx, DWORD PTR _plane$[ebp]
  00013	f3 0f 7e 42 04	 movq	 xmm0, QWORD PTR [edx+4]
  00018	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0001b	66 0f d6 44 24
	04		 movq	 QWORD PTR _tnormal$[esp+16], xmm0
  00021	f3 0f 10 7c 24
	08		 movss	 xmm7, DWORD PTR _tnormal$[esp+20]
  00027	f3 0f 10 54 24
	04		 movss	 xmm2, DWORD PTR _tnormal$[esp+16]
  0002d	89 44 24 0c	 mov	 DWORD PTR _tnormal$[esp+24], eax
  00031	f3 0f 10 74 24
	0c		 movss	 xmm6, DWORD PTR _tnormal$[esp+24]
  00037	75 45		 jne	 SHORT $LN2@WorldPlane
; File d:\programming\starshatter\trunk\ngenex\camera.h

; 72   :     Point    Pos() const { return pos;    }

  00039	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }

  0003c	0f 5a ea	 cvtps2pd xmm5, xmm2

; 188  :     Vec3   operator* (const Matrix&)  const;
; 189  : 
; 190  :     Vec3&  operator= (const Vec3& p)  { x =p.x; y =p.y; z =p.z; return *this; }
; 191  :     Vec3&  operator+=(const Vec3& p)  { x+=p.x; y+=p.y; z+=p.z; return *this; }
; 192  :     Vec3&  operator-=(const Vec3& p)  { x-=p.x; y-=p.y; z-=p.z; return *this; }
; 193  :     Vec3&  operator*=(float  s)       { x*=s;   y*=s;   z*=s;   return *this; }
; 194  :     Vec3&  operator/=(float  s)       { x/=s;   y/=s;   z/=s;   return *this; }
; 195  : 
; 196  :     void     SwapYZ() { float t = y; y = z; z = t; }
; 197  :     float    length() const           { return (float) sqrt(x*x+y*y+z*z); }
; 198  :     float    Normalize();
; 199  : 
; 200  :     float    dot(const Vec3& p)   const { return (x*p.x + y*p.y + z*p.z);    }
; 201  :     Vec3     cross(const Vec3& v) const { return Vec3((y*v.z) - (z*v.y),
; 202  :         (z*v.x) - (x*v.z),
; 203  :         (x*v.y) - (y*v.x));    }
; 204  : 
; 205  :     float x, y, z;
; 206  : };
; 207  : 
; 208  : double ClosestApproachTime(const Vec3& loc1, const Vec3& vel1,
; 209  : const Vec3& loc2, const Vec3& vel2);
; 210  : 
; 211  : // +--------------------------------------------------------------------+
; 212  : 
; 213  : struct Point
; 214  : {
; 215  :     static const char* TYPENAME() { return "Point"; }
; 216  : 
; 217  :     Point()                                : x(0),   y(0),   z(0)    { }
; 218  :     Point(double ix, double iy, double iz) : x(ix),  y(iy),  z(iz)   { }
; 219  :     Point(const Point& p)                  : x(p.x), y(p.y), z(p.z)  { }

  0003f	f2 0f 10 48 08	 movsd	 xmm1, QWORD PTR [eax+8]
  00044	f2 0f 10 50 10	 movsd	 xmm2, QWORD PTR [eax+16]
  00049	f2 0f 10 40 18	 movsd	 xmm0, QWORD PTR [eax+24]

; 220  :     Point(const Vec3& v)                   : x(v.x), y(v.y), z(v.z)  { }

  0004e	0f 5a df	 cvtps2pd xmm3, xmm7
  00051	0f 5a e6	 cvtps2pd xmm4, xmm6

; 232  :     double operator*(const Point& p) const { return (x*p.x + y*p.y + z*p.z);    }

  00054	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  00058	f2 0f 59 cd	 mulsd	 xmm1, xmm5
  0005c	f2 0f 59 c4	 mulsd	 xmm0, xmm4
  00060	f2 0f 58 d1	 addsd	 xmm2, xmm1
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 817  :     plane.distance -= (float) (camera->Pos() * tnormal);

  00064	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 232  :     double operator*(const Point& p) const { return (x*p.x + y*p.y + z*p.z);    }

  00068	f2 0f 58 d0	 addsd	 xmm2, xmm0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 817  :     plane.distance -= (float) (camera->Pos() * tnormal);

  0006c	66 0f 5a c2	 cvtpd2ps xmm0, xmm2
  00070	f3 0f 10 54 24
	04		 movss	 xmm2, DWORD PTR _tnormal$[esp+16]
  00076	f3 0f 5c c8	 subss	 xmm1, xmm0
  0007a	f3 0f 11 0a	 movss	 DWORD PTR [edx], xmm1
$LN2@WorldPlane:
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 187  :     float  operator* (const Vec3& p)  const { return (x*p.x + y*p.y + z*p.z);    }

  0007e	f3 0f 10 49 34	 movss	 xmm1, DWORD PTR [ecx+52]
  00083	f3 0f 10 41 30	 movss	 xmm0, DWORD PTR [ecx+48]
  00088	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0008c	f3 0f 59 cf	 mulss	 xmm1, xmm7
  00090	f3 0f 58 c8	 addss	 xmm1, xmm0
  00094	f3 0f 10 41 38	 movss	 xmm0, DWORD PTR [ecx+56]
  00099	f3 0f 59 c6	 mulss	 xmm0, xmm6
  0009d	f3 0f 58 c8	 addss	 xmm1, xmm0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 820  :     plane.normal.x = tnormal * cvrt;

  000a1	f3 0f 11 4a 04	 movss	 DWORD PTR [edx+4], xmm1
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 187  :     float  operator* (const Vec3& p)  const { return (x*p.x + y*p.y + z*p.z);    }

  000a6	f3 0f 10 49 40	 movss	 xmm1, DWORD PTR [ecx+64]
  000ab	f3 0f 10 41 3c	 movss	 xmm0, DWORD PTR [ecx+60]
  000b0	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000b4	f3 0f 59 cf	 mulss	 xmm1, xmm7
  000b8	f3 0f 58 c8	 addss	 xmm1, xmm0
  000bc	f3 0f 10 41 44	 movss	 xmm0, DWORD PTR [ecx+68]
  000c1	f3 0f 59 c6	 mulss	 xmm0, xmm6
  000c5	f3 0f 58 c8	 addss	 xmm1, xmm0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 821  :     plane.normal.y = tnormal * cvup;

  000c9	f3 0f 11 4a 08	 movss	 DWORD PTR [edx+8], xmm1
; File d:\programming\starshatter\trunk\ngenex\geometry.h

; 187  :     float  operator* (const Vec3& p)  const { return (x*p.x + y*p.y + z*p.z);    }

  000ce	f3 0f 10 41 48	 movss	 xmm0, DWORD PTR [ecx+72]
  000d3	f3 0f 10 49 4c	 movss	 xmm1, DWORD PTR [ecx+76]
  000d8	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000dc	f3 0f 59 cf	 mulss	 xmm1, xmm7
  000e0	f3 0f 58 c8	 addss	 xmm1, xmm0
  000e4	f3 0f 10 41 50	 movss	 xmm0, DWORD PTR [ecx+80]
  000e9	f3 0f 59 c6	 mulss	 xmm0, xmm6
  000ed	f3 0f 58 c8	 addss	 xmm1, xmm0
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp

; 822  :     plane.normal.z = tnormal * cvpn;

  000f1	f3 0f 11 4a 0c	 movss	 DWORD PTR [edx+12], xmm1

; 823  : }

  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c2 04 00	 ret	 4
?WorldPlaneToView@CameraView@@MAEXAAUPlane@@@Z ENDP	; CameraView::WorldPlaneToView
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\ngenex\cameraview.cpp
_TEXT	SEGMENT
_scale$ = 8						; size = 4
?SetDepthScale@CameraView@@UAEXM@Z PROC			; CameraView::SetDepthScale
; _this$ = ecx

; 827  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 828  :     projector.SetDepthScale(scale);

  00003	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00006	83 c1 58	 add	 ecx, 88			; 00000058H
  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0000e	51		 push	 ecx
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	ff 50 0c	 call	 DWORD PTR [eax+12]

; 829  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?SetDepthScale@CameraView@@UAEXM@Z ENDP			; CameraView::SetDepthScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??E?$ListIter@VShadow@@@@QAEHXZ
_TEXT	SEGMENT
??E?$ListIter@VShadow@@@@QAEHXZ PROC			; ListIter<Shadow>::operator++, COMDAT
; _this$ = ecx

; 108  :    int operator++() { return next() != 0; }

  00000	e8 00 00 00 00	 call	 ?next@?$ListIter@VShadow@@@@QAEPAVShadow@@XZ ; ListIter<Shadow>::next
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax
  0000b	c3		 ret	 0
??E?$ListIter@VShadow@@@@QAEHXZ ENDP			; ListIter<Shadow>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$ListIter@VShadow@@@@QAE@AAV?$List@VShadow@@@@@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??0?$ListIter@VShadow@@@@QAE@AAV?$List@VShadow@@@@@Z PROC ; ListIter<Shadow>::ListIter<Shadow>, COMDAT
; _this$ = ecx

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _l$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0?$ListIter@VShadow@@@@QAE@AAV?$List@VShadow@@@@@Z ENDP ; ListIter<Shadow>::ListIter<Shadow>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??E?$ListIter@VLight@@@@QAEHXZ
_TEXT	SEGMENT
??E?$ListIter@VLight@@@@QAEHXZ PROC			; ListIter<Light>::operator++, COMDAT
; _this$ = ecx

; 108  :    int operator++() { return next() != 0; }

  00000	e8 00 00 00 00	 call	 ?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ ; ListIter<Light>::next
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax
  0000b	c3		 ret	 0
??E?$ListIter@VLight@@@@QAEHXZ ENDP			; ListIter<Light>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$ListIter@VLight@@@@QAE@AAV?$List@VLight@@@@@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??0?$ListIter@VLight@@@@QAE@AAV?$List@VLight@@@@@Z PROC	; ListIter<Light>::ListIter<Light>, COMDAT
; _this$ = ecx

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _l$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0?$ListIter@VLight@@@@QAE@AAV?$List@VLight@@@@@Z ENDP	; ListIter<Light>::ListIter<Light>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ?reset@?$ListIter@VGraphic@@@@QAEXXZ
_TEXT	SEGMENT
?reset@?$ListIter@VGraphic@@@@QAEXXZ PROC		; ListIter<Graphic>::reset, COMDAT
; _this$ = ecx

; 113  :    void     reset() { step = -1;          }

  00000	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  00007	c3		 ret	 0
?reset@?$ListIter@VGraphic@@@@QAEXXZ ENDP		; ListIter<Graphic>::reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??E?$ListIter@VGraphic@@@@QAEHXZ
_TEXT	SEGMENT
??E?$ListIter@VGraphic@@@@QAEHXZ PROC			; ListIter<Graphic>::operator++, COMDAT
; _this$ = ecx

; 108  :    int operator++() { return next() != 0; }

  00000	e8 00 00 00 00	 call	 ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ; ListIter<Graphic>::next
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax
  0000b	c3		 ret	 0
??E?$ListIter@VGraphic@@@@QAEHXZ ENDP			; ListIter<Graphic>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$ListIter@VGraphic@@@@QAE@AAV?$List@VGraphic@@@@@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??0?$ListIter@VGraphic@@@@QAE@AAV?$List@VGraphic@@@@@Z PROC ; ListIter<Graphic>::ListIter<Graphic>, COMDAT
; _this$ = ecx

; 106  :    ListIter(List<T>& l)             : list(&l),     step(-1)      { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _l$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0?$ListIter@VGraphic@@@@QAE@AAV?$List@VGraphic@@@@@Z ENDP ; ListIter<Graphic>::ListIter<Graphic>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ?isEmpty@?$List@VGraphic@@@@QBE_NXZ
_TEXT	SEGMENT
?isEmpty@?$List@VGraphic@@@@QBE_NXZ PROC		; List<Graphic>::isEmpty, COMDAT
; _this$ = ecx

; 75   :    bool     isEmpty() const      { return !items; }

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 94 c0	 sete	 al
  00007	c3		 ret	 0
?isEmpty@?$List@VGraphic@@@@QBE_NXZ ENDP		; List<Graphic>::isEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ?size@?$List@VGraphic@@@@QBEHXZ
_TEXT	SEGMENT
?size@?$List@VGraphic@@@@QBEHXZ PROC			; List<Graphic>::size, COMDAT
; _this$ = ecx

; 74   :    int      size()    const      { return items;  }

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c3		 ret	 0
?size@?$List@VGraphic@@@@QBEHXZ ENDP			; List<Graphic>::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ?last@?$List@VGraphic@@@@QBEPAVGraphic@@XZ
_TEXT	SEGMENT
?last@?$List@VGraphic@@@@QBEPAVGraphic@@XZ PROC		; List<Graphic>::last, COMDAT
; _this$ = ecx

; 67   :    T*       last()    const      { return operator[](items-1); }

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	48		 dec	 eax
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??A?$List@VGraphic@@@@QBEPAVGraphic@@H@Z ; List<Graphic>::operator[]
  00009	c3		 ret	 0
?last@?$List@VGraphic@@@@QBEPAVGraphic@@XZ ENDP		; List<Graphic>::last
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??1?$List@VGraphic@@@@QAE@XZ
_TEXT	SEGMENT
??1?$List@VGraphic@@@@QAE@XZ PROC			; List<Graphic>::~List<Graphic>, COMDAT
; _this$ = ecx

; 54   :    ~List()  { delete [] array; }

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$List@VGraphic@@@@QAE@XZ ENDP			; List<Graphic>::~List<Graphic>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.h
;	COMDAT ??0?$List@VGraphic@@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@VGraphic@@@@QAE@XZ PROC			; List<Graphic>::List<Graphic>, COMDAT
; _this$ = ecx

; 52   :    List()   : items(0), extent(0), array(0) { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$List@VGraphic@@@@QAE@XZ ENDP			; List<Graphic>::List<Graphic>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ??A?$List@VGraphic@@@@QBEPAVGraphic@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
??A?$List@VGraphic@@@@QBEPAVGraphic@@H@Z PROC		; List<Graphic>::operator[], COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 119  :    if (check(index))

  00004	8d 45 08	 lea	 eax, DWORD PTR _index$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?check@?$List@VGraphic@@@@ABE_NAAH@Z ; List<Graphic>::check
  0000f	84 c0		 test	 al, al
  00011	74 0e		 je	 SHORT $LN2@operator

; 120  :       return array[index];

  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00019	5e		 pop	 esi
  0001a	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 122  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@operator:

; 121  :    return 0;

  00021	33 c0		 xor	 eax, eax
  00023	5e		 pop	 esi

; 122  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??A?$List@VGraphic@@@@QBEPAVGraphic@@H@Z ENDP		; List<Graphic>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?append@?$List@VGraphic@@@@QAEXPBVGraphic@@@Z
_TEXT	SEGMENT
_item$ = 8						; size = 4
?append@?$List@VGraphic@@@@QAEXPBVGraphic@@@Z PROC	; List<Graphic>::append, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 174  :    if (item) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR _item$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 18		 je	 SHORT $LN2@append

; 175  :       if (items+1 > extent) resize(items+1);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	40		 inc	 eax
  00011	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00014	7e 06		 jle	 SHORT $LN3@append
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?resize@?$List@VGraphic@@@@AAEXH@Z ; List<Graphic>::resize
$LN3@append:

; 176  :       array[items++] = (T*)item;

  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00021	89 3c 88	 mov	 DWORD PTR [eax+ecx*4], edi
  00024	ff 06		 inc	 DWORD PTR [esi]
$LN2@append:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 177  :    }
; 178  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?append@?$List@VGraphic@@@@QAEXPBVGraphic@@@Z ENDP	; List<Graphic>::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?clear@?$List@VGraphic@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$List@VGraphic@@@@QAEXXZ PROC			; List<Graphic>::clear, COMDAT
; _this$ = ecx

; 61   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 62   :    delete [] array;

  00003	ff 76 08	 push	 DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0000b	83 c4 04	 add	 esp, 4

; 63   :    items       = 0;

  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 64   :    extent  = 0;

  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 65   :    array       = 0;

  0001b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00022	5e		 pop	 esi

; 66   : }

  00023	c3		 ret	 0
?clear@?$List@VGraphic@@@@QAEXXZ ENDP			; List<Graphic>::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?sort@?$List@VGraphic@@@@QAEXXZ
_TEXT	SEGMENT
?sort@?$List@VGraphic@@@@QAEXXZ PROC			; List<Graphic>::sort, COMDAT
; _this$ = ecx

; 381  :    if (items < 2)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 f8 02	 cmp	 eax, 2
  00005	7c 0c		 jl	 SHORT $LN1@sort

; 382  :       return;
; 383  : 
; 384  :    qsort(array, 0, items-1);

  00007	48		 dec	 eax
  00008	50		 push	 eax
  00009	6a 00		 push	 0
  0000b	ff 71 08	 push	 DWORD PTR [ecx+8]
  0000e	e8 00 00 00 00	 call	 ?qsort@?$List@VGraphic@@@@AAEXPAPAVGraphic@@HH@Z ; List<Graphic>::qsort
$LN1@sort:

; 385  : }

  00013	c3		 ret	 0
?sort@?$List@VGraphic@@@@QAEXXZ ENDP			; List<Graphic>::sort
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ
_TEXT	SEGMENT
?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ PROC	; ListIter<Graphic>::next, COMDAT
; _this$ = ecx

; 427  : {

  00000	8b d1		 mov	 edx, ecx
  00002	56		 push	 esi

; 428  :    if (list && step >= -1 && step < list->items-1)

  00003	8b 32		 mov	 esi, DWORD PTR [edx]
  00005	85 f6		 test	 esi, esi
  00007	74 1b		 je	 SHORT $LN2@next
  00009	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0000c	83 f9 ff	 cmp	 ecx, -1
  0000f	7c 13		 jl	 SHORT $LN2@next
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	48		 dec	 eax
  00014	3b c8		 cmp	 ecx, eax
  00016	7d 0c		 jge	 SHORT $LN2@next

; 429  :       return list->array[++step];

  00018	41		 inc	 ecx
  00019	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001f	5e		 pop	 esi
  00020	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 432  : }

  00023	c3		 ret	 0
$LN2@next:

; 430  : 
; 431  :    return 0;

  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 432  : }

  00027	c3		 ret	 0
?next@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ENDP	; ListIter<Graphic>::next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ
_TEXT	SEGMENT
?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ PROC	; ListIter<Graphic>::value, COMDAT
; _this$ = ecx

; 406  :    if (list && step >= 0 && step < list->items)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 12		 je	 SHORT $LN2@value
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	78 0b		 js	 SHORT $LN2@value
  0000d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000f	7d 07		 jge	 SHORT $LN2@value

; 407  :       return list->array[step];

  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 410  : }

  00017	c3		 ret	 0
$LN2@value:

; 408  : 
; 409  :    return 0;

  00018	33 c0		 xor	 eax, eax

; 410  : }

  0001a	c3		 ret	 0
?value@?$ListIter@VGraphic@@@@QAEPAVGraphic@@XZ ENDP	; ListIter<Graphic>::value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?attach@?$ListIter@VGraphic@@@@QAEXAAV?$List@VGraphic@@@@@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
?attach@?$ListIter@VGraphic@@@@QAEXAAV?$List@VGraphic@@@@@Z PROC ; ListIter<Graphic>::attach, COMDAT
; _this$ = ecx

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 448  :    list = &l;

  00003	8b 45 08	 mov	 eax, DWORD PTR _l$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 449  :    step = -1;

  00008	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 450  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?attach@?$ListIter@VGraphic@@@@QAEXAAV?$List@VGraphic@@@@@Z ENDP ; ListIter<Graphic>::attach
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ
_TEXT	SEGMENT
?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ PROC		; ListIter<Light>::next, COMDAT
; _this$ = ecx

; 427  : {

  00000	8b d1		 mov	 edx, ecx
  00002	56		 push	 esi

; 428  :    if (list && step >= -1 && step < list->items-1)

  00003	8b 32		 mov	 esi, DWORD PTR [edx]
  00005	85 f6		 test	 esi, esi
  00007	74 1b		 je	 SHORT $LN2@next
  00009	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0000c	83 f9 ff	 cmp	 ecx, -1
  0000f	7c 13		 jl	 SHORT $LN2@next
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	48		 dec	 eax
  00014	3b c8		 cmp	 ecx, eax
  00016	7d 0c		 jge	 SHORT $LN2@next

; 429  :       return list->array[++step];

  00018	41		 inc	 ecx
  00019	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001f	5e		 pop	 esi
  00020	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 432  : }

  00023	c3		 ret	 0
$LN2@next:

; 430  : 
; 431  :    return 0;

  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 432  : }

  00027	c3		 ret	 0
?next@?$ListIter@VLight@@@@QAEPAVLight@@XZ ENDP		; ListIter<Light>::next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?value@?$ListIter@VLight@@@@QAEPAVLight@@XZ
_TEXT	SEGMENT
?value@?$ListIter@VLight@@@@QAEPAVLight@@XZ PROC	; ListIter<Light>::value, COMDAT
; _this$ = ecx

; 406  :    if (list && step >= 0 && step < list->items)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 12		 je	 SHORT $LN2@value
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	78 0b		 js	 SHORT $LN2@value
  0000d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000f	7d 07		 jge	 SHORT $LN2@value

; 407  :       return list->array[step];

  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 410  : }

  00017	c3		 ret	 0
$LN2@value:

; 408  : 
; 409  :    return 0;

  00018	33 c0		 xor	 eax, eax

; 410  : }

  0001a	c3		 ret	 0
?value@?$ListIter@VLight@@@@QAEPAVLight@@XZ ENDP	; ListIter<Light>::value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?next@?$ListIter@VShadow@@@@QAEPAVShadow@@XZ
_TEXT	SEGMENT
?next@?$ListIter@VShadow@@@@QAEPAVShadow@@XZ PROC	; ListIter<Shadow>::next, COMDAT
; _this$ = ecx

; 427  : {

  00000	8b d1		 mov	 edx, ecx
  00002	56		 push	 esi

; 428  :    if (list && step >= -1 && step < list->items-1)

  00003	8b 32		 mov	 esi, DWORD PTR [edx]
  00005	85 f6		 test	 esi, esi
  00007	74 1b		 je	 SHORT $LN2@next
  00009	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0000c	83 f9 ff	 cmp	 ecx, -1
  0000f	7c 13		 jl	 SHORT $LN2@next
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	48		 dec	 eax
  00014	3b c8		 cmp	 ecx, eax
  00016	7d 0c		 jge	 SHORT $LN2@next

; 429  :       return list->array[++step];

  00018	41		 inc	 ecx
  00019	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001f	5e		 pop	 esi
  00020	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 432  : }

  00023	c3		 ret	 0
$LN2@next:

; 430  : 
; 431  :    return 0;

  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 432  : }

  00027	c3		 ret	 0
?next@?$ListIter@VShadow@@@@QAEPAVShadow@@XZ ENDP	; ListIter<Shadow>::next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?value@?$ListIter@VShadow@@@@QAEPAVShadow@@XZ
_TEXT	SEGMENT
?value@?$ListIter@VShadow@@@@QAEPAVShadow@@XZ PROC	; ListIter<Shadow>::value, COMDAT
; _this$ = ecx

; 406  :    if (list && step >= 0 && step < list->items)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 12		 je	 SHORT $LN2@value
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	78 0b		 js	 SHORT $LN2@value
  0000d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000f	7d 07		 jge	 SHORT $LN2@value

; 407  :       return list->array[step];

  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 410  : }

  00017	c3		 ret	 0
$LN2@value:

; 408  : 
; 409  :    return 0;

  00018	33 c0		 xor	 eax, eax

; 410  : }

  0001a	c3		 ret	 0
?value@?$ListIter@VShadow@@@@QAEPAVShadow@@XZ ENDP	; ListIter<Shadow>::value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?qsort@?$List@VGraphic@@@@AAEXPAPAVGraphic@@HH@Z
_TEXT	SEGMENT
tv267 = -16						; size = 4
tv268 = -12						; size = 4
tv270 = -8						; size = 4
_this$1$ = -4						; size = 4
_a$ = 8							; size = 4
_lo0$ = 12						; size = 4
_hi0$ = 16						; size = 4
?qsort@?$List@VGraphic@@@@AAEXPAPAVGraphic@@HH@Z PROC	; List<Graphic>::qsort, COMDAT
; _this$ = ecx

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 339  :    int lo = lo0;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _lo0$[ebp]
  00009	56		 push	 esi
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	8b f0		 mov	 esi, eax

; 340  :    int hi = hi0;

  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _hi0$[ebp]
  00012	57		 push	 edi
  00013	8b f9		 mov	 edi, ecx

; 341  : 
; 342  :    // zero or one element list, nothing to do:
; 343  :    if (lo >= hi) {

  00015	3b c1		 cmp	 eax, ecx
  00017	0f 8d 14 01 00
	00		 jge	 $LN11@qsort
  0001d	8d 51 ff	 lea	 edx, DWORD PTR [ecx-1]
  00020	53		 push	 ebx
$LL14@qsort:

; 344  :       return;
; 345  :    }
; 346  : 
; 347  :    // two element list, swap if needed:
; 348  :    else if (lo == hi-1) {

  00021	3b c2		 cmp	 eax, edx
  00023	0f 84 e6 00 00
	00		 je	 $LN21@qsort

; 351  :       }
; 352  :       return;
; 353  :    }
; 354  : 
; 355  :    // pick a pivot, and move it out of the way:
; 356  :    int mid   = (lo+hi)/2;

  00029	03 c1		 add	 eax, ecx
  0002b	99		 cdq
  0002c	2b c2		 sub	 eax, edx

; 357  :    T*  pivot = a[mid];

  0002e	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00031	d1 f8		 sar	 eax, 1
  00033	8b 1c 82	 mov	 ebx, DWORD PTR [edx+eax*4]
  00036	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]

; 358  :    a[mid]    = a[hi];

  00039	8b 45 10	 mov	 eax, DWORD PTR _hi0$[ebp]
  0003c	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  0003f	89 45 f0	 mov	 DWORD PTR tv267[ebp], eax
  00042	8b 00		 mov	 eax, DWORD PTR [eax]
  00044	89 01		 mov	 DWORD PTR [ecx], eax

; 359  :    a[hi]     = pivot;

  00046	8b 4d f0	 mov	 ecx, DWORD PTR tv267[ebp]

; 360  : 
; 361  :    while (lo < hi) {

  00049	8b 45 0c	 mov	 eax, DWORD PTR _lo0$[ebp]
  0004c	89 19		 mov	 DWORD PTR [ecx], ebx
  0004e	3b 45 10	 cmp	 eax, DWORD PTR _hi0$[ebp]
  00051	0f 8d 81 00 00
	00		 jge	 $LN33@qsort
  00057	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  0005a	89 4d f8	 mov	 DWORD PTR tv270[ebp], ecx
  0005d	89 45 f4	 mov	 DWORD PTR tv268[ebp], eax
$LL2@qsort:

; 362  :       while ((*a[lo] <= *pivot) && lo < hi) lo++;

  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	53		 push	 ebx
  00063	e8 00 00 00 00	 call	 ??NGraphic@@QBEHABV0@@Z	; Graphic::operator<=
  00068	85 c0		 test	 eax, eax
  0006a	74 1f		 je	 SHORT $LN34@qsort
  0006c	0f 1f 40 00	 npad	 4
$LL4@qsort:
  00070	3b f7		 cmp	 esi, edi
  00072	7d 17		 jge	 SHORT $LN34@qsort
  00074	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00077	46		 inc	 esi
  00078	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  0007b	8d 04 b0	 lea	 eax, DWORD PTR [eax+esi*4]
  0007e	53		 push	 ebx
  0007f	89 45 f4	 mov	 DWORD PTR tv268[ebp], eax
  00082	e8 00 00 00 00	 call	 ??NGraphic@@QBEHABV0@@Z	; Graphic::operator<=
  00087	85 c0		 test	 eax, eax
  00089	75 e5		 jne	 SHORT $LL4@qsort
$LN34@qsort:

; 363  :       while ((*pivot <= *a[hi]) && lo < hi) hi--;

  0008b	8b 45 f8	 mov	 eax, DWORD PTR tv270[ebp]
  0008e	8b cb		 mov	 ecx, ebx
  00090	ff 30		 push	 DWORD PTR [eax]
  00092	e8 00 00 00 00	 call	 ??NGraphic@@QBEHABV0@@Z	; Graphic::operator<=
  00097	85 c0		 test	 eax, eax
  00099	74 21		 je	 SHORT $LN7@qsort
  0009b	0f 1f 44 00 00	 npad	 5
$LL6@qsort:
  000a0	3b f7		 cmp	 esi, edi
  000a2	7d 2e		 jge	 SHORT $LN35@qsort
  000a4	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000a7	4f		 dec	 edi
  000a8	ff 34 b8	 push	 DWORD PTR [eax+edi*4]
  000ab	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  000ae	8b cb		 mov	 ecx, ebx
  000b0	89 45 f8	 mov	 DWORD PTR tv270[ebp], eax
  000b3	e8 00 00 00 00	 call	 ??NGraphic@@QBEHABV0@@Z	; Graphic::operator<=
  000b8	85 c0		 test	 eax, eax
  000ba	75 e4		 jne	 SHORT $LL6@qsort
$LN7@qsort:

; 364  : 
; 365  :       if (lo < hi) {

  000bc	3b f7		 cmp	 esi, edi
  000be	7d 12		 jge	 SHORT $LN35@qsort

; 366  :          swap(a, lo, hi);

  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000c3	57		 push	 edi
  000c4	56		 push	 esi
  000c5	ff 75 08	 push	 DWORD PTR _a$[ebp]
  000c8	e8 00 00 00 00	 call	 ?swap@?$List@VGraphic@@@@AAEXPAPAVGraphic@@HH@Z ; List<Graphic>::swap
  000cd	8b 45 f4	 mov	 eax, DWORD PTR tv268[ebp]
  000d0	eb 8e		 jmp	 SHORT $LL2@qsort
$LN35@qsort:
  000d2	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000d5	8b 4d f0	 mov	 ecx, DWORD PTR tv267[ebp]
$LN33@qsort:

; 367  :       }
; 368  :    }
; 369  : 
; 370  :    // Put the pivot into its final location:
; 371  :    a[hi0] = a[hi];

  000d8	8b 04 ba	 mov	 eax, DWORD PTR [edx+edi*4]

; 372  :    a[hi] = pivot;
; 373  : 
; 374  :     qsort(a, lo0, lo-1);

  000db	4e		 dec	 esi
  000dc	56		 push	 esi
  000dd	ff 75 0c	 push	 DWORD PTR _lo0$[ebp]
  000e0	89 01		 mov	 DWORD PTR [ecx], eax
  000e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000e5	52		 push	 edx
  000e6	89 1c ba	 mov	 DWORD PTR [edx+edi*4], ebx
  000e9	e8 00 00 00 00	 call	 ?qsort@?$List@VGraphic@@@@AAEXPAPAVGraphic@@HH@Z ; List<Graphic>::qsort
  000ee	8b 4d 10	 mov	 ecx, DWORD PTR _hi0$[ebp]

; 375  :     qsort(a, hi+1, hi0);

  000f1	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  000f4	89 45 0c	 mov	 DWORD PTR _lo0$[ebp], eax
  000f7	8b f0		 mov	 esi, eax
  000f9	8b f9		 mov	 edi, ecx
  000fb	8d 51 ff	 lea	 edx, DWORD PTR [ecx-1]
  000fe	3b c1		 cmp	 eax, ecx
  00100	0f 8c 1b ff ff
	ff		 jl	 $LL14@qsort
  00106	5b		 pop	 ebx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi

; 376  : }

  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c2 0c 00	 ret	 12			; 0000000cH
$LN21@qsort:

; 349  :       if (*a[hi] < *a[lo]) {

  0010f	8b 5d 08	 mov	 ebx, DWORD PTR _a$[ebp]
  00112	ff 34 83	 push	 DWORD PTR [ebx+eax*4]
  00115	8b 0c 8b	 mov	 ecx, DWORD PTR [ebx+ecx*4]
  00118	e8 00 00 00 00	 call	 ??MGraphic@@QBEHABV0@@Z	; Graphic::operator<
  0011d	85 c0		 test	 eax, eax
  0011f	74 0f		 je	 SHORT $LN36@qsort

; 350  :          swap(a, lo, hi);

  00121	ff 75 10	 push	 DWORD PTR _hi0$[ebp]
  00124	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00127	ff 75 0c	 push	 DWORD PTR _lo0$[ebp]
  0012a	53		 push	 ebx
  0012b	e8 00 00 00 00	 call	 ?swap@?$List@VGraphic@@@@AAEXPAPAVGraphic@@HH@Z ; List<Graphic>::swap
$LN36@qsort:
  00130	5b		 pop	 ebx
$LN11@qsort:
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi

; 376  : }

  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c2 0c 00	 ret	 12			; 0000000cH
?qsort@?$List@VGraphic@@@@AAEXPAPAVGraphic@@HH@Z ENDP	; List<Graphic>::qsort
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?resize@?$List@VGraphic@@@@AAEXH@Z
_TEXT	SEGMENT
_newsize$ = 8						; size = 4
?resize@?$List@VGraphic@@@@AAEXH@Z PROC			; List<Graphic>::resize, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  :    if (newsize > extent) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _newsize$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0000c	7e 61		 jle	 SHORT $LN8@resize

; 150  :       extent = 16 * (newsize/16 + 1);

  0000e	99		 cdq

; 151  : 
; 152  : #ifdef MEM_DEBUG
; 153  :       T** v = new(__FILE__,__LINE__) PTR[extent];
; 154  : #else
; 155  :       T** v = new PTR[extent];

  0000f	33 c9		 xor	 ecx, ecx
  00011	83 e2 0f	 and	 edx, 15			; 0000000fH
  00014	03 c2		 add	 eax, edx
  00016	ba 04 00 00 00	 mov	 edx, 4
  0001b	c1 f8 04	 sar	 eax, 4
  0001e	40		 inc	 eax
  0001f	c1 e0 04	 shl	 eax, 4
  00022	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00025	f7 e2		 mul	 edx
  00027	57		 push	 edi
  00028	0f 90 c1	 seto	 cl
  0002b	f7 d9		 neg	 ecx
  0002d	0b c8		 or	 ecx, eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 156  : #endif
; 157  :       int i;
; 158  :       for (i = 0; i < items; i++)

  00035	33 c9		 xor	 ecx, ecx
  00037	83 c4 04	 add	 esp, 4
  0003a	8b f8		 mov	 edi, eax
  0003c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0003e	7e 0e		 jle	 SHORT $LN3@resize
$LL4@resize:

; 159  :          v[i] = array[i];

  00040	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00043	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00046	89 04 8f	 mov	 DWORD PTR [edi+ecx*4], eax
  00049	41		 inc	 ecx
  0004a	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  0004c	7c f2		 jl	 SHORT $LL4@resize
$LN3@resize:

; 160  : 
; 161  :       for (; i < extent; i++)

  0004e	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00051	7d 0d		 jge	 SHORT $LN6@resize
$LL7@resize:

; 162  :          v[i] = 0;

  00053	c7 04 8f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx*4], 0
  0005a	41		 inc	 ecx
  0005b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0005e	7c f3		 jl	 SHORT $LL7@resize
$LN6@resize:

; 163  : 
; 164  :       delete [] array;   

  00060	ff 76 08	 push	 DWORD PTR [esi+8]
  00063	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00068	83 c4 04	 add	 esp, 4

; 165  :       array = v;

  0006b	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0006e	5f		 pop	 edi
$LN8@resize:
  0006f	5e		 pop	 esi

; 166  :    }
; 167  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?resize@?$List@VGraphic@@@@AAEXH@Z ENDP			; List<Graphic>::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?check@?$List@VGraphic@@@@ABE_NAAH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?check@?$List@VGraphic@@@@ABE_NAAH@Z PROC		; List<Graphic>::check, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 89   :    if (index < 0) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _index$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	85 c9		 test	 ecx, ecx
  0000e	79 1c		 jns	 SHORT $LN2@check

; 90   :       Print("Bounds error in List(%08x) T=%s index=%d min=0\n", (int)this, T::TYPENAME(), index);

  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_07PEMABHH@Graphic?$AA@
  00016	57		 push	 edi
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HIKLCBIP@Bounds?5error?5in?5List?$CI?$CF08x?$CJ?5T?$DN?$CFs?5@
  0001c	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 91   :       index = 0;

  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002a	eb 26		 jmp	 SHORT $LN12@check
$LN2@check:

; 92   :    }
; 93   : 
; 94   :    else if (index >= items) {

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]
  0002e	3b c8		 cmp	 ecx, eax
  00030	7c 1b		 jl	 SHORT $LN4@check

; 95   :       Print("Bounds error in List(%08x) T=%s index=%d max=%d\n", (int)this, T::TYPENAME(), index, items-1);

  00032	48		 dec	 eax
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_07PEMABHH@Graphic?$AA@
  0003a	57		 push	 edi
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@EEHODDHM@Bounds?5error?5in?5List?$CI?$CF08x?$CJ?5T?$DN?$CFs?5@
  00040	e8 00 00 00 00	 call	 ?Print@@YAXPBDZZ	; Print

; 96   :       index = items-1;

  00045	8b 07		 mov	 eax, DWORD PTR [edi]
  00047	83 c4 14	 add	 esp, 20			; 00000014H
  0004a	48		 dec	 eax
  0004b	89 06		 mov	 DWORD PTR [esi], eax
$LN4@check:

; 97   :    }
; 98   : 
; 99   :    return (index >= 0 && index < items);

  0004d	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00050	7c 0e		 jl	 SHORT $LN6@check
$LN12@check:
  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	3b 07		 cmp	 eax, DWORD PTR [edi]
  00056	7d 08		 jge	 SHORT $LN6@check
  00058	5f		 pop	 edi
  00059	b0 01		 mov	 al, 1
  0005b	5e		 pop	 esi

; 100  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN6@check:
  00060	5f		 pop	 edi

; 97   :    }
; 98   : 
; 99   :    return (index >= 0 && index < items);

  00061	32 c0		 xor	 al, al
  00063	5e		 pop	 esi

; 100  : }

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?check@?$List@VGraphic@@@@ABE_NAAH@Z ENDP		; List<Graphic>::check
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\programming\starshatter\trunk\foundationex\list.inl
;	COMDAT ?swap@?$List@VGraphic@@@@AAEXPAPAVGraphic@@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_i$ = 12						; size = 4
_j$ = 16						; size = 4
?swap@?$List@VGraphic@@@@AAEXPAPAVGraphic@@HH@Z PROC	; List<Graphic>::swap, COMDAT
; _this$ = ecx

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 329  :    if (i >= 0 && i < items && j >= 0 && j < items && i != j) {

  00003	8b 55 0c	 mov	 edx, DWORD PTR _i$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 28		 js	 SHORT $LN2@swap
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	3b d0		 cmp	 edx, eax
  0000e	7d 22		 jge	 SHORT $LN2@swap
  00010	8b 4d 10	 mov	 ecx, DWORD PTR _j$[ebp]
  00013	85 c9		 test	 ecx, ecx
  00015	78 1b		 js	 SHORT $LN2@swap
  00017	3b c8		 cmp	 ecx, eax
  00019	7d 17		 jge	 SHORT $LN2@swap
  0001b	3b d1		 cmp	 edx, ecx
  0001d	74 13		 je	 SHORT $LN2@swap

; 330  :       T* t = a[i];

  0001f	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00022	8d 14 90	 lea	 edx, DWORD PTR [eax+edx*4]

; 331  :       a[i] = a[j];

  00025	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	56		 push	 esi
  0002b	8b 32		 mov	 esi, DWORD PTR [edx]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 332  :       a[j] = t;

  0002f	89 31		 mov	 DWORD PTR [ecx], esi
  00031	5e		 pop	 esi
$LN2@swap:

; 333  :    }
; 334  : }

  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
?swap@?$List@VGraphic@@@@AAEXPAPAVGraphic@@HH@Z ENDP	; List<Graphic>::swap
_TEXT	ENDS
END
